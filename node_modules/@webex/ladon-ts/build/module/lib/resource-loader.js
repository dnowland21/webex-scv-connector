import { isResolvedUri as l, toAbsoluteURI as s } from "./util.js";
class t {
  constructor() {
    this.resolvedUriCache = /* @__PURE__ */ new Map();
  }
  /**
   * Resolves the full URL for a given asset. Non-file URIs are treated as paths and resolved
   * using the `toAbsoluteURI` method. If the assetUri is already resolved, or if it's found in
   * cache, it will be returned directly. If an assetUrlResolver function is provided in the
   * configuration, it will be used to resolve the URL if the assetUri is not fully qualified,
   * a blob URL, or in the cache.
   *
   * @param config - The preload configuration.
   * @param assetUri - The asset URI from the config.
   * @returns The resolved full URL.
   */
  async resolveUri(o, e) {
    if (!e)
      throw new Error("Asset URI is undefined.");
    if (this.resolvedUriCache.has(e))
      return this.resolvedUriCache.get(e);
    let r;
    if (l(e) ? r = e : e.match(/\.[a-z0-9]+$/i) ? typeof o.assetUrlResolver == "function" && (r = await o.assetUrlResolver(e, o)) : r = s(e, o.baseUrl), !r)
      throw new Error(`Failed to resolve asset URI: ${e}`);
    return this.resolvedUriCache.set(e, r), r;
  }
}
const d = new t();
export {
  t as ResourceLoader,
  d as resourceLoader
};
//# sourceMappingURL=resource-loader.js.map
