import { PipelineConfig } from './config';
import { FacesAndLandmarks } from './generator';
export interface IFrameInferenceResult {
    facesAndLandmarks: FacesAndLandmarks;
    gesture: Float32Array;
    motion: number;
    skipped: boolean;
    timestamp: number;
}
export interface IPipeline {
    onFrame(timestamp: number, maskNeeded?: boolean, videoElement?: HTMLVideoElement): Promise<IFrameInferenceResult>;
    isLoaded(): boolean;
    load(): Promise<void>;
    destroy(): void;
}
export declare class Pipeline implements IPipeline {
    private inputCanvas;
    private outputCanvas;
    readonly config: PipelineConfig;
    private readonly videoElement?;
    private generator?;
    private renderer?;
    private loaded;
    private inputCanvasCtx;
    private lastMaskResult?;
    private frameQueue;
    private maskQueue;
    constructor(inputCanvas: HTMLCanvasElement, outputCanvas: HTMLCanvasElement, config: PipelineConfig, videoElement?: HTMLVideoElement | undefined);
    /**
     * Processes a single frame and returns the inference result.
     *
     * @param timestamp - The timestamp of the frame.
     * @param [performInference=true] - Flag to perform mask inference.
     * @returns The result of the frame processing.
     * @throws If the pipeline (generator or renderer) is not loaded.
     */
    onFrame(timestamp: number, performInference?: boolean): Promise<IFrameInferenceResult>;
    /**
     * Synchronizes frames and masks to ensure they are rendered together.
     */
    private renderSyncedFrameAndMask;
    /**
     * Gets the raw image data from the input canvas context.
     *
     * @param needFreshImageData - Flag to indicate if fresh image data is needed.
     *
     * @returns The raw image data.
     */
    private getInputFrameData;
    /**
     * Resizes the image data if the model expects a fixed size input.
     *
     * @param {Uint8ClampedArray} rawImageData - The raw image data.
     * @returns {Uint8ClampedArray} - The processed mask image data.
     */
    private getMaskImageData;
    /**
     * Creates the inference result object.
     *
     * @param {number} timestamp - The timestamp of the frame.
     * @param {boolean} performedInference - Indicates if the inference was performed.
     * @returns {IFrameInferenceResult} - The result object containing inference details.
     */
    private createInferenceResult;
    /**
     * Checks if the pipeline is loaded.
     *
     * @returns True if the pipeline is loaded, false otherwise.
     */
    isLoaded(): boolean;
    /**
     * Loads the pipeline components such as the generator and renderer.
     */
    load(): Promise<void>;
    /**
     * Resets the frame and mask queues.
     */
    private resetQueues;
    reset(): void;
    /**
     * Destroys the pipeline and cleans up resources.
     */
    destroy(): void;
}
