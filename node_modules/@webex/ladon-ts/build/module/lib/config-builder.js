import s from "../config.json.js";
import { LIB_VERSION as m } from "./version.js";
class a {
  constructor(e = "prod") {
    this.env = e, this.config = {};
  }
  /**
   * Sets the base URL for the configuration.
   * @param baseUrl The base URL to use.
   */
  setBaseUrl(e) {
    return this.config.baseUrl = e.replace(/\/+$/, ""), this;
  }
  /**
   * Sets the WASM URI for the configuration.
   * @param wasmUri The WASM URI to use.
   */
  setWasmUri(e) {
    return this.config.wasmUri = e, this;
  }
  /**
   * Sets the asset URL resolver.
   * @param assetUrlResolver The asset URL resolver to use
   * @returns The current ConfigurationBuilder instance.
   */
  setAssetUrlResolver(e) {
    return this.config.assetUrlResolver = e, this;
  }
  /**
   * Sets the execution providers for the ONNX runtime.
   *
   * @param executionProviders The execution providers to use.
   */
  setExecutionProviders(e) {
    return typeof e == "string" && (e = [e]), this.config.executionProviders = e, this;
  }
  /**
   * Sets the input size for the configuration.
   * @param height The height of the input.
   * @param width The width of the input.
   */
  setInputSize(e, r) {
    return this.config.input = { height: e, width: r }, this;
  }
  /**
   * Sets the input configuration.
   * @param inputConfig The input configuration to use.
   */
  setInputConfig(e) {
    return this.config.input = { ...e }, this;
  }
  /**
   * Sets the render configuration.
   * @param renderConfig The render configuration to use.
   */
  setRenderConfig(e) {
    return this.config.render = { ...e }, this;
  }
  /**
   * Sets the render type.
   * @param type The render type ('blur', 'passthrough', 'replacement').
   */
  setRenderType(e) {
    return this.config.render ? this.config.render.type = e : this.config.render = { type: e }, this;
  }
  /**
   * Sets the horizontal mirror property for the render configuration.
   * @param horizontalMirror Boolean indicating if horizontal mirror should be applied.
   */
  setRenderHorizontalMirror(e) {
    if (!this.config.render)
      throw new Error("Render config must be set before setting horizontal mirror.");
    return this.config.render.horizontalMirror = e, this;
  }
  /**
   * Sets the blur strength for the render configuration.
   * @param blurStrength The blur strength to use.
   */
  setBlurStrength(e) {
    var t;
    const r = a.getBlurConfig(
      e,
      (t = this.config.render) == null ? void 0 : t.horizontalMirror
    );
    return this.config.render = { ...this.config.render, ...r }, this;
  }
  /**
   * Sets the blur kernel size.
   * @param kernelSize The kernel size for the blur effect.
   */
  setBlurKernelSize(e) {
    if (!this.config.render || this.config.render.type !== "blur")
      throw new Error("Render config must be of type blur to set blur properties.");
    return this.config.render.kernelSize = e, this;
  }
  /**
   * Sets the blur sigma value.
   * @param sigma The sigma value for the blur effect.
   */
  setBlurSigma(e) {
    if (!this.config.render || this.config.render.type !== "blur")
      throw new Error("Render config must be of type blur to set blur properties.");
    return this.config.render.sigma = e, this;
  }
  /**
   * Sets the replacement background.
   * @param background The background to use for replacement.
   */
  setReplacementBackground(e) {
    if (!this.config.render || this.config.render.type !== "replacement")
      throw new Error(
        "Render config must be of type replacement to set replacement properties."
      );
    return this.config.render.background = e, this;
  }
  /**
   * Sets the replacement static property.
   * @param isStatic Boolean indicating if the replacement is static.
   */
  setReplacementStatic(e) {
    if (!this.config.render || this.config.render.type !== "replacement")
      throw new Error(
        "Render config must be of type replacement to set replacement properties."
      );
    return this.config.render.static = e, this;
  }
  /**
   * Sets the mask configuration.
   * @param maskConfig The mask configuration to use.
   */
  setMaskConfig(e) {
    return this.config.mask = { ...e }, this;
  }
  /**
   * Sets the mask generator.
   * @param generator The generator type (most be 'worker'; 'local' is deprecated).
   */
  setMaskGenerator(e) {
    e !== "worker" && console.warn('[ladon-ts] Mask generator must be "worker". "local" is deprecated.');
    const r = this.getMaskConfig();
    return r.generator = e, this;
  }
  /**
   * Sets the mask generation interval in milliseconds.
   * @param intervalMs The generation interval in milliseconds.
   */
  setMaskGenerationIntervalMs(e) {
    const r = this.getMaskConfig();
    return r.generationIntervalMs = e, this;
  }
  /**
   * Sets the mask model rank.
   * @param modelRank The model rank to use.
   */
  setMaskModelRank(e) {
    const r = this.getMaskConfig();
    return r.modelRank = e, this;
  }
  /**
   * Sets the mask model URI.
   * @param modelUri The model URI to use.
   */
  setMaskModelUri(e) {
    const r = this.getMaskConfig();
    return r.modelUri = e, this;
  }
  /**
   * Sets the mask worker URI.
   * @param workerUri The worker URI to use.
   */
  setMaskWorkerUri(e) {
    const r = this.getMaskConfig();
    return r.workerUri = e, this;
  }
  /**
   * Sets the mask input size.
   * @param height The height of the mask input.
   * @param width The width of the mask input.
   */
  setMaskInputSize(e, r) {
    const t = this.getMaskConfig();
    return t.inputSize = { height: e, width: r }, this;
  }
  /**
   * Sets the mask output size.
   * @param height The height of the mask output.
   * @param width The width of the mask output.
   */
  setMaskOutputSize(e, r) {
    const t = this.getMaskConfig();
    return t.outputSize = { height: e, width: r }, this;
  }
  /**
   * Sets the mask upscaled size.
   * @param height The height of the upscaled mask.
   * @param width The width of the upscaled mask.
   */
  setMaskUpscaleSize(e, r) {
    const t = this.getMaskConfig();
    return t.upscaleSize = { height: e, width: r }, this;
  }
  /**
   * Sets the quality level and updates mask configurations accordingly.
   * @param quality The desired quality level.
   */
  setMaskQuality(e) {
    const { modelQualities: r } = s, t = this.getMaskConfig(), i = e.toLowerCase(), o = r[i];
    if (!o)
      throw new Error(`[ladon-ts] unknown quality option: ${e}`);
    return t.qualityKey = i, Object.assign(t, o), this;
  }
  /**
   * Builds and returns the PreloadConfig or PipelineConfig object.
   *
   * @param requireInputConfig Whether to require the input configuration to be set before building.
   * Input size is not available at preload so this needs to be optional. The default value is true.
   *
   */
  build(e = !0) {
    const r = this.resolveBaseUrl(), t = this.resolveModelUri(), i = this.resolveWasmUri(), o = this.resolveWorkerUri(), l = this.config.input, g = this.config.render, n = this.config.mask, c = this.config.executionProviders, f = this.config.assetUrlResolver;
    if (!n)
      throw new Error("Mask configuration must be set before building the configuration.");
    const u = {
      generator: n.generator,
      generationIntervalMs: n.generationIntervalMs,
      modelRank: n.modelRank,
      inputSize: n.inputSize,
      outputSize: n.outputSize,
      upscaleSize: n.upscaleSize,
      modelUri: t,
      workerUri: o
    }, h = {
      assetUrlResolver: f,
      executionProviders: c,
      baseUrl: r,
      wasmUri: i,
      mask: u
    };
    if (e) {
      if (!l)
        throw new Error("Input must be set before building the configuration.");
      if (!g)
        throw new Error("Render must be set before building the configuration.");
      return {
        ...h,
        input: l,
        render: g
      };
    }
    return h;
  }
  /**
   * Returns the mask configuration, initializing it if necessary.
   */
  getMaskConfig() {
    return this.config.mask || (this.config.mask = {}), this.config.mask;
  }
  /**
   * Returns the base URL for the configuration.
   */
  resolveBaseUrl() {
    return this.config.baseUrl || s.baseUrls[this.env];
  }
  /**
   * Returns the base URL for the configuration.
   *
   * @returns The base URL for the configuration.
   */
  resolveModelUri() {
    var r;
    if ((r = this.config.mask) != null && r.modelUri)
      return this.config.mask.modelUri;
    const e = this.getMaskConfig();
    if (!e.qualityKey)
      throw new Error("[ladon-ts] No quality set, cannot infer modelFile.");
    return this.resolveTemplate(s.modelUrlTemplate, {
      BASE_PATH_MODELS: s.basePaths.models,
      MODEL_VERSION: s.modelVersion,
      MODEL_FILE: s.modelQualities[e.qualityKey].modelFile
    });
  }
  resolveWasmUri() {
    return this.config.wasmUri ? this.config.wasmUri : this.resolveTemplate(s.wasmPathTemplate, {
      BASE_PATH_WASM: s.basePaths.wasm,
      ONNX_VERSION: s.onnxVersion
    });
  }
  resolveWorkerUri() {
    var e;
    return (e = this.config.mask) != null && e.workerUri ? this.config.mask.workerUri : this.resolveTemplate(s.workerUrlTemplate, {
      BASE_PATH_WORKERS: s.basePaths.workers,
      LIB_VERSION: a.getLibVersion(),
      WORKER_FILE: s.workerFile
    });
  }
  /**
   * Resolves a template string with the specified values.
   *
   * @param template The template string to resolve.
   * @param values The values to use for resolution.
   * @returns The resolved template string.
   */
  resolveTemplate(e, r) {
    return e.replace(/\$\{([A-Z_]+)\}/g, (t, i) => {
      if (!r[i])
        throw new Error(`Missing value for template variable: ${i}`);
      return r[i];
    });
  }
  /**
   * Generates a blur configuration based on the specified blur strength.
   * @param blurStrength The desired blur strength.
   * @param horizontalMirror Whether to apply horizontal mirroring.
   */
  static getBlurConfig(e, r) {
    const t = e.toLowerCase(), i = s.blurStrengths[t];
    if (!i)
      throw new Error(`[ladon-ts] Unknown blur strength: ${e}`);
    return {
      type: "blur",
      horizontalMirror: r,
      ...i
    };
  }
  static getPassthroughConfig(e) {
    return {
      type: "passthrough",
      horizontalMirror: e
    };
  }
  /**
   * Returns the library version.
   *
   * @returns The library version.
   */
  static getLibVersion() {
    return m;
  }
}
export {
  a as ConfigurationBuilder
};
//# sourceMappingURL=config-builder.js.map
