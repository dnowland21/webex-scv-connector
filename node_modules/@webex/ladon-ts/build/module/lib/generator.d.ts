import { PipelineConfig } from './config';
declare global {
    interface ImportMeta {
        url: string;
    }
}
export declare type FrameData = Uint8ClampedArray | HTMLVideoElement;
export interface FacesAndLandmarks {
    data: Float32Array;
    dims: readonly number[];
}
export interface LadonOutput {
    data: Float32Array;
    facesAndLandmarks: FacesAndLandmarks;
    gesture: Float32Array;
    motion: number;
    timestamp: number;
    warm: boolean;
}
export interface MaskGenerator {
    getLadonOutput(input: Uint8ClampedArray, timestamp: number): Promise<LadonOutput>;
    load(): Promise<void>;
    isLoaded(): boolean;
    postRender(input: Uint8ClampedArray, timestamp: number): Promise<void>;
    destroy(): void;
}
export declare class LocalGenerator implements MaskGenerator {
    readonly config: PipelineConfig;
    private lastResult;
    private lastMask;
    private maskModel?;
    private lastMaskGenerationTime;
    private output?;
    constructor(config: PipelineConfig);
    /**
     * This method preprocesses an input Uint8ClampedArray to a Float32Array
     * while maintaining memory efficiency by reusing a class-scoped output buffer.
     * If the model rank is 4 (e.g., newer tiny model), it sets an alpha channel value.
     *
     * @param {Uint8ClampedArray} input - The input data to be preprocessed
     * @param {Float32Array} alpha - The alpha channel data
     * @returns {Float32Array} - The processed data
     */
    private preprocess;
    getTimeSinceLastGeneration(): number;
    getLadonOutput(input: Uint8ClampedArray, timestamp: number): Promise<LadonOutput>;
    load(): Promise<void>;
    isLoaded(): boolean;
    postRender(_: Uint8ClampedArray): Promise<void>;
    destroy(): void;
}
export declare class NullGenerator implements MaskGenerator {
    readonly config: PipelineConfig;
    private lastMask;
    constructor(config: PipelineConfig);
    getLadonOutput(_: Uint8ClampedArray): Promise<LadonOutput>;
    load(): Promise<void>;
    isLoaded(): boolean;
    postRender(_: Uint8ClampedArray): Promise<void>;
    destroy(): void;
}
export declare class WorkerGenerator implements MaskGenerator {
    readonly config: PipelineConfig;
    private lastMask;
    private newMask;
    private worker?;
    private lastResult;
    constructor(config: PipelineConfig);
    getLadonOutput(_: Uint8ClampedArray): Promise<LadonOutput>;
    load(): Promise<void>;
    isLoaded(): boolean;
    postRender(input: Uint8ClampedArray, timestamp: number): Promise<void>;
    destroy(): void;
}
