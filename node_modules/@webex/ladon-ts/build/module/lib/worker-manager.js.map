{"version":3,"file":"worker-manager.js","sources":["../../../src/lib/worker-manager.ts"],"sourcesContent":["import { PipelineConfig, PreloadConfig, WorkerConfig } from './config-types';\nimport { WorkerGeneratedResult } from './generator-types';\nimport { resourceLoader } from './resource-loader';\n\n/**\n * Worker manager class to handle the initialization and termination of the segmenation\n * web worker. This class is responsible for loading the worker script, resolving the\n * configuration, and managing the worker lifecycle. It also provides methods to\n * preload the worker and terminate it when no longer needed.\n */\nexport class WorkerManager {\n    private worker?: Worker;\n    private workerUrl?: string;\n    private destroyPromise: Promise<void> | null = null;\n\n    // Event callback registries\n    private onInitializedCallbacks: Array<() => void> = [];\n    private onGeneratedCallbacks: Array<(data: WorkerGeneratedResult) => void> = [];\n    private onDroppedCallbacks: Array<(timestamp: number) => void> = [];\n    private onLogCallbacks: Array<(message: string, severity: string) => void> = [];\n\n    /**\n     * Get the current worker instance.\n     *\n     * @returns The current worker instance or undefined if not initialized.\n     */\n    public getWorker() {\n        return this.worker;\n    }\n\n    /**\n     * Initialize the worker using the provided configuration.\n     *\n     * @param config - The configuration object.\n     * @returns A promise that resolves when the worker is initialized.\n     */\n    public async initializeWorker(config: WorkerConfig): Promise<Worker> {\n        if (typeof Worker === 'undefined') {\n            throw new Error('[ladon-ts] web workers are not supported in this environment');\n        }\n\n        // Wait for any ongoing destroy operation to finish\n        if (this.destroyPromise) {\n            await this.destroyPromise;\n            this.destroyPromise = null;\n        }\n\n        if (this.worker) {\n            this.destroyPromise = this.destroyWorker();\n            await this.destroyPromise;\n            this.destroyPromise = null;\n        }\n\n        const scriptUri = await resourceLoader.resolveUri(config, config.mask.workerUri);\n        const response = await fetch(scriptUri, { cache: 'force-cache' });\n        const workerSource = await response.text();\n\n        this.workerUrl = URL.createObjectURL(new Blob([workerSource], { type: 'text/javascript' }));\n        this.worker = new Worker(this.workerUrl, { type: 'module' });\n\n        // Attach a single message handler for all events\n        this.worker.addEventListener('message', (event: MessageEvent) => {\n            if (event.data.type === 'log') {\n                const { message, severity } = event.data;\n                this.onLogCallbacks.forEach((cb) => cb(message, severity));\n            } else if (event.data.status === 'generated') {\n                this.onGeneratedCallbacks.forEach((cb) => cb(event.data));\n            } else if (event.data.status === 'dropped') {\n                this.onDroppedCallbacks.forEach((cb) => cb(event.data.timestamp));\n            } else if (event.data.status === 'initialized') {\n                this.onInitializedCallbacks.forEach((cb) => cb());\n            }\n            // 'destroyed' is handled in destroyWorker\n        });\n\n        return this.worker;\n    }\n\n    /**\n     * Destroys the worker gracefully by sending a destroy message and waiting for confirmation.\n     *\n     * @returns A promise that resolves when the worker is destroyed.\n     *          If no worker is available, it resolves immediately.\n     */\n    public destroyWorker(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            const handleMessage = (event: MessageEvent) => {\n                if (event.data.status === 'destroyed') {\n                    this.worker?.removeEventListener('message', handleMessage);\n                    this.terminateWorker();\n                    resolve();\n                }\n            };\n\n            if (!this.worker) {\n                console.warn('[ladon-ts] No worker to destroy');\n                resolve();\n                return;\n            }\n\n            this.worker.addEventListener('message', handleMessage);\n            this.worker.postMessage({ type: 'destroy' });\n        });\n    }\n\n    /**\n     * Terminate the worker.\n     */\n    public terminateWorker() {\n        if (this.worker) {\n            this.worker.terminate();\n            this.worker = undefined;\n        }\n        if (this.workerUrl) {\n            URL.revokeObjectURL(this.workerUrl);\n            this.workerUrl = undefined;\n        }\n    }\n\n    /**\n     * Preload the worker using the provided configuration.\n     *\n     * @param config - The configuration object.\n     * @returns A promise that resolves when the worker is preloaded.\n     */\n    public async preloadWorker(config: PreloadConfig) {\n        const workerConfig = await this.prepareWorkerConfig(config);\n        this.worker = await this.initializeWorker(workerConfig);\n        this.worker.postMessage({ type: 'preload', config: workerConfig });\n    }\n\n    /**\n     * Prepare the worker configuration by resolving the final URLs and paths to send to the\n     * worker. This is necessary because we can't send functions to the worker. We also need to\n     * remove the assetUrlResolver function from the configuration.\n     *\n     * @param config - The preload configuration.\n     * @returns The worker configuration.\n     */\n    public async prepareWorkerConfig(config: PreloadConfig) {\n        // Resolve and cache the URIs before sending the config to the worker.\n        // Future calls to the resolveUri method will use the cache.\n        const modelUri = await resourceLoader.resolveUri(config, config.mask.modelUri);\n        const workerUri = await resourceLoader.resolveUri(config, config.mask.workerUri);\n        const wasmUri = await resourceLoader.resolveUri(config, config.wasmUri);\n        const resolvedConfig: PreloadConfig = {\n            ...config,\n            mask: { ...config.mask, modelUri, workerUri },\n            wasmUri,\n        };\n\n        // We can't send the assetUrlResolver function to the worker so we remove it from the config.\n        const workerConfig = { ...resolvedConfig, assetUrlResolver: undefined };\n\n        // This is a workaround to ensure the worker configuration can be sent to the worker.\n        return JSON.parse(JSON.stringify(workerConfig));\n    }\n\n    /**\n     * Register a callback for when the worker is initialized.\n     */\n    public onInitialized(callback: () => void) {\n        this.onInitializedCallbacks.push(callback);\n    }\n\n    /**\n     * Register a callback for when the worker generates output.\n     *\n     * @param callback - The callback function to be called with the generated data.\n     * @param data - The generated data from the worker.\n     * @param data.mask - The generated mask.\n     * @param data.facesAndLandmarks - The detected faces and landmarks.\n     * @param data.gesture - The detected gesture.\n     * @param data.motion - The detected motion.\n     */\n    public onGenerated(callback: (data: WorkerGeneratedResult) => void) {\n        this.onGeneratedCallbacks.push(callback);\n    }\n\n    /**\n     * Register a callback for when the worker drops a frame.\n     * This is useful for handling cases where the worker cannot keep up with the input frame rate.\n     * The callback will be called with the timestamp of the dropped frame.\n     *\n     * @param callback - The callback function to be called with the timestamp of the dropped frame.\n     */\n    public onDropped(callback: (timestamp: number) => void) {\n        this.onDroppedCallbacks.push(callback);\n    }\n\n    /**\n     * Register a callback for log messages from the worker.\n     *\n     * @param callback - The callback function to be called with the log message and severity.\n     * @param severity - The severity of the log message (e.g., 'info', 'warn', 'error').\n     */\n    public onLog(callback: (message: string, severity: string) => void) {\n        this.onLogCallbacks.push(callback);\n    }\n\n    /**\n     * Send an init message to the worker.\n     *\n     * @param config - The configuration object to initialize the worker.\n     * @param config.baseUrl - The base URL for loading assets.\n     * @param config.input - The input configuration for the worker.\n     * @param config.mask - The mask configuration for the worker.\n     * @param config.wasmUri - The URI for the WebAssembly module.\n     * @param config.workerUri - The URI for the worker script.\n     * @param config.assetUrlResolver - The function to resolve asset URLs.\n     */\n    public sendInit(config: PipelineConfig) {\n        if (!this.worker) {\n            throw new Error('[ladon-ts] Worker is not initialized, cannot send init');\n        }\n        this.worker.postMessage({ type: 'init', config });\n    }\n\n    /**\n     * Send a generate message to the worker.\n     *\n     * @param input - The input image data as a Uint8ClampedArray.\n     * @param timestamp - The timestamp of the input image.\n     */\n    public sendGenerate(input: Uint8ClampedArray, timestamp: number) {\n        if (!this.worker) {\n            throw new Error('[ladon-ts] Worker is not initialized, cannot send generate');\n        }\n        this.worker.postMessage(\n            {\n                type: 'generate',\n                image: input,\n                timestamp,\n            },\n            [input.buffer]\n        );\n    }\n}\n\n// Global instance of the shared resource manager.\nexport const workerManager = new WorkerManager();\n"],"names":["WorkerManager","config","scriptUri","resourceLoader","workerSource","event","message","severity","cb","resolve","handleMessage","_a","workerConfig","modelUri","workerUri","wasmUri","callback","input","timestamp","workerManager"],"mappings":"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"}