{"version":3,"file":"config.js","sources":["../../../src/lib/config.ts"],"sourcesContent":["/************************************************************************************\n * DEPRECATION NOTICE: This file contains deprecated methods for generating config\n * objects. These methods are retained for backwards compatibility and will be removed\n * in a future release. These methods are retained solely for backwards compatibility.\n *\n * Current release: v4.5.1\n * Deprecation target: v5.0.0\n ************************************************************************************/\n\nimport { ConfigurationBuilder } from './config-builder';\nimport {\n    AssetUrlResolver,\n    BlurConfig,\n    BlurStrength,\n    Generator,\n    PipelineConfig,\n    PreloadConfig,\n    Quality,\n    RenderConfig,\n    ReplacementConfig,\n} from './config-types';\n\nfunction logDeprecationWarning(functionName: string): void {\n    console.warn(\n        `[ladon-ts] Deprecation Warning: ${functionName} is deprecated and will be removed in a future release. Please migrate to ConfigurationBuilder for future use.`\n    );\n}\n\n/**\n * Generates a blur configuration based on the specified blur strength.\n * This function uses the static method from ConfigurationBuilder.\n * @param blurStrength The desired blur strength.\n * @param horizontalMirror Whether to apply horizontal mirroring.\n */\nexport const getBlurConfig = (\n    blurStrength: BlurStrength,\n    horizontalMirror?: boolean\n): BlurConfig => {\n    logDeprecationWarning('getBlurConfig');\n    return ConfigurationBuilder.getBlurConfig(blurStrength, horizontalMirror);\n};\n\n/**\n * Retrieves a PreloadConfig using the ConfigurationBuilder.\n * The function preserves the old signature for compatibility.\n * @param quality The desired model quality.\n * @param generator The mask generator ('local' or 'worker').\n * @param modelUrlResolver A function to resolve model URLs.\n * @param baseUrl The base URL to use.\n */\nexport const getPreloadConfig = (\n    quality: Quality,\n    generator: Generator,\n    modelUrlResolver: AssetUrlResolver,\n    baseUrl: string\n): PreloadConfig => {\n    logDeprecationWarning('getPreloadConfig');\n    const builder = new ConfigurationBuilder()\n        .setBaseUrl(baseUrl)\n        .setMaskQuality(quality)\n        .setMaskGenerator(generator)\n        .setAssetUrlResolver(modelUrlResolver);\n\n    // Build the preload configuration\n    const config = builder.build(false);\n\n    return {\n        assetUrlResolver: config.assetUrlResolver,\n        baseUrl: config.baseUrl,\n        wasmUri: config.wasmUri,\n        mask: config.mask,\n    };\n};\n\n/**\n * Retrieves a PipelineConfig using the ConfigurationBuilder.\n * The function preserves the old signature for compatibility.\n * @param height The height of the input size.\n * @param width The width of the input size.\n * @param quality The desired model quality.\n * @param generator The mask generator ('local' or 'worker').\n * @param renderConfig The render configuration (blur, replacement, etc.).\n * @param modelUrlResolver A function to resolve model URLs.\n * @param baseUrl The base URL to use.\n */\nexport const getConfig = (\n    height: number,\n    width: number,\n    quality: Quality,\n    generator: Generator,\n    renderConfig: BlurConfig | RenderConfig | ReplacementConfig,\n    modelUrlResolver: AssetUrlResolver,\n    baseUrl: string\n): PipelineConfig => {\n    logDeprecationWarning('getConfig');\n    const builder = new ConfigurationBuilder()\n        .setBaseUrl(baseUrl)\n        .setMaskQuality(quality)\n        .setInputSize(height, width)\n        .setRenderConfig(renderConfig)\n        .setMaskGenerator(generator)\n        .setAssetUrlResolver(modelUrlResolver);\n\n    // Build the full configuration\n    return builder.build() as PipelineConfig;\n};\n"],"names":["logDeprecationWarning","functionName","getBlurConfig","blurStrength","horizontalMirror","ConfigurationBuilder","getPreloadConfig","quality","generator","modelUrlResolver","baseUrl","config","getConfig","height","width","renderConfig"],"mappings":";AAsBA,SAASA,EAAsBC,GAA4B;AAC/C,UAAA;AAAA,IACJ,mCAAmCA,CAAY;AAAA,EACnD;AACJ;AAQa,MAAAC,IAAgB,CACzBC,GACAC,OAEAJ,EAAsB,eAAe,GAC9BK,EAAqB,cAAcF,GAAcC,CAAgB,IAW/DE,IAAmB,CAC5BC,GACAC,GACAC,GACAC,MACgB;AAChB,EAAAV,EAAsB,kBAAkB;AAQlC,QAAAW,IAPU,IAAIN,IACf,WAAWK,CAAO,EAClB,eAAeH,CAAO,EACtB,iBAAiBC,CAAS,EAC1B,oBAAoBC,CAAgB,EAGlB,MAAM,EAAK;AAE3B,SAAA;AAAA,IACH,kBAAkBE,EAAO;AAAA,IACzB,SAASA,EAAO;AAAA,IAChB,SAASA,EAAO;AAAA,IAChB,MAAMA,EAAO;AAAA,EACjB;AACJ,GAaaC,IAAY,CACrBC,GACAC,GACAP,GACAC,GACAO,GACAN,GACAC,OAEAV,EAAsB,WAAW,GACjB,IAAIK,IACf,WAAWK,CAAO,EAClB,eAAeH,CAAO,EACtB,aAAaM,GAAQC,CAAK,EAC1B,gBAAgBC,CAAY,EAC5B,iBAAiBP,CAAS,EAC1B,oBAAoBC,CAAgB,EAG1B,MAAM;"}