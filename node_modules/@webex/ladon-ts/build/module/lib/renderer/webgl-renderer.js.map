{"version":3,"file":"webgl-renderer.js","sources":["../../../../src/lib/renderer/webgl-renderer.ts"],"sourcesContent":["// webgl-renderer.ts\n\nimport { PipelineConfig } from '../config-types';\nimport { FrameData, LadonOutput } from '../generator';\nimport { bilinearUpsample } from '../util';\n\ntype TextureInitializer = () => void;\nexport abstract class WebGLRenderer {\n    protected intermediate_canvas?: HTMLCanvasElement;\n    protected output_canvas_2d?: CanvasRenderingContext2D;\n\n    protected gl: WebGL2RenderingContext;\n\n    protected image_texture!: WebGLTexture;\n    protected mask_texture!: WebGLTexture;\n\n    protected verts = new Float32Array([\n        -1.0,\n        -1.0,\n        0.0, // Vertex 1\n        -1.0,\n        1.0,\n        0.0, // Vertex 2\n        1.0,\n        1.0,\n        0.0, // Vertex 3\n        1.0,\n        1.0,\n        0.0, // Vertex 4\n        1.0,\n        -1.0,\n        0.0, // Vertex 5\n        -1.0,\n        -1.0,\n        0.0, // Vertex 6\n    ]);\n\n    protected vertex_shader_src = `#version 300 es\n\nin vec4 position;\n\nvoid main() {\n    gl_Position = position;\n}\n`;\n\n    // Shared fragment shader code\n    protected fragment_shader_header = `#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nuniform sampler2D u_image;\nuniform sampler2D u_mask;\nuniform vec2 u_resolution;\n`;\n\n    // Shared shader functions for enhanced edge blending\n    protected shared_shader_functions = `\nfloat get_mask(vec2 uv) {\n    float maskValue = texture(u_mask, uv).r;\n    return smoothstep(0.0, 1.0, maskValue);\n}\n`;\n\n    constructor(public output_canvas: HTMLCanvasElement, public readonly config: PipelineConfig) {\n        const gl = this.output_canvas.getContext('webgl2', { antialias: true });\n\n        if (!gl) {\n            const output_2d = this.output_canvas.getContext('2d');\n\n            if (!output_2d) {\n                throw new Error('[ladon-ts] Output canvas context must be webgl2 or 2d');\n            }\n\n            this.output_canvas_2d = output_2d;\n            this.intermediate_canvas = document.createElement('canvas');\n            this.intermediate_canvas.height = this.config.input.height;\n            this.intermediate_canvas.width = this.config.input.width;\n\n            const gl_intermediate = this.intermediate_canvas.getContext('webgl2', {\n                antialias: true,\n            });\n\n            if (!gl_intermediate) {\n                throw new Error('[ladon-ts] Error getting output context webgl');\n            }\n\n            this.gl = gl_intermediate;\n        } else {\n            this.gl = gl;\n        }\n\n        // Initialize textures and buffers\n        this.initTexturesAndBuffers();\n    }\n\n    protected initTexturesAndBuffers() {\n        // Initialize image texture\n        this.image_texture = this.createTexture(\n            this.gl.RGBA,\n            this.config.input.width,\n            this.config.input.height\n        );\n\n        // Initialize mask texture\n        this.mask_texture = this.createTexture(\n            this.gl.R8,\n            this.config.mask.upscaleSize.width,\n            this.config.mask.upscaleSize.height\n        );\n\n        // Create and bind vertex array\n        const vertex_array = this.gl.createVertexArray();\n        if (!vertex_array) {\n            throw new Error('[ladon-ts] Error creating vertex array');\n        }\n        this.gl.bindVertexArray(vertex_array);\n\n        // Create and bind buffer\n        const buffer = this.gl.createBuffer();\n        if (!buffer) {\n            throw new Error('[ladon-ts] Error creating buffer');\n        }\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.verts, this.gl.STATIC_DRAW);\n        this.gl.vertexAttribPointer(0, 3, this.gl.FLOAT, false, 0, 0);\n        this.gl.enableVertexAttribArray(0);\n\n        this.gl.viewport(0, 0, this.config.input.width, this.config.input.height);\n    }\n\n    protected createTexture(\n        internalFormat: number,\n        width: number,\n        height: number,\n        initializeTexture: TextureInitializer = () => {\n            // Default initializer creates an empty texture\n            this.gl.texImage2D(\n                this.gl.TEXTURE_2D,\n                0,\n                internalFormat,\n                width,\n                height,\n                0,\n                internalFormat === this.gl.RGBA ? this.gl.RGBA : this.gl.RED,\n                this.gl.UNSIGNED_BYTE,\n                null\n            );\n        }\n    ): WebGLTexture {\n        const texture = this.gl.createTexture();\n        if (!texture) {\n            throw new Error('[ladon-ts] Error creating texture');\n        }\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n\n        // Set texture parameters\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n\n        // Initialize the texture using the provided function\n        initializeTexture();\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        return texture;\n    }\n\n    protected getUVCalculation() {\n        if (this.config.render.horizontalMirror) {\n            // Flip both x and y coordinates when horizontal mirroring\n            return `vec2 st = vec2(1.0 - gl_FragCoord.x / u_resolution.x, 1.0 - gl_FragCoord.y / u_resolution.y);`;\n        }\n\n        // Default behavior (no mirroring)\n        return `vec2 st = vec2(gl_FragCoord.x / u_resolution.x, 1.0 - gl_FragCoord.y / u_resolution.y);`;\n    }\n\n    protected setSharedUniforms(program: WebGLProgram) {\n        const u_resolution = this.gl.getUniformLocation(program, 'u_resolution');\n        if (!u_resolution) {\n            throw new Error('[ladon-ts] Error finding \"u_resolution\" uniform');\n        }\n        this.gl.uniform2f(u_resolution, this.config.input.width, this.config.input.height);\n\n        const u_image = this.gl.getUniformLocation(program, 'u_image');\n        if (!u_image) {\n            throw new Error('[ladon-ts] Error finding \"u_image\" uniform');\n        }\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.image_texture);\n        this.gl.uniform1i(u_image, 0);\n\n        const u_mask = this.gl.getUniformLocation(program, 'u_mask');\n        if (u_mask) {\n            this.gl.activeTexture(this.gl.TEXTURE1);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.mask_texture);\n            this.gl.uniform1i(u_mask, 1);\n        }\n    }\n\n    protected uploadVideoStream(input: FrameData) {\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.image_texture);\n\n        // Upload video frame or image data to the texture\n        if (input instanceof HTMLVideoElement) {\n            this.gl.texImage2D(\n                this.gl.TEXTURE_2D,\n                0,\n                this.gl.RGBA,\n                this.gl.RGBA,\n                this.gl.UNSIGNED_BYTE,\n                input\n            );\n        } else {\n            this.gl.texImage2D(\n                this.gl.TEXTURE_2D,\n                0,\n                this.gl.RGBA,\n                this.config.input.width,\n                this.config.input.height,\n                0,\n                this.gl.RGBA,\n                this.gl.UNSIGNED_BYTE,\n                input\n            );\n        }\n    }\n\n    protected uploadMask(mask?: LadonOutput) {\n        // The mask may not be included if it has not been generated (e.g., frame skipped).\n        if (mask?.warm) {\n            const maskData = bilinearUpsample(\n                mask.data,\n                this.config.mask.outputSize.width,\n                this.config.mask.outputSize.height,\n                this.config.mask.upscaleSize.width,\n                this.config.mask.upscaleSize.height\n            );\n\n            this.gl.activeTexture(this.gl.TEXTURE1);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.mask_texture);\n            this.gl.texImage2D(\n                this.gl.TEXTURE_2D,\n                0,\n                this.gl.R8,\n                this.config.mask.upscaleSize.width,\n                this.config.mask.upscaleSize.height,\n                0,\n                this.gl.RED,\n                this.gl.UNSIGNED_BYTE,\n                maskData\n            );\n        }\n    }\n\n    protected postDraw() {\n        if (this.output_canvas_2d && this.intermediate_canvas) {\n            this.output_canvas_2d.drawImage(\n                this.intermediate_canvas,\n                0,\n                0,\n                this.config.input.width,\n                this.config.input.height\n            );\n        }\n    }\n}\n"],"names":["WebGLRenderer","output_canvas","config","gl","output_2d","gl_intermediate","vertex_array","buffer","internalFormat","width","height","initializeTexture","texture","program","u_resolution","u_image","u_mask","input","mask","maskData","bilinearUpsample"],"mappings":"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"}