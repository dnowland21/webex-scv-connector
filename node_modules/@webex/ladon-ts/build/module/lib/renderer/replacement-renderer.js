import { compileShader as i, linkProgram as g } from "../util.js";
import { WebGLRenderer as h } from "./webgl-renderer.js";
class c extends h {
  constructor(t, r) {
    super(t, r), this.output_canvas = t, this.config = r;
    const e = this.config.render.background.getContext("2d", { willReadFrequently: !0 });
    if (!e)
      throw new Error("[ladon-ts] Could not get background canvas context 2d");
    this.background_canvas_ctx = e, this.fragment_shader = this.buildFragmentShader();
    const s = i(this.gl, this.gl.VERTEX_SHADER, this.vertex_shader_src), a = i(
      this.gl,
      this.gl.FRAGMENT_SHADER,
      this.fragment_shader
    );
    this.program = g(this.gl, s, a), this.gl.useProgram(this.program), this.setSharedUniforms(this.program), this.setupBackgroundTexture();
  }
  buildFragmentShader() {
    return `${this.fragment_shader_header}
    
uniform sampler2D u_background;

${this.shared_shader_functions}

void main() {
    ${this.getUVCalculation()}

    vec3 background = texture(u_background, st).rgb;
    vec3 image = texture(u_image, st).rgb;
    float mask = get_mask(st);

    vec3 color = mix(background, image, mask);
    outColor = vec4(color, 1.0);
}`;
  }
  setupBackgroundTexture() {
    const t = this.background_canvas_ctx.getImageData(
      0,
      0,
      this.config.render.background.width,
      this.config.render.background.height
    );
    this.background_texture = this.createTexture(
      this.gl.RGBA,
      this.config.render.background.width,
      this.config.render.background.height,
      () => {
        this.gl.texImage2D(
          this.gl.TEXTURE_2D,
          0,
          this.gl.RGBA,
          t.width,
          t.height,
          0,
          this.gl.RGBA,
          this.gl.UNSIGNED_BYTE,
          t.data
        );
      }
    );
    const r = this.gl.getUniformLocation(this.program, "u_background");
    if (!r)
      throw new Error('[ladon-ts] Error finding "u_background" uniform');
    this.gl.activeTexture(this.gl.TEXTURE2), this.gl.bindTexture(this.gl.TEXTURE_2D, this.background_texture), this.gl.uniform1i(r, 2);
  }
  async render(t, r) {
    if (this.uploadVideoStream(t), this.uploadMask(r), !this.config.render.static) {
      const e = this.background_canvas_ctx.getImageData(
        0,
        0,
        this.config.render.background.width,
        this.config.render.background.height
      ).data;
      this.gl.activeTexture(this.gl.TEXTURE2), this.gl.bindTexture(this.gl.TEXTURE_2D, this.background_texture), this.gl.texImage2D(
        this.gl.TEXTURE_2D,
        0,
        this.gl.RGBA,
        this.config.render.background.width,
        this.config.render.background.height,
        0,
        this.gl.RGBA,
        this.gl.UNSIGNED_BYTE,
        e
      );
    }
    this.gl.useProgram(this.program), this.gl.drawArrays(this.gl.TRIANGLES, 0, this.verts.length / 3), this.postDraw();
  }
  async load() {
  }
  destroy() {
  }
}
export {
  c as ReplacementRenderer
};
//# sourceMappingURL=replacement-renderer.js.map
