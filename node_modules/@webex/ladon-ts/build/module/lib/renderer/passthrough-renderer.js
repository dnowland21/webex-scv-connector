import { compileShader as t, linkProgram as o } from "../util.js";
import { WebGLRenderer as h } from "./webgl-renderer.js";
class l extends h {
  constructor(r, s) {
    super(r, s), this.output_canvas = r, this.config = s, this.fragment_shader = `#version 300 es
precision highp float;

out vec4 outColor;

uniform sampler2D       u_image;
uniform vec2            u_resolution;


void main() {
    ${this.getUVCalculation()}

    outColor = vec4(texture(u_image, st).rgb, 1.0);
}
`;
    const e = t(this.gl, this.gl.VERTEX_SHADER, this.vertex_shader_src), i = t(
      this.gl,
      this.gl.FRAGMENT_SHADER,
      this.fragment_shader
    );
    this.program = o(this.gl, e, i), this.gl.useProgram(this.program), this.setSharedUniforms(this.program);
  }
  async render(r) {
    this.uploadVideoStream(r), this.gl.useProgram(this.program), this.gl.drawArrays(this.gl.TRIANGLES, 0, this.verts.length / 3), this.postDraw();
  }
  async load() {
  }
  destroy() {
  }
}
export {
  l as PassthroughRenderer
};
//# sourceMappingURL=passthrough-renderer.js.map
