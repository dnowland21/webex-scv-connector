{"version":3,"file":"replacement-renderer.js","sources":["../../../../src/lib/renderer/replacement-renderer.ts"],"sourcesContent":["// replacement-renderer.ts\n\nimport { PipelineConfig, ReplacementConfig } from '../config-types';\nimport { FrameData, LadonOutput } from '../generator';\nimport { compileShader, linkProgram } from '../util';\n\nimport { LadonRenderer } from './ladon-renderer';\nimport { WebGLRenderer } from './webgl-renderer';\n\nexport class ReplacementRenderer extends WebGLRenderer implements LadonRenderer {\n    private program: WebGLProgram;\n    private background_canvas_ctx: CanvasRenderingContext2D;\n\n    protected background_texture!: WebGLTexture;\n    protected fragment_shader!: string;\n\n    constructor(public output_canvas: HTMLCanvasElement, public readonly config: PipelineConfig) {\n        super(output_canvas, config);\n\n        const background_canvas_ctx = (\n            this.config.render as ReplacementConfig\n        ).background.getContext('2d', { willReadFrequently: true });\n        if (!background_canvas_ctx) {\n            throw new Error('[ladon-ts] Could not get background canvas context 2d');\n        }\n        this.background_canvas_ctx = background_canvas_ctx;\n\n        // Build the fragment shader\n        this.fragment_shader = this.buildFragmentShader();\n\n        // Compile and link shaders\n        const vertex_shader = compileShader(this.gl, this.gl.VERTEX_SHADER, this.vertex_shader_src);\n        const fragment_shader = compileShader(\n            this.gl,\n            this.gl.FRAGMENT_SHADER,\n            this.fragment_shader\n        );\n\n        this.program = linkProgram(this.gl, vertex_shader, fragment_shader);\n        this.gl.useProgram(this.program);\n\n        this.setSharedUniforms(this.program);\n\n        // Set up background texture\n        this.setupBackgroundTexture();\n    }\n\n    protected buildFragmentShader(): string {\n        return `${this.fragment_shader_header}\n    \nuniform sampler2D u_background;\n\n${this.shared_shader_functions}\n\nvoid main() {\n    ${this.getUVCalculation()}\n\n    vec3 background = texture(u_background, st).rgb;\n    vec3 image = texture(u_image, st).rgb;\n    float mask = get_mask(st);\n\n    vec3 color = mix(background, image, mask);\n    outColor = vec4(color, 1.0);\n}`;\n    }\n\n    protected setupBackgroundTexture() {\n        const backgroundData = this.background_canvas_ctx.getImageData(\n            0,\n            0,\n            (this.config.render as ReplacementConfig).background.width,\n            (this.config.render as ReplacementConfig).background.height\n        );\n\n        this.background_texture = this.createTexture(\n            this.gl.RGBA,\n            (this.config.render as ReplacementConfig).background.width,\n            (this.config.render as ReplacementConfig).background.height,\n            () => {\n                this.gl.texImage2D(\n                    this.gl.TEXTURE_2D,\n                    0,\n                    this.gl.RGBA,\n                    backgroundData.width,\n                    backgroundData.height,\n                    0,\n                    this.gl.RGBA,\n                    this.gl.UNSIGNED_BYTE,\n                    backgroundData.data\n                );\n            }\n        );\n\n        const u_background = this.gl.getUniformLocation(this.program, 'u_background');\n        if (!u_background) {\n            throw new Error('[ladon-ts] Error finding \"u_background\" uniform');\n        }\n        this.gl.activeTexture(this.gl.TEXTURE2);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.background_texture);\n        this.gl.uniform1i(u_background, 2);\n    }\n\n    public async render(input: FrameData, mask?: LadonOutput): Promise<void> {\n        this.uploadVideoStream(input);\n        this.uploadMask(mask);\n\n        if (!(this.config.render as ReplacementConfig).static) {\n            const backgroundData = this.background_canvas_ctx.getImageData(\n                0,\n                0,\n                (this.config.render as ReplacementConfig).background.width,\n                (this.config.render as ReplacementConfig).background.height\n            ).data;\n\n            this.gl.activeTexture(this.gl.TEXTURE2);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.background_texture);\n            this.gl.texImage2D(\n                this.gl.TEXTURE_2D,\n                0,\n                this.gl.RGBA,\n                (this.config.render as ReplacementConfig).background.width,\n                (this.config.render as ReplacementConfig).background.height,\n                0,\n                this.gl.RGBA,\n                this.gl.UNSIGNED_BYTE,\n                backgroundData\n            );\n        }\n\n        this.gl.useProgram(this.program);\n\n        this.gl.drawArrays(this.gl.TRIANGLES, 0, this.verts.length / 3);\n\n        this.postDraw();\n    }\n\n    public async load(): Promise<void> {\n        // empty\n    }\n\n    public destroy(): void {\n        // empty\n    }\n}\n"],"names":["ReplacementRenderer","WebGLRenderer","output_canvas","config","background_canvas_ctx","vertex_shader","compileShader","fragment_shader","linkProgram","backgroundData","u_background","input","mask"],"mappings":"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"}