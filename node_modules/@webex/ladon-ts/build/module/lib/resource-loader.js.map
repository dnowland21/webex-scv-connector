{"version":3,"file":"resource-loader.js","sources":["../../../src/lib/resource-loader.ts"],"sourcesContent":["import { PreloadConfig } from './config-types';\nimport { isResolvedUri, toAbsoluteURI } from './util';\n\nexport class ResourceLoader {\n    /**\n     * In-memory cache for resolved URLs. This is used to avoid redundant network requests for\n     * the same asset URI. The cache is a Map where the key is the asset URI and the value is\n     * the resolved URL.\n     */\n    private resolvedUriCache: Map<string, string> = new Map();\n\n    /**\n     * Resolves the full URL for a given asset. Non-file URIs are treated as paths and resolved\n     * using the `toAbsoluteURI` method. If the assetUri is already resolved, or if it's found in\n     * cache, it will be returned directly. If an assetUrlResolver function is provided in the\n     * configuration, it will be used to resolve the URL if the assetUri is not fully qualified,\n     * a blob URL, or in the cache.\n     *\n     * @param config - The preload configuration.\n     * @param assetUri - The asset URI from the config.\n     * @returns The resolved full URL.\n     */\n    public async resolveUri(config: PreloadConfig, assetUri?: string): Promise<string> {\n        if (!assetUri) {\n            throw new Error('Asset URI is undefined.');\n        }\n\n        // Check if the URL is already cached\n        if (this.resolvedUriCache.has(assetUri)) {\n            return this.resolvedUriCache.get(assetUri) as string;\n        }\n\n        let resolvedUrl: string | undefined;\n\n        if (isResolvedUri(assetUri)) {\n            // If the assetUri is fully qualified or a blob URL, return it directly.\n            // (Assets uris are resolved before being sent to the worker.)\n            resolvedUrl = assetUri;\n        } else if (!assetUri.match(/\\.[a-z0-9]+$/i)) {\n            // Resolve as an absolute path to a non-file endpoint (e.g., wasmPaths).\n            resolvedUrl = toAbsoluteURI(assetUri, config.baseUrl);\n        } else if (typeof config.assetUrlResolver === 'function') {\n            // Resolve via assetUrlResolver. This delegates the resolution logic to the caller.\n            resolvedUrl = await config.assetUrlResolver(assetUri, config);\n        }\n\n        if (!resolvedUrl) {\n            throw new Error(`Failed to resolve asset URI: ${assetUri}`);\n        }\n\n        // Cache the resolved URL\n        this.resolvedUriCache.set(assetUri, resolvedUrl);\n\n        return resolvedUrl;\n    }\n}\n\n// The resource loader is a singleton that can be used to load resources\nexport const resourceLoader = new ResourceLoader();\n"],"names":["ResourceLoader","config","assetUri","resolvedUrl","isResolvedUri","toAbsoluteURI","resourceLoader"],"mappings":";AAGO,MAAMA,EAAe;AAAA,EAArB,cAAA;AAMK,SAAA,uCAA4C,IAAI;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaxD,MAAa,WAAWC,GAAuBC,GAAoC;AAC/E,QAAI,CAACA;AACK,YAAA,IAAI,MAAM,yBAAyB;AAI7C,QAAI,KAAK,iBAAiB,IAAIA,CAAQ;AAC3B,aAAA,KAAK,iBAAiB,IAAIA,CAAQ;AAGzC,QAAAC;AAcJ,QAZIC,EAAcF,CAAQ,IAGRC,IAAAD,IACNA,EAAS,MAAM,eAAe,IAG/B,OAAOD,EAAO,oBAAqB,eAE1CE,IAAc,MAAMF,EAAO,iBAAiBC,GAAUD,CAAM,KAH9CE,IAAAE,EAAcH,GAAUD,EAAO,OAAO,GAMpD,CAACE;AACD,YAAM,IAAI,MAAM,gCAAgCD,CAAQ,EAAE;AAIzD,gBAAA,iBAAiB,IAAIA,GAAUC,CAAW,GAExCA;AAAA,EAAA;AAEf;AAGa,MAAAG,IAAiB,IAAIN,EAAe;"}