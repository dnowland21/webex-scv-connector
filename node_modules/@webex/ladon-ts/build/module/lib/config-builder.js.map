{"version":3,"file":"config-builder.js","sources":["../../../src/lib/config-builder.ts"],"sourcesContent":["import rawConfig from '../config.json';\n\nimport {\n    AssetUrlResolver,\n    BlurConfig,\n    BlurStrength,\n    Generator,\n    InputConfig,\n    MaskConfig,\n    PassthroughConfig,\n    PipelineConfig,\n    PreloadConfig,\n    Quality,\n    RawConfig,\n    RenderConfig,\n} from './config-types';\nimport { LIB_VERSION } from './version';\n\n/**\n * Internal mutable versions of the configurations used within the builder.\n */\ninterface MutableSizeConfig {\n    height: number;\n    width: number;\n}\n\ninterface MutableRenderConfig {\n    type: 'blur' | 'passthrough' | 'replacement';\n    horizontalMirror?: boolean;\n}\n\ninterface MutableBlurConfig extends MutableRenderConfig {\n    type: 'blur';\n    kernelSize: number;\n    sigma: number;\n}\n\ninterface MutableReplacementConfig extends MutableRenderConfig {\n    type: 'replacement';\n    background: HTMLCanvasElement;\n    static: boolean;\n    // TODO: add reposition args for presentation mode\n}\n\ninterface MutableBaseMaskConfig {\n    generator: Generator;\n    generationIntervalMs: number;\n    modelRank: number;\n    modelUri: string;\n    workerUri: string;\n    inputSize?: MutableSizeConfig;\n    outputSize?: MutableSizeConfig;\n    upscaleSize?: MutableSizeConfig;\n}\n\ninterface MutableMaskConfig extends MutableBaseMaskConfig {\n    inputSize: MutableSizeConfig;\n    outputSize: MutableSizeConfig;\n    upscaleSize: MutableSizeConfig;\n    qualityKey?: keyof RawConfig['modelQualities'];\n}\n\ninterface MutablePipelineConfig {\n    baseUrl?: string;\n    wasmUri?: string;\n    executionProviders?: string[];\n    render?: MutableBlurConfig | MutableRenderConfig | MutableReplacementConfig;\n    input?: MutableSizeConfig;\n    mask?: MutableMaskConfig;\n    assetUrlResolver?: AssetUrlResolver;\n}\n\n/**\n * A builder class for creating PipelineConfig instances in a flexible and intuitive way.\n */\nexport class ConfigurationBuilder {\n    private config: MutablePipelineConfig = {};\n\n    constructor(private env: 'int' | 'prod' = 'prod') {}\n\n    /**\n     * Sets the base URL for the configuration.\n     * @param baseUrl The base URL to use.\n     */\n    public setBaseUrl(baseUrl: string): ConfigurationBuilder {\n        // Remove trailing slashes from the base URL\n        this.config.baseUrl = baseUrl.replace(/\\/+$/, '');\n        return this;\n    }\n\n    /**\n     * Sets the WASM URI for the configuration.\n     * @param wasmUri The WASM URI to use.\n     */\n    public setWasmUri(wasmUri: string): ConfigurationBuilder {\n        this.config.wasmUri = wasmUri;\n        return this;\n    }\n\n    /**\n     * Sets the asset URL resolver.\n     * @param assetUrlResolver The asset URL resolver to use\n     * @returns The current ConfigurationBuilder instance.\n     */\n    public setAssetUrlResolver(assetUrlResolver: AssetUrlResolver): ConfigurationBuilder {\n        this.config.assetUrlResolver = assetUrlResolver;\n        return this;\n    }\n\n    /**\n     * Sets the execution providers for the ONNX runtime.\n     *\n     * @param executionProviders The execution providers to use.\n     */\n    public setExecutionProviders(executionProviders: string[]): ConfigurationBuilder {\n        // Allow a single string to be passed as well. This is useful for setting a single provider.\n        // This will convert the string to an array for consistency.\n        if (typeof executionProviders === 'string') {\n            executionProviders = [executionProviders];\n        }\n        this.config.executionProviders = executionProviders;\n        return this;\n    }\n\n    /**\n     * Sets the input size for the configuration.\n     * @param height The height of the input.\n     * @param width The width of the input.\n     */\n    public setInputSize(height: number, width: number): ConfigurationBuilder {\n        this.config.input = { height, width };\n        return this;\n    }\n\n    /**\n     * Sets the input configuration.\n     * @param inputConfig The input configuration to use.\n     */\n    public setInputConfig(inputConfig: InputConfig): ConfigurationBuilder {\n        this.config.input = { ...inputConfig };\n        return this;\n    }\n\n    /**\n     * Sets the render configuration.\n     * @param renderConfig The render configuration to use.\n     */\n    public setRenderConfig(renderConfig: RenderConfig): ConfigurationBuilder {\n        this.config.render = { ...renderConfig } as MutableRenderConfig;\n        return this;\n    }\n\n    /**\n     * Sets the render type.\n     * @param type The render type ('blur', 'passthrough', 'replacement').\n     */\n    public setRenderType(type: 'blur' | 'passthrough' | 'replacement'): ConfigurationBuilder {\n        if (!this.config.render) {\n            this.config.render = { type };\n        } else {\n            this.config.render.type = type;\n        }\n        return this;\n    }\n\n    /**\n     * Sets the horizontal mirror property for the render configuration.\n     * @param horizontalMirror Boolean indicating if horizontal mirror should be applied.\n     */\n    public setRenderHorizontalMirror(horizontalMirror: boolean): ConfigurationBuilder {\n        if (!this.config.render) {\n            throw new Error('Render config must be set before setting horizontal mirror.');\n        }\n        this.config.render.horizontalMirror = horizontalMirror;\n        return this;\n    }\n\n    /**\n     * Sets the blur strength for the render configuration.\n     * @param blurStrength The blur strength to use.\n     */\n    public setBlurStrength(blurStrength: BlurStrength): ConfigurationBuilder {\n        const blurConfig = ConfigurationBuilder.getBlurConfig(\n            blurStrength,\n            this.config.render?.horizontalMirror\n        );\n        this.config.render = { ...this.config.render, ...blurConfig };\n        return this;\n    }\n\n    /**\n     * Sets the blur kernel size.\n     * @param kernelSize The kernel size for the blur effect.\n     */\n    public setBlurKernelSize(kernelSize: number): ConfigurationBuilder {\n        if (!this.config.render || this.config.render.type !== 'blur') {\n            throw new Error('Render config must be of type blur to set blur properties.');\n        }\n        (this.config.render as MutableBlurConfig).kernelSize = kernelSize;\n        return this;\n    }\n\n    /**\n     * Sets the blur sigma value.\n     * @param sigma The sigma value for the blur effect.\n     */\n    public setBlurSigma(sigma: number): ConfigurationBuilder {\n        if (!this.config.render || this.config.render.type !== 'blur') {\n            throw new Error('Render config must be of type blur to set blur properties.');\n        }\n        (this.config.render as MutableBlurConfig).sigma = sigma;\n        return this;\n    }\n\n    /**\n     * Sets the replacement background.\n     * @param background The background to use for replacement.\n     */\n    public setReplacementBackground(background: HTMLCanvasElement): ConfigurationBuilder {\n        if (!this.config.render || this.config.render.type !== 'replacement') {\n            throw new Error(\n                'Render config must be of type replacement to set replacement properties.'\n            );\n        }\n        (this.config.render as MutableReplacementConfig).background = background;\n        return this;\n    }\n\n    /**\n     * Sets the replacement static property.\n     * @param isStatic Boolean indicating if the replacement is static.\n     */\n    public setReplacementStatic(isStatic: boolean): ConfigurationBuilder {\n        if (!this.config.render || this.config.render.type !== 'replacement') {\n            throw new Error(\n                'Render config must be of type replacement to set replacement properties.'\n            );\n        }\n        (this.config.render as MutableReplacementConfig).static = isStatic;\n        return this;\n    }\n\n    /**\n     * Sets the mask configuration.\n     * @param maskConfig The mask configuration to use.\n     */\n    public setMaskConfig(maskConfig: MaskConfig): ConfigurationBuilder {\n        this.config.mask = { ...maskConfig } as MutableMaskConfig;\n        return this;\n    }\n\n    /**\n     * Sets the mask generator.\n     * @param generator The generator type (most be 'worker'; 'local' is deprecated).\n     */\n    public setMaskGenerator(generator: Generator): ConfigurationBuilder {\n        if (generator !== 'worker') {\n            console.warn('[ladon-ts] Mask generator must be \"worker\". \"local\" is deprecated.');\n        }\n        const mask = this.getMaskConfig();\n        mask.generator = generator;\n        return this;\n    }\n\n    /**\n     * Sets the mask generation interval in milliseconds.\n     * @param intervalMs The generation interval in milliseconds.\n     */\n    public setMaskGenerationIntervalMs(intervalMs: number): ConfigurationBuilder {\n        const mask = this.getMaskConfig();\n        mask.generationIntervalMs = intervalMs;\n        return this;\n    }\n\n    /**\n     * Sets the mask model rank.\n     * @param modelRank The model rank to use.\n     */\n    public setMaskModelRank(modelRank: number): ConfigurationBuilder {\n        const mask = this.getMaskConfig();\n        mask.modelRank = modelRank;\n        return this;\n    }\n\n    /**\n     * Sets the mask model URI.\n     * @param modelUri The model URI to use.\n     */\n    public setMaskModelUri(modelUri: string): ConfigurationBuilder {\n        const mask = this.getMaskConfig();\n        mask.modelUri = modelUri;\n        return this;\n    }\n\n    /**\n     * Sets the mask worker URI.\n     * @param workerUri The worker URI to use.\n     */\n    public setMaskWorkerUri(workerUri: string): ConfigurationBuilder {\n        const mask = this.getMaskConfig();\n        mask.workerUri = workerUri;\n        return this;\n    }\n\n    /**\n     * Sets the mask input size.\n     * @param height The height of the mask input.\n     * @param width The width of the mask input.\n     */\n    public setMaskInputSize(height: number, width: number): ConfigurationBuilder {\n        const mask = this.getMaskConfig();\n        mask.inputSize = { height, width };\n        return this;\n    }\n\n    /**\n     * Sets the mask output size.\n     * @param height The height of the mask output.\n     * @param width The width of the mask output.\n     */\n    public setMaskOutputSize(height: number, width: number): ConfigurationBuilder {\n        const mask = this.getMaskConfig();\n        mask.outputSize = { height, width };\n        return this;\n    }\n\n    /**\n     * Sets the mask upscaled size.\n     * @param height The height of the upscaled mask.\n     * @param width The width of the upscaled mask.\n     */\n    public setMaskUpscaleSize(height: number, width: number): ConfigurationBuilder {\n        const mask = this.getMaskConfig();\n        mask.upscaleSize = { height, width };\n        return this;\n    }\n\n    /**\n     * Sets the quality level and updates mask configurations accordingly.\n     * @param quality The desired quality level.\n     */\n    public setMaskQuality(quality: Quality): ConfigurationBuilder {\n        const { modelQualities } = rawConfig;\n\n        const mask = this.getMaskConfig();\n        const qualityKey = quality.toLowerCase() as keyof RawConfig['modelQualities'];\n        const qualityConfig = modelQualities[qualityKey];\n\n        if (!qualityConfig) {\n            throw new Error(`[ladon-ts] unknown quality option: ${quality}`);\n        }\n\n        // Store the quality key for dynamic resolution later\n        mask.qualityKey = qualityKey;\n\n        // Copy other quality-specific properties into the mask config\n        Object.assign(mask, qualityConfig);\n\n        return this;\n    }\n\n    /**\n     * Builds and returns the PreloadConfig or PipelineConfig object.\n     *\n     * @param requireInputConfig Whether to require the input configuration to be set before building.\n     * Input size is not available at preload so this needs to be optional. The default value is true.\n     *\n     */\n    public build(requireInputConfig = true): PipelineConfig | PreloadConfig {\n        const baseUrl = this.resolveBaseUrl();\n        const modelUri = this.resolveModelUri();\n        const wasmUri = this.resolveWasmUri();\n        const workerUri = this.resolveWorkerUri();\n\n        const input = this.config.input;\n        const render = this.config.render;\n        const maskConfig = this.config.mask;\n        const executionProviders = this.config.executionProviders;\n        const assetUrlResolver = this.config.assetUrlResolver;\n\n        if (!maskConfig) {\n            throw new Error('Mask configuration must be set before building the configuration.');\n        }\n\n        const mask: MaskConfig = {\n            generator: maskConfig.generator,\n            generationIntervalMs: maskConfig.generationIntervalMs,\n            modelRank: maskConfig.modelRank,\n            inputSize: maskConfig.inputSize,\n            outputSize: maskConfig.outputSize,\n            upscaleSize: maskConfig.upscaleSize,\n            modelUri,\n            workerUri,\n        };\n\n        // Build the preload configuration, which is valid for both preload and pipeline.\n        const preloadConfig = {\n            assetUrlResolver,\n            executionProviders,\n            baseUrl,\n            wasmUri,\n            mask,\n        };\n\n        if (requireInputConfig) {\n            if (!input) {\n                throw new Error('Input must be set before building the configuration.');\n            }\n\n            if (!render) {\n                throw new Error('Render must be set before building the configuration.');\n            }\n\n            // Build the full PipelineConfig\n            const pipelineConfig = {\n                ...preloadConfig,\n                input,\n                render,\n            } as PipelineConfig;\n\n            return pipelineConfig;\n        }\n\n        return preloadConfig as PreloadConfig;\n    }\n\n    /**\n     * Returns the mask configuration, initializing it if necessary.\n     */\n    private getMaskConfig(): MutableMaskConfig {\n        if (!this.config.mask) {\n            this.config.mask = {} as MutableMaskConfig;\n        }\n        return this.config.mask;\n    }\n\n    /**\n     * Returns the base URL for the configuration.\n     */\n    public resolveBaseUrl(): string {\n        // TODO: Do we want to publish the base URL in the raw config? It seems like the models\n        // auth service should be responsible for this, or the user should provide the base url.\n        return this.config.baseUrl || rawConfig.baseUrls[this.env];\n    }\n\n    /**\n     * Returns the base URL for the configuration.\n     *\n     * @returns The base URL for the configuration.\n     */\n    public resolveModelUri(): string {\n        // First check if the property is explicitly set in the config, then fallback to rawConfig\n        if (this.config.mask?.modelUri) {\n            return this.config.mask.modelUri;\n        }\n\n        const mask = this.getMaskConfig();\n        if (!mask.qualityKey) {\n            throw new Error('[ladon-ts] No quality set, cannot infer modelFile.');\n        }\n\n        return this.resolveTemplate(rawConfig.modelUrlTemplate, {\n            BASE_PATH_MODELS: rawConfig.basePaths.models,\n            MODEL_VERSION: rawConfig.modelVersion,\n            MODEL_FILE: rawConfig.modelQualities[mask.qualityKey].modelFile,\n        });\n    }\n\n    public resolveWasmUri(): string {\n        // First check if the property is explicitly set in the config, then fallback to rawConfig\n        if (this.config.wasmUri) {\n            return this.config.wasmUri;\n        }\n\n        return this.resolveTemplate(rawConfig.wasmPathTemplate, {\n            BASE_PATH_WASM: rawConfig.basePaths.wasm,\n            ONNX_VERSION: rawConfig.onnxVersion,\n        });\n    }\n\n    public resolveWorkerUri(): string {\n        // First check if the property is explicitly set in the config, then fallback to rawConfig\n        if (this.config.mask?.workerUri) {\n            return this.config.mask.workerUri;\n        }\n\n        return this.resolveTemplate(rawConfig.workerUrlTemplate, {\n            BASE_PATH_WORKERS: rawConfig.basePaths.workers,\n            LIB_VERSION: ConfigurationBuilder.getLibVersion(),\n            WORKER_FILE: rawConfig.workerFile,\n        });\n    }\n\n    /**\n     * Resolves a template string with the specified values.\n     *\n     * @param template The template string to resolve.\n     * @param values The values to use for resolution.\n     * @returns The resolved template string.\n     */\n    private resolveTemplate(template: string, values: Record<string, string>): string {\n        return template.replace(/\\$\\{([A-Z_]+)\\}/g, (_, key) => {\n            if (!values[key]) {\n                throw new Error(`Missing value for template variable: ${key}`);\n            }\n            return values[key];\n        });\n    }\n\n    /**\n     * Generates a blur configuration based on the specified blur strength.\n     * @param blurStrength The desired blur strength.\n     * @param horizontalMirror Whether to apply horizontal mirroring.\n     */\n    public static getBlurConfig(\n        blurStrength: BlurStrength,\n        horizontalMirror?: boolean\n    ): BlurConfig {\n        const strengthKey = blurStrength.toLowerCase() as keyof RawConfig['blurStrengths'];\n        const blurConfig = rawConfig.blurStrengths[strengthKey];\n\n        if (!blurConfig) {\n            throw new Error(`[ladon-ts] Unknown blur strength: ${blurStrength}`);\n        }\n\n        return {\n            type: 'blur',\n            horizontalMirror,\n            ...blurConfig,\n        };\n    }\n\n    public static getPassthroughConfig(horizontalMirror?: boolean): PassthroughConfig {\n        return {\n            type: 'passthrough',\n            horizontalMirror,\n        };\n    }\n\n    /**\n     * Returns the library version.\n     *\n     * @returns The library version.\n     */\n    public static getLibVersion(): string {\n        return LIB_VERSION;\n    }\n}\n"],"names":["ConfigurationBuilder","env","baseUrl","wasmUri","assetUrlResolver","executionProviders","height","width","inputConfig","renderConfig","type","horizontalMirror","blurStrength","blurConfig","_a","kernelSize","sigma","background","isStatic","maskConfig","generator","mask","intervalMs","modelRank","modelUri","workerUri","quality","modelQualities","rawConfig","qualityKey","qualityConfig","requireInputConfig","input","render","preloadConfig","template","values","_","key","strengthKey","LIB_VERSION"],"mappings":"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"}