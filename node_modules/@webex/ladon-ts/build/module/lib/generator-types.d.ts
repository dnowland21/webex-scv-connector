declare global {
    interface ImportMeta {
        url: string;
    }
}
export type FrameData = Uint8ClampedArray | HTMLVideoElement;
export interface FacesAndLandmarks {
    data: Float32Array;
    dims: readonly number[];
}
export interface LadonOutput {
    data: Float32Array;
    facesAndLandmarks: FacesAndLandmarks;
    gesture: Float32Array;
    motion: number;
    timestamp: number;
    warm: boolean;
}
export interface WorkerGeneratedResult {
    facesAndLandmarks: FacesAndLandmarks;
    gesture: Float32Array;
    mask: Float32Array;
    motion: number;
    timestamp: number;
    status: string;
}
export interface MaskGenerator {
    getLadonOutput(input: Uint8ClampedArray, timestamp: number): Promise<LadonOutput>;
    getLadonOutputForTimestamp(timestamp: number): Promise<LadonOutput>;
    load(): Promise<void>;
    isLoaded(): boolean;
    postRender(input: Uint8ClampedArray, timestamp: number): Promise<void>;
    destroy(): Promise<void>;
}
