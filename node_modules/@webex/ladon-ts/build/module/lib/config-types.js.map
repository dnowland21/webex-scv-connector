{"version":3,"file":"config-types.js","sources":["../../../src/lib/config-types.ts"],"sourcesContent":["export enum Quality {\n    TINY = 'TINY',\n    LOW = 'LOW',\n    MEDIUM = 'MEDIUM',\n    HIGH = 'HIGH',\n    ULTRA = 'ULTRA',\n}\n\nexport enum BlurStrength {\n    WEAK = 'WEAK',\n    MODERATE = 'MODERATE',\n    STRONG = 'STRONG',\n    STRONGER = 'STRONGER',\n    STRONGEST = 'STRONGEST',\n}\n\nexport type ResolutionConfig = {\n    readonly height: number;\n    readonly width: number;\n};\n\nexport interface SizeConfig {\n    readonly inputSize: ResolutionConfig;\n    readonly outputSize: ResolutionConfig;\n    readonly upscaleSize: ResolutionConfig;\n}\n\nexport interface ModelQualityConfig {\n    readonly modelFile: string;\n    readonly modelRank: number;\n    readonly generationIntervalMs: number;\n    readonly inputSize: ResolutionConfig;\n    readonly outputSize: ResolutionConfig;\n    readonly upscaleSize: ResolutionConfig;\n}\n\nexport type InputConfig = ResolutionConfig;\n\nexport type AssetUrlResolver = (assetUri: string, config: PreloadConfig) => Promise<string>;\n\nexport interface RenderConfig {\n    readonly type: 'blur' | 'passthrough' | 'replacement';\n    readonly horizontalMirror?: boolean;\n}\n\nexport interface BlurConfig extends RenderConfig {\n    readonly type: 'blur';\n    readonly kernelSize: number;\n    readonly sigma: number;\n}\n\nexport interface ReplacementConfig extends RenderConfig {\n    readonly type: 'replacement';\n    readonly background: HTMLCanvasElement;\n    readonly static: boolean;\n    // TODO: add reposition args for presentation mode\n}\n\nexport interface PassthroughConfig extends RenderConfig {\n    readonly type: 'passthrough';\n}\n\nexport type Generator = 'worker';\n\nexport type BaseMaskConfig = {\n    readonly generator: Generator;\n    readonly generationIntervalMs: number;\n    readonly modelRank: number;\n    readonly modelUri: string;\n    readonly workerUri: string;\n    // These are optional because the input and output sizes are not known when preloading the model.\n    // However, the sizes are needed when creating the pipeline to match the models seize requirements.\n    readonly inputSize?: ResolutionConfig;\n    readonly outputSize?: ResolutionConfig;\n    readonly upscaleSize?: ResolutionConfig;\n};\n\nexport type MaskConfig = BaseMaskConfig & SizeConfig;\n\nexport type PreloadConfig = {\n    readonly baseUrl?: string;\n    readonly wasmUri: string;\n    readonly mask: BaseMaskConfig;\n    readonly executionProviders?: string[];\n    readonly assetUrlResolver?: AssetUrlResolver;\n};\n\nexport type WorkerConfig = Omit<PreloadConfig, 'assetUrlResolver'>;\n\nexport type PipelineConfig = PreloadConfig & {\n    readonly render: BlurConfig | RenderConfig | ReplacementConfig;\n    readonly input: InputConfig;\n    readonly mask: MaskConfig;\n};\n\nexport interface RawConfig {\n    readonly baseUrls: {\n        readonly int: string;\n        readonly prod: string;\n    };\n    readonly basePaths: {\n        readonly models: string;\n        readonly wasm: string;\n        readonly workers: string;\n    };\n    readonly blurStrengths: {\n        readonly [key in Lowercase<BlurStrength>]: {\n            readonly kernelSize: number;\n            readonly sigma: number;\n        };\n    };\n    readonly modelQualities: {\n        readonly [key in Lowercase<Quality>]: ModelQualityConfig;\n    };\n    readonly onnxVersion: string;\n    readonly modelVersion: string;\n    readonly workerFile: string;\n    readonly modelUrlTemplate: string;\n    readonly wasmPathTemplate: string;\n    readonly workerUrlTemplate: string;\n}\n"],"names":["Quality","BlurStrength"],"mappings":"AAAY,IAAAA,sBAAAA,OACRA,EAAA,OAAO,QACPA,EAAA,MAAM,OACNA,EAAA,SAAS,UACTA,EAAA,OAAO,QACPA,EAAA,QAAQ,SALAA,IAAAA,KAAA,CAAA,CAAA,GAQAC,sBAAAA,OACRA,EAAA,OAAO,QACPA,EAAA,WAAW,YACXA,EAAA,SAAS,UACTA,EAAA,WAAW,YACXA,EAAA,YAAY,aALJA,IAAAA,KAAA,CAAA,CAAA;"}