var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as ort from 'onnxruntime-web';
import { sharedResourceManager } from './shared-resource-manager';
export class LocalGenerator {
    constructor(config) {
        this.config = config;
        this.lastMaskGenerationTime = 0;
        this.lastMask = new ort.Tensor('float32', new Float32Array(this.config.mask.output_size.height * this.config.mask.output_size.width), [1, 1, this.config.mask.output_size.height, this.config.mask.output_size.width]);
        this.lastResult = {
            data: this.lastMask.data,
            facesAndLandmarks: { data: new Float32Array(0), dims: [] },
            gesture: new Float32Array(0),
            motion: 0,
            timestamp: 0,
            warm: false,
        };
    }
    /**
     * This method preprocesses an input Uint8ClampedArray to a Float32Array
     * while maintaining memory efficiency by reusing a class-scoped output buffer.
     * If the model rank is 4 (e.g., newer tiny model), it sets an alpha channel value.
     *
     * @param {Uint8ClampedArray} input - The input data to be preprocessed
     * @param {Float32Array} alpha - The alpha channel data
     * @returns {Float32Array} - The processed data
     */
    preprocess(input, alpha) {
        var _a;
        const { model_rank, input_size, output_size } = this.config.mask;
        const { height, width } = input_size;
        const numImagePixels = height * width;
        // Initialize the output buffer if it is not already set
        (_a = this.output) !== null && _a !== void 0 ? _a : (this.output = new Float32Array(numImagePixels * model_rank));
        // In-place modification of class-scoped output buffer
        const channelFlipOffset = 2;
        const numInputPixels = input.length / 4;
        // Loop over all color channels in the image
        for (let channel = 0; channel < 3; channel++) {
            // For each pixel in the input image...
            for (let pixel = 0; pixel < numInputPixels; pixel++) {
                // ...copy the color channel value from input to output, potentially
                // potentially flipping the color channel order for the tiny.
                this.output[pixel + channel * numImagePixels] =
                    input[pixel * 4 + Math.abs(channelFlipOffset - channel)];
            }
        }
        // Scaling factors for width and height based on the ratio of output to input sizes
        const widthScale = output_size.width / width;
        const heightScale = output_size.height / height;
        // Iterate over each pixel in the width of the input image
        for (let x = 0; x < width; x++) {
            const nearestNeighborX = Math.floor(x * widthScale);
            // Iterate over each pixel in the height of the input image
            for (let y = 0; y < height; y++) {
                const nearestNeighborY = Math.floor(y * heightScale);
                const maskIdx = nearestNeighborX + nearestNeighborY * output_size.width;
                const outputIdx = x + y * width + 3 * numImagePixels;
                // Normalize the alpha value to range between 0 and 1, and scale it to the range of 0-255
                // This step is necessary because the rendering pipeline expects alpha values in the [0, 255] range
                const normalizedValue = Math.min(Math.max(alpha[maskIdx], 0), 255);
                // Assign the normalized value to the output at the computed index
                this.output[outputIdx] = normalizedValue;
            }
        }
        return this.output;
    }
    getTimeSinceLastGeneration() {
        return Date.now() - this.lastMaskGenerationTime;
    }
    getLadonOutput(input, timestamp) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.maskModel) {
                throw new Error('[ladon-ts] - mask model not loaded.');
            }
            if (this.getTimeSinceLastGeneration() < this.config.mask.generation_interval_ms) {
                return {
                    data: this.lastMask.data,
                    facesAndLandmarks: this.lastResult.facesAndLandmarks,
                    gesture: this.lastResult.gesture,
                    motion: this.lastResult.motion,
                    timestamp: this.lastResult.timestamp,
                    warm: false,
                };
            }
            this.lastMaskGenerationTime = Date.now();
            const imageTensor = new ort.Tensor('float32', this.preprocess(input, this.lastMask.data), [
                1,
                this.config.mask.model_rank,
                this.config.mask.input_size.height,
                this.config.mask.input_size.width,
            ]);
            const results = yield this.maskModel.run({ input: imageTensor });
            this.lastMask = results.segmentation;
            this.lastResult = {
                data: (_a = this.lastMask.data) !== null && _a !== void 0 ? _a : new Float32Array(0),
                facesAndLandmarks: {
                    data: (_c = (_b = results.faces_and_landmarks) === null || _b === void 0 ? void 0 : _b.data) !== null && _c !== void 0 ? _c : new Float32Array(0),
                    dims: (_e = (_d = results.faces_and_landmarks) === null || _d === void 0 ? void 0 : _d.dims) !== null && _e !== void 0 ? _e : [],
                },
                gesture: (_g = (_f = results.gesture) === null || _f === void 0 ? void 0 : _f.data) !== null && _g !== void 0 ? _g : new Float32Array(0),
                motion: (_j = (_h = results.motion) === null || _h === void 0 ? void 0 : _h.data[0]) !== null && _j !== void 0 ? _j : 0,
                timestamp,
                warm: true,
            };
            return this.lastResult;
        });
    }
    load() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const modelUrl = yield sharedResourceManager.getModelUrl(this.config);
            // Attempt to retrieve a preloaded InferenceSession from the shared resource manager.
            this.maskModel = sharedResourceManager.getModelSession(modelUrl);
            // If the model is not preloaded, load it from the provided model URL.
            (_a = this.maskModel) !== null && _a !== void 0 ? _a : (this.maskModel = yield sharedResourceManager.preloadModel(this.config));
            if (!this.maskModel) {
                throw new Error('Failed to load the ONNX model.');
            }
        });
    }
    isLoaded() {
        return !!this.maskModel;
    }
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    postRender(_) {
        return __awaiter(this, void 0, void 0, function* () {
            // empty for local generator
        });
    }
    destroy() {
        // empty for local generator
    }
}
export class NullGenerator {
    constructor(config) {
        this.config = config;
        this.lastMask = new Float32Array(this.config.mask.output_size.height * this.config.mask.output_size.width);
    }
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    getLadonOutput(_) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                data: this.lastMask,
                facesAndLandmarks: { data: new Float32Array(0), dims: [] },
                gesture: new Float32Array(0),
                motion: 0,
                timestamp: 0,
                warm: false,
            };
        });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            // empty for null generator
        });
    }
    isLoaded() {
        return true;
    }
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    postRender(_) {
        return __awaiter(this, void 0, void 0, function* () {
            // empty for null generator
        });
    }
    destroy() {
        // empty for null generator
    }
}
export class WorkerGenerator {
    constructor(config) {
        this.config = config;
        this.newMask = true;
        this.lastMask = new Float32Array(this.config.mask.output_size.height * this.config.mask.output_size.width);
        this.lastResult = {
            data: this.lastMask,
            facesAndLandmarks: { data: new Float32Array(0), dims: [] },
            gesture: new Float32Array(0),
            motion: 0,
            timestamp: 0,
            warm: false,
        };
    }
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    getLadonOutput(_) {
        return __awaiter(this, void 0, void 0, function* () {
            const toReturn = {
                data: this.lastMask,
                facesAndLandmarks: this.lastResult.facesAndLandmarks,
                gesture: this.lastResult.gesture,
                motion: this.lastResult.motion,
                timestamp: this.lastResult.timestamp,
                warm: this.newMask,
            };
            this.newMask = false;
            return toReturn;
        });
    }
    load() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.worker = sharedResourceManager.getWorker();
            (_a = this.worker) !== null && _a !== void 0 ? _a : (this.worker = yield sharedResourceManager.initializeWorker(this.config));
            if (!this.worker) {
                throw new Error('[ladon-ts] - worker is not defined.');
            }
            const modelUrl = yield sharedResourceManager.getModelUrl(this.config);
            const workerConfig = {
                base_url: this.config.base_url,
                input: this.config.input,
                mask: Object.assign(Object.assign({}, this.config.mask), { model_url_resolver: modelUrl }),
                wasm_uri: this.config.wasm_uri,
                render: { type: 'passthrough' },
            };
            this.worker.postMessage({ type: 'init', config: workerConfig });
            let resolutionCb;
            const result = new Promise((resolve) => {
                resolutionCb = resolve;
            });
            this.worker.onmessage = (event) => {
                if (event.data.status === 'generated') {
                    this.lastMask = event.data.mask;
                    this.lastResult = {
                        data: event.data.mask,
                        facesAndLandmarks: event.data.facesAndLandmarks,
                        gesture: event.data.gesture,
                        motion: event.data.motion,
                        timestamp: event.data.timestamp,
                        warm: true,
                    };
                    this.newMask = true;
                }
                else {
                    const workerUrl = sharedResourceManager.getWorkerUrl();
                    if (workerUrl) {
                        URL.revokeObjectURL(workerUrl);
                    }
                    resolutionCb === null || resolutionCb === void 0 ? void 0 : resolutionCb();
                }
            };
            return result;
        });
    }
    isLoaded() {
        return !!this.worker;
    }
    postRender(input, timestamp) {
        return __awaiter(this, void 0, void 0, function* () {
            // claim ownership of the input tensor's buffer and forward to worker
            if (!this.worker) {
                throw new Error('[ladon-ts] - worker is not defined.');
            }
            this.worker.postMessage({
                type: 'generate',
                image: input,
                timestamp,
            }, [input.buffer]);
        });
    }
    destroy() {
        sharedResourceManager.terminateWorker();
    }
}
//# sourceMappingURL=data:application/json;base64,