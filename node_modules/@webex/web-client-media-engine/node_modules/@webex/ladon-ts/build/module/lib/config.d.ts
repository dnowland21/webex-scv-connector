export declare const BASE_URL = "https://models.intelligence.webex.com/ladon";
export declare const LOCAL_BASE_URL = "https://localhost";
export declare const LOCAL_WORKER_URI = "/segmentation.js";
export declare const LOCAL_PORT = 1235;
export declare const MODEL_VERSION = "0.7.7.1";
export declare const WASM_URI = "/wasm/1.15.1b/";
export declare enum Quality {
    TINY = "TINY",
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    HIGH = "HIGH",
    ULTRA = "ULTRA"
}
export declare enum BlurStrength {
    WEAK = "WEAK",
    MODERATE = "MODERATE",
    STRONG = "STRONG",
    STRONGER = "STRONGER",
    STRONGEST = "STRONGEST"
}
export declare type SizeConfig = {
    readonly height: number;
    readonly width: number;
};
export declare type InputConfig = SizeConfig;
export declare type ModelUrlResolver = string | ((model_path: string) => Promise<string>);
export interface RenderConfig {
    readonly type: 'blur' | 'passthrough' | 'replacement';
    readonly horizontal_mirror?: boolean;
}
export interface BlurConfig extends RenderConfig {
    readonly type: 'blur';
    readonly kernel_size: number;
    readonly sigma: number;
}
export interface ReplacementConfig extends RenderConfig {
    readonly type: 'replacement';
    background: HTMLCanvasElement;
    readonly static: boolean;
}
export declare type Generator = 'local' | 'worker';
export declare type BaseMaskConfig = {
    readonly generator: Generator;
    readonly generation_interval_ms: number;
    readonly model_rank: number;
    readonly model_url_resolver: ModelUrlResolver;
    readonly model_uri: string;
    readonly worker_uri: string;
    readonly input_size?: SizeConfig;
    readonly output_size?: SizeConfig;
    readonly upscaled_size?: SizeConfig;
};
export declare type MaskConfig = BaseMaskConfig & {
    readonly input_size: SizeConfig;
    readonly output_size: SizeConfig;
    readonly upscaled_size: SizeConfig;
};
export declare type PreloadConfig = {
    readonly base_url?: string;
    readonly wasm_uri?: string;
    readonly mask: BaseMaskConfig;
};
export declare type PipelineConfig = {
    readonly base_url?: string;
    readonly wasm_uri?: string;
    readonly render: BlurConfig | RenderConfig | ReplacementConfig;
    readonly input: InputConfig;
    readonly mask: MaskConfig;
};
export declare const getBlurConfig: (blur_strength: BlurStrength, horizontal_mirror?: boolean) => BlurConfig;
export declare const getPreloadConfig: (quality?: Quality, generator?: Generator, model_url_resolver?: ModelUrlResolver, base_url?: string, useLocalWorker?: boolean) => {
    mask: {
        generator: Generator;
        generation_interval_ms: number;
        model_rank: number;
        model_url_resolver: ModelUrlResolver;
        model_uri: string;
        worker_uri: string;
        input_size?: SizeConfig | undefined;
        output_size?: SizeConfig | undefined;
        upscaled_size?: SizeConfig | undefined;
    };
    base_url?: string | undefined;
    wasm_uri?: string | undefined;
};
export declare const getConfig: (height: number, width: number, quality?: Quality, generator?: Generator, renderConfig?: BlurConfig | RenderConfig | ReplacementConfig, modelUrlResolver?: ModelUrlResolver, baseUrl?: string, useLocalWorker?: boolean) => {
    render: RenderConfig | BlurConfig | ReplacementConfig;
    input: {
        height: number;
        width: number;
    };
    mask: {
        input_size: SizeConfig;
        output_size: SizeConfig;
        upscaled_size: SizeConfig;
        generator: Generator;
        generation_interval_ms: number;
        model_rank: number;
        model_url_resolver: ModelUrlResolver;
        model_uri: string;
        worker_uri: string;
    };
    base_url?: string | undefined;
    wasm_uri?: string | undefined;
};
