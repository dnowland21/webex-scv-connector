'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var events$3 = require('events');

function _mergeNamespaces$1(n, m) {
    m.forEach(function (e) {
        e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
            if (k !== 'default' && !(k in n)) {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    });
    return Object.freeze(n);
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$2(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var commonjsGlobal$1$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var logger$1$1 = {exports: {}};

/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */

(function (module) {
(function (global) {

	// Top level module for the global, static logger instance.
	var Logger = { };

	// For those that are at home that are keeping score.
	Logger.VERSION = "1.6.1";

	// Function which handles all incoming log messages.
	var logHandler;

	// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
	var contextualLoggersByNameMap = {};

	// Polyfill for ES5's Function.bind.
	var bind = function(scope, func) {
		return function() {
			return func.apply(scope, arguments);
		};
	};

	// Super exciting object merger-matron 9000 adding another 100 bytes to your download.
	var merge = function () {
		var args = arguments, target = args[0], key, i;
		for (i = 1; i < args.length; i++) {
			for (key in args[i]) {
				if (!(key in target) && args[i].hasOwnProperty(key)) {
					target[key] = args[i][key];
				}
			}
		}
		return target;
	};

	// Helper to define a logging level object; helps with optimisation.
	var defineLogLevel = function(value, name) {
		return { value: value, name: name };
	};

	// Predefined logging levels.
	Logger.TRACE = defineLogLevel(1, 'TRACE');
	Logger.DEBUG = defineLogLevel(2, 'DEBUG');
	Logger.INFO = defineLogLevel(3, 'INFO');
	Logger.TIME = defineLogLevel(4, 'TIME');
	Logger.WARN = defineLogLevel(5, 'WARN');
	Logger.ERROR = defineLogLevel(8, 'ERROR');
	Logger.OFF = defineLogLevel(99, 'OFF');

	// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
	// of each other.
	var ContextualLogger = function(defaultContext) {
		this.context = defaultContext;
		this.setLevel(defaultContext.filterLevel);
		this.log = this.info;  // Convenience alias.
	};

	ContextualLogger.prototype = {
		// Changes the current logging level for the logging instance.
		setLevel: function (newLevel) {
			// Ensure the supplied Level object looks valid.
			if (newLevel && "value" in newLevel) {
				this.context.filterLevel = newLevel;
			}
		},
		
		// Gets the current logging level for the logging instance
		getLevel: function () {
			return this.context.filterLevel;
		},

		// Is the logger configured to output messages at the supplied level?
		enabledFor: function (lvl) {
			var filterLevel = this.context.filterLevel;
			return lvl.value >= filterLevel.value;
		},

		trace: function () {
			this.invoke(Logger.TRACE, arguments);
		},

		debug: function () {
			this.invoke(Logger.DEBUG, arguments);
		},

		info: function () {
			this.invoke(Logger.INFO, arguments);
		},

		warn: function () {
			this.invoke(Logger.WARN, arguments);
		},

		error: function () {
			this.invoke(Logger.ERROR, arguments);
		},

		time: function (label) {
			if (typeof label === 'string' && label.length > 0) {
				this.invoke(Logger.TIME, [ label, 'start' ]);
			}
		},

		timeEnd: function (label) {
			if (typeof label === 'string' && label.length > 0) {
				this.invoke(Logger.TIME, [ label, 'end' ]);
			}
		},

		// Invokes the logger callback if it's not being filtered.
		invoke: function (level, msgArgs) {
			if (logHandler && this.enabledFor(level)) {
				logHandler(msgArgs, merge({ level: level }, this.context));
			}
		}
	};

	// Protected instance which all calls to the to level `Logger` module will be routed through.
	var globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });

	// Configure the global Logger instance.
	(function() {
		// Shortcut for optimisers.
		var L = Logger;

		L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
		L.trace = bind(globalLogger, globalLogger.trace);
		L.debug = bind(globalLogger, globalLogger.debug);
		L.time = bind(globalLogger, globalLogger.time);
		L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
		L.info = bind(globalLogger, globalLogger.info);
		L.warn = bind(globalLogger, globalLogger.warn);
		L.error = bind(globalLogger, globalLogger.error);

		// Don't forget the convenience alias!
		L.log = L.info;
	}());

	// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
	// object with the supplied log messages and the second being a context object which contains a hash of stateful
	// parameters which the logging function can consume.
	Logger.setHandler = function (func) {
		logHandler = func;
	};

	// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
	// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
	Logger.setLevel = function(level) {
		// Set the globalLogger's level.
		globalLogger.setLevel(level);

		// Apply this level to all registered contextual loggers.
		for (var key in contextualLoggersByNameMap) {
			if (contextualLoggersByNameMap.hasOwnProperty(key)) {
				contextualLoggersByNameMap[key].setLevel(level);
			}
		}
	};

	// Gets the global logging filter level
	Logger.getLevel = function() {
		return globalLogger.getLevel();
	};

	// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
	// default context and log handler.
	Logger.get = function (name) {
		// All logger instances are cached so they can be configured ahead of use.
		return contextualLoggersByNameMap[name] ||
			(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));
	};

	// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
	// write to the window's console object (if present); the optional options object can be used to customise the
	// formatter used to format each log message.
	Logger.createDefaultHandler = function (options) {
		options = options || {};

		options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
			// Prepend the logger's name to the log message for easy identification.
			if (context.name) {
				messages.unshift("[" + context.name + "]");
			}
		};

		// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
		// that don't offer a native console method.
		var timerStartTimeByLabelMap = {};

		// Support for IE8+ (and other, slightly more sane environments)
		var invokeConsoleMethod = function (hdlr, messages) {
			Function.prototype.apply.call(hdlr, console, messages);
		};

		// Check for the presence of a logger.
		if (typeof console === "undefined") {
			return function () { /* no console */ };
		}

		return function(messages, context) {
			// Convert arguments object to Array.
			messages = Array.prototype.slice.call(messages);

			var hdlr = console.log;
			var timerLabel;

			if (context.level === Logger.TIME) {
				timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];

				if (messages[1] === 'start') {
					if (console.time) {
						console.time(timerLabel);
					}
					else {
						timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
					}
				}
				else {
					if (console.timeEnd) {
						console.timeEnd(timerLabel);
					}
					else {
						invokeConsoleMethod(hdlr, [ timerLabel + ': ' +
							(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);
					}
				}
			}
			else {
				// Delegate through to custom warn/error loggers if present on the console.
				if (context.level === Logger.WARN && console.warn) {
					hdlr = console.warn;
				} else if (context.level === Logger.ERROR && console.error) {
					hdlr = console.error;
				} else if (context.level === Logger.INFO && console.info) {
					hdlr = console.info;
				} else if (context.level === Logger.DEBUG && console.debug) {
					hdlr = console.debug;
				} else if (context.level === Logger.TRACE && console.trace) {
					hdlr = console.trace;
				}

				options.formatter(messages, context);
				invokeConsoleMethod(hdlr, messages);
			}
		};
	};

	// Configure and example a Default implementation which writes to the `window.console` (if present).  The
	// `options` hash can be used to configure the default logLevel and provide a custom message formatter.
	Logger.useDefaults = function(options) {
		Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
		Logger.setHandler(Logger.createDefaultHandler(options));
	};

	// Createa an alias to useDefaults to avoid reaking a react-hooks rule.
	Logger.setDefaults = Logger.useDefaults;

	// Export to popular environments boilerplate.
	if (module.exports) {
		module.exports = Logger;
	}
	else {
		Logger._prevLogger = global.Logger;

		Logger.noConflict = function () {
			global.Logger = Logger._prevLogger;
			return Logger;
		};

		global.Logger = Logger;
	}
}(commonjsGlobal$1$1));
}(logger$1$1));

var Logger$2 = logger$1$1.exports;

const DEFAULT_LOGGER_NAME$1 = 'webrtc-core';
const logger$3 = Logger$2.get(DEFAULT_LOGGER_NAME$1);
Logger$2.useDefaults({
    defaultLevel: Logger$2.DEBUG,
    /* eslint-disable-next-line jsdoc/require-jsdoc */
    formatter: (messages, context) => {
        messages.unshift(`[${context.name}]`);
    },
});

var DeviceKind$1;
(function (DeviceKind) {
    DeviceKind["AudioInput"] = "audioinput";
    DeviceKind["AudioOutput"] = "audiooutput";
    DeviceKind["VideoInput"] = "videoinput";
})(DeviceKind$1 || (DeviceKind$1 = {}));
/**
 * Prompts the user for permission to use a media input which produces a MediaStream with tracks
 * containing the requested types of media.
 *
 * @param constraints - A MediaStreamConstraints object specifying the types of media to request,
 *     along with any requirements for each type.
 * @returns A Promise whose fulfillment handler receives a MediaStream object when the requested
 *     media has successfully been obtained.
 */
function getUserMedia(constraints) {
    return __awaiter$2(this, void 0, void 0, function* () {
        return navigator.mediaDevices.getUserMedia(constraints);
    });
}
/**
 * Prompts the user for permission to use a user's display media and audio. If a video track is
 * absent from the constraints argument, one will still be provided. Includes experimental options
 * found in https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia#options.
 *
 * @param constraints - A MediaStreamConstraints object specifying the types of media to request,
 *     along with any requirements for each type, as well as experimental options.
 * @returns A Promise whose fulfillment handler receives a MediaStream object when the requested
 *     media has successfully been obtained.
 */
function getDisplayMedia(constraints) {
    return navigator.mediaDevices.getDisplayMedia(constraints);
}
/**
 * Requests a list of the available media input and output devices, such as microphones, cameras,
 * headsets, and so forth.
 *
 * @returns A Promise that receives an array of MediaDeviceInfo objects when the promise is
 *     fulfilled.
 */
function enumerateDevices() {
    return __awaiter$2(this, void 0, void 0, function* () {
        return navigator.mediaDevices.enumerateDevices();
    });
}
/**
 * Adds the callback handler to be notified of a media device change (for example, a headset is
 * unplugged from the user's computer).
 *
 * @param handler - The callback function to execute.
 */
function setOnDeviceChangeHandler$1(handler) {
    navigator.mediaDevices.ondevicechange = handler;
}
/**
 * Checks permissions using the navigator's permissions api.
 *
 * @param deviceKinds - Array of DeviceKind items.
 * @throws An error if camera or microphone aren't available options for query() (Firefox), or if
 *    navigator.permissions is undefined (Safari and others).
 * @returns Array of Permission Status objects.
 */
function checkNavigatorPermissions(deviceKinds) {
    return __awaiter$2(this, void 0, void 0, function* () {
        const permissionRequests = [];
        if (deviceKinds.includes(DeviceKind$1.VideoInput)) {
            permissionRequests.push(navigator.permissions.query({ name: 'camera' }));
        }
        if (deviceKinds.includes(DeviceKind$1.AudioInput)) {
            permissionRequests.push(navigator.permissions.query({ name: 'microphone' }));
        }
        return Promise.all(permissionRequests);
    });
}
/**
 * Check to see if the user has granted the application permission to use their devices.
 *
 * @param deviceKinds - Array of DeviceKind items.
 * @returns True if device permissions exist, false if otherwise.
 */
function checkDevicePermissions(deviceKinds) {
    return __awaiter$2(this, void 0, void 0, function* () {
        try {
            const permissions = yield checkNavigatorPermissions(deviceKinds);
            if (permissions.every((permission) => permission.state === 'granted')) {
                return true;
            }
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
        try {
            const devices = yield enumerateDevices();
            // If permissions are granted, the MediaDeviceInfo objects will have labels.
            return devices
                .filter((device) => deviceKinds.includes(device.kind))
                .every((device) => device.label);
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
        return false;
    });
}
/**
 * Ensures that the user has granted permissions to the microphone and camera.
 *
 * @param deviceKinds - Array of DeviceKind items.
 * @param callback - Function that will be executed while device permissions are granted. After this
 *    returns, permissions (for example device labels in Firefox) may not be available anymore.
 * @returns The callback's response.
 */
function ensureDevicePermissions(deviceKinds, callback) {
    return __awaiter$2(this, void 0, void 0, function* () {
        try {
            const hasDevicePermissions = yield checkDevicePermissions(deviceKinds);
            if (!hasDevicePermissions) {
                const stream = yield getUserMedia({
                    audio: deviceKinds.includes(DeviceKind$1.AudioInput),
                    video: deviceKinds.includes(DeviceKind$1.VideoInput),
                });
                // Callback is here to call a function while an active capture exists, so that the browser
                // (Firefox) will allow the user to access device information.
                const callbackRes = yield callback();
                // Stop tracks in the stream so the browser (Safari) will know that there is not an active
                // stream running.
                stream.getTracks().forEach((track) => track.stop());
                return callbackRes;
            }
            return callback();
        }
        catch (e) {
            logger$3.error(e);
            throw new Error('Failed to ensure device permissions.');
        }
    });
}

var media = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get DeviceKind () { return DeviceKind$1; },
    getUserMedia: getUserMedia,
    getDisplayMedia: getDisplayMedia,
    enumerateDevices: enumerateDevices,
    setOnDeviceChangeHandler: setOnDeviceChangeHandler$1,
    checkDevicePermissions: checkDevicePermissions,
    ensureDevicePermissions: ensureDevicePermissions
});

exports.WebrtcCoreErrorType = void 0;
(function (WebrtcCoreErrorType) {
    WebrtcCoreErrorType["DEVICE_PERMISSION_DENIED"] = "DEVICE_PERMISSION_DENIED";
    WebrtcCoreErrorType["CREATE_STREAM_FAILED"] = "CREATE_STREAM_FAILED";
    WebrtcCoreErrorType["ADD_EFFECT_FAILED"] = "ADD_EFFECT_FAILED";
})(exports.WebrtcCoreErrorType || (exports.WebrtcCoreErrorType = {}));
/**
 * Represents a WebRTC core error, which contains error type and error message.
 */
class WebrtcCoreError {
    /**
     * Creates new error.
     *
     * @param type - Error type.
     * @param message - Error message.
     */
    constructor(type, message = '') {
        this.type = type;
        this.message = message;
    }
}

/**
 * Creates a camera stream. Please note that the constraint params in second getUserMedia call would NOT take effect when:
 *
 * 1. Previous captured video stream from the same device is not stopped.
 * 2. Previous createCameraStream() call for the same device is in progress.
 *
 * @param cameraStreamConstructor - Constructor for the local camera stream.
 * @param constraints - Video device constraints.
 * @returns A LocalCameraStream object or an error.
 */
function createCameraStream(cameraStreamConstructor, constraints) {
    return __awaiter$2(this, void 0, void 0, function* () {
        let stream;
        try {
            stream = yield getUserMedia({ video: Object.assign({}, constraints) });
        }
        catch (error) {
            throw new WebrtcCoreError(exports.WebrtcCoreErrorType.CREATE_STREAM_FAILED, `Failed to create camera stream: ${error}`);
        }
        // eslint-disable-next-line new-cap
        return new cameraStreamConstructor(stream);
    });
}
/**
 * Creates a LocalMicrophoneStream with the given constraints.
 *
 * @param microphoneStreamConstructor - Constructor for the local microphone stream.
 * @param constraints - Audio device constraints.
 * @returns A LocalMicrophoneStream object or an error.
 */
function createMicrophoneStream(microphoneStreamConstructor, constraints) {
    return __awaiter$2(this, void 0, void 0, function* () {
        let stream;
        try {
            stream = yield getUserMedia({ audio: Object.assign({}, constraints) });
        }
        catch (error) {
            throw new WebrtcCoreError(exports.WebrtcCoreErrorType.CREATE_STREAM_FAILED, `Failed to create microphone stream: ${error}`);
        }
        // eslint-disable-next-line new-cap
        return new microphoneStreamConstructor(stream);
    });
}
/**
 * Creates a LocalCameraStream and a LocalMicrophoneStream with the given constraints.
 *
 * @param cameraStreamConstructor - Constructor for the local camera stream.
 * @param microphoneStreamConstructor - Constructor for the local microphone stream.
 * @param constraints - Object containing video and audio device constraints.
 * @param constraints.video - Video device constraints.
 * @param constraints.audio - Audio device constraints.
 * @returns A Promise that resolves to a LocalCameraStream and a LocalMicrophoneStream or an error.
 */
function createCameraAndMicrophoneStreams(cameraStreamConstructor, microphoneStreamConstructor, constraints) {
    return __awaiter$2(this, void 0, void 0, function* () {
        let stream;
        try {
            stream = yield getUserMedia({
                video: Object.assign({}, constraints === null || constraints === void 0 ? void 0 : constraints.video),
                audio: Object.assign({}, constraints === null || constraints === void 0 ? void 0 : constraints.audio),
            });
        }
        catch (error) {
            throw new WebrtcCoreError(exports.WebrtcCoreErrorType.CREATE_STREAM_FAILED, `Failed to create camera and microphone streams: ${error}`);
        }
        // eslint-disable-next-line new-cap
        const localCameraStream = new cameraStreamConstructor(new MediaStream(stream.getVideoTracks()));
        // eslint-disable-next-line new-cap
        const localMicrophoneStream = new microphoneStreamConstructor(new MediaStream(stream.getAudioTracks()));
        return [localCameraStream, localMicrophoneStream];
    });
}
/**
 * Creates a LocalDisplayStream and a LocalSystemAudioStream with the given parameters.
 *
 * This is a more advanced version of createDisplayStreamWithAudio that allows the user to specify
 * additional display media options and constraints.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia#options.
 *
 * @param options - An object containing the options for creating the display and system audio streams.
 * @param options.video - An object containing the video stream options.
 * @param options.video.displayStreamConstructor - Constructor for the local display stream.
 * @param options.video.constraints - Video device constraints.
 * @param options.video.videoContentHint - A hint for the content of the stream.
 * @param options.video.preferCurrentTab - Whether to offer the current tab as the most prominent capture source.
 * @param options.video.selfBrowserSurface - Whether to allow the user to select the current tab for capture.
 * @param options.video.surfaceSwitching - Whether to allow the user to dynamically switch the shared tab during screen-sharing.
 * @param options.video.monitorTypeSurfaces - Whether to offer the user the option to choose display surfaces whose type is monitor.
 * @param options.audio - An object containing the audio stream options. If present, a system audio stream will be created.
 * @param options.audio.systemAudioStreamConstructor - Constructor for the local system audio stream.
 * @param options.audio.constraints - Audio device constraints.
 * @param options.audio.systemAudio - Whether to include the system audio among the possible audio sources offered to the user.
 * @param options.controller - CaptureController to further manipulate the capture session.
 * @returns A Promise that resolves to a LocalDisplayStream and a LocalSystemAudioStream or an
 * error. If no system audio is available, the LocalSystemAudioStream will be resolved as null
 * instead.
 */
function createDisplayMedia(options) {
    return __awaiter$2(this, void 0, void 0, function* () {
        var _a, _b;
        let stream;
        const videoConstraints = options.video.constraints || true;
        const audioConstraints = ((_a = options.audio) === null || _a === void 0 ? void 0 : _a.constraints) || !!options.audio;
        try {
            stream = yield getDisplayMedia({
                video: videoConstraints,
                audio: audioConstraints,
                controller: options.controller,
                preferCurrentTab: options.video.preferCurrentTab,
                selfBrowserSurface: options.video.selfBrowserSurface,
                surfaceSwitching: options.video.surfaceSwitching,
                systemAudio: (_b = options.audio) === null || _b === void 0 ? void 0 : _b.systemAudio,
                monitorTypeSurfaces: options.video.monitorTypeSurfaces,
            });
        }
        catch (error) {
            throw new WebrtcCoreError(exports.WebrtcCoreErrorType.CREATE_STREAM_FAILED, `Failed to create display and/or system audio streams: ${error}`);
        }
        // eslint-disable-next-line new-cap
        const localDisplayStream = new options.video.displayStreamConstructor(new MediaStream(stream.getVideoTracks()));
        if (options.video.videoContentHint) {
            localDisplayStream.contentHint = options.video.videoContentHint;
        }
        let localSystemAudioStream = null;
        if (options.audio && stream.getAudioTracks().length > 0) {
            // eslint-disable-next-line new-cap
            localSystemAudioStream = new options.audio.systemAudioStreamConstructor(new MediaStream(stream.getAudioTracks()));
        }
        return [localDisplayStream, localSystemAudioStream];
    });
}
/**
 * Creates a LocalDisplayStream with the given parameters.
 *
 * @param displayStreamConstructor - Constructor for the local display stream.
 * @param videoContentHint - An optional parameter to give a hint for the content of the stream.
 * @returns A Promise that resolves to a LocalDisplayStream or an error.
 */
function createDisplayStream(displayStreamConstructor, videoContentHint) {
    return __awaiter$2(this, void 0, void 0, function* () {
        const [localDisplayStream] = yield createDisplayMedia({
            video: { displayStreamConstructor, videoContentHint },
        });
        return localDisplayStream;
    });
}
/**
 * Creates a LocalDisplayStream and a LocalSystemAudioStream with the given parameters.
 *
 * @param displayStreamConstructor - Constructor for the local display stream.
 * @param systemAudioStreamConstructor - Constructor for the local system audio stream.
 * @param videoContentHint - An optional parameter to give a hint for the content of the stream.
 * @returns A Promise that resolves to a LocalDisplayStream and a LocalSystemAudioStream or an
 * error. If no system audio is available, the LocalSystemAudioStream will be resolved as null
 * instead.
 */
function createDisplayStreamWithAudio(displayStreamConstructor, systemAudioStreamConstructor, videoContentHint) {
    return __awaiter$2(this, void 0, void 0, function* () {
        return createDisplayMedia({
            video: { displayStreamConstructor, videoContentHint },
            audio: { systemAudioStreamConstructor },
        });
    });
}
/**
 * Enumerates the media input and output devices available.
 *
 * @param deviceKind - Optional filter to return a specific device kind.
 * @returns List of media devices in an array of MediaDeviceInfo objects.
 */
function getDevices(deviceKind) {
    return __awaiter$2(this, void 0, void 0, function* () {
        let devices;
        const deviceKinds = deviceKind
            ? [deviceKind]
            : [DeviceKind$1.AudioInput, DeviceKind$1.VideoInput];
        try {
            devices = yield ensureDevicePermissions(deviceKinds, enumerateDevices);
        }
        catch (error) {
            throw new WebrtcCoreError(exports.WebrtcCoreErrorType.DEVICE_PERMISSION_DENIED, 'Failed to ensure device permissions');
        }
        return devices.filter((v) => (deviceKind ? v.kind === deviceKind : true));
    });
}
/**
 * Helper function to get a list of microphone devices.
 *
 * @returns List of microphone devices in an array of MediaDeviceInfo objects.
 */
function getAudioInputDevices() {
    return __awaiter$2(this, void 0, void 0, function* () {
        return getDevices(DeviceKind$1.AudioInput);
    });
}
/**
 * Helper function to get a list of speaker devices.
 *
 * @returns List of speaker devices in an array of MediaDeviceInfo objects.
 */
function getAudioOutputDevices() {
    return __awaiter$2(this, void 0, void 0, function* () {
        return getDevices(DeviceKind$1.AudioOutput);
    });
}
/**
 * Helper function to get a list of camera devices.
 *
 * @returns List of camera devices in an array of MediaDeviceInfo objects.
 */
function getVideoInputDevices() {
    return __awaiter$2(this, void 0, void 0, function* () {
        return getDevices(DeviceKind$1.VideoInput);
    });
}
/**
 * Export the setOnDeviceChangeHandler method directly from the core lib.
 */
const { setOnDeviceChangeHandler } = media;

var events$1$1 = {exports: {}};

var R$1$1 = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply$1$1 = R$1$1 && typeof R$1$1.apply === 'function'
  ? R$1$1.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };

var ReflectOwnKeys$1$1;
if (R$1$1 && typeof R$1$1.ownKeys === 'function') {
  ReflectOwnKeys$1$1 = R$1$1.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys$1$1 = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys$1$1 = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning$1$1(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN$1$1 = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter$1$1() {
  EventEmitter$1$1.init.call(this);
}
events$1$1.exports = EventEmitter$1$1;
events$1$1.exports.once = once$1$1;

// Backwards-compat with node 0.10.x
EventEmitter$1$1.EventEmitter = EventEmitter$1$1;

EventEmitter$1$1.prototype._events = undefined;
EventEmitter$1$1.prototype._eventsCount = 0;
EventEmitter$1$1.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners$1$1 = 10;

function checkListener$1$1(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter$1$1, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners$1$1;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN$1$1(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners$1$1 = arg;
  }
});

EventEmitter$1$1.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$1$1.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN$1$1(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners$1$1(that) {
  if (that._maxListeners === undefined)
    return EventEmitter$1$1.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter$1$1.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners$1$1(this);
};

EventEmitter$1$1.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply$1$1(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone$1$1(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply$1$1(listeners[i], this, args);
  }

  return true;
};

function _addListener$1$1(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener$1$1(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners$1$1(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning$1$1(w);
    }
  }

  return target;
}

EventEmitter$1$1.prototype.addListener = function addListener(type, listener) {
  return _addListener$1$1(this, type, listener, false);
};

EventEmitter$1$1.prototype.on = EventEmitter$1$1.prototype.addListener;

EventEmitter$1$1.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener$1$1(this, type, listener, true);
    };

function onceWrapper$1$1() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap$1$1(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper$1$1.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter$1$1.prototype.once = function once(type, listener) {
  checkListener$1$1(listener);
  this.on(type, _onceWrap$1$1(this, type, listener));
  return this;
};

EventEmitter$1$1.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener$1$1(listener);
      this.prependListener(type, _onceWrap$1$1(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter$1$1.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener$1$1(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne$1$1(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter$1$1.prototype.off = EventEmitter$1$1.prototype.removeListener;

EventEmitter$1$1.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners$1$1(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners$1$1(evlistener) : arrayClone$1$1(evlistener, evlistener.length);
}

EventEmitter$1$1.prototype.listeners = function listeners(type) {
  return _listeners$1$1(this, type, true);
};

EventEmitter$1$1.prototype.rawListeners = function rawListeners(type) {
  return _listeners$1$1(this, type, false);
};

EventEmitter$1$1.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount$1$1.call(emitter, type);
  }
};

EventEmitter$1$1.prototype.listenerCount = listenerCount$1$1;
function listenerCount$1$1(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter$1$1.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys$1$1(this._events) : [];
};

function arrayClone$1$1(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne$1$1(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners$1$1(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once$1$1(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener$1$1(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter$1$1(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter$1$1(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener$1$1(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener$1$1(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

class EventEmitter$2$1 extends events$1$1.exports.EventEmitter {
}
class TypedEvent$1 {
    constructor() {
        this.emitter = new EventEmitter$2$1();
    }
    on(handler) {
        this.emitter.on('event', handler);
    }
    once(handler) {
        this.emitter.once('event', handler);
    }
    off(handler) {
        this.emitter.off('event', handler);
    }
    emit(...args) {
        this.emitter.emit('event', ...args);
    }
}

function AddEvents(Base) {
    return class WithEvents extends Base {
        on(eventName, handler) {
            this[eventName].on(handler);
        }
        once(eventName, handler) {
            this[eventName].once(handler);
        }
        off(eventName, handler) {
            this[eventName].off(handler);
        }
    };
}

var _a$2$1;
exports.StreamEventNames = void 0;
(function (StreamEventNames) {
    StreamEventNames["Ended"] = "stream-ended";
})(exports.StreamEventNames || (exports.StreamEventNames = {}));
/**
 * Base stream class.
 */
class _Stream {
    /**
     * Create a Stream from the given values.
     *
     * @param stream - The initial output MediaStream for this Stream.
     */
    constructor(stream) {
        // TODO: these should be protected, but we need the helper type in ts-events
        // to hide the 'emit' method from TypedEvent.
        this[_a$2$1] = new TypedEvent$1();
        this.outputStream = stream;
        this.handleTrackEnded = this.handleTrackEnded.bind(this);
        this.addTrackHandlersForStreamEvents(this.outputTrack);
    }
    /**
     * Handler which is called when a track's ended event fires.
     */
    handleTrackEnded() {
        this[exports.StreamEventNames.Ended].emit();
    }
    /**
     * Helper function to add event handlers to a MediaStreamTrack. Unlike the virtual
     * {@link addTrackHandlers} function, which can be overridden, this function is internal to this
     * class and will only add the event handlers relevant to this class. It prevents, for example,
     * accidentally adding the same event handlers multiple times, which could happen if the virtual
     * `addTrackHandlers` method was called from a subclass's constructor.
     *
     * @param track - The MediaStreamTrack.
     */
    addTrackHandlersForStreamEvents(track) {
        track.addEventListener('ended', this.handleTrackEnded);
    }
    /**
     * Add event handlers to a MediaStreamTrack.
     *
     * @param track - The MediaStreamTrack.
     */
    addTrackHandlers(track) {
        this.addTrackHandlersForStreamEvents(track);
    }
    /**
     * Remove event handlers from a MediaStreamTrack.
     *
     * @param track - The MediaStreamTrack.
     */
    removeTrackHandlers(track) {
        track.removeEventListener('ended', this.handleTrackEnded);
    }
    /**
     * Get the ID of the output stream.
     *
     * @returns The ID of the output stream.
     */
    get id() {
        return this.outputStream.id;
    }
    /**
     * Get the track of the output stream.
     *
     * @returns The output track.
     */
    get outputTrack() {
        return this.outputStream.getTracks()[0];
    }
}
_a$2$1 = exports.StreamEventNames.Ended;
const Stream = AddEvents(_Stream);

var _a$1$1, _b, _c, _d, _e;
exports.LocalStreamEventNames = void 0;
(function (LocalStreamEventNames) {
    LocalStreamEventNames["UserMuteStateChange"] = "user-mute-state-change";
    LocalStreamEventNames["SystemMuteStateChange"] = "system-mute-state-change";
    LocalStreamEventNames["ConstraintsChange"] = "constraints-change";
    LocalStreamEventNames["OutputTrackChange"] = "output-track-change";
    LocalStreamEventNames["EffectAdded"] = "effect-added";
})(exports.LocalStreamEventNames || (exports.LocalStreamEventNames = {}));
/**
 * A stream which originates on the local device.
 */
class _LocalStream extends Stream {
    /**
     * Create a LocalStream from the given values.
     *
     * @param stream - The initial output MediaStream for this Stream.
     */
    constructor(stream) {
        super(stream);
        this[_a$1$1] = new TypedEvent$1();
        this[_b] = new TypedEvent$1();
        this[_c] = new TypedEvent$1();
        this[_d] = new TypedEvent$1();
        this[_e] = new TypedEvent$1();
        this.effects = [];
        this.loadingEffects = new Map();
        this.inputStream = stream;
        this.handleTrackMutedBySystem = this.handleTrackMutedBySystem.bind(this);
        this.handleTrackUnmutedBySystem = this.handleTrackUnmutedBySystem.bind(this);
        this.addTrackHandlersForLocalStreamEvents(this.inputTrack);
    }
    /**
     * Handler which is called when a track's mute event fires.
     */
    handleTrackMutedBySystem() {
        this[exports.LocalStreamEventNames.SystemMuteStateChange].emit(true);
    }
    /**
     * Handler which is called when a track's unmute event fires.
     */
    handleTrackUnmutedBySystem() {
        this[exports.LocalStreamEventNames.SystemMuteStateChange].emit(false);
    }
    /**
     * Helper function to add event handlers to a MediaStreamTrack. See
     * {@link Stream.addTrackHandlersForStreamEvents} for why this is useful.
     *
     * @param track - The MediaStreamTrack.
     */
    addTrackHandlersForLocalStreamEvents(track) {
        track.addEventListener('mute', this.handleTrackMutedBySystem);
        track.addEventListener('unmute', this.handleTrackUnmutedBySystem);
    }
    /**
     * @inheritdoc
     */
    addTrackHandlers(track) {
        super.addTrackHandlers(track);
        this.addTrackHandlersForLocalStreamEvents(track);
    }
    /**
     * @inheritdoc
     */
    removeTrackHandlers(track) {
        super.removeTrackHandlers(track);
        track.removeEventListener('mute', this.handleTrackMutedBySystem);
        track.removeEventListener('unmute', this.handleTrackUnmutedBySystem);
    }
    /**
     * Get the track within the MediaStream with which this LocalStream was created.
     *
     * @returns The track within the MediaStream with which this LocalStream
     * was created.
     */
    get inputTrack() {
        return this.inputStream.getTracks()[0];
    }
    /**
     * Check whether or not this stream is muted. This considers both whether the stream has been
     * muted by the user (see {@link userMuted}) and whether the stream has been muted by the system
     * (see {@link systemMuted}).
     *
     * @returns True if the stream is muted, false otherwise.
     */
    get muted() {
        return this.userMuted || this.systemMuted;
    }
    /**
     * Check whether or not this stream has been muted by the user. This is equivalent to checking the
     * MediaStreamTrack "enabled" state.
     *
     * @returns True if the stream has been muted by the user, false otherwise.
     */
    get userMuted() {
        return !this.inputTrack.enabled;
    }
    /**
     * Check whether or not this stream has been muted by the user. This is equivalent to checking the
     * MediaStreamTrack "muted" state.
     *
     * @returns True if the stream has been muted by the system, false otherwise.
     */
    get systemMuted() {
        return this.inputTrack.muted;
    }
    /**
     * Set the user mute state of this stream.
     *
     * Note: This sets the user-toggled mute state, equivalent to changing the "enabled" state of the
     * track. It is separate from the system-toggled mute state.
     *
     * @param isMuted - True to mute, false to unmute.
     */
    setUserMuted(isMuted) {
        if (this.inputTrack.enabled === isMuted) {
            this.inputTrack.enabled = !isMuted;
            this[exports.LocalStreamEventNames.UserMuteStateChange].emit(isMuted);
        }
    }
    /**
     * @inheritdoc
     */
    getSettings() {
        return this.inputTrack.getSettings();
    }
    /**
     * Get the label of the input track on this stream.
     *
     * @returns The label of the track.
     */
    get label() {
        return this.inputTrack.label;
    }
    /**
     * Get the readyState of the input track on this stream.
     *
     * @returns The readyState of the track.
     */
    get readyState() {
        return this.inputTrack.readyState;
    }
    /**
     * Change the track of the output stream to a different track.
     *
     * Note: this method assumes and enforces that if both input and output streams have the same
     * track, then they must also be the same stream.
     *
     * @param newTrack - The track to be used in the output stream.
     */
    changeOutputTrack(newTrack) {
        if (this.outputTrack.id !== newTrack.id) {
            // If the input track and the *old* output track are currently the same, then the streams must
            // be the same too. We want to apply the new track to the output stream without affecting the
            // input stream, so we separate them by setting the input stream to be its own stream.
            if (this.inputTrack.id === this.outputTrack.id) {
                this.inputStream = new MediaStream(this.inputStream);
            }
            this.outputStream.removeTrack(this.outputTrack);
            this.outputStream.addTrack(newTrack);
            // If the input track and the *new* output track are now the same, then we want the streams to
            // be the same too.
            if (this.inputTrack.id === this.outputTrack.id) {
                this.inputStream = this.outputStream;
            }
            this[exports.LocalStreamEventNames.OutputTrackChange].emit(newTrack);
        }
    }
    /**
     * @inheritdoc
     */
    stop() {
        this.inputTrack.stop();
        this.outputTrack.stop();
        this.disposeEffects();
        // calling stop() will not automatically emit Ended, so we emit it here
        this[exports.StreamEventNames.Ended].emit();
    }
    /**
     * Adds an effect to a local stream.
     *
     * @param effect - The effect to add.
     */
    addEffect(effect) {
        return __awaiter$2(this, void 0, void 0, function* () {
            // Check if the effect has already been added.
            if (this.effects.some((e) => e.id === effect.id)) {
                return;
            }
            // Load the effect. Because loading is asynchronous, keep track of the loading effects.
            this.loadingEffects.set(effect.kind, effect);
            yield effect.load(this.outputTrack);
            // After loading, check whether or not we still want to use this effect. If another effect of
            // the same kind was added while this effect was loading, we only want to use the latest effect,
            // so dispose this one. If the effects list was cleared while this effect was loading, also
            // dispose it.
            if (effect !== this.loadingEffects.get(effect.kind)) {
                yield effect.dispose();
                throw new WebrtcCoreError(exports.WebrtcCoreErrorType.ADD_EFFECT_FAILED, `Another effect with kind ${effect.kind} was added while effect ${effect.id} was loading, or the effects list was cleared.`);
            }
            this.loadingEffects.delete(effect.kind);
            /**
             * Handle when the effect's output track has been changed. This will update the input of the
             * next effect in the effects list of the output of the stream.
             *
             * @param track - The new output track of the effect.
             */
            const handleEffectTrackUpdated = (track) => {
                var _f;
                const effectIndex = this.effects.findIndex((e) => e.id === effect.id);
                if (effectIndex === this.effects.length - 1) {
                    this.changeOutputTrack(track);
                }
                else if (effectIndex >= 0) {
                    (_f = this.effects[effectIndex + 1]) === null || _f === void 0 ? void 0 : _f.replaceInputTrack(track);
                }
                else {
                    logger$3.error(`Effect with ID ${effect.id} not found in effects list.`);
                }
            };
            /**
             * Handle when the effect has been disposed. This will remove all event listeners from the
             * effect.
             */
            const handleEffectDisposed = () => {
                effect.off('track-updated', handleEffectTrackUpdated);
                effect.off('disposed', handleEffectDisposed);
            };
            // TODO: using EffectEvent.TrackUpdated or EffectEvent.Disposed will cause the entire
            // web-media-effects lib to be rebuilt and inflates the size of the webrtc-core build, so
            // we use type assertion here as a temporary workaround.
            effect.on('track-updated', handleEffectTrackUpdated);
            effect.on('disposed', handleEffectDisposed);
            // Add the effect to the effects list. If an effect of the same kind has already been added,
            // dispose the existing effect and replace it with the new effect. If the existing effect was
            // enabled, also enable the new effect.
            const existingEffectIndex = this.effects.findIndex((e) => e.kind === effect.kind);
            if (existingEffectIndex >= 0) {
                const [existingEffect] = this.effects.splice(existingEffectIndex, 1, effect);
                if (existingEffect.isEnabled) {
                    // If the existing effect is not the first effect in the effects list, then the input of the
                    // new effect should be the output of the previous effect in the effects list. We know the
                    // output track of the previous effect must exist because it must have been loaded (and all
                    // loaded effects have an output track).
                    const inputTrack = existingEffectIndex === 0
                        ? this.inputTrack
                        : this.effects[existingEffectIndex - 1].getOutputTrack();
                    yield effect.replaceInputTrack(inputTrack);
                    // Enabling the new effect will trigger the track-updated event, which will handle the new
                    // effect's updated output track.
                    yield effect.enable();
                }
                yield existingEffect.dispose();
            }
            else {
                this.effects.push(effect);
            }
            // Emit an event with the effect so others can listen to the effect events.
            this[exports.LocalStreamEventNames.EffectAdded].emit(effect);
        });
    }
    /**
     * Get an effect from the effects list by ID.
     *
     * @param id - The id of the effect you want to get.
     * @returns The effect or undefined.
     */
    getEffectById(id) {
        return this.effects.find((effect) => effect.id === id);
    }
    /**
     * Get an effect from the effects list by kind.
     *
     * @param kind - The kind of the effect you want to get.
     * @returns The effect or undefined.
     */
    getEffectByKind(kind) {
        return this.effects.find((effect) => effect.kind === kind);
    }
    /**
     * Get all the effects from the effects list.
     *
     * @returns A list of effects.
     */
    getEffects() {
        return this.effects;
    }
    /**
     * Method to serialize data about input, output streams
     * and also effects from LocalStream.
     *
     * @returns - A JSON-compatible object representation with data from LocalStream.
     */
    toJSON() {
        return {
            muted: this.muted,
            label: this.label,
            readyState: this.readyState,
            inputStream: {
                active: this.inputStream.active,
                id: this.inputStream.id,
                enabled: this.inputTrack.enabled,
                muted: this.inputTrack.muted,
            },
            outputStream: {
                active: this.outputStream.active,
                id: this.outputStream.id,
            },
            effects: this.effects.map((effect) => {
                return {
                    id: effect.id,
                    kind: effect.kind,
                    isEnabled: effect.isEnabled,
                };
            }),
        };
    }
    /**
     * Cleanup the local effects.
     */
    disposeEffects() {
        return __awaiter$2(this, void 0, void 0, function* () {
            this.loadingEffects.clear();
            // Dispose of any effects currently in use
            if (this.effects.length > 0) {
                this.changeOutputTrack(this.inputTrack);
                yield Promise.all(this.effects.map((effect) => effect.dispose()));
                this.effects = [];
            }
        });
    }
}
_a$1$1 = exports.LocalStreamEventNames.UserMuteStateChange, _b = exports.LocalStreamEventNames.SystemMuteStateChange, _c = exports.LocalStreamEventNames.ConstraintsChange, _d = exports.LocalStreamEventNames.OutputTrackChange, _e = exports.LocalStreamEventNames.EffectAdded;
const LocalStream = AddEvents(_LocalStream);

/**
 * An audio LocalStream.
 */
class LocalAudioStream extends LocalStream {
    /**
     * Apply constraints to the stream.
     *
     * @param constraints - The constraints to apply.
     * @returns A promise which resolves when the constraints have been successfully applied.
     */
    applyConstraints(constraints) {
        return __awaiter$2(this, void 0, void 0, function* () {
            logger$3.log(`Applying constraints to local track:`, constraints);
            return this.inputTrack.applyConstraints(constraints).then(() => {
                this[exports.LocalStreamEventNames.ConstraintsChange].emit();
            });
        });
    }
}

/**
 * A video LocalStream.
 */
class LocalVideoStream extends LocalStream {
    /**
     * Apply constraints to the stream.
     *
     * @param constraints - The constraints to apply.
     * @returns A promise which resolves when the constraints have been successfully applied.
     */
    applyConstraints(constraints) {
        return __awaiter$2(this, void 0, void 0, function* () {
            logger$3.log(`Applying constraints to local track:`, constraints);
            return this.inputTrack.applyConstraints(constraints).then(() => {
                this[exports.LocalStreamEventNames.ConstraintsChange].emit();
            });
        });
    }
    /**
     * Get the content hint for this stream.
     *
     * @returns The content hint setting for this stream, or undefined if none has been set.
     */
    get contentHint() {
        return this.inputTrack.contentHint;
    }
    /**
     * Set the content hint for this stream.
     *
     * @param hint - The content hint to set.
     */
    set contentHint(hint) {
        this.inputTrack.contentHint = hint;
    }
    /**
     * Check the resolution and then return how many layers will be active.
     *
     * @returns The active layers count.
     */
    getNumActiveSimulcastLayers() {
        let activeSimulcastLayersNumber = 0;
        const videoHeight = this.inputTrack.getSettings().height;
        if (videoHeight <= 180) {
            activeSimulcastLayersNumber = 1;
        }
        else if (videoHeight <= 360) {
            activeSimulcastLayersNumber = 2;
        }
        else {
            activeSimulcastLayersNumber = 3;
        }
        return activeSimulcastLayersNumber;
    }
}

/**
 * A local camera stream.
 */
class LocalCameraStream extends LocalVideoStream {
}

/**
 * A local display stream.
 */
class LocalDisplayStream extends LocalVideoStream {
}

/**
 * A local microphone stream.
 */
class LocalMicrophoneStream extends LocalAudioStream {
}

/**
 * A local system audio stream.
 */
class LocalSystemAudioStream extends LocalAudioStream {
}

var _a$6;
exports.RemoteMediaState = void 0;
(function (RemoteMediaState) {
    RemoteMediaState["Started"] = "started";
    RemoteMediaState["Stopped"] = "stopped";
})(exports.RemoteMediaState || (exports.RemoteMediaState = {}));
exports.RemoteStreamEventNames = void 0;
(function (RemoteStreamEventNames) {
    RemoteStreamEventNames["MediaStateChange"] = "media-state-change";
})(exports.RemoteStreamEventNames || (exports.RemoteStreamEventNames = {}));
/**
 * A stream originating from a remote peer.
 */
class _RemoteStream extends Stream {
    /**
     * Create a RemoteStream from the given values.
     *
     * @param stream - The initial output MediaStream for this Stream.
     */
    constructor(stream) {
        super(stream);
        this[_a$6] = new TypedEvent$1();
        this.handleMediaStarted = this.handleMediaStarted.bind(this);
        this.handleMediaStopped = this.handleMediaStopped.bind(this);
        this.outputTrack.addEventListener('mute', this.handleMediaStopped);
        this.outputTrack.addEventListener('unmute', this.handleMediaStarted);
    }
    /**
     * @inheritdoc
     */
    handleMediaStarted() {
        this[exports.RemoteStreamEventNames.MediaStateChange].emit(exports.RemoteMediaState.Started);
    }
    /**
     * @inheritdoc
     */
    handleMediaStopped() {
        this[exports.RemoteStreamEventNames.MediaStateChange].emit(exports.RemoteMediaState.Stopped);
    }
    /**
     * Helper function to add event handlers to a MediaStreamTrack. See
     * {@link Stream.addTrackHandlersForStreamEvents} for why this is useful.
     *
     * @param track - The MediaStreamTrack.
     */
    addTrackHandlersForRemoteStreamEvents(track) {
        track.addEventListener('mute', this.handleMediaStopped);
        track.addEventListener('unmute', this.handleMediaStarted);
    }
    /**
     * @inheritdoc
     */
    addTrackHandlers(track) {
        super.addTrackHandlers(track);
        this.addTrackHandlersForRemoteStreamEvents(track);
    }
    /**
     * @inheritdoc
     */
    removeTrackHandlers(track) {
        super.removeTrackHandlers(track);
        track.removeEventListener('mute', this.handleMediaStopped);
        track.removeEventListener('unmute', this.handleMediaStarted);
    }
    /**
     * Get whether the media on this stream has started or stopped.
     *
     * @returns The state of the media.
     */
    get mediaState() {
        return this.outputTrack.muted ? exports.RemoteMediaState.Stopped : exports.RemoteMediaState.Started;
    }
    /**
     * @inheritdoc
     */
    getSettings() {
        return this.outputTrack.getSettings();
    }
    /**
     * Replace the existing track on the output stream for a new track.
     *
     * @param newTrack - The track to add to the stream.
     */
    replaceTrack(newTrack) {
        const oldTrack = this.outputTrack;
        this.removeTrackHandlers(oldTrack);
        this.outputStream.removeTrack(oldTrack);
        this.outputStream.addTrack(newTrack);
        this.addTrackHandlers(newTrack);
        if (oldTrack.muted !== newTrack.muted) {
            if (newTrack.muted) {
                this.handleMediaStopped();
            }
            else {
                this.handleMediaStarted();
            }
        }
        // TODO: Chrome/React may not automatically refresh the media element with the new track when
        // the output track has changed, so we may need to emit an event here if this is the case.
        // this[StreamEventNames.OutputTrackChange].emit(newTrack);
    }
    /**
     * @inheritdoc
     */
    stop() {
        this.outputTrack.stop();
        // calling stop() will not automatically emit Ended, so we emit it here
        this[exports.StreamEventNames.Ended].emit();
    }
}
_a$6 = exports.RemoteStreamEventNames.MediaStateChange;
const RemoteStream = AddEvents(_RemoteStream);

var commonjsGlobal$3 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs$1 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var es5$1 = {exports: {}};

(function (module, exports) {
!function(e,t){module.exports=t();}(commonjsGlobal$3,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return "NT";case"XP":return "XP";case"NT 5.0":return "2000";case"NT 5.1":return "XP";case"NT 5.2":return "2003";case"NT 6.0":return "Vista";case"NT 6.1":return "7";case"NT 6.2":return "8";case"NT 6.3":return "8.1";case"NT 10.0":return "10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1;}else if(u[0][a]<u[1][a])return -1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t];}));};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default;},18:function(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default;},91:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1);})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default;},92:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default;},93:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return {name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return {name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default;},94:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return {type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "blackberry"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return "bada"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "windows phone"===e.getBrowserName()},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(!0)&&t>=3},describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return "android"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "macos"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return "windows"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "linux"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "playstation 4"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}},{test:function(e){return "roku"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default;},95:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return "microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return {name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default;}})}));
}(es5$1));

var Bowser$1 = /*@__PURE__*/getDefaultExportFromCjs$1(es5$1.exports);

var BrowserName$1;
(function (BrowserName) {
    BrowserName["CHROME"] = "Chrome";
    BrowserName["FIREFOX"] = "Firefox";
    BrowserName["EDGE"] = "Microsoft Edge";
    BrowserName["SAFARI"] = "Safari";
})(BrowserName$1 || (BrowserName$1 = {}));
class BrowserInfo$1 {
    static getBrowserDetails() {
        return this.browser.getBrowser();
    }
    static getOSDetails() {
        return this.browser.getOS();
    }
    static getPlatformDetails() {
        return this.browser.getPlatform();
    }
    static getEngineDetails() {
        return this.browser.getEngine();
    }
    static isChrome() {
        return this.browser.getBrowserName() === BrowserName$1.CHROME;
    }
    static isFirefox() {
        return this.browser.getBrowserName() === BrowserName$1.FIREFOX;
    }
    static isEdge() {
        return this.browser.getBrowserName() === BrowserName$1.EDGE;
    }
    static isSafari() {
        return this.browser.getBrowserName() === BrowserName$1.SAFARI;
    }
    static isVersionGreaterThan(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `>${version}` };
        return this.browser.satisfies(checkTree);
    }
    static isVersionGreaterThanOrEqualTo(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `>=${version}` };
        return this.browser.satisfies(checkTree);
    }
    static isVersionLessThan(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `<${version}` };
        return this.browser.satisfies(checkTree);
    }
    static isVersionLessThanOrEqualTo(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `<=${version}` };
        return this.browser.satisfies(checkTree);
    }
    static isSubVersionOf(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `~${version}` };
        return this.browser.satisfies(checkTree);
    }
}
BrowserInfo$1.browser = Bowser$1.getParser(window.navigator.userAgent);

var CapabilityState$1;
(function (CapabilityState) {
    CapabilityState["NOT_CAPABLE"] = "not capable";
    CapabilityState["CAPABLE"] = "capable";
    CapabilityState["UNKNOWN"] = "unknown";
})(CapabilityState$1 || (CapabilityState$1 = {}));

var events$2 = {exports: {}};

var R$2 = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply$2 = R$2 && typeof R$2.apply === 'function'
  ? R$2.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };

var ReflectOwnKeys$2;
if (R$2 && typeof R$2.ownKeys === 'function') {
  ReflectOwnKeys$2 = R$2.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys$2 = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys$2 = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning$2(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN$2 = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter$1$2() {
  EventEmitter$1$2.init.call(this);
}
events$2.exports = EventEmitter$1$2;
events$2.exports.once = once$3;

// Backwards-compat with node 0.10.x
EventEmitter$1$2.EventEmitter = EventEmitter$1$2;

EventEmitter$1$2.prototype._events = undefined;
EventEmitter$1$2.prototype._eventsCount = 0;
EventEmitter$1$2.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners$2 = 10;

function checkListener$2(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter$1$2, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners$2;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN$2(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners$2 = arg;
  }
});

EventEmitter$1$2.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$1$2.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN$2(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners$2(that) {
  if (that._maxListeners === undefined)
    return EventEmitter$1$2.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter$1$2.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners$2(this);
};

EventEmitter$1$2.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply$2(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone$2(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply$2(listeners[i], this, args);
  }

  return true;
};

function _addListener$2(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener$2(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners$2(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning$2(w);
    }
  }

  return target;
}

EventEmitter$1$2.prototype.addListener = function addListener(type, listener) {
  return _addListener$2(this, type, listener, false);
};

EventEmitter$1$2.prototype.on = EventEmitter$1$2.prototype.addListener;

EventEmitter$1$2.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener$2(this, type, listener, true);
    };

function onceWrapper$2() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap$2(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper$2.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter$1$2.prototype.once = function once(type, listener) {
  checkListener$2(listener);
  this.on(type, _onceWrap$2(this, type, listener));
  return this;
};

EventEmitter$1$2.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener$2(listener);
      this.prependListener(type, _onceWrap$2(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter$1$2.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener$2(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne$2(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter$1$2.prototype.off = EventEmitter$1$2.prototype.removeListener;

EventEmitter$1$2.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners$2(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners$2(evlistener) : arrayClone$2(evlistener, evlistener.length);
}

EventEmitter$1$2.prototype.listeners = function listeners(type) {
  return _listeners$2(this, type, true);
};

EventEmitter$1$2.prototype.rawListeners = function rawListeners(type) {
  return _listeners$2(this, type, false);
};

EventEmitter$1$2.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount$2.call(emitter, type);
  }
};

EventEmitter$1$2.prototype.listenerCount = listenerCount$2;
function listenerCount$2(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter$1$2.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys$2(this._events) : [];
};

function arrayClone$2(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne$2(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners$2(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once$3(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener$2(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter$2(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter$2(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener$2(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener$2(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

/**
 *  Typed event emitter class.
 */
class EventEmitter$4 extends events$2.exports.EventEmitter {
}

// Overall connection state (based on the ICE and DTLS connection states)
exports.ConnectionState = void 0;
(function (ConnectionState) {
    ConnectionState["New"] = "New";
    ConnectionState["Closed"] = "Closed";
    ConnectionState["Connected"] = "Connected";
    ConnectionState["Connecting"] = "Connecting";
    ConnectionState["Disconnected"] = "Disconnected";
    ConnectionState["Failed"] = "Failed";
})(exports.ConnectionState || (exports.ConnectionState = {}));
var ConnectionStateEvents;
(function (ConnectionStateEvents) {
    ConnectionStateEvents["PeerConnectionStateChanged"] = "PeerConnectionStateChanged";
    ConnectionStateEvents["IceConnectionStateChanged"] = "IceConnectionStateChanged";
})(ConnectionStateEvents || (ConnectionStateEvents = {}));
/**
 * Listens on the connection's ICE and DTLS state changes and emits a single
 * event that summarizes all the internal states into a single overall connection state.
 */
class ConnectionStateHandler extends EventEmitter$4 {
    /**
     * Creates an instance of ConnectionStateHandler.
     *
     * @param getCurrentStatesCallback - Callback for getting the connection state information
     *                                   from the peer connection.
     */
    constructor(getCurrentStatesCallback) {
        super();
        this.getCurrentStatesCallback = getCurrentStatesCallback;
    }
    /**
     * Handler for connection state change.
     */
    onPeerConnectionStateChange() {
        const state = this.getPeerConnectionState();
        this.emit(ConnectionStateEvents.PeerConnectionStateChanged, state);
    }
    /**
     * Handler for ice connection state change.
     */
    onIceConnectionStateChange() {
        const state = this.getIceConnectionState();
        this.emit(ConnectionStateEvents.IceConnectionStateChanged, state);
    }
    /**
     * Evaluates the overall connection state based on peer connection's
     * connectionState and iceConnectionState.
     *
     * @returns Current overall connection state.
     */
    evaluateMediaConnectionState() {
        const { connectionState, iceState } = this.getCurrentStatesCallback();
        const connectionStates = [connectionState, iceState];
        let mediaConnectionState;
        if (connectionStates.every((value) => value === 'new')) {
            mediaConnectionState = exports.ConnectionState.New;
        }
        else if (connectionStates.some((value) => value === 'closed')) {
            mediaConnectionState = exports.ConnectionState.Closed;
        }
        else if (connectionStates.some((value) => value === 'failed')) {
            mediaConnectionState = exports.ConnectionState.Failed;
        }
        else if (connectionStates.some((value) => value === 'disconnected')) {
            mediaConnectionState = exports.ConnectionState.Disconnected;
        }
        else if (connectionStates.every((value) => value === 'connected' || value === 'completed')) {
            mediaConnectionState = exports.ConnectionState.Connected;
        }
        else {
            mediaConnectionState = exports.ConnectionState.Connecting;
        }
        logger$3.log(`iceConnectionState=${iceState} connectionState=${connectionState} => ${mediaConnectionState}`);
        return mediaConnectionState;
    }
    /**
     * Gets current connection state.
     *
     * @returns Current connection state.
     */
    getPeerConnectionState() {
        const { connectionState } = this.getCurrentStatesCallback();
        return connectionState;
    }
    /**
     * Gets current ice connection state.
     *
     * @returns Current ice connection state.
     */
    getIceConnectionState() {
        const { iceState } = this.getCurrentStatesCallback();
        return iceState;
    }
    /**
     * Gets current overall connection state.
     *
     * @returns Current overall connection state.
     */
    getConnectionState() {
        return this.evaluateMediaConnectionState();
    }
}
ConnectionStateHandler.Events = ConnectionStateEvents;

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

let logDisabled_ = true;
let deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    const wrappedCallback = (e) => {
      const modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  const nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get() {
      return this['_on' + eventNameToWrap];
    },
    set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return (bool) ? 'adapter.js logging disabled' :
      'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}

function log() {
  if (typeof window === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
      ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  const result = {browser: null, version: null};

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }

  const {navigator} = window;

  if (navigator.mozGetUserMedia) { // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent,
        /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia ||
      (window.isSecureContext === false && window.webkitRTCPeerConnection)) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent,
        /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (window.RTCPeerConnection &&
      navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent,
        /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&
        'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else { // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }

  return Object.keys(data).reduce(function(accumulator, key) {
    const isObj = isObject(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, {[key]: value});
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(name => {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(id => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  const filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  const trackStats = [];
  result.forEach(value => {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(trackStat => {
    result.forEach(stats => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
const logging = log;

function shimGetUserMedia$2(window, browserDetails) {
  const navigator = window && window.navigator;

  if (!navigator.mediaDevices) {
    return;
  }

  const constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    const cc = {};
    Object.keys(c).forEach(key => {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      const oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        let oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(mix => {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  const shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      const remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      let face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      const getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
          .then(devices => {
            devices = devices.filter(d => d.kind === 'videoinput');
            let dev = devices.find(d => matches.some(match =>
              d.label.toLowerCase().includes(match)));
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
                                                        {ideal: dev.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  const shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  const getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, c => {
      navigator.webkitGetUserMedia(c, onSuccess, e => {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(track => {
            track.stop();
          });
          throw new DOMException('', 'NotFoundError');
        }
        return stream;
      }, e => Promise.reject(shimError_(e))));
    };
  }
}

/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
function shimGetDisplayMedia$1(window, getSourceId) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' +
        'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      return getSourceId(constraints)
        .then(sourceId => {
          const widthSpecified = constraints.video && constraints.video.width;
          const heightSpecified = constraints.video &&
            constraints.video.height;
          const frameRateSpecified = constraints.video &&
            constraints.video.frameRate;
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: frameRateSpecified || 3
            }
          };
          if (widthSpecified) {
            constraints.video.mandatory.maxWidth = widthSpecified;
          }
          if (heightSpecified) {
            constraints.video.mandatory.maxHeight = heightSpecified;
          }
          return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}

function shimOnTrack$1(window) {
  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
      window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get() {
        return this._ontrack;
      },
      set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        if (!this._ontrackpoly) {
          this._ontrackpoly = (e) => {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', te => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === te.track.id);
              } else {
                receiver = {track: te.track};
              }

              const event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(track => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === track.id);
              } else {
                receiver = {track};
              }
              const event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
          };
          this.addEventListener('addstream', this._ontrackpoly);
        }
        return origSetRemoteDescription.apply(this, arguments);
      };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    wrapPeerConnectionEvent(window, 'track', e => {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver',
          {value: {receiver: e.receiver}});
      }
      return e;
    });
  }
}

function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (typeof window === 'object' && window.RTCPeerConnection &&
      !('getSenders' in window.RTCPeerConnection.prototype) &&
      'createDTMFSender' in window.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function(pc, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };
      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack =
        function addTrack(track, stream) {
          let sender = origAddTrack.apply(this, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(this, track);
            this._senders.push(sender);
          }
          return sender;
        };

      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack =
        function removeTrack(sender) {
          origRemoveTrack.apply(this, arguments);
          const idx = this._senders.indexOf(sender);
          if (idx !== -1) {
            this._senders.splice(idx, 1);
          }
        };
    }
    const origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };

    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        this._senders = this._senders || [];
        origRemoveStream.apply(this, [stream]);

        stream.getTracks().forEach(track => {
          const sender = this._senders.find(s => s.track === track);
          if (sender) { // remove sender
            this._senders.splice(this._senders.indexOf(sender), 1);
          }
        });
      };
  } else if (typeof window === 'object' && window.RTCPeerConnection &&
             'getSenders' in window.RTCPeerConnection.prototype &&
             'createDTMFSender' in window.RTCPeerConnection.prototype &&
             window.RTCRtpSender &&
             !('dtmf' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };

    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}

function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }

  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 ||
        typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }

    const fixChromeStats_ = function(response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach(report => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(name => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });

      return standardReport;
    };

    // shim getStats with maplike support
    const makeMapStats = function(stats) {
      return new Map(Object.keys(stats).map(key => [key, stats[key]]));
    };

    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };

      return origGetStats.apply(this, [successCallbackWrapper_,
        selector]);
    }

    // promise-support
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [
        function(response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        }, reject]);
    }).then(onSucc, onErr);
  };
}

function shimSenderReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }

    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then(result =>
        /* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */
        filterStats(result, sender.track, true));
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers =
        function getReceivers() {
          const receivers = origGetReceivers.apply(this, []);
          receivers.forEach(receiver => receiver._pc = this);
          return receivers;
        };
    }
    wrapPeerConnectionEvent(window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then(result =>
        filterStats(result, receiver.track, false));
    };
  }

  if (!('getStats' in window.RTCRtpSender.prototype &&
      'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 &&
        arguments[0] instanceof window.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach(s => {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(r => {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || (sender && receiver)) {
        return Promise.reject(new DOMException(
          'There are more than one sender or receiver for the track.',
          'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException(
        'There is no sender or receiver for the track.',
        'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}

function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams)
        .map(streamId => this._shimmedLocalStreams[streamId][0]);
    };

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      const sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders()
      .filter(newSender => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(streamId => {
          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            this._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (this._shimmedLocalStreams[streamId].length === 1) {
            delete this._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
}

function shimAddTrackRemoveTrack(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack &&
      browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  const origGetLocalStreams = window.RTCPeerConnection.prototype
      .getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      const nativeStreams = origGetLocalStreams.apply(this);
      this._reverseStreams = this._reverseStreams || {};
      return nativeStreams.map(stream => this._reverseStreams[stream.id]);
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      const newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};

      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);
      delete this._reverseStreams[(this._streams[stream.id] ?
          this._streams[stream.id].id : stream.id)];
      delete this._streams[stream.id];
    };

  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      const streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(t => t === track)) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }

      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      const oldStream = this._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(() => {
          this.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        const newStream = new window.MediaStream([track]);
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        this.addStream(newStream);
      }
      return this.getSenders().find(s => s.track === track);
    };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
          externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
          internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function(method) {
    const nativeMethod = window.RTCPeerConnection.prototype[method];
    const methodObj = {[method]() {
      const args = arguments;
      const isLegacyCall = arguments.length &&
          typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [
          (description) => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          },
          (err) => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          }, arguments[2]
        ]);
      }
      return nativeMethod.apply(this, arguments)
      .then(description => replaceInternalStreamId(this, description));
    }};
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });

  const origSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(this, arguments);
      }
      arguments[0] = replaceExternalStreamId(this, arguments[0]);
      return origSetLocalDescription.apply(this, arguments);
    };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  const origLocalDescription = Object.getOwnPropertyDescriptor(
      window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype,
      'localDescription', {
        get() {
          const description = origLocalDescription.get.apply(this);
          if (description.type === '') {
            return description;
          }
          return replaceInternalStreamId(this, description);
        }
      });

  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      const isLocal = sender._pc === this;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
            'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      this._streams = this._streams || {};
      let stream;
      Object.keys(this._streams).forEach(streamid => {
        const hasTrack = this._streams[streamid].getTracks()
          .find(track => sender.track === track);
        if (hasTrack) {
          stream = this._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          this.removeStream(this._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        this.dispatchEvent(new Event('negotiationneeded'));
      }
    };
}

function shimPeerConnection$1(window, browserDetails) {
  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window, browserDetails) {
  wrapPeerConnectionEvent(window, 'negotiationneeded', e => {
    const pc = e.target;
    if (browserDetails.version < 72 || (pc.getConfiguration &&
        pc.getConfiguration().sdpSemantics === 'plan-b')) {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}

var chromeShim = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimMediaStream: shimMediaStream,
    shimOnTrack: shimOnTrack$1,
    shimGetSendersWithDtmf: shimGetSendersWithDtmf,
    shimGetStats: shimGetStats,
    shimSenderReceiverGetStats: shimSenderReceiverGetStats,
    shimAddTrackRemoveTrackWithNative: shimAddTrackRemoveTrackWithNative,
    shimAddTrackRemoveTrack: shimAddTrackRemoveTrack,
    shimPeerConnection: shimPeerConnection$1,
    fixNegotiationNeeded: fixNegotiationNeeded,
    shimGetUserMedia: shimGetUserMedia$2,
    shimGetDisplayMedia: shimGetDisplayMedia$1
});

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

function shimGetUserMedia$1(window, browserDetails) {
  const navigator = window && window.navigator;
  const MediaStreamTrack = window && window.MediaStreamTrack;

  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    deprecated('navigator.getUserMedia',
        'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };

  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    const remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints =
        MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}

/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      if (!(constraints && constraints.video)) {
        const err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCTrackEvent &&
      ('receiver' in window.RTCTrackEvent.prototype) &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimPeerConnection(window, browserDetails) {
  if (typeof window !== 'object' ||
      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }
  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }

  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }

  const modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };

  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null])
      .then(stats => {
        if (browserDetails.version < 53 && !onSucc) {
          // Shim only promise getStats with spec-hyphens in type names
          // Leave callback version alone; misc old uses of forEach before Map
          try {
            stats.forEach(stat => {
              stat.type = modernStatsTypes[stat.type] || stat.type;
            });
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e;
            }
            // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
            stats.forEach((stat, i) => {
              stats.set(i, Object.assign({}, stat, {
                type: modernStatsTypes[stat.type] || stat.type
              }));
            });
          }
        }
        return stats;
      })
      .then(onSucc, onErr);
  };
}

function shimSenderGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
  }

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) :
        Promise.resolve(new Map());
  };
}

function shimReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach(receiver => receiver._pc = this);
      return receivers;
    };
  }
  wrapPeerConnectionEvent(window, 'track', e => {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}

function shimRemoveStream(window) {
  if (!window.RTCPeerConnection ||
      'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      deprecated('removeStream', 'removeTrack');
      this.getSenders().forEach(sender => {
        if (sender.track && stream.getTracks().includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
}

function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}

function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver =
      function addTransceiver() {
        this.setParametersPromises = [];
        // WebIDL input coercion and validation
        let sendEncodings = arguments[1] && arguments[1].sendEncodings;
        if (sendEncodings === undefined) {
          sendEncodings = [];
        }
        sendEncodings = [...sendEncodings];
        const shouldPerformCheck = sendEncodings.length > 0;
        if (shouldPerformCheck) {
          // If sendEncodings params are provided, validate grammar
          sendEncodings.forEach((encodingParam) => {
            if ('rid' in encodingParam) {
              const ridRegex = /^[a-z0-9]{0,16}$/i;
              if (!ridRegex.test(encodingParam.rid)) {
                throw new TypeError('Invalid RID value provided.');
              }
            }
            if ('scaleResolutionDownBy' in encodingParam) {
              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                throw new RangeError('scale_resolution_down_by must be >= 1.0');
              }
            }
            if ('maxFramerate' in encodingParam) {
              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                throw new RangeError('max_framerate must be >= 0.0');
              }
            }
          });
        }
        const transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
          // Check if the init options were applied. If not we do this in an
          // asynchronous way and save the promise reference in a global object.
          // This is an ugly hack, but at the same time is way more robust than
          // checking the sender parameters before and after the createOffer
          // Also note that after the createoffer we are not 100% sure that
          // the params were asynchronously applied so we might miss the
          // opportunity to recreate offer.
          const {sender} = transceiver;
          const params = sender.getParameters();
          if (!('encodings' in params) ||
              // Avoid being fooled by patched getParameters() below.
              (params.encodings.length === 1 &&
               Object.keys(params.encodings[0]).length === 0)) {
            params.encodings = sendEncodings;
            sender.sendEncodings = sendEncodings;
            this.setParametersPromises.push(sender.setParameters(params)
              .then(() => {
                delete sender.sendEncodings;
              }).catch(() => {
                delete sender.sendEncodings;
              })
            );
          }
        }
        return transceiver;
      };
  }
}

function shimGetParameters(window) {
  if (!(typeof window === 'object' && window.RTCRtpSender)) {
    return;
  }
  const origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters =
      function getParameters() {
        const params = origGetParameters.apply(this, arguments);
        if (!('encodings' in params)) {
          params.encodings = [].concat(this.sendEncodings || [{}]);
        }
        return params;
      };
  }
}

function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateOffer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}

function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateAnswer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}

var firefoxShim = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimOnTrack: shimOnTrack,
    shimPeerConnection: shimPeerConnection,
    shimSenderGetStats: shimSenderGetStats,
    shimReceiverGetStats: shimReceiverGetStats,
    shimRemoveStream: shimRemoveStream,
    shimRTCDataChannel: shimRTCDataChannel,
    shimAddTransceiver: shimAddTransceiver,
    shimGetParameters: shimGetParameters,
    shimCreateOffer: shimCreateOffer,
    shimCreateAnswer: shimCreateAnswer,
    shimGetUserMedia: shimGetUserMedia$1,
    shimGetDisplayMedia: shimGetDisplayMedia
});

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

function shimLocalStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams =
      function getLocalStreams() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    const _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,
        stream));
      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,
        stream));
    };

    window.RTCPeerConnection.prototype.addTrack =
      function addTrack(track, ...streams) {
        if (streams) {
          streams.forEach((stream) => {
            if (!this._localStreams) {
              this._localStreams = [stream];
            } else if (!this._localStreams.includes(stream)) {
              this._localStreams.push(stream);
            }
          });
        }
        return _addTrack.apply(this, arguments);
      };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        const index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        const tracks = stream.getTracks();
        this.getSenders().forEach(sender => {
          if (tracks.includes(sender.track)) {
            this.removeTrack(sender);
          }
        });
      };
  }
}

function shimRemoteStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams =
      function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get() {
        return this._onaddstream;
      },
      set(f) {
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = (e) => {
          e.streams.forEach(stream => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            const event = new Event('addstream');
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        const pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(stream => {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              const event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
  }
}

function shimCallbacksAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  const prototype = window.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;

  prototype.createOffer =
    function createOffer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  prototype.createAnswer =
    function createAnswer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  let withCallback = function(description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;

  withCallback = function(description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;

  withCallback = function(candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    const mediaDevices = navigator.mediaDevices;
    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = (constraints) => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }

  if (!navigator.getUserMedia && navigator.mediaDevices &&
    navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints)
      .then(cb, errcb);
    }.bind(navigator);
  }
}

function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({},
      constraints,
      {video: compactObject(constraints.video)}
    );
  }

  return constraints;
}

function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  const OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection =
    function RTCPeerConnection(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        const newIceServers = [];
        for (let i = 0; i < pcConfig.iceServers.length; i++) {
          let server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') &&
              server.hasOwnProperty('url')) {
            deprecated('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}

function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (typeof window === 'object' && window.RTCTrackEvent &&
      'receiver' in window.RTCTrackEvent.prototype &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimCreateOfferLegacy(window) {
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer =
    function createOffer(offerOptions) {
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio =
            !!offerOptions.offerToReceiveAudio;
        }
        const audioTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'audio');
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          this.addTransceiver('audio', {direction: 'recvonly'});
        }

        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo =
            !!offerOptions.offerToReceiveVideo;
        }
        const videoTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'video');
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('sendonly');
            } else {
              videoTransceiver.direction = 'sendonly';
            }
          } else if (videoTransceiver.direction === 'recvonly') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('inactive');
            } else {
              videoTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          this.addTransceiver('video', {direction: 'recvonly'});
        }
      }
      return origCreateOffer.apply(this, arguments);
    };
}

function shimAudioContext(window) {
  if (typeof window !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}

var safariShim = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimLocalStreamsAPI: shimLocalStreamsAPI,
    shimRemoteStreamsAPI: shimRemoteStreamsAPI,
    shimCallbacksAPI: shimCallbacksAPI,
    shimGetUserMedia: shimGetUserMedia,
    shimConstraints: shimConstraints,
    shimRTCIceServerUrls: shimRTCIceServerUrls,
    shimTrackEventTransceiver: shimTrackEventTransceiver,
    shimCreateOfferLegacy: shimCreateOfferLegacy,
    shimAudioContext: shimAudioContext
});

var sdp$1 = {exports: {}};

/* eslint-env node */

(function (module) {

// SDP helpers.
const SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(line => line.trim());
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  const parts = blob.split('\nm=');
  return parts.map((part, index) => (index > 0 ?
    'm=' + part : part).trim() + '\r\n');
};

// Returns the session description.
SDPUtils.getDescription = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// Returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate = function(line) {
  let parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  const candidate = {
    foundation: parts[0],
    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7],
  };

  for (let i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate = function(candidate) {
  const sdp = [];
  sdp.push(candidate.foundation);

  const component = candidate.component;
  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  const type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  let parts = line.substr(9).split(' ');
  const parsed = {
    payloadType: parseInt(parts.shift(), 10), // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  const channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  const parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1],
  };
};

// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  const parsed = {};
  let kv;
  const parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (let j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  let line = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    const params = [];
    Object.keys(codec.parameters).forEach(param => {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  const parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' '),
  };
};

// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  let lines = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(fb => {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  const sp = line.indexOf(' ');
  const parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10),
  };
  const colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup = function(line) {
  const parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),
  };
};

// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint = function(line) {
  const parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint),
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  let sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(fp => {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  const parts = line.substr(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  const parts = keyParams.substr(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES parameters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substr(12),
    password: pwd.substr(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }
  return sdp;
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  const description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: [],
  };
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    const pt = mline[i];
    const rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      const codec = SDPUtils.parseRtpMap(rtpmapline);
      const fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  let sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(codec => {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(codec => {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  let maxptime = 0;
  caps.codecs.forEach(codec => {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(extension => {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  const encodingParameters = [];
  const description = SDPUtils.parseRtpParameters(mediaSection);
  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(parts => parts.attribute === 'cname');
  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  let secondarySsrc;

  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(line => {
      const parts = line.substr(17).split(' ');
      return parts.map(part => parseInt(part, 10));
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(codec => {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      let encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc,
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(params => {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  const rtcpParameters = {};

  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(obj => obj.attribute === 'cname')[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function(rtcpParameters) {
  let sdp = '';
  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }
  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }
  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc +
      ' cname:' + rtcpParameters.cname + '\r\n';
  }
  return sdp;
};


// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  let parts;
  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(msidParts => msidParts.attribute === 'msid');
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  const mline = SDPUtils.parseMLine(mediaSection);
  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  let maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize,
    };
  }
  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    const parts = sctpMapLines[0]
      .substr(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize,
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  let output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n',
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n',
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  let sessionId;
  const version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  const user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  const lines = SDPUtils.splitLines(mediaSection);
  for (let i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' '),
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  const parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5],
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  const lines = SDPUtils.splitLines(blob);
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
{
  module.exports = SDPUtils;
}
}(sdp$1));

var SDPUtils = sdp$1.exports;

var sdp = /*#__PURE__*/_mergeNamespaces$1({
    __proto__: null,
    'default': SDPUtils
}, [sdp$1.exports]);

/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
      window.RTCIceCandidate.prototype)) {
    return;
  }

  const NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (typeof args === 'object' && args.candidate &&
        args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substr(2);
    }

    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);
      const augmentedCandidate = Object.assign(nativeCandidate,
          parsedCandidate);

      // Add a serializer that does not serialize the extra attributes.
      augmentedCandidate.toJSON = function toJSON() {
        return {
          candidate: augmentedCandidate.candidate,
          sdpMid: augmentedCandidate.sdpMid,
          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
          usernameFragment: augmentedCandidate.usernameFragment,
        };
      };
      return augmentedCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  wrapPeerConnectionEvent(window, 'icecandidate', e => {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}

function shimMaxMessageSize(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }

  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }

  const sctpInDescription = function(description) {
    if (!description || !description.sdp) {
      return false;
    }
    const sections = SDPUtils.splitSections(description.sdp);
    sections.shift();
    return sections.some(mediaSection => {
      const mLine = SDPUtils.parseMLine(mediaSection);
      return mLine && mLine.kind === 'application'
          && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };

  const getRemoteFirefoxVersion = function(description) {
    // TODO: Is there a better solution for detecting Firefox?
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    const version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };

  const getCanSendMaxMessageSize = function(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    let canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize =
          browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };

  const getMaxMessageSize = function(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    let maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox'
         && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }

    const match = SDPUtils.matchPrefix(description.sdp,
      'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substr(19), 10);
    } else if (browserDetails.browser === 'firefox' &&
                remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };

  const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
    function setRemoteDescription() {
      this._sctp = null;
      // Chrome decided to not expose .sctp in plan-b mode.
      // As usual, adapter.js has to do an 'ugly worakaround'
      // to cover up the mess.
      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
        const {sdpSemantics} = this.getConfiguration();
        if (sdpSemantics === 'plan-b') {
          Object.defineProperty(this, 'sctp', {
            get() {
              return typeof this._sctp === 'undefined' ? null : this._sctp;
            },
            enumerable: true,
            configurable: true,
          });
        }
      }

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        const isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        const canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        let maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        const sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get() {
            return maxMessageSize;
          }
        });
        this._sctp = sctp;
      }

      return origSetRemoteDescription.apply(this, arguments);
    };
}

function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection &&
      'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    const origDataChannelSend = dc.send;
    dc.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' &&
          pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' +
          pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  const origCreateDataChannel =
    window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel =
    function createDataChannel() {
      const dataChannel = origCreateDataChannel.apply(this, arguments);
      wrapDcSend(dataChannel, this);
      return dataChannel;
    };
  wrapPeerConnectionEvent(window, 'datachannel', e => {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}


/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection ||
      'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange',
            this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange',
            this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });

  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {
    const origMethod = proto[method];
    proto[method] = function() {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = e => {
          const pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            const newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange',
          this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}

function removeExtmapAllowMixed(window, browserDetails) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
  function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      const sdp = desc.sdp.split('\n').filter((line) => {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
      // Safari enforces read-only-ness of RTCSessionDescription fields.
      if (window.RTCSessionDescription &&
          desc instanceof window.RTCSessionDescription) {
        arguments[0] = new window.RTCSessionDescription({
          type: desc.type,
          sdp,
        });
      } else {
        desc.sdp = sdp;
      }
    }
    return nativeSRD.apply(this, arguments);
  };
}

function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
  // Support for addIceCandidate(null or undefined)
  // as well as addIceCandidate({candidate: "", ...})
  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
  // Note: must be called before other polyfills which change the signature.
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeAddIceCandidate =
      window.RTCPeerConnection.prototype.addIceCandidate;
  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      // Native support for ignoring exists for Chrome M77+.
      // Safari ignores as well, exact version unknown but works in the same
      // version that also ignores addIceCandidate(null).
      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)
           || (browserDetails.browser === 'firefox'
               && browserDetails.version < 68)
           || (browserDetails.browser === 'safari'))
          && arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
}

// Note: Make sure to call this ahead of APIs that modify
// setLocalDescription.length
function shimParameterlessSetLocalDescription(window, browserDetails) {
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      let desc = arguments[0] || {};
      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {
        return nativeSetLocalDescription.apply(this, arguments);
      }
      // The remaining steps should technically happen when SLD comes off the
      // RTCPeerConnection's operations chain (not ahead of going on it), but
      // this is too difficult to shim. Instead, this shim only covers the
      // common case where the operations chain is empty. This is imperfect, but
      // should cover many cases. Rationale: Even if we can't reduce the glare
      // window to zero on imperfect implementations, there's value in tapping
      // into the perfect negotiation pattern that several browsers support.
      desc = {type: desc.type, sdp: desc.sdp};
      if (!desc.type) {
        switch (this.signalingState) {
          case 'stable':
          case 'have-local-offer':
          case 'have-remote-pranswer':
            desc.type = 'offer';
            break;
          default:
            desc.type = 'answer';
            break;
        }
      }
      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {
        return nativeSetLocalDescription.apply(this, [desc]);
      }
      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
      return func.apply(this)
        .then(d => nativeSetLocalDescription.apply(this, [d]));
    };
}

var commonShim = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimRTCIceCandidate: shimRTCIceCandidate,
    shimMaxMessageSize: shimMaxMessageSize,
    shimSendThrowTypeError: shimSendThrowTypeError,
    shimConnectionState: shimConnectionState,
    removeExtmapAllowMixed: removeExtmapAllowMixed,
    shimAddIceCandidateNullOrEmpty: shimAddIceCandidateNullOrEmpty,
    shimParameterlessSetLocalDescription: shimParameterlessSetLocalDescription
});

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

// Shimming starts here.
function adapterFactory({window} = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimSafari: true,
}) {
  // Utils.
  const logging = log;
  const browserDetails = detectBrowser(window);

  const adapter = {
    browserDetails,
    commonShim,
    extractVersion: extractVersion,
    disableLog: disableLog,
    disableWarnings: disableWarnings,
    // Expose sdp as a convenience. For production apps include directly.
    sdp,
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!chromeShim || !shimPeerConnection$1 ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = chromeShim;

      // Must be called before shimPeerConnection.
      shimAddIceCandidateNullOrEmpty(window, browserDetails);
      shimParameterlessSetLocalDescription(window);

      shimGetUserMedia$2(window, browserDetails);
      shimMediaStream(window);
      shimPeerConnection$1(window, browserDetails);
      shimOnTrack$1(window);
      shimAddTrackRemoveTrack(window, browserDetails);
      shimGetSendersWithDtmf(window);
      shimGetStats(window);
      shimSenderReceiverGetStats(window);
      fixNegotiationNeeded(window, browserDetails);

      shimRTCIceCandidate(window);
      shimConnectionState(window);
      shimMaxMessageSize(window, browserDetails);
      shimSendThrowTypeError(window);
      removeExtmapAllowMixed(window, browserDetails);
      break;
    case 'firefox':
      if (!firefoxShim || !shimPeerConnection ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = firefoxShim;

      // Must be called before shimPeerConnection.
      shimAddIceCandidateNullOrEmpty(window, browserDetails);
      shimParameterlessSetLocalDescription(window);

      shimGetUserMedia$1(window, browserDetails);
      shimPeerConnection(window, browserDetails);
      shimOnTrack(window);
      shimRemoveStream(window);
      shimSenderGetStats(window);
      shimReceiverGetStats(window);
      shimRTCDataChannel(window);
      shimAddTransceiver(window);
      shimGetParameters(window);
      shimCreateOffer(window);
      shimCreateAnswer(window);

      shimRTCIceCandidate(window);
      shimConnectionState(window);
      shimMaxMessageSize(window, browserDetails);
      shimSendThrowTypeError(window);
      break;
    case 'safari':
      if (!safariShim || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = safariShim;

      // Must be called before shimCallbackAPI.
      shimAddIceCandidateNullOrEmpty(window, browserDetails);
      shimParameterlessSetLocalDescription(window);

      shimRTCIceServerUrls(window);
      shimCreateOfferLegacy(window);
      shimCallbacksAPI(window);
      shimLocalStreamsAPI(window);
      shimRemoteStreamsAPI(window);
      shimTrackEventTransceiver(window);
      shimGetUserMedia(window);
      shimAudioContext(window);

      shimRTCIceCandidate(window);
      shimMaxMessageSize(window, browserDetails);
      shimSendThrowTypeError(window);
      removeExtmapAllowMixed(window, browserDetails);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

adapterFactory({window: typeof window === 'undefined' ? undefined : window});

/**
 * Creates an RTCPeerConnection.
 *
 * @param configuration - Config to the RTCPeerConnection constructor.
 * @returns An RTCPeerConnection instance.
 */
function createRTCPeerConnection(configuration) {
    return new RTCPeerConnection(configuration);
}

/**
 * A type-safe form of the DOMString used in the MediaStreamTrack.kind field.
 */
exports.MediaStreamTrackKind = void 0;
(function (MediaStreamTrackKind) {
    MediaStreamTrackKind["Audio"] = "audio";
    MediaStreamTrackKind["Video"] = "video";
})(exports.MediaStreamTrackKind || (exports.MediaStreamTrackKind = {}));
var PeerConnectionEvents;
(function (PeerConnectionEvents) {
    PeerConnectionEvents["IceGatheringStateChange"] = "icegatheringstatechange";
    PeerConnectionEvents["IceCandidate"] = "icecandidate";
    PeerConnectionEvents["IceCandidateError"] = "icecandidateerror";
    PeerConnectionEvents["PeerConnectionStateChange"] = "peerconnectionstatechange";
    PeerConnectionEvents["IceConnectionStateChange"] = "iceconnectionstatechange";
    PeerConnectionEvents["CreateOfferOnSuccess"] = "createofferonsuccess";
    PeerConnectionEvents["CreateAnswerOnSuccess"] = "createansweronsuccess";
    PeerConnectionEvents["SetLocalDescriptionOnSuccess"] = "setlocaldescriptiononsuccess";
    PeerConnectionEvents["SetRemoteDescriptionOnSuccess"] = "setremotedescriptiononsuccess";
})(PeerConnectionEvents || (PeerConnectionEvents = {}));
/**
 * Manages a single RTCPeerConnection with the server.
 */
class PeerConnection extends EventEmitter$4 {
    /**
     * Creates an instance of the RTCPeerConnection.
     *
     * @param configuration - Config to the RTCPeerConnection constructor.
     */
    constructor(configuration) {
        super();
        logger$3.log('PeerConnection init');
        this.pc = createRTCPeerConnection(configuration);
        this.connectionStateHandler = new ConnectionStateHandler(() => {
            return {
                connectionState: this.pc.connectionState,
                iceState: this.pc.iceConnectionState,
            };
        });
        this.connectionStateHandler.on(ConnectionStateHandler.Events.PeerConnectionStateChanged, (state) => {
            this.emit(PeerConnection.Events.PeerConnectionStateChange, state);
        });
        this.connectionStateHandler.on(ConnectionStateHandler.Events.IceConnectionStateChanged, (state) => {
            this.emit(PeerConnection.Events.IceConnectionStateChange, state);
        });
        // Forward the connection state related events to connection state handler
        // eslint-disable-next-line jsdoc/require-jsdoc
        this.pc.oniceconnectionstatechange = () => this.connectionStateHandler.onIceConnectionStateChange();
        // eslint-disable-next-line jsdoc/require-jsdoc
        this.pc.onconnectionstatechange = () => this.connectionStateHandler.onPeerConnectionStateChange();
        // Subscribe to underlying PeerConnection events and emit them via the EventEmitter
        /* eslint-disable jsdoc/require-jsdoc */
        this.pc.onicegatheringstatechange = (ev) => {
            this.emit(PeerConnection.Events.IceGatheringStateChange, ev);
        };
        /* eslint-disable jsdoc/require-jsdoc */
        this.pc.onicecandidate = (ev) => {
            this.emit(PeerConnection.Events.IceCandidate, ev);
        };
        this.pc.onicecandidateerror = (ev) => {
            this.emit(PeerConnection.Events.IceCandidateError, ev);
        };
    }
    /**
     * Get the underlying RTCPeerConnection.
     *
     * @returns The underlying RTCPeerConnection.
     */
    getUnderlyingRTCPeerConnection() {
        return this.pc;
    }
    /**
     * Gets the overall connection state of the underlying RTCPeerConnection.
     *
     * @returns The underlying connection's overall state.
     */
    getConnectionState() {
        return this.connectionStateHandler.getConnectionState();
    }
    /**
     * Gets the connection state of the underlying RTCPeerConnection.
     *
     * @returns The underlying RTCPeerConnection connection state.
     */
    getPeerConnectionState() {
        return this.connectionStateHandler.getPeerConnectionState();
    }
    /**
     * Gets the ICE connection state of the underlying RTCPeerConnection.
     *
     * @returns The underlying RTCPeerConnection ICE connection state.
     */
    getIceConnectionState() {
        return this.connectionStateHandler.getIceConnectionState();
    }
    /**
     * Adds a new media track to the set of tracks which will be transmitted to the other peer.
     *
     * @param track - A MediaStreamTrack object representing the media track to add to the peer connection.
     * @param streams - (Optional) One or more local MediaStream objects to which the track should be
     *     added.
     * @returns The RTCRtpSender object which will be used to transmit the media data, or null if
     *     there is no underlying track when a track is added.
     */
    addTrack(track, ...streams) {
        return this.pc.addTrack(track, ...streams);
    }
    /**
     * Creates a new RTCRtpTransceiver and adds it to the set of transceivers associated with the
     * PeerConnection.  Each transceiver represents a bidirectional stream, with both an RTCRtpSender
     * and an RTCRtpReceiver associated with it.
     *
     * @param trackOrKind - A MediaStreamTrack to associate with the transceiver, or a string which is used
     * as the kind of the receiver's track, and by extension the RTCRtpReceiver itself.
     * @param init - Options that you may wish to specify when creating the new transceiver.
     * @returns - The created RTCRtpTransceiver object.
     */
    addTransceiver(trackOrKind, init) {
        return this.pc.addTransceiver(trackOrKind, init);
    }
    /**
     * Tell the local end of the connection to stop sending media from the specified track, without
     * actually removing the corresponding RTCRtpSender from the list of senders as reported by
     * RTCPeerConnection.getSenders().  If the track is already stopped, or is not in the connection's
     * senders list, the method has no effect.
     *
     * If the connection has already been negotiated (signalingState is set to 'stable'), it is marked
     * as needing to be negotiated again; the remote peer won't experience the change until this
     * negotiation occurs.  A negotiatedneeded event is sent to the RTCPeerConnection to let the local
     * end know this negotiation must occur.
     *
     * @param sender - An RTCRtpSender specifying the sender to remove from the connection.
     */
    removeTrack(sender) {
        this.pc.removeTrack(sender);
    }
    /**
     * Creates a new data channel linked with the remote peer.
     *
     * @param label - A human-readable name for the channel.  May not be longer than 65,535 bytes.
     * @param options - An object providing configuration options for the data channel.
     * @returns An RTCDataChannel object.
     */
    createDataChannel(label, options) {
        return this.pc.createDataChannel(label, options);
    }
    /**
     * Creates an SDP answer to an offer received from a remote peer during the offer/answer
     * negotiation of a WebRTC connection.
     *
     * @param options - (Optional) An object which contains options which customize the answer; this
     *     is based on the RTCAnswerOptions dictionary.
     * @returns A Promise whose fulfillment handler is called with an object conforming to the
     *     RTCSessionDescriptionInit dictionary which contains the SDP answer to be delivered to the
     *     other peer.
     */
    createAnswer(options) {
        return __awaiter$2(this, void 0, void 0, function* () {
            return this.pc.createAnswer(options).then((answer) => {
                this.emit(PeerConnection.Events.CreateAnswerOnSuccess, answer);
                return answer;
            });
        });
    }
    /**
     * Initiates the creation of an SDP offer for the purpose of starting a new WebRTC connection to a
     * remote peer.
     *
     * @param options - (Optional) An RTCOfferOptions dictionary providing options requested for the
     *    offer.
     * @returns A Promise whose fulfillment handler will receive an object conforming to the
     *    RTCSessionDescriptionInit dictionary which contains the SDP describing the generated offer.
     *    That received offer should be delivered through the signaling server to a remote peer.
     */
    createOffer(options) {
        return __awaiter$2(this, void 0, void 0, function* () {
            return this.pc.createOffer(options).then((offer) => {
                this.emit(PeerConnection.Events.CreateOfferOnSuccess, offer);
                return offer;
            });
        });
    }
    /**
     * Changes the local description associated with the connection.
     *
     * @param description - An RTCSessionDescriptionInit or RTCSessionDescription which specifies the
     *     configuration to be applied to the local end of the connection.
     * @returns A Promise which is fulfilled once the value of RTCPeerConnection.localDescription is
     *     successfully changed or rejected if the change cannot be applied.
     */
    setLocalDescription(description) {
        return __awaiter$2(this, void 0, void 0, function* () {
            var _a;
            // In Firefox, setLocalDescription will not throw an error if an m-line has no codecs, even
            // though it violates https://datatracker.ietf.org/doc/html/rfc8866. See
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1857612. So, we check the media lines here to
            // preemptively throw an error on Firefox.
            if (BrowserInfo$1.isFirefox()) {
                (_a = description === null || description === void 0 ? void 0 : description.sdp) === null || _a === void 0 ? void 0 : _a.split(/(\r\n|\r|\n)/).filter((line) => line.startsWith('m')).forEach((mediaLine) => {
                    if (mediaLine.trim().split(' ').length < 4) {
                        throw new Error(`Invalid media line ${mediaLine}, expected at least 4 fields`);
                    }
                });
            }
            return this.pc.setLocalDescription(description).then(() => {
                if (description) {
                    this.emit(PeerConnection.Events.SetLocalDescriptionOnSuccess, description);
                }
            });
        });
    }
    /**
     * Sets the specified session description as the remote peer's current offer or answer.
     *
     * @param description - An RTCSessionDescriptionInit or RTCSessionDescription which specifies the
     *     remote peer's current offer or answer.
     * @returns A Promise which is fulfilled once the value of the connection's remoteDescription is
     *     successfully changed or rejected if the change cannot be applied (for example, if the
     *     specified description is incompatible with one or both of the peers on the connection).
     */
    setRemoteDescription(description) {
        return __awaiter$2(this, void 0, void 0, function* () {
            return this.pc.setRemoteDescription(description).then(() => {
                this.emit(PeerConnection.Events.SetRemoteDescriptionOnSuccess, description);
            });
        });
    }
    /**
     * Closes the current peer connection.
     */
    close() {
        this.pc.close();
    }
    /**
     * Get the local description from this PeerConnection.
     *
     * @returns An RTCSessionDescription representing the local description, or null if none has been set.
     */
    getLocalDescription() {
        return this.pc.localDescription;
    }
    /**
     * Get the remote description from this PeerConnection.
     *
     * @returns An RTCSessionDescription representing the remote description, or null if none has been set.
     */
    getRemoteDescription() {
        return this.pc.remoteDescription;
    }
    /**
     * Returns an array of RTCRtpSender objects, each of which represents the RTP sender responsible
     * for transmitting one track's data.  A sender object provides methods and properties for
     * examining and controlling the encoding and transmission of the track's data.
     *
     * @returns An array of RTCRtpSender objects, one for each track on the connection.  The array is
     * empty if there are no RTP senders on the connection.
     */
    getSenders() {
        return this.pc.getSenders();
    }
    /**
     * Get the list of RTCRtpTransceiver objects being used to send and receive data on the
     * connection.
     *
     * @returns - An array of the RTCRtpTransceiver objects representing the transceivers handling
     * sending and receiving all media on the PeerConnection.  The list is in the order in which the
     * transceivers were added to the connection.
     */
    getTransceivers() {
        return this.pc.getTransceivers();
    }
    /**
     * Get statistics about either the overall connection or about the specified MediaStreamTrack.
     *
     * @param selector - An optional MediaStreamTrack for which to gather statistics. If not provided,
     * statistics will be gathered for the entire underlying RTCPeerConnection.
     * @returns - A Promise which resolves with an RTCStatsReport object providing connection
     * statistics.
     */
    getStats(selector) {
        return this.pc.getStats(selector);
    }
    /**
     * Returns a string that describes the connections' ICE gathering state.
     *
     * @returns - The ICE gathering state.
     */
    get iceGatheringState() {
        return this.pc.iceGatheringState;
    }
    /**
     * Returns the type of a connection that has been established.
     *
     * @returns The connection type which would be `ConnectionType`.
     */
    getCurrentConnectionType() {
        return __awaiter$2(this, void 0, void 0, function* () {
            var _a;
            // make sure this method only can be called when the ice connection is established;
            const isIceConnected = this.pc.iceConnectionState === 'connected' || this.pc.iceConnectionState === 'completed';
            if (!isIceConnected) {
                throw new Error('Ice connection is not established');
            }
            const succeededLocalCandidateIds = new Set();
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const localCandidateStatsReports = [];
            (yield this.pc.getStats()).forEach((report) => {
                var _a;
                // collect all local candidate ids from `candidate-pair` stats reports with `succeeded` state.
                if (report.type === 'candidate-pair' && ((_a = report.state) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'succeeded') {
                    succeededLocalCandidateIds.add(report.localCandidateId);
                }
                // collect all `local-candidate` stats.
                if (report.type === 'local-candidate') {
                    localCandidateStatsReports.push(report);
                }
            });
            // find the `local-candidate` stats which report id contains in `succeededLocalCandidateIds`.
            const localCandidate = localCandidateStatsReports.find((report) => succeededLocalCandidateIds.has(report.id));
            if (!localCandidate) {
                return 'unknown';
            }
            if (localCandidate.relayProtocol) {
                return `TURN-${localCandidate.relayProtocol.toUpperCase()}`;
            }
            return (_a = localCandidate.protocol) === null || _a === void 0 ? void 0 : _a.toUpperCase();
        });
    }
}
PeerConnection.Events = PeerConnectionEvents;

var commonjsGlobal$2 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var logger$2 = {exports: {}};

/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */

(function (module) {
(function (global) {

	// Top level module for the global, static logger instance.
	var Logger = { };

	// For those that are at home that are keeping score.
	Logger.VERSION = "1.6.1";

	// Function which handles all incoming log messages.
	var logHandler;

	// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
	var contextualLoggersByNameMap = {};

	// Polyfill for ES5's Function.bind.
	var bind = function(scope, func) {
		return function() {
			return func.apply(scope, arguments);
		};
	};

	// Super exciting object merger-matron 9000 adding another 100 bytes to your download.
	var merge = function () {
		var args = arguments, target = args[0], key, i;
		for (i = 1; i < args.length; i++) {
			for (key in args[i]) {
				if (!(key in target) && args[i].hasOwnProperty(key)) {
					target[key] = args[i][key];
				}
			}
		}
		return target;
	};

	// Helper to define a logging level object; helps with optimisation.
	var defineLogLevel = function(value, name) {
		return { value: value, name: name };
	};

	// Predefined logging levels.
	Logger.TRACE = defineLogLevel(1, 'TRACE');
	Logger.DEBUG = defineLogLevel(2, 'DEBUG');
	Logger.INFO = defineLogLevel(3, 'INFO');
	Logger.TIME = defineLogLevel(4, 'TIME');
	Logger.WARN = defineLogLevel(5, 'WARN');
	Logger.ERROR = defineLogLevel(8, 'ERROR');
	Logger.OFF = defineLogLevel(99, 'OFF');

	// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
	// of each other.
	var ContextualLogger = function(defaultContext) {
		this.context = defaultContext;
		this.setLevel(defaultContext.filterLevel);
		this.log = this.info;  // Convenience alias.
	};

	ContextualLogger.prototype = {
		// Changes the current logging level for the logging instance.
		setLevel: function (newLevel) {
			// Ensure the supplied Level object looks valid.
			if (newLevel && "value" in newLevel) {
				this.context.filterLevel = newLevel;
			}
		},
		
		// Gets the current logging level for the logging instance
		getLevel: function () {
			return this.context.filterLevel;
		},

		// Is the logger configured to output messages at the supplied level?
		enabledFor: function (lvl) {
			var filterLevel = this.context.filterLevel;
			return lvl.value >= filterLevel.value;
		},

		trace: function () {
			this.invoke(Logger.TRACE, arguments);
		},

		debug: function () {
			this.invoke(Logger.DEBUG, arguments);
		},

		info: function () {
			this.invoke(Logger.INFO, arguments);
		},

		warn: function () {
			this.invoke(Logger.WARN, arguments);
		},

		error: function () {
			this.invoke(Logger.ERROR, arguments);
		},

		time: function (label) {
			if (typeof label === 'string' && label.length > 0) {
				this.invoke(Logger.TIME, [ label, 'start' ]);
			}
		},

		timeEnd: function (label) {
			if (typeof label === 'string' && label.length > 0) {
				this.invoke(Logger.TIME, [ label, 'end' ]);
			}
		},

		// Invokes the logger callback if it's not being filtered.
		invoke: function (level, msgArgs) {
			if (logHandler && this.enabledFor(level)) {
				logHandler(msgArgs, merge({ level: level }, this.context));
			}
		}
	};

	// Protected instance which all calls to the to level `Logger` module will be routed through.
	var globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });

	// Configure the global Logger instance.
	(function() {
		// Shortcut for optimisers.
		var L = Logger;

		L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
		L.trace = bind(globalLogger, globalLogger.trace);
		L.debug = bind(globalLogger, globalLogger.debug);
		L.time = bind(globalLogger, globalLogger.time);
		L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
		L.info = bind(globalLogger, globalLogger.info);
		L.warn = bind(globalLogger, globalLogger.warn);
		L.error = bind(globalLogger, globalLogger.error);

		// Don't forget the convenience alias!
		L.log = L.info;
	}());

	// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
	// object with the supplied log messages and the second being a context object which contains a hash of stateful
	// parameters which the logging function can consume.
	Logger.setHandler = function (func) {
		logHandler = func;
	};

	// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
	// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
	Logger.setLevel = function(level) {
		// Set the globalLogger's level.
		globalLogger.setLevel(level);

		// Apply this level to all registered contextual loggers.
		for (var key in contextualLoggersByNameMap) {
			if (contextualLoggersByNameMap.hasOwnProperty(key)) {
				contextualLoggersByNameMap[key].setLevel(level);
			}
		}
	};

	// Gets the global logging filter level
	Logger.getLevel = function() {
		return globalLogger.getLevel();
	};

	// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
	// default context and log handler.
	Logger.get = function (name) {
		// All logger instances are cached so they can be configured ahead of use.
		return contextualLoggersByNameMap[name] ||
			(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));
	};

	// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
	// write to the window's console object (if present); the optional options object can be used to customise the
	// formatter used to format each log message.
	Logger.createDefaultHandler = function (options) {
		options = options || {};

		options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
			// Prepend the logger's name to the log message for easy identification.
			if (context.name) {
				messages.unshift("[" + context.name + "]");
			}
		};

		// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
		// that don't offer a native console method.
		var timerStartTimeByLabelMap = {};

		// Support for IE8+ (and other, slightly more sane environments)
		var invokeConsoleMethod = function (hdlr, messages) {
			Function.prototype.apply.call(hdlr, console, messages);
		};

		// Check for the presence of a logger.
		if (typeof console === "undefined") {
			return function () { /* no console */ };
		}

		return function(messages, context) {
			// Convert arguments object to Array.
			messages = Array.prototype.slice.call(messages);

			var hdlr = console.log;
			var timerLabel;

			if (context.level === Logger.TIME) {
				timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];

				if (messages[1] === 'start') {
					if (console.time) {
						console.time(timerLabel);
					}
					else {
						timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
					}
				}
				else {
					if (console.timeEnd) {
						console.timeEnd(timerLabel);
					}
					else {
						invokeConsoleMethod(hdlr, [ timerLabel + ': ' +
							(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);
					}
				}
			}
			else {
				// Delegate through to custom warn/error loggers if present on the console.
				if (context.level === Logger.WARN && console.warn) {
					hdlr = console.warn;
				} else if (context.level === Logger.ERROR && console.error) {
					hdlr = console.error;
				} else if (context.level === Logger.INFO && console.info) {
					hdlr = console.info;
				} else if (context.level === Logger.DEBUG && console.debug) {
					hdlr = console.debug;
				} else if (context.level === Logger.TRACE && console.trace) {
					hdlr = console.trace;
				}

				options.formatter(messages, context);
				invokeConsoleMethod(hdlr, messages);
			}
		};
	};

	// Configure and example a Default implementation which writes to the `window.console` (if present).  The
	// `options` hash can be used to configure the default logLevel and provide a custom message formatter.
	Logger.useDefaults = function(options) {
		Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
		Logger.setHandler(Logger.createDefaultHandler(options));
	};

	// Createa an alias to useDefaults to avoid reaking a react-hooks rule.
	Logger.setDefaults = Logger.useDefaults;

	// Export to popular environments boilerplate.
	if (module.exports) {
		module.exports = Logger;
	}
	else {
		Logger._prevLogger = global.Logger;

		Logger.noConflict = function () {
			global.Logger = Logger._prevLogger;
			return Logger;
		};

		global.Logger = Logger;
	}
}(commonjsGlobal$2));
}(logger$2));

var Logger$1 = logger$2.exports;

Logger$1.useDefaults({
    defaultLevel: Logger$1.DEBUG,
    formatter: (messages, context) => {
        messages.unshift(`[${context.name}] `);
    },
});

function areNamedMediaGroupsEqual(left, right) {
    return left.type === right.type && left.value === right.value;
}

exports.MediaFamily = void 0;
(function (MediaFamily) {
    MediaFamily["Audio"] = "AUDIO";
    MediaFamily["Video"] = "VIDEO";
})(exports.MediaFamily || (exports.MediaFamily = {}));
exports.MediaContent = void 0;
(function (MediaContent) {
    MediaContent["Main"] = "MAIN";
    MediaContent["Slides"] = "SLIDES";
})(exports.MediaContent || (exports.MediaContent = {}));
exports.Policy = void 0;
(function (Policy) {
    Policy["ActiveSpeaker"] = "active-speaker";
    Policy["ReceiverSelected"] = "receiver-selected";
})(exports.Policy || (exports.Policy = {}));
exports.MediaType = void 0;
(function (MediaType) {
    MediaType["VideoMain"] = "VIDEO-MAIN";
    MediaType["VideoSlides"] = "VIDEO-SLIDES";
    MediaType["AudioMain"] = "AUDIO-MAIN";
    MediaType["AudioSlides"] = "AUDIO-SLIDES";
})(exports.MediaType || (exports.MediaType = {}));

function randomInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
function generateSceneId() {
    return randomInteger(0, 0x7fffff);
}
function generateCsi(mediaFamily, sceneId) {
    let av;
    if (mediaFamily === exports.MediaFamily.Audio) {
        av = 0;
    }
    else {
        av = 1;
    }
    return (sceneId << 8) | av;
}
function getMediaType(mediaFamily, mediaContent) {
    if (mediaFamily === exports.MediaFamily.Video && mediaContent === exports.MediaContent.Main) {
        return exports.MediaType.VideoMain;
    }
    if (mediaFamily === exports.MediaFamily.Video && mediaContent === exports.MediaContent.Slides) {
        return exports.MediaType.VideoSlides;
    }
    if (mediaFamily === exports.MediaFamily.Audio && mediaContent === exports.MediaContent.Main) {
        return exports.MediaType.AudioMain;
    }
    return exports.MediaType.AudioSlides;
}
function getMediaFamily(mediaType) {
    return [exports.MediaType.VideoMain, exports.MediaType.VideoSlides].includes(mediaType)
        ? exports.MediaFamily.Video
        : exports.MediaFamily.Audio;
}
function getMediaContent(mediaType) {
    return [exports.MediaType.VideoMain, exports.MediaType.AudioMain].includes(mediaType)
        ? exports.MediaContent.Main
        : exports.MediaContent.Slides;
}
const isTruthyOrZero = (value) => value === 0 || Boolean(value);
function areArraysEqual(left, right, predicate) {
    if (left.length !== right.length) {
        return false;
    }
    for (let i = 0; i < left.length; i += 1) {
        if (!predicate(left[i], right[i])) {
            return false;
        }
    }
    return true;
}

class ActiveSpeakerInfo {
    constructor(priority, crossPriorityDuplication, crossPolicyDuplication, preferLiveVideo, namedMediaGroups) {
        this.priority = priority;
        this.crossPriorityDuplication = crossPriorityDuplication;
        this.crossPolicyDuplication = crossPolicyDuplication;
        this.preferLiveVideo = preferLiveVideo;
        this.namedMediaGroups = namedMediaGroups;
    }
    toString() {
        return `ActiveSpeakerInfo(priority=${this.priority}, crossPriorityDuplication=${this.crossPriorityDuplication}, crossPolicyDuplication=${this.crossPolicyDuplication}, preferLiveVideo=${this.preferLiveVideo}), namedMediaGroups=${this.namedMediaGroups}`;
    }
}
function isValidActiveSpeakerInfo(msg) {
    const maybeActiveSpeakerInfo = msg;
    return Boolean('priority' in maybeActiveSpeakerInfo &&
        'crossPriorityDuplication' in maybeActiveSpeakerInfo &&
        'crossPolicyDuplication' in maybeActiveSpeakerInfo &&
        'preferLiveVideo' in maybeActiveSpeakerInfo);
}
function areActiveSpeakerInfosEqual(left, right) {
    return (left.priority === right.priority &&
        left.crossPriorityDuplication === right.crossPriorityDuplication &&
        left.crossPolicyDuplication === right.crossPolicyDuplication &&
        left.preferLiveVideo === right.preferLiveVideo &&
        areArraysEqual(left.namedMediaGroups || [], right.namedMediaGroups || [], areNamedMediaGroupsEqual));
}
function isValidActiveSpeakerNotificationMsg(msg) {
    const maybeActiveSpeakerNotificationMsg = msg;
    return Boolean(maybeActiveSpeakerNotificationMsg.seqNum && maybeActiveSpeakerNotificationMsg.csis);
}

class H264Codec {
    constructor(maxFs, maxFps, maxMbps, maxWidth, maxHeight) {
        this.maxFs = maxFs;
        this.maxFps = maxFps;
        this.maxMbps = maxMbps;
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
    }
}
function areH264CodecsEqual(left, right) {
    if (left === undefined || right === undefined) {
        return left === right;
    }
    return (left.maxFs === right.maxFs &&
        left.maxFps === right.maxFps &&
        left.maxMbps === right.maxMbps &&
        left.maxWidth === right.maxWidth &&
        left.maxHeight === right.maxHeight);
}

class CodecInfo$1 {
    constructor(payloadType, h264) {
        this.payloadType = payloadType;
        this.h264 = h264;
    }
}
function areCodecInfosEqual(left, right) {
    return left.payloadType === right.payloadType && areH264CodecsEqual(left.h264, right.h264);
}

var HomerMsgType;
(function (HomerMsgType) {
    HomerMsgType["Multistream"] = "multistream";
})(HomerMsgType || (HomerMsgType = {}));
class HomerMsg {
    constructor(msgType, payload) {
        this.msgType = msgType;
        this.payload = payload;
    }
    static fromJson(data) {
        if (!data.msgType || !data.payload) {
            return null;
        }
        return new HomerMsg(data.msgType, data.payload);
    }
}

var JmpMsgType;
(function (JmpMsgType) {
    JmpMsgType["MediaRequest"] = "mediaRequest";
    JmpMsgType["MediaRequestAck"] = "mediaRequestAck";
    JmpMsgType["MediaRequestStatus"] = "mediaRequestStatus";
    JmpMsgType["MediaRequestStatusAck"] = "mediaRequestStatusAck";
    JmpMsgType["SourceAdvertisement"] = "sourceAdvertisement";
    JmpMsgType["SourceAdvertisementAck"] = "sourceAdvertisementAck";
    JmpMsgType["ActiveSpeakerNotification"] = "activeSpeakerNotification";
})(JmpMsgType || (JmpMsgType = {}));
class JmpMsg {
    constructor(mediaFamily, mediaContent, payload) {
        this.mediaFamily = mediaFamily;
        this.mediaContent = mediaContent;
        this.payload = payload;
    }
    toString() {
        return `JmpMsg(mediaFamily=${this.mediaFamily}, mediaContent=${this.mediaContent}, payload=${this.payload})`;
    }
}
function isValidJmpMsgPayload(msg) {
    const maybeJmpMsgPayload = msg;
    return Boolean(maybeJmpMsgPayload.msgType && maybeJmpMsgPayload.payload);
}
function isValidJmpMsg(msg) {
    const maybeJmpMsg = msg;
    return Boolean(maybeJmpMsg.mediaContent &&
        maybeJmpMsg.mediaFamily &&
        maybeJmpMsg.payload &&
        isValidJmpMsgPayload(maybeJmpMsg.payload));
}

class MediaRequestMsg {
    constructor(seqNum, requests) {
        this.seqNum = seqNum;
        this.requests = requests;
    }
    toString() {
        return `JmpMediaMsg(seqNum=${this.seqNum}, requests=[${this.requests}])`;
    }
}
function isValidMediaRequestMsg(msg) {
    const maybeMediaRequestMsg = msg;
    return Boolean(maybeMediaRequestMsg.seqNum && maybeMediaRequestMsg.requests);
}

class MediaRequestAckMsg {
    constructor(mediaRequestSeqNum) {
        this.mediaRequestSeqNum = mediaRequestSeqNum;
    }
    toString() {
        return `MediaRequestAckMsg(seqNum=${this.mediaRequestSeqNum})`;
    }
}
function isValidMediaRequestAckMsg(msg) {
    const maybeMediaRequestAckMsg = msg;
    return Boolean(maybeMediaRequestAckMsg.mediaRequestSeqNum);
}

function isValidMidRidStreamId(obj) {
    if (typeof obj !== 'object' || obj === null)
        return false;
    const maybeMidRidStreamId = obj;
    return (typeof maybeMidRidStreamId.mid === 'string' &&
        (maybeMidRidStreamId.rid === undefined || typeof maybeMidRidStreamId.rid === 'string') &&
        !('ssrc' in maybeMidRidStreamId));
}
function isValidSsrcStreamId(obj) {
    if (typeof obj !== 'object' || obj === null)
        return false;
    const maybeSsrcStreamId = obj;
    return (typeof maybeSsrcStreamId.ssrc === 'number' &&
        (maybeSsrcStreamId.rtxSsrc === undefined || typeof maybeSsrcStreamId.rtxSsrc === 'number') &&
        !('mid' in maybeSsrcStreamId));
}
function isValidStreamId(obj) {
    return isValidMidRidStreamId(obj) || isValidSsrcStreamId(obj);
}
function areStreamIdsEqual(id1, id2) {
    const keys1 = Object.keys(id1);
    const keys2 = Object.keys(id2);
    if (keys1.length !== keys2.length) {
        return false;
    }
    return keys1.every((key) => id1[key] === id2[key]);
}

function isValidStreamInfo(obj) {
    const maybeStreamInfo = obj;
    return Boolean(maybeStreamInfo.id &&
        isValidStreamId(maybeStreamInfo.id) &&
        ['no source', 'invalid source', 'live', 'avatar', 'bandwidth disabled', 'away'].includes(maybeStreamInfo.state));
}
function areStreamInfosEqual(left, right) {
    return (areStreamIdsEqual(left.id, right.id) && left.state === right.state && left.csi === right.csi);
}

class MediaRequestStatusMsg {
    constructor(seqNum, streamStates) {
        this.seqNum = seqNum;
        this.streamStates = streamStates;
    }
}
function isValidMediaRequestStatusMsg(msg) {
    const maybeMediaRequestStatusMsg = msg;
    return (Boolean(maybeMediaRequestStatusMsg.seqNum) &&
        maybeMediaRequestStatusMsg.streamStates &&
        maybeMediaRequestStatusMsg.streamStates.every((streamInfo) => isValidStreamInfo(streamInfo)));
}

class MediaRequestStatusAckMsg {
    constructor(mediaRequestStatusSeqNum) {
        this.mediaRequestStatusSeqNum = mediaRequestStatusSeqNum;
    }
    toString() {
        return `MediaRequestStatusAckMsg(seqNum=${this.mediaRequestStatusSeqNum})`;
    }
}
function isValidMediaRequestStatusAckMsg(msg) {
    const maybeMediaRequestStatusAckMsg = msg;
    return Boolean(maybeMediaRequestStatusAckMsg.mediaRequestStatusSeqNum);
}

class ReceiverSelectedInfo {
    constructor(csi) {
        this.csi = csi;
    }
    toString() {
        return `ReceiverSelectedInfo(csi=${this.csi})`;
    }
}
function isValidReceiverSelectedInfo(msg) {
    const maybeReceiverSelectedInfo = msg;
    return Boolean(maybeReceiverSelectedInfo.csi);
}
function areReceiverSelectedInfosEqual(left, right) {
    return left.csi === right.csi;
}

function arePolicySpecificInfosEqual(left, right) {
    if (isValidActiveSpeakerInfo(left)) {
        if (!isValidActiveSpeakerInfo(right)) {
            return false;
        }
        return areActiveSpeakerInfosEqual(left, right);
    }
    if (isValidReceiverSelectedInfo(left)) {
        if (!isValidReceiverSelectedInfo(right)) {
            return false;
        }
        return areReceiverSelectedInfosEqual(left, right);
    }
    throw new Error('Invalid PolicySpecificInfo');
}

class SourceAdvertisementMsg {
    constructor(seqNum, numTotalSources, numLiveSources, namedMediaGroups, videoContentHint) {
        this.seqNum = seqNum;
        this.numTotalSources = numTotalSources;
        this.numLiveSources = numLiveSources;
        this.namedMediaGroups = namedMediaGroups;
        this.videoContentHint = videoContentHint;
    }
    toString() {
        return `SourceAdvertisement(seqNum=${this.seqNum}, numTotalSources=${this.numTotalSources}, numLiveSources=${this.numLiveSources}, namedMediaGroups=${this.namedMediaGroups}, videoContentHint=${this.videoContentHint}`;
    }
}
function isValidSourceAdvertisementMsg(msg) {
    const maybeSourceAdvertisementMsg = msg;
    return Boolean(maybeSourceAdvertisementMsg.seqNum &&
        isTruthyOrZero(maybeSourceAdvertisementMsg.numTotalSources) &&
        isTruthyOrZero(maybeSourceAdvertisementMsg.numLiveSources));
}
function areSourceAdvertisementMsgsEqual(sourceAdvertisementMsg1, sourceAdvertisementMsg2) {
    return (sourceAdvertisementMsg1.numLiveSources === sourceAdvertisementMsg2.numLiveSources &&
        sourceAdvertisementMsg1.numTotalSources === sourceAdvertisementMsg2.numTotalSources &&
        areArraysEqual(sourceAdvertisementMsg1.namedMediaGroups || [], sourceAdvertisementMsg2.namedMediaGroups || [], areNamedMediaGroupsEqual) &&
        sourceAdvertisementMsg1.videoContentHint === sourceAdvertisementMsg2.videoContentHint);
}

class SourceAdvertisementAckMsg {
    constructor(sourceAdvertisementSeqNum) {
        this.sourceAdvertisementSeqNum = sourceAdvertisementSeqNum;
    }
    toString() {
        return `SourceAdvertisementAckMsg(sourceAdvertisementSeqNum=${this.sourceAdvertisementSeqNum})`;
    }
}
function isValidSourceAdvertisementAckMsg(msg) {
    const maybeSourceAdvertisementAckMsg = msg;
    return Boolean(maybeSourceAdvertisementAckMsg.sourceAdvertisementSeqNum);
}

class StreamRequest$1 {
    constructor(policy, policySpecificInfo, ids, maxPayloadBitsPerSecond, codecInfos = []) {
        this.policy = policy;
        this.policySpecificInfo = policySpecificInfo;
        this.ids = ids;
        this.maxPayloadBitsPerSecond = maxPayloadBitsPerSecond;
        this.codecInfos = codecInfos;
    }
    toString() {
        return `Request(policy=${this.policy}, info=${this.policySpecificInfo}, ids=[${this.ids}], maxPayloadBitsPerSecond=[${this.maxPayloadBitsPerSecond}], codecInfos=[${this.codecInfos}])`;
    }
}
function areStreamRequestsEqual(left, right) {
    if (left.policy !== right.policy) {
        return false;
    }
    if (!arePolicySpecificInfosEqual(left.policySpecificInfo, right.policySpecificInfo)) {
        return false;
    }
    if (!areArraysEqual(left.ids, right.ids, areStreamIdsEqual)) {
        return false;
    }
    if (left.maxPayloadBitsPerSecond !== right.maxPayloadBitsPerSecond) {
        return false;
    }
    return areArraysEqual(left.codecInfos, right.codecInfos, areCodecInfosEqual);
}

class RetransmitHandler {
    constructor(msg, maxNumRetransmits, retransmitIntervalMs, transmitCallback, expirationCallback) {
        this.timerHandle = undefined;
        this.msg = msg;
        this.numRetransmitsLeft = maxNumRetransmits;
        this.retransmitIntervalMs = retransmitIntervalMs;
        this.transmitCallback = transmitCallback;
        this.expirationCallback = expirationCallback;
        this.scheduleTimer();
    }
    onTimer() {
        var _a;
        if (this.numRetransmitsLeft > 0) {
            --this.numRetransmitsLeft;
            this.transmitCallback(this.msg);
            this.scheduleTimer();
        }
        else {
            (_a = this.expirationCallback) === null || _a === void 0 ? void 0 : _a.call(this, this.msg);
        }
    }
    scheduleTimer() {
        this.timerHandle = window.setTimeout(() => this.onTimer(), this.retransmitIntervalMs);
    }
    cancel() {
        if (this.timerHandle) {
            clearTimeout(this.timerHandle);
        }
        this.timerHandle = undefined;
    }
}

var JmpSessionEvents;
(function (JmpSessionEvents) {
    JmpSessionEvents["ActiveSpeaker"] = "active-speaker";
    JmpSessionEvents["MediaRequestReceived"] = "media-request-received";
    JmpSessionEvents["MediaRequestStatusReceived"] = "media-request-status-received";
    JmpSessionEvents["SourceAdvertisementReceived"] = "source-advertisement-received";
})(JmpSessionEvents || (JmpSessionEvents = {}));
class JmpSession extends events$3.EventEmitter {
    constructor(mediaFamily, mediaContent, maxNumRetransmits = 200, retransmitIntervalMs = 250) {
        super();
        this.currMediaRequestSeqNum = 1;
        this.currSourceAdvertisementSeqNum = 1;
        this.currMediaRequestStatusSeqNum = 1;
        this.txCallback = undefined;
        this.lastSentMediaRequest = undefined;
        this.lastSentMediaRequestAck = undefined;
        this.lastReceivedMediaRequest = undefined;
        this.mediaFamily = mediaFamily;
        this.mediaContent = mediaContent;
        this.logger = Logger$1.get(`JmpSession ${this.mediaFamily}-${this.mediaContent}`);
        this.maxNumRetransmits = maxNumRetransmits;
        this.retransmitIntervalMs = retransmitIntervalMs;
    }
    getLogger() {
        return this.logger;
    }
    sendRequests(requests) {
        var _a;
        const mediaRequestMsg = new MediaRequestMsg(this.currMediaRequestSeqNum, requests);
        if (!this.lastSentMediaRequest ||
            !areArraysEqual(this.lastSentMediaRequest.msg.requests, requests, areStreamRequestsEqual)) {
            this.sendJmpMsg(JmpMsgType.MediaRequest, mediaRequestMsg);
            (_a = this.lastSentMediaRequest) === null || _a === void 0 ? void 0 : _a.cancel();
            this.lastSentMediaRequest = new RetransmitHandler(mediaRequestMsg, this.maxNumRetransmits, this.retransmitIntervalMs, () => {
                this.logger.info(`Retransmitting previously sent MediaRequest...`);
                this.sendJmpMsg(JmpMsgType.MediaRequest, mediaRequestMsg);
            }, (expiredJmpMsg) => {
                this.logger.warn(`Retransmits for message expired: ${expiredJmpMsg}`);
            });
            this.currMediaRequestSeqNum++;
        }
        else {
            this.logger.info(`Duplicate MediaRequest detected and will not be sent: ${mediaRequestMsg}`);
        }
    }
    sendSourceAdvertisement(numTotalSources, numLiveSources, namedMediaGroups, videoContentHint) {
        var _a;
        const sourceAdvertisementMsg = new SourceAdvertisementMsg(this.currSourceAdvertisementSeqNum, numTotalSources, numLiveSources, namedMediaGroups, videoContentHint);
        if (!this.lastSentSourceAdvertisement ||
            !areSourceAdvertisementMsgsEqual(this.lastSentSourceAdvertisement.msg, sourceAdvertisementMsg)) {
            this.sendJmpMsg(JmpMsgType.SourceAdvertisement, sourceAdvertisementMsg);
            (_a = this.lastSentSourceAdvertisement) === null || _a === void 0 ? void 0 : _a.cancel();
            this.lastSentSourceAdvertisement = new RetransmitHandler(sourceAdvertisementMsg, this.maxNumRetransmits, this.retransmitIntervalMs, () => {
                this.logger.info(`Retransmitting previously sent SourceAdvertisement...`);
                this.sendJmpMsg(JmpMsgType.SourceAdvertisement, sourceAdvertisementMsg);
            }, (expiredMsg) => {
                this.logger.warn(`Retransmits for message expired: `, expiredMsg);
            });
            this.currSourceAdvertisementSeqNum++;
        }
        else {
            this.logger.info(`Duplicate SourceAdvertisement detected and will not be sent: `, sourceAdvertisementMsg);
        }
    }
    sendMediaRequestStatus(streamStates) {
        var _a, _b;
        const filteredStreamStates = streamStates.filter((streamState) => {
            var _a;
            return (_a = this.lastReceivedMediaRequest) === null || _a === void 0 ? void 0 : _a.requests.some((req) => req.ids.find((streamId) => areStreamIdsEqual(streamId, streamState.id)));
        });
        const mediaRequestStatus = new MediaRequestStatusMsg(this.currMediaRequestStatusSeqNum, filteredStreamStates);
        if (!((_a = this.lastSentMediaRequestStatus) === null || _a === void 0 ? void 0 : _a.msg.streamStates) ||
            !areArraysEqual(filteredStreamStates, this.lastSentMediaRequestStatus.msg.streamStates, areStreamInfosEqual)) {
            this.sendJmpMsg(JmpMsgType.MediaRequestStatus, mediaRequestStatus);
            (_b = this.lastSentMediaRequestStatus) === null || _b === void 0 ? void 0 : _b.cancel();
            this.lastSentMediaRequestStatus = new RetransmitHandler(mediaRequestStatus, this.maxNumRetransmits, this.retransmitIntervalMs, () => {
                this.logger.info(`Retransmitting previously sent MediaRequestStatus...`);
                this.sendJmpMsg(JmpMsgType.MediaRequestStatus, mediaRequestStatus);
            }, (expiredMsg) => {
                this.logger.warn(`Retransmits for message expired: `, expiredMsg);
            });
            this.currMediaRequestStatusSeqNum++;
        }
        else {
            this.logger.info(`Duplicate MediaRequestStatus detected and will not be sent: `, mediaRequestStatus);
        }
    }
    receive(jmpMsg) {
        if (jmpMsg.mediaContent !== this.mediaContent || jmpMsg.mediaFamily !== this.mediaFamily) {
            this.logger.error(`JmpMsg ${JSON.stringify(jmpMsg)} sent to incorrect JmpSession`);
            return;
        }
        this.logger.debug(`Received JmpMsg`, JSON.stringify(jmpMsg));
        const { payload } = jmpMsg;
        if (payload.msgType === JmpMsgType.MediaRequest) {
            const mediaRequestMsg = payload.payload;
            if (!isValidMediaRequestMsg(mediaRequestMsg)) {
                this.logger.error(`Received invalid MediaRequest:`, JSON.stringify(mediaRequestMsg));
                return;
            }
            this.handleIncomingMediaRequest(mediaRequestMsg);
        }
        else if (payload.msgType === JmpMsgType.MediaRequestAck) {
            const mediaRequestAckMsg = payload.payload;
            if (!isValidMediaRequestAckMsg(mediaRequestAckMsg)) {
                this.logger.error(`Received invalid MediaRequest ACK:`, JSON.stringify(mediaRequestAckMsg));
                return;
            }
            this.handleIncomingMediaRequestAck(mediaRequestAckMsg);
        }
        else if (payload.msgType === JmpMsgType.ActiveSpeakerNotification) {
            const activeSpeakerNotification = payload.payload;
            if (!isValidActiveSpeakerNotificationMsg(activeSpeakerNotification)) {
                this.logger.info(`Received invalid Active Speaker Notification:`, JSON.stringify(activeSpeakerNotification));
                return;
            }
            this.handleIncomingActiveSpeakerNotification(activeSpeakerNotification);
        }
        else if (payload.msgType === JmpMsgType.SourceAdvertisement) {
            const sourceAdvertisement = payload.payload;
            if (!isValidSourceAdvertisementMsg(sourceAdvertisement)) {
                this.logger.error(`Received invalid SourceAdvertisementMsg:`, JSON.stringify(sourceAdvertisement));
                return;
            }
            this.handleIncomingSourceAdvertisement(sourceAdvertisement);
        }
        else if (payload.msgType === JmpMsgType.SourceAdvertisementAck) {
            const sourceAdvertisementAck = payload.payload;
            if (!isValidSourceAdvertisementAckMsg(sourceAdvertisementAck)) {
                this.logger.error(`Received invalid SourceAdvertisementAckMsg:`, JSON.stringify(sourceAdvertisementAck));
                return;
            }
            this.handleIncomingSourceAdvertisementAck(sourceAdvertisementAck);
        }
        else if (payload.msgType === JmpMsgType.MediaRequestStatus) {
            const mediaRequestStatus = payload.payload;
            if (!isValidMediaRequestStatusMsg(mediaRequestStatus)) {
                this.logger.error(`Received invalid MediaRequestStatusMsg:`, JSON.stringify(mediaRequestStatus));
                return;
            }
            this.handleIncomingMediaRequestStatus(mediaRequestStatus);
        }
        else if (payload.msgType === JmpMsgType.MediaRequestStatusAck) {
            const mediaRequestStatusAck = payload.payload;
            if (!isValidMediaRequestStatusAckMsg(mediaRequestStatusAck)) {
                this.logger.error(`Received invalid MediaRequestStatusAckMsg:`, JSON.stringify(mediaRequestStatusAck));
                return;
            }
            this.handleIncomingMediaRequestStatusAck(mediaRequestStatusAck);
        }
        else {
            this.logger.error(`Received unknown JmpMsg`);
        }
    }
    setTxCallback(callback) {
        this.txCallback = callback;
    }
    close() {
        var _a, _b, _c;
        this.logger.info(`closing`);
        (_a = this.lastSentMediaRequest) === null || _a === void 0 ? void 0 : _a.cancel();
        (_b = this.lastSentMediaRequestStatus) === null || _b === void 0 ? void 0 : _b.cancel();
        (_c = this.lastSentSourceAdvertisement) === null || _c === void 0 ? void 0 : _c.cancel();
    }
    sendJmpMsg(msgType, payload) {
        var _a;
        const jmpMsg = new JmpMsg(this.mediaFamily, this.mediaContent, {
            msgType,
            payload,
        });
        const homerMsg = new HomerMsg(HomerMsgType.Multistream, jmpMsg);
        (_a = this.txCallback) === null || _a === void 0 ? void 0 : _a.call(this, JSON.stringify(homerMsg));
    }
    handleIncomingMediaRequest(mediaRequestMsg) {
        var _a;
        if (this.lastReceivedMediaRequest &&
            mediaRequestMsg.seqNum < ((_a = this.lastReceivedMediaRequest) === null || _a === void 0 ? void 0 : _a.seqNum)) {
            this.logger.info(`Received old MediaRequest, ignoring`);
        }
        else if (this.lastReceivedMediaRequest &&
            mediaRequestMsg.seqNum === this.lastReceivedMediaRequest.seqNum) {
            if (this.lastSentMediaRequestAck) {
                this.logger.info(`Received duplicate MediaRequest, re-sending ACK`);
                this.sendJmpMsg(JmpMsgType.MediaRequestAck, this.lastSentMediaRequestAck);
            }
            else {
                this.logger.warn(`Received duplicate MediaRequest, but there was no ACK previously sent`);
            }
        }
        else {
            this.logger.info(`Received new MediaRequest, sending ACK`);
            const mediaRequestAck = new MediaRequestAckMsg(mediaRequestMsg.seqNum);
            this.lastReceivedMediaRequest = mediaRequestMsg;
            this.lastSentMediaRequestAck = mediaRequestAck;
            this.sendJmpMsg(JmpMsgType.MediaRequestAck, mediaRequestAck);
            this.emit(JmpSessionEvents.MediaRequestReceived, mediaRequestMsg);
        }
    }
    handleIncomingMediaRequestAck(mediaRequestAckMsg) {
        var _a, _b, _c;
        if (mediaRequestAckMsg.mediaRequestSeqNum === ((_b = (_a = this.lastSentMediaRequest) === null || _a === void 0 ? void 0 : _a.msg) === null || _b === void 0 ? void 0 : _b.seqNum)) {
            this.logger.info(`Received ACK for last sent MediaRequest`);
            (_c = this.lastSentMediaRequest) === null || _c === void 0 ? void 0 : _c.cancel();
        }
        else {
            this.logger.info(`Received ACK for old MediaRequest`);
        }
    }
    handleIncomingActiveSpeakerNotification(activeSpeakerNotification) {
        this.logger.debug(`Received Active Speaker Notification:`, activeSpeakerNotification);
        this.emit(JmpSessionEvents.ActiveSpeaker, activeSpeakerNotification);
    }
    handleIncomingSourceAdvertisement(sourceAdvertisement) {
        if (this.lastReceivedSourceAdvertisement &&
            sourceAdvertisement.seqNum < this.lastReceivedSourceAdvertisement.seqNum) {
            this.logger.info(`Received old SourceAdvertisement, ignoring`);
        }
        else if (this.lastReceivedSourceAdvertisement &&
            sourceAdvertisement.seqNum === this.lastReceivedSourceAdvertisement.seqNum) {
            if (this.lastSentSourceAdvertisementAck) {
                this.logger.info(`Received duplicate SourceAdvertisement, re-sending ACK`);
                this.sendJmpMsg(JmpMsgType.SourceAdvertisementAck, this.lastSentSourceAdvertisementAck);
            }
            else {
                this.logger.warn(`Received duplicate SourceAdvertisement, but there was no ACK previously sent`);
            }
        }
        else {
            this.logger.info(`Received new SourceAdvertisement, sending ACK`);
            const sourceAdvertisementAck = new SourceAdvertisementAckMsg(sourceAdvertisement.seqNum);
            this.lastReceivedSourceAdvertisement = sourceAdvertisement;
            this.lastSentSourceAdvertisementAck = sourceAdvertisementAck;
            this.sendJmpMsg(JmpMsgType.SourceAdvertisementAck, sourceAdvertisementAck);
            this.emit(JmpSessionEvents.SourceAdvertisementReceived, sourceAdvertisement);
        }
    }
    handleIncomingSourceAdvertisementAck(sourceAdvertisementAck) {
        var _a, _b, _c;
        if (sourceAdvertisementAck.sourceAdvertisementSeqNum ===
            ((_b = (_a = this.lastSentSourceAdvertisement) === null || _a === void 0 ? void 0 : _a.msg) === null || _b === void 0 ? void 0 : _b.seqNum)) {
            this.logger.info(`Received ACK for last sent SourceAdvertisement`);
            (_c = this.lastSentSourceAdvertisement) === null || _c === void 0 ? void 0 : _c.cancel();
        }
        else {
            this.logger.info(`Received ACK for old SourceAdvertisement`);
        }
    }
    handleIncomingMediaRequestStatus(mediaRequestStatus) {
        if (this.lastReceivedMediaRequestStatus &&
            mediaRequestStatus.seqNum < this.lastReceivedMediaRequestStatus.seqNum) {
            this.logger.info(`Received old MediaRequestStatus, ignoring`);
        }
        else if (this.lastReceivedMediaRequestStatus &&
            mediaRequestStatus.seqNum === this.lastReceivedMediaRequestStatus.seqNum) {
            if (this.lastSentMediaRequestStatusAck) {
                this.logger.info(`Received duplicate MediaRequestStatus, re-sending ACK`);
                this.sendJmpMsg(JmpMsgType.MediaRequestStatusAck, this.lastSentMediaRequestStatusAck);
            }
            else {
                this.logger.warn(`Received duplicate MediaRequestStatus, but there was no ACK previously sent`);
            }
        }
        else {
            this.logger.info(`Received new MediaRequestStatus, sending ACK`);
            const mediaRequestStatusAck = new MediaRequestStatusAckMsg(mediaRequestStatus.seqNum);
            this.lastReceivedMediaRequestStatus = mediaRequestStatus;
            this.lastSentMediaRequestStatusAck = mediaRequestStatusAck;
            this.sendJmpMsg(JmpMsgType.MediaRequestStatusAck, mediaRequestStatusAck);
            this.emit(JmpSessionEvents.MediaRequestStatusReceived, mediaRequestStatus);
        }
    }
    handleIncomingMediaRequestStatusAck(mediaRequestStatusAck) {
        var _a, _b, _c;
        if (mediaRequestStatusAck.mediaRequestStatusSeqNum ===
            ((_b = (_a = this.lastSentMediaRequestStatus) === null || _a === void 0 ? void 0 : _a.msg) === null || _b === void 0 ? void 0 : _b.seqNum)) {
            this.logger.info(`Received ACK for last sent MediaRequestStatus`);
            (_c = this.lastSentMediaRequestStatus) === null || _c === void 0 ? void 0 : _c.cancel();
        }
        else {
            this.logger.info(`Received ACK for old MediaRequestStatus`);
        }
    }
}

exports.WcmeErrorType = void 0;
(function (WcmeErrorType) {
    WcmeErrorType["CREATE_OFFER_FAILED"] = "CREATE_OFFER_FAILED";
    WcmeErrorType["SET_ANSWER_FAILED"] = "SET_ANSWER_FAILED";
    WcmeErrorType["OFFER_ANSWER_MISMATCH"] = "OFFER_ANSWER_MISMATCH";
    WcmeErrorType["SDP_MUNGE_FAILED"] = "SDP_MUNGE_FAILED";
    WcmeErrorType["SDP_MUNGE_MISSING_CODECS"] = "SDP_MUNGE_MISSING_CODECS";
    WcmeErrorType["INVALID_STREAM_REQUEST"] = "INVALID_STREAM_REQUEST";
    WcmeErrorType["GET_TRANSCEIVER_FAILED"] = "GET_TRANSCEIVER_FAILED";
    WcmeErrorType["GET_MAX_BITRATE_FAILED"] = "GET_MAX_BITRATE_FAILED";
    WcmeErrorType["GET_PAYLOAD_TYPE_FAILED"] = "GET_PAYLOAD_TYPE_FAILED";
    WcmeErrorType["SET_NMG_FAILED"] = "SET_NMG_FAILED";
    WcmeErrorType["DATA_CHANNEL_SEND_FAILED"] = "DATA_CHANNEL_SEND_FAILED";
})(exports.WcmeErrorType || (exports.WcmeErrorType = {}));
class WcmeError {
    constructor(type, message = '') {
        this.type = type;
        this.message = message;
    }
}

var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var logger$1 = {exports: {}};

/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */

(function (module) {
(function (global) {

	// Top level module for the global, static logger instance.
	var Logger = { };

	// For those that are at home that are keeping score.
	Logger.VERSION = "1.6.1";

	// Function which handles all incoming log messages.
	var logHandler;

	// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
	var contextualLoggersByNameMap = {};

	// Polyfill for ES5's Function.bind.
	var bind = function(scope, func) {
		return function() {
			return func.apply(scope, arguments);
		};
	};

	// Super exciting object merger-matron 9000 adding another 100 bytes to your download.
	var merge = function () {
		var args = arguments, target = args[0], key, i;
		for (i = 1; i < args.length; i++) {
			for (key in args[i]) {
				if (!(key in target) && args[i].hasOwnProperty(key)) {
					target[key] = args[i][key];
				}
			}
		}
		return target;
	};

	// Helper to define a logging level object; helps with optimisation.
	var defineLogLevel = function(value, name) {
		return { value: value, name: name };
	};

	// Predefined logging levels.
	Logger.TRACE = defineLogLevel(1, 'TRACE');
	Logger.DEBUG = defineLogLevel(2, 'DEBUG');
	Logger.INFO = defineLogLevel(3, 'INFO');
	Logger.TIME = defineLogLevel(4, 'TIME');
	Logger.WARN = defineLogLevel(5, 'WARN');
	Logger.ERROR = defineLogLevel(8, 'ERROR');
	Logger.OFF = defineLogLevel(99, 'OFF');

	// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
	// of each other.
	var ContextualLogger = function(defaultContext) {
		this.context = defaultContext;
		this.setLevel(defaultContext.filterLevel);
		this.log = this.info;  // Convenience alias.
	};

	ContextualLogger.prototype = {
		// Changes the current logging level for the logging instance.
		setLevel: function (newLevel) {
			// Ensure the supplied Level object looks valid.
			if (newLevel && "value" in newLevel) {
				this.context.filterLevel = newLevel;
			}
		},
		
		// Gets the current logging level for the logging instance
		getLevel: function () {
			return this.context.filterLevel;
		},

		// Is the logger configured to output messages at the supplied level?
		enabledFor: function (lvl) {
			var filterLevel = this.context.filterLevel;
			return lvl.value >= filterLevel.value;
		},

		trace: function () {
			this.invoke(Logger.TRACE, arguments);
		},

		debug: function () {
			this.invoke(Logger.DEBUG, arguments);
		},

		info: function () {
			this.invoke(Logger.INFO, arguments);
		},

		warn: function () {
			this.invoke(Logger.WARN, arguments);
		},

		error: function () {
			this.invoke(Logger.ERROR, arguments);
		},

		time: function (label) {
			if (typeof label === 'string' && label.length > 0) {
				this.invoke(Logger.TIME, [ label, 'start' ]);
			}
		},

		timeEnd: function (label) {
			if (typeof label === 'string' && label.length > 0) {
				this.invoke(Logger.TIME, [ label, 'end' ]);
			}
		},

		// Invokes the logger callback if it's not being filtered.
		invoke: function (level, msgArgs) {
			if (logHandler && this.enabledFor(level)) {
				logHandler(msgArgs, merge({ level: level }, this.context));
			}
		}
	};

	// Protected instance which all calls to the to level `Logger` module will be routed through.
	var globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });

	// Configure the global Logger instance.
	(function() {
		// Shortcut for optimisers.
		var L = Logger;

		L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
		L.trace = bind(globalLogger, globalLogger.trace);
		L.debug = bind(globalLogger, globalLogger.debug);
		L.time = bind(globalLogger, globalLogger.time);
		L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
		L.info = bind(globalLogger, globalLogger.info);
		L.warn = bind(globalLogger, globalLogger.warn);
		L.error = bind(globalLogger, globalLogger.error);

		// Don't forget the convenience alias!
		L.log = L.info;
	}());

	// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
	// object with the supplied log messages and the second being a context object which contains a hash of stateful
	// parameters which the logging function can consume.
	Logger.setHandler = function (func) {
		logHandler = func;
	};

	// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
	// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
	Logger.setLevel = function(level) {
		// Set the globalLogger's level.
		globalLogger.setLevel(level);

		// Apply this level to all registered contextual loggers.
		for (var key in contextualLoggersByNameMap) {
			if (contextualLoggersByNameMap.hasOwnProperty(key)) {
				contextualLoggersByNameMap[key].setLevel(level);
			}
		}
	};

	// Gets the global logging filter level
	Logger.getLevel = function() {
		return globalLogger.getLevel();
	};

	// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
	// default context and log handler.
	Logger.get = function (name) {
		// All logger instances are cached so they can be configured ahead of use.
		return contextualLoggersByNameMap[name] ||
			(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));
	};

	// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
	// write to the window's console object (if present); the optional options object can be used to customise the
	// formatter used to format each log message.
	Logger.createDefaultHandler = function (options) {
		options = options || {};

		options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
			// Prepend the logger's name to the log message for easy identification.
			if (context.name) {
				messages.unshift("[" + context.name + "]");
			}
		};

		// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
		// that don't offer a native console method.
		var timerStartTimeByLabelMap = {};

		// Support for IE8+ (and other, slightly more sane environments)
		var invokeConsoleMethod = function (hdlr, messages) {
			Function.prototype.apply.call(hdlr, console, messages);
		};

		// Check for the presence of a logger.
		if (typeof console === "undefined") {
			return function () { /* no console */ };
		}

		return function(messages, context) {
			// Convert arguments object to Array.
			messages = Array.prototype.slice.call(messages);

			var hdlr = console.log;
			var timerLabel;

			if (context.level === Logger.TIME) {
				timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];

				if (messages[1] === 'start') {
					if (console.time) {
						console.time(timerLabel);
					}
					else {
						timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
					}
				}
				else {
					if (console.timeEnd) {
						console.timeEnd(timerLabel);
					}
					else {
						invokeConsoleMethod(hdlr, [ timerLabel + ': ' +
							(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);
					}
				}
			}
			else {
				// Delegate through to custom warn/error loggers if present on the console.
				if (context.level === Logger.WARN && console.warn) {
					hdlr = console.warn;
				} else if (context.level === Logger.ERROR && console.error) {
					hdlr = console.error;
				} else if (context.level === Logger.INFO && console.info) {
					hdlr = console.info;
				} else if (context.level === Logger.DEBUG && console.debug) {
					hdlr = console.debug;
				} else if (context.level === Logger.TRACE && console.trace) {
					hdlr = console.trace;
				}

				options.formatter(messages, context);
				invokeConsoleMethod(hdlr, messages);
			}
		};
	};

	// Configure and example a Default implementation which writes to the `window.console` (if present).  The
	// `options` hash can be used to configure the default logLevel and provide a custom message formatter.
	Logger.useDefaults = function(options) {
		Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
		Logger.setHandler(Logger.createDefaultHandler(options));
	};

	// Createa an alias to useDefaults to avoid reaking a react-hooks rule.
	Logger.setDefaults = Logger.useDefaults;

	// Export to popular environments boilerplate.
	if (module.exports) {
		module.exports = Logger;
	}
	else {
		Logger._prevLogger = global.Logger;

		Logger.noConflict = function () {
			global.Logger = Logger._prevLogger;
			return Logger;
		};

		global.Logger = Logger;
	}
}(commonjsGlobal$1));
}(logger$1));

var Logger = logger$1.exports;

const DEFAULT_LOGGER_NAME = 'web-client-media-engine';
const logger = Logger.get(DEFAULT_LOGGER_NAME);
logger.setLevel(Logger.DEBUG);
function setLogLevel(level) {
    logger.setLevel(level);
    Logger$1.setLevel(level);
    Logger$2.setLevel(level);
}
function getLogLevel() {
    return logger.getLevel();
}
function logErrorAndThrow(errorType, message) {
    logger.error(message);
    throw new WcmeError(errorType, message);
}
function setLogHandler(logHandler) {
    Logger.setHandler(logHandler);
    Logger$1.setHandler(logHandler);
    Logger$2.setHandler(logHandler);
}

exports.MediaCodecMimeType = void 0;
(function (MediaCodecMimeType) {
    MediaCodecMimeType["H264"] = "video/H264";
    MediaCodecMimeType["AV1"] = "video/AV1";
    MediaCodecMimeType["OPUS"] = "audio/opus";
})(exports.MediaCodecMimeType || (exports.MediaCodecMimeType = {}));
const defaultMaxVideoEncodeFrameSize = 8160;
const defaultMaxVideoEncodeMbps = 244800;
exports.RecommendedOpusBitrates = void 0;
(function (RecommendedOpusBitrates) {
    RecommendedOpusBitrates[RecommendedOpusBitrates["NB"] = 12000] = "NB";
    RecommendedOpusBitrates[RecommendedOpusBitrates["WB"] = 20000] = "WB";
    RecommendedOpusBitrates[RecommendedOpusBitrates["FB"] = 40000] = "FB";
    RecommendedOpusBitrates[RecommendedOpusBitrates["FB_MONO_MUSIC"] = 64000] = "FB_MONO_MUSIC";
    RecommendedOpusBitrates[RecommendedOpusBitrates["FB_STEREO_MUSIC"] = 128000] = "FB_STEREO_MUSIC";
})(exports.RecommendedOpusBitrates || (exports.RecommendedOpusBitrates = {}));
const maxFrameSizeToMaxBitrateMap = new Map([
    [60, 99000],
    [240, 199000],
    [576, 300000],
    [920, 640000],
    [1296, 720000],
    [2304, 880000],
    [3600, 2500000],
    [8160, 4000000],
]);
const defaultVideoMainRtxTime = '300';
const defaultVideoSlidesRtxTime = '1000';
function areProfileLevelIdsCompatible(senderProfileLevelId, receiverProfileLevelId, levelAsymmetryAllowed) {
    const senderProfile = Number.parseInt(`0x${senderProfileLevelId}`, 16);
    const recvProfile = Number.parseInt(`0x${receiverProfileLevelId}`, 16);
    const senderProfileIdc = senderProfile >> 16;
    const recvProfileIdc = recvProfile >> 16;
    const senderProfileIop = (senderProfile & 0x00ff00) >> 8;
    const recvProfileIop = (recvProfile & 0x00ff00) >> 8;
    const senderLevelIdc = senderProfile & 0x0000ff;
    const recvLevelIdc = recvProfile & 0x0000ff;
    const areProfileCompatible = (senderProfileIdc === recvProfileIdc && senderProfileIop === recvProfileIop) ||
        (senderProfileIdc === 0x42 &&
            recvProfileIdc === 0x42 &&
            (senderProfileIop & 0x40) === (recvProfileIop & 0x40));
    const isLevelIdcCompatible = levelAsymmetryAllowed
        ? true
        : senderLevelIdc <= recvLevelIdc;
    return areProfileCompatible && isLevelIdcCompatible;
}
function areCodecsCompatible(senderCodec, receiverCodec) {
    return Object.keys(receiverCodec).every((key) => {
        if (key === 'clockRate' || key === 'name') {
            return senderCodec[key] === receiverCodec[key];
        }
        if (key === 'fmtParams') {
            const fmtpForSender = senderCodec[key];
            const fmtpForReceiver = receiverCodec[key];
            const levelAsymmetryAllowed = [...fmtpForSender.keys()].some((senderFmtpParamKey) => {
                return (senderFmtpParamKey === 'level-asymmetry-allowed' &&
                    fmtpForReceiver.get(senderFmtpParamKey) === '1' &&
                    fmtpForSender.get(senderFmtpParamKey) === '1');
            });
            return [...fmtpForSender.keys()].every((senderFmtpParamKey) => {
                if (fmtpForReceiver.get(senderFmtpParamKey)) {
                    if (senderFmtpParamKey === 'profile-level-id') {
                        return areProfileLevelIdsCompatible(fmtpForSender.get(senderFmtpParamKey), fmtpForReceiver.get(senderFmtpParamKey), levelAsymmetryAllowed);
                    }
                }
                if (senderFmtpParamKey === 'packetization-mode') {
                    return fmtpForSender.get(senderFmtpParamKey) === fmtpForReceiver.get(senderFmtpParamKey);
                }
                return true;
            });
        }
        return true;
    });
}
function gcd(a, b) {
    return b === 0 ? a : gcd(b, a % b);
}
function getFrameHeightByMaxFs(sourceAspectRatio, requestedMaxFs) {
    const _gcd = gcd(sourceAspectRatio[0], sourceAspectRatio[1]);
    const minNumberRatiosForWidth = sourceAspectRatio[0] / _gcd;
    const minNumberRatiosForHeight = sourceAspectRatio[1] / _gcd;
    return (Math.floor(Math.sqrt((requestedMaxFs * 16 * 16) / (minNumberRatiosForWidth * minNumberRatiosForHeight))) * minNumberRatiosForHeight);
}
function getScaleDownRatio(sourceWidth, sourceHeight, maxFs, maxWidth, maxHeight) {
    if (!sourceWidth || !sourceHeight || !maxFs) {
        return undefined;
    }
    let scaleDownRatio = Math.max(sourceHeight / getFrameHeightByMaxFs([sourceWidth, sourceHeight], maxFs), 1.0);
    if (maxWidth && maxHeight) {
        scaleDownRatio = Math.max(sourceWidth / maxWidth, sourceHeight / maxHeight, scaleDownRatio);
    }
    return scaleDownRatio;
}
function getRecommendedMaxBitrateForFrameSize(requestedMaxFs) {
    if (requestedMaxFs < 60) {
        logErrorAndThrow(exports.WcmeErrorType.GET_MAX_BITRATE_FAILED, `Requested max video frame size cannot be less than 60.`);
    }
    const expectedHeight = [...maxFrameSizeToMaxBitrateMap.keys()]
        .sort((a, b) => b - a)
        .find((h) => requestedMaxFs >= h);
    return maxFrameSizeToMaxBitrateMap.get(expectedHeight);
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var rtcstats = {};

var __awaiter = (commonjsGlobal$1 && commonjsGlobal$1.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (commonjsGlobal$1 && commonjsGlobal$1.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(rtcstats, "__esModule", { value: true });
var rtcStats_1 = rtcstats.rtcStats = void 0;
/**
 * Copies values of any nested depth.
 *
 * @param value - The value to be copied.
 * @returns - Copied value.
 */
var deepCopy$1 = function (value) { return JSON.parse(JSON.stringify(value)); };
/**
 * Check deep equality between two values.
 *
 * @param value1 - First value to check.
 * @param value2 - Second value to check.
 * @returns True if values are deeply equal, false otherwise.
 */
var deepEqual = function (value1, value2) {
    // If both immutable values are equal, return true.
    if (value1 === value2) {
        return true;
    }
    // If both are objects, we check the length and properties of each.
    if (value1 && value2 && typeof value1 === 'object' && typeof value2 === 'object') {
        if (value1.constructor !== value2.constructor)
            return false;
        // Return false if the objects are of different sizes.
        if (Object.keys(value1).length !== Object.keys(value2).length) {
            return false;
        }
        // Deep equal check each property in the object, returns true if we found no
        // differing properties.
        return Object.keys(value1).reduce(function (val, prop) {
            if (value2[prop]) {
                if (!deepEqual(value1[prop], value2[prop])) {
                    return false;
                }
            }
            else {
                return false;
            }
            return val;
        }, true);
    }
    // Return false if no other conditions are met.
    return false;
};
/**
 * Translates a Map into an object.
 *
 * @param report - The report in Map form.
 * @returns - A deduped object.
 */
var map2obj = function (report) {
    if (!report.size) {
        return report;
    }
    var o = {};
    report.forEach(function (value, key) {
        o[key] = value;
    });
    return o;
};
var dumpStream = function (stream) { return ({
    id: stream.id,
    tracks: stream.getTracks().map(function (track) { return ({
        id: track.id,
        kind: track.kind,
        label: track.label,
        enabled: track.enabled,
        muted: track.muted,
        readyState: track.readyState,
    }); }),
}); };
var persistedKeys = ['type', 'id', 'timestamp'];
/**
 * Check to see if the report consists of more than just the persisted metadata.
 *
 * @param report - The report line being checked.
 * @returns True if the report item contains non-persisted keys, false otherwise.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var hasNonMetadata = function (report) {
    return !!Object.keys(report).filter(function (key) { return !persistedKeys.includes(key); }).length;
};
/**
 * Apply a delta compression to the stats report. Reduces size by ~90%.
 * To reduce further, report keys could be compressed.
 *
 * @param oldStats - Previous report items that we dedupe against.
 * @param newStats - New incoming stats.
 * @returns - Compressed Stats.
 */
var deltaCompression = function (oldStats, newStats) {
    var updatedStats = deepCopy$1(newStats);
    Object.keys(updatedStats).forEach(function (id) {
        var report = updatedStats[id];
        if (!oldStats[id]) {
            return;
        }
        // Persist specific values beyond delta compression, as long as they
        // aren't the only non-deduped keys.
        Object.keys(report).forEach(function (name) {
            if (deepEqual(report[name], oldStats[id][name]) && !persistedKeys.includes(name)) {
                delete updatedStats[id][name];
            }
            if (!hasNonMetadata(report)) {
                delete updatedStats[id];
            }
        });
    });
    // Use the most recent timestamp.
    var timestamp = -Infinity;
    Object.keys(updatedStats).forEach(function (id) {
        var report = updatedStats[id];
        if (report.timestamp > timestamp) {
            timestamp = report.timestamp;
        }
    });
    // Delete the timestamps on each item.
    Object.keys(updatedStats).forEach(function (id) {
        var report = updatedStats[id];
        if (report.timestamp === timestamp) {
            delete report.timestamp;
        }
    });
    updatedStats.timestamp = timestamp;
    return updatedStats;
};
/**
 * Format the stats report into an array.
 *
 * @param report - A WebRTC stats report.
 * @returns - An array of Stats Report items.
 */
var formatStatsReport = function (report) {
    return Object.keys(report)
        .filter(function (name) { return name !== 'timestamp'; })
        .map(function (name) { return JSON.stringify(report[name]); });
};
/**
 * Parametrize a single string event to contain type and an (empty) id.
 *
 * @param value - The value to parametrize.
 * @returns An event object.
 */
var makeEvent = function (value) { return [JSON.stringify({ value: value, type: 'string', id: '' })]; };
/**
 * Attach a Peer Connection to periodically get updated on events and stats.
 *
 * @param pc - Peer Connection in which we attach.
 * @param logger - Logging function to log events and stats.
 * @param intervalTime - Time between each `getStats` check.
 * @param statsPreProcessor - Optional function that modifies stats.
 */
var rtcStats = function (pc, logger, intervalTime, statsPreProcessor) {
    if (statsPreProcessor === void 0) { statsPreProcessor = function () { return Promise.resolve(); }; }
    var prev = {};
    /**
     * Log stats or event data with additional tracking information.
     *
     * @param name - Name of the event to log.
     * @param payload - Log data pertaining to the event.
     * @param timestamp - Time the event happened in milliseconds.
     */
    var trace = function (name, payload, timestamp) {
        logger({ timestamp: timestamp ? Math.round(timestamp) : Date.now(), name: name, payload: payload });
    };
    trace('rtcConfiguration', makeEvent(JSON.stringify(pc.getConfiguration())));
    var origPeerConnection = window.RTCPeerConnection;
    pc.addEventListener('icecandidate', function (e) {
        if (e.candidate) {
            trace('onicecandidate', makeEvent(JSON.stringify(e.candidate)));
        }
    });
    pc.addEventListener('icecandidateerror', function (event) {
        var url = event.url, errorCode = event.errorCode, errorText = event.errorText;
        trace('onicecandidateerror', makeEvent("[".concat(url, "] ").concat(errorCode, ": ").concat(errorText)));
    });
    pc.addEventListener('track', function (e) {
        trace('ontrack', makeEvent("".concat(e.track.kind, ":").concat(e.track.id, " ").concat(e.streams
            .map(function (stream) { return "stream:".concat(stream.id); })
            .join(' '))));
    });
    pc.addEventListener('signalingstatechange', function () {
        trace('onsignalingstatechange', makeEvent(pc.signalingState));
    });
    pc.addEventListener('iceconnectionstatechange', function () {
        trace('oniceconnectionstatechange', makeEvent(pc.iceConnectionState));
    });
    pc.addEventListener('icegatheringstatechange', function () {
        trace('onicegatheringstatechange', makeEvent(pc.iceGatheringState));
    });
    pc.addEventListener('connectionstatechange', function () {
        trace('onconnectionstatechange', makeEvent(pc.connectionState));
    });
    pc.addEventListener('negotiationneeded', function () {
        trace('onnegotiationneeded', makeEvent('negotiationneeded'));
    });
    pc.addEventListener('datachannel', function (event) {
        trace('ondatachannel', makeEvent("".concat(event.channel.id, ": ").concat(event.channel.label)));
    });
    ['close'].forEach(function (method) {
        var nativeMethod = origPeerConnection.prototype[method];
        if (nativeMethod) {
            origPeerConnection.prototype[method] = function () {
                trace("on".concat(method), makeEvent(method));
                return nativeMethod.apply(this, arguments);
            };
        }
    });
    ['createDataChannel'].forEach(function (method) {
        var nativeMethod = origPeerConnection.prototype[method];
        if (nativeMethod) {
            origPeerConnection.prototype[method] = function () {
                trace("on".concat(method), makeEvent(method));
                var dataChannel = nativeMethod.apply(this, arguments);
                dataChannel.addEventListener('open', function () {
                    trace("ondataChannelOpen", makeEvent("".concat(dataChannel.id, ":").concat(dataChannel.label)));
                });
                dataChannel.addEventListener('close', function () {
                    trace("ondataChannelClose", makeEvent("".concat(dataChannel.id, ":").concat(dataChannel.label)));
                });
                dataChannel.addEventListener('error', function (event) {
                    var error = event.error;
                    trace("ondataChannelError", makeEvent("".concat(dataChannel.id, ":").concat(dataChannel.label, ": ").concat(error.errorDetail)));
                });
                return dataChannel;
            };
        }
    });
    ['addStream', 'removeStream'].forEach(function (method) {
        var nativeMethod = origPeerConnection.prototype[method];
        if (nativeMethod) {
            origPeerConnection.prototype[method] = function () {
                var stream = arguments[0];
                var streamInfo = stream
                    .getTracks()
                    .map(function (t) { return "".concat(t.kind, ":").concat(t.id); })
                    .join(',');
                trace("on".concat(method), makeEvent("".concat(stream.id, " ").concat(streamInfo)));
                return nativeMethod.apply(this, arguments);
            };
        }
    });
    ['addTrack'].forEach(function (method) {
        var nativeMethod = origPeerConnection.prototype[method];
        if (nativeMethod) {
            origPeerConnection.prototype[method] = function () {
                var track = arguments[0];
                var streams = [].slice.call(arguments, 1);
                trace("on".concat(method), makeEvent("".concat(track.kind, ":").concat(track.id, " ").concat(streams.map(function (s) { return "stream:".concat(s.id); }).join(';') || '-')));
                return nativeMethod.apply(this, arguments);
            };
        }
    });
    ['removeTrack'].forEach(function (method) {
        var nativeMethod = origPeerConnection.prototype[method];
        if (nativeMethod) {
            origPeerConnection.prototype[method] = function () {
                var track = arguments[0].track;
                trace("on".concat(method), makeEvent(track ? "".concat(track.kind, ":").concat(track.id) : 'null'));
                return nativeMethod.apply(this, arguments);
            };
        }
    });
    ['createOffer', 'createAnswer'].forEach(function (method) {
        var nativeMethod = origPeerConnection.prototype[method];
        if (nativeMethod) {
            origPeerConnection.prototype[method] = function () {
                var opts;
                var args = arguments;
                if (arguments.length === 1 && typeof arguments[0] === 'object') {
                    // eslint-disable-next-line prefer-destructuring
                    opts = arguments[0];
                }
                else if (arguments.length === 3 && typeof arguments[2] === 'object') {
                    // eslint-disable-next-line prefer-destructuring
                    opts = arguments[2];
                }
                trace("on".concat(method), makeEvent(opts || ''));
                return nativeMethod.apply(this, opts ? [opts] : undefined).then(function (description) {
                    trace("on".concat(method, "OnSuccess"), makeEvent(description.sdp));
                    if (args.length > 0 && typeof args[0] === 'function') {
                        args[0].apply(null, [description]);
                        return undefined;
                    }
                    return description;
                }, function (err) {
                    trace("on".concat(method, "OnFailure"), makeEvent(err.toString()));
                    if (args.length > 1 && typeof args[1] === 'function') {
                        args[1].apply(null, [err]);
                        return;
                    }
                    throw err;
                });
            };
        }
    });
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
        var nativeMethod = origPeerConnection.prototype[method];
        if (nativeMethod) {
            origPeerConnection.prototype[method] = function () {
                var _this = this;
                var args = arguments;
                trace("on".concat(method), makeEvent(method === 'addIceCandidate'
                    ? arguments[0]
                    : (arguments[0] ? arguments[0].sdp : 'undefined')));
                return nativeMethod.apply(this, [arguments[0]]).then(function () {
                    var _a;
                    trace("on".concat(method, "OnSuccess"), makeEvent('success'));
                    if (method.endsWith('Description')) {
                        if (!_this.transportEventsPreviouslyAdded) {
                            var senders = _this.getSenders();
                            var _loop_1 = function (sender) {
                                if (sender.transport) {
                                    sender.transport.addEventListener('statechange', function () {
                                        if (sender && sender.transport) {
                                            trace("ondtlsStateChange", makeEvent(sender.transport.state));
                                        }
                                    });
                                    sender.transport.addEventListener('error', function (error) {
                                        var errorEvent = error;
                                        trace("ondtlsError", makeEvent(errorEvent.error.errorDetail));
                                    });
                                    if (sender.transport.iceTransport) {
                                        sender.transport.iceTransport.addEventListener('selectedcandidatepairchange', function () {
                                            var _a, _b, _c, _d, _e, _f;
                                            if (sender.transport && sender.transport.iceTransport) {
                                                var pair = sender.transport.iceTransport.getSelectedCandidatePair();
                                                var localCandidate = "".concat((_a = pair === null || pair === void 0 ? void 0 : pair.local) === null || _a === void 0 ? void 0 : _a.address, ":").concat((_b = pair === null || pair === void 0 ? void 0 : pair.local) === null || _b === void 0 ? void 0 : _b.port, "/").concat((_c = pair === null || pair === void 0 ? void 0 : pair.local) === null || _c === void 0 ? void 0 : _c.protocol);
                                                var remoteCandidate = "".concat((_d = pair === null || pair === void 0 ? void 0 : pair.remote) === null || _d === void 0 ? void 0 : _d.address, ":").concat((_e = pair === null || pair === void 0 ? void 0 : pair.remote) === null || _e === void 0 ? void 0 : _e.port, "/").concat((_f = pair === null || pair === void 0 ? void 0 : pair.remote) === null || _f === void 0 ? void 0 : _f.protocol);
                                                var pairString = "local: ".concat(localCandidate, ", remote: ").concat(remoteCandidate);
                                                trace('onselectedCandidatePairChange', makeEvent(pairString));
                                            }
                                        });
                                    }
                                    _this.transportEventsPreviouslyAdded = true;
                                    if (pc.getConfiguration().bundlePolicy === 'max-bundle') {
                                        return "break";
                                    }
                                }
                            };
                            for (var _i = 0, senders_1 = senders; _i < senders_1.length; _i++) {
                                var sender = senders_1[_i];
                                var state_1 = _loop_1(sender);
                                if (state_1 === "break")
                                    break;
                            }
                        }
                        if (!_this.sctpEventsPreviouslyAdded) {
                            // Some Firefox versions prior to 113 have sctp defined but not the events, so check both here.
                            if ((_a = _this.sctp) === null || _a === void 0 ? void 0 : _a.addEventListener) {
                                _this.sctp.addEventListener('statechange', function () {
                                    trace('onsctpStateChange', makeEvent(_this.sctp.state));
                                });
                                _this.sctpEventsPreviouslyAdded = true;
                            }
                        }
                    }
                    if (args.length >= 2 && typeof args[1] === 'function') {
                        args[1].apply(null, []);
                        return undefined;
                    }
                    return undefined;
                }, function (err) {
                    trace("on".concat(method, "OnFailure"), makeEvent(err.toString()));
                    if (args.length >= 3 && typeof args[2] === 'function') {
                        args[2].apply(null, [err]);
                        return undefined;
                    }
                    throw err;
                });
            };
        }
    });
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        var origGetUserMedia_1 = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
        var gum = function () {
            trace('onnavigator.mediaDevices.getUserMedia', makeEvent(JSON.stringify(arguments[0])));
            return origGetUserMedia_1
                .apply(navigator.mediaDevices, arguments)
                .then(function (stream) {
                trace('onnavigator.mediaDevices.getUserMediaOnSuccess', makeEvent(JSON.stringify(dumpStream(stream))));
                return stream;
            }, function (err) {
                trace('onnavigator.mediaDevices.getUserMediaOnFailure', makeEvent(err.name));
                return Promise.reject(err);
            });
        };
        navigator.mediaDevices.getUserMedia = gum.bind(navigator.mediaDevices);
    }
    if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {
        var origGetDisplayMedia_1 = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);
        var gdm = function () {
            trace('onnavigator.mediaDevices.getDisplayMedia', makeEvent(JSON.stringify(arguments[0])));
            return origGetDisplayMedia_1
                .apply(navigator.mediaDevices, arguments)
                .then(function (stream) {
                trace('onnavigator.mediaDevices.getDisplayMediaOnSuccess', makeEvent(JSON.stringify(dumpStream(stream))));
                return stream;
            }, function (err) {
                trace('onnavigator.mediaDevices.getDisplayMediaOnFailure', makeEvent(err.name));
                return Promise.reject(err);
            });
        };
        navigator.mediaDevices.getDisplayMedia = gdm.bind(navigator.mediaDevices);
    }
    var getStatsReport = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, pc.getStats(null).then(function (res) {
                    // Convert from stats report to js Map in order to have values set in `statsPreProcessor`
                    var statsMap = new Map();
                    res.forEach(function (stats, key) { return statsMap.set(key, stats); });
                    return statsPreProcessor(statsMap).then(function () {
                        var now = map2obj(statsMap);
                        var base = deepCopy$1(now); // our new prev
                        var compressed = deltaCompression(prev, now);
                        trace('stats-report', formatStatsReport(compressed), compressed.timestamp !== -Infinity ? compressed.timestamp : undefined);
                        prev = base;
                        return Promise.resolve();
                    });
                })];
        });
    }); };
    var interval = window.setInterval(function () {
        if (pc.signalingState === 'closed') {
            window.clearInterval(interval);
            return;
        }
        getStatsReport();
    }, intervalTime);
    var forceStatsReport = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getStatsReport()];
        });
    }); };
    return { forceStatsReport: forceStatsReport };
};
rtcStats_1 = rtcstats.rtcStats = rtcStats;

const NUM = '\\d+';
const SDP_TOKEN = "[!#$%&'*+\\-.^_`{|}~a-zA-Z0-9]+";
const ANY_NON_WS = '\\S+';
const SP = '\\s';
const REST = '.+';

class Line {
}

var _a$5;
class BandwidthLine extends Line {
    constructor(bandwidthType, bandwidth) {
        super();
        this.bandwidthType = bandwidthType;
        this.bandwidth = bandwidth;
    }
    static fromSdpLine(line) {
        if (!BandwidthLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(BandwidthLine.regex);
        const bandwidthType = tokens[1];
        const bandwidth = parseInt(tokens[2], 10);
        return new BandwidthLine(bandwidthType, bandwidth);
    }
    toSdpLine() {
        return `b=${this.bandwidthType}:${this.bandwidth}`;
    }
}
_a$5 = BandwidthLine;
BandwidthLine.BW_TYPE_REGEX = 'CT|AS|TIAS';
BandwidthLine.regex = new RegExp(`^(${_a$5.BW_TYPE_REGEX}):(${NUM})`);

class BundleGroupLine extends Line {
    constructor(mids) {
        super();
        this.mids = mids;
    }
    static fromSdpLine(line) {
        if (!BundleGroupLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(BundleGroupLine.regex);
        const mids = tokens[1].split(' ');
        return new BundleGroupLine(mids);
    }
    toSdpLine() {
        return `a=group:BUNDLE ${this.mids.join(' ')}`;
    }
}
BundleGroupLine.regex = new RegExp(`^group:BUNDLE (${REST})`);

var _a$4;
class CandidateLine extends Line {
    constructor(foundation, componentId, transport, priority, connectionAddress, port, candidateType, relAddr, relPort, candidateExtensions) {
        super();
        this.foundation = foundation;
        this.componentId = componentId;
        this.transport = transport;
        this.priority = priority;
        this.connectionAddress = connectionAddress;
        this.port = port;
        this.candidateType = candidateType;
        this.relAddr = relAddr;
        this.relPort = relPort;
        this.candidateExtensions = candidateExtensions;
    }
    static fromSdpLine(line) {
        if (!CandidateLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(CandidateLine.regex);
        const foundation = tokens[1];
        const componentId = parseInt(tokens[2], 10);
        const transport = tokens[3];
        const priority = parseInt(tokens[4], 10);
        const connectionAddress = tokens[5];
        const port = parseInt(tokens[6], 10);
        const candidateType = tokens[7];
        const relAddr = tokens[8];
        const relPort = tokens[9] ? parseInt(tokens[9], 10) : undefined;
        const candidateExtensions = tokens[10];
        return new CandidateLine(foundation, componentId, transport, priority, connectionAddress, port, candidateType, relAddr, relPort, candidateExtensions);
    }
    toSdpLine() {
        let str = '';
        str += `a=candidate:${this.foundation} ${this.componentId} ${this.transport} ${this.priority} ${this.connectionAddress} ${this.port} typ ${this.candidateType}`;
        if (this.relAddr) {
            str += ` raddr ${this.relAddr}`;
        }
        if (this.relPort) {
            str += ` rport ${this.relPort}`;
        }
        if (this.candidateExtensions) {
            str += ` ${this.candidateExtensions}`;
        }
        return str;
    }
}
_a$4 = CandidateLine;
CandidateLine.ICE_CHARS = `[a-zA-Z0-9+/]+`;
CandidateLine.regex = new RegExp(`^candidate:(${_a$4.ICE_CHARS}) (${NUM}) (${ANY_NON_WS}) (${NUM}) (${ANY_NON_WS}) (${NUM}) typ (${ANY_NON_WS})(?: raddr (${ANY_NON_WS}))?(?: rport (${NUM}))?(?: (${REST}))?`);

class ConnectionLine extends Line {
    constructor(netType, addrType, ipAddr) {
        super();
        this.netType = netType;
        this.addrType = addrType;
        this.ipAddr = ipAddr;
    }
    static fromSdpLine(line) {
        if (!ConnectionLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(ConnectionLine.regex);
        const netType = tokens[1];
        const addrType = tokens[2];
        const ipAddr = tokens[3];
        return new ConnectionLine(netType, addrType, ipAddr);
    }
    toSdpLine() {
        return `c=${this.netType} ${this.addrType} ${this.ipAddr}`;
    }
}
ConnectionLine.regex = new RegExp(`^(${ANY_NON_WS}) (${ANY_NON_WS}) (${ANY_NON_WS})`);

class ContentLine extends Line {
    constructor(values) {
        super();
        this.values = values;
    }
    static fromSdpLine(line) {
        if (!ContentLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(ContentLine.regex);
        const values = tokens[1].split(',');
        return new ContentLine(values);
    }
    toSdpLine() {
        return `a=content:${this.values.join(',')}`;
    }
}
ContentLine.regex = new RegExp(`^content:(${REST})$`);

class DirectionLine extends Line {
    constructor(direction) {
        super();
        this.direction = direction;
    }
    static fromSdpLine(line) {
        if (!DirectionLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(DirectionLine.regex);
        const direction = tokens[1];
        return new DirectionLine(direction);
    }
    toSdpLine() {
        return `a=${this.direction}`;
    }
}
DirectionLine.regex = /^(sendrecv|sendonly|recvonly|inactive)$/;

var _a$3;
class ExtMapLine extends Line {
    constructor(id, uri, direction, extensionAttributes) {
        super();
        this.id = id;
        this.uri = uri;
        this.direction = direction;
        this.extensionAttributes = extensionAttributes;
    }
    static fromSdpLine(line) {
        if (!ExtMapLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(ExtMapLine.regex);
        const id = parseInt(tokens[1], 10);
        const direction = tokens[2];
        const uri = tokens[3];
        const extensionAttributes = tokens[4];
        return new ExtMapLine(id, uri, direction, extensionAttributes);
    }
    toSdpLine() {
        let str = '';
        str += `a=extmap:${this.id}`;
        if (this.direction) {
            str += `/${this.direction}`;
        }
        str += ` ${this.uri}`;
        if (this.extensionAttributes) {
            str += ` ${this.extensionAttributes}`;
        }
        return str;
    }
}
_a$3 = ExtMapLine;
ExtMapLine.EXTMAP_DIRECTION = `sendonly|recvonly|sendrecv|inactive`;
ExtMapLine.regex = new RegExp(`^extmap:(${NUM})(?:/(${_a$3.EXTMAP_DIRECTION}))? (${ANY_NON_WS})(?: (${REST}))?`);

class FingerprintLine extends Line {
    constructor(fingerprint) {
        super();
        this.fingerprint = fingerprint;
    }
    static fromSdpLine(line) {
        if (!FingerprintLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(FingerprintLine.regex);
        const fingerprint = tokens[1];
        return new FingerprintLine(fingerprint);
    }
    toSdpLine() {
        return `a=fingerprint:${this.fingerprint}`;
    }
}
FingerprintLine.regex = new RegExp(`^fingerprint:(${REST})`);

function parseFmtpParams(fmtpParams) {
    fmtpParams = fmtpParams.replace(/^a=fmtp:\d+\x20/, '');
    const fmtpObj = new Map();
    if (/^\d+([,/-]\d+)+$/.test(fmtpParams)) {
        fmtpObj.set(fmtpParams, undefined);
        return fmtpObj;
    }
    fmtpParams.split(';').forEach((param) => {
        const paramArr = param && param.split('=');
        if (paramArr.length !== 2 || !paramArr[0] || !paramArr[1]) {
            throw new Error(`Fmtp params is invalid with ${fmtpParams}`);
        }
        fmtpObj.set(paramArr[0], paramArr[1]);
    });
    return fmtpObj;
}
class FmtpLine extends Line {
    constructor(payloadType, params) {
        super();
        this.payloadType = payloadType;
        this.params = params;
    }
    static fromSdpLine(line) {
        if (!FmtpLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(FmtpLine.regex);
        const payloadType = parseInt(tokens[1], 10);
        const params = tokens[2];
        return new FmtpLine(payloadType, parseFmtpParams(params));
    }
    toSdpLine() {
        const fmtParams = Array.from(this.params.keys())
            .map((key) => {
            if (this.params.get(key) !== undefined) {
                return `${key}=${this.params.get(key)}`;
            }
            return `${key}`;
        })
            .join(';');
        return `a=fmtp:${this.payloadType} ${fmtParams}`;
    }
}
FmtpLine.regex = new RegExp(`^fmtp:(${NUM}) (${REST})`);

class IceOptionsLine extends Line {
    constructor(options) {
        super();
        this.options = options;
    }
    static fromSdpLine(line) {
        if (!IceOptionsLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(IceOptionsLine.regex);
        const options = tokens[1].split(' ');
        return new IceOptionsLine(options);
    }
    toSdpLine() {
        return `a=ice-options:${this.options.join(' ')}`;
    }
}
IceOptionsLine.regex = new RegExp(`^ice-options:(${REST})$`);

class IcePwdLine extends Line {
    constructor(pwd) {
        super();
        this.pwd = pwd;
    }
    static fromSdpLine(line) {
        if (!IcePwdLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(IcePwdLine.regex);
        const pwd = tokens[1];
        return new IcePwdLine(pwd);
    }
    toSdpLine() {
        return `a=ice-pwd:${this.pwd}`;
    }
}
IcePwdLine.regex = new RegExp(`^ice-pwd:(${ANY_NON_WS})$`);

class IceUfragLine extends Line {
    constructor(ufrag) {
        super();
        this.ufrag = ufrag;
    }
    static fromSdpLine(line) {
        if (!IceUfragLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(IceUfragLine.regex);
        const ufrag = tokens[1];
        return new IceUfragLine(ufrag);
    }
    toSdpLine() {
        return `a=ice-ufrag:${this.ufrag}`;
    }
}
IceUfragLine.regex = new RegExp(`^ice-ufrag:(${ANY_NON_WS})$`);

class MaxMessageSizeLine extends Line {
    constructor(maxMessageSize) {
        super();
        this.maxMessageSize = maxMessageSize;
    }
    static fromSdpLine(line) {
        if (!MaxMessageSizeLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(MaxMessageSizeLine.regex);
        const maxMessageSize = parseInt(tokens[1], 10);
        return new MaxMessageSizeLine(maxMessageSize);
    }
    toSdpLine() {
        return `a=max-message-size:${this.maxMessageSize}`;
    }
}
MaxMessageSizeLine.regex = new RegExp(`^max-message-size:(${NUM})`);

var _a$2;
class MediaLine extends Line {
    constructor(type, port, protocol, formats) {
        super();
        this.type = type;
        this.port = port;
        this.protocol = protocol;
        this.formats = formats;
    }
    static fromSdpLine(line) {
        if (!MediaLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(MediaLine.regex);
        const type = tokens[1];
        const port = parseInt(tokens[2], 10);
        const protocol = tokens[3];
        const formats = tokens[4].split(' ');
        return new MediaLine(type, port, protocol, formats);
    }
    toSdpLine() {
        return `m=${this.type} ${this.port} ${this.protocol} ${this.formats.join(' ')}`;
    }
}
_a$2 = MediaLine;
MediaLine.MEDIA_TYPE = 'audio|video|application';
MediaLine.regex = new RegExp(`^(${_a$2.MEDIA_TYPE}) (${NUM}) (${ANY_NON_WS}) (${REST})`);

class MidLine extends Line {
    constructor(mid) {
        super();
        this.mid = mid;
    }
    static fromSdpLine(line) {
        if (!MidLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(MidLine.regex);
        const mid = tokens[1];
        return new MidLine(mid);
    }
    toSdpLine() {
        return `a=mid:${this.mid}`;
    }
}
MidLine.regex = new RegExp(`^mid:(${ANY_NON_WS})$`);

class OriginLine extends Line {
    constructor(username, sessionId, sessionVersion, netType, addrType, ipAddr) {
        super();
        this.username = username;
        this.sessionId = sessionId;
        this.sessionVersion = sessionVersion;
        this.netType = netType;
        this.addrType = addrType;
        this.ipAddr = ipAddr;
    }
    static fromSdpLine(line) {
        if (!OriginLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(OriginLine.regex);
        const username = tokens[1];
        const sessionId = tokens[2];
        const sessionVersion = parseInt(tokens[3], 10);
        const netType = tokens[4];
        const addrType = tokens[5];
        const ipAddr = tokens[6];
        return new OriginLine(username, sessionId, sessionVersion, netType, addrType, ipAddr);
    }
    toSdpLine() {
        return `o=${this.username} ${this.sessionId} ${this.sessionVersion} ${this.netType} ${this.addrType} ${this.ipAddr}`;
    }
}
OriginLine.regex = new RegExp(`^(${ANY_NON_WS}) (${ANY_NON_WS}) (${NUM}) (${ANY_NON_WS}) (${ANY_NON_WS}) (${ANY_NON_WS})`);

var _a$1;
class RidLine extends Line {
    constructor(id, direction, params) {
        super();
        this.id = id;
        this.direction = direction;
        this.params = params;
    }
    static fromSdpLine(line) {
        if (!RidLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(RidLine.regex);
        const id = tokens[1];
        const direction = tokens[2];
        const params = tokens[3];
        return new RidLine(id, direction, params);
    }
    toSdpLine() {
        let str = '';
        str += `a=rid:${this.id} ${this.direction}`;
        if (this.params) {
            str += ` ${this.params}`;
        }
        return str;
    }
}
_a$1 = RidLine;
RidLine.RID_ID = `[\\w-]+`;
RidLine.RID_DIRECTION = `\\bsend\\b|\\brecv\\b`;
RidLine.regex = new RegExp(`^rid:(${_a$1.RID_ID}) (${_a$1.RID_DIRECTION})(?:${SP}(${REST}))?`);

class RtcpMuxLine extends Line {
    static fromSdpLine(line) {
        if (!RtcpMuxLine.regex.test(line)) {
            return undefined;
        }
        return new RtcpMuxLine();
    }
    toSdpLine() {
        return `a=rtcp-mux`;
    }
}
RtcpMuxLine.regex = /^rtcp-mux$/;

class RtcpFbLine extends Line {
    constructor(payloadType, feedback) {
        super();
        this.payloadType = payloadType;
        this.feedback = feedback;
    }
    static fromSdpLine(line) {
        if (!RtcpFbLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(RtcpFbLine.regex);
        const payloadType = parseInt(tokens[1], 10);
        const feedback = tokens[2];
        return new RtcpFbLine(payloadType, feedback);
    }
    toSdpLine() {
        return `a=rtcp-fb:${this.payloadType} ${this.feedback}`;
    }
}
RtcpFbLine.regex = new RegExp(`^rtcp-fb:(${NUM}) (${REST})`);

var _a;
class RtpMapLine extends Line {
    constructor(payloadType, encodingName, clockRate, encodingParams) {
        super();
        this.payloadType = payloadType;
        this.encodingName = encodingName;
        this.clockRate = clockRate;
        this.encodingParams = encodingParams;
    }
    static fromSdpLine(line) {
        if (!RtpMapLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(RtpMapLine.regex);
        const payloadType = parseInt(tokens[1], 10);
        const encodingName = tokens[2];
        const clockRate = parseInt(tokens[3], 10);
        const encodingParams = tokens[4];
        return new RtpMapLine(payloadType, encodingName, clockRate, encodingParams);
    }
    toSdpLine() {
        let str = '';
        str += `a=rtpmap:${this.payloadType} ${this.encodingName}/${this.clockRate}`;
        if (this.encodingParams) {
            str += `/${this.encodingParams}`;
        }
        return str;
    }
}
_a = RtpMapLine;
RtpMapLine.NON_SLASH_TOKEN = '[^\\s/]+';
RtpMapLine.regex = new RegExp(`^rtpmap:(${NUM}) (${_a.NON_SLASH_TOKEN})/(${_a.NON_SLASH_TOKEN})(?:/(${_a.NON_SLASH_TOKEN}))?`);

class SctpPortLine extends Line {
    constructor(port) {
        super();
        this.port = port;
    }
    static fromSdpLine(line) {
        if (!SctpPortLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(SctpPortLine.regex);
        const port = parseInt(tokens[1], 10);
        return new SctpPortLine(port);
    }
    toSdpLine() {
        return `a=sctp-port:${this.port}`;
    }
}
SctpPortLine.regex = new RegExp(`^sctp-port:(${NUM})`);

class SessionInformationLine extends Line {
    constructor(info) {
        super();
        this.info = info;
    }
    static fromSdpLine(line) {
        if (!SessionInformationLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(SessionInformationLine.regex);
        const info = tokens[1];
        return new SessionInformationLine(info);
    }
    toSdpLine() {
        return `i=${this.info}`;
    }
}
SessionInformationLine.regex = new RegExp(`(${REST})`);

class SessionNameLine extends Line {
    constructor(name) {
        super();
        this.name = name;
    }
    static fromSdpLine(line) {
        if (!SessionNameLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(SessionNameLine.regex);
        const name = tokens[1];
        return new SessionNameLine(name);
    }
    toSdpLine() {
        return `s=${this.name}`;
    }
}
SessionNameLine.regex = new RegExp(`^(${REST})`);

class SetupLine extends Line {
    constructor(setup) {
        super();
        this.setup = setup;
    }
    static fromSdpLine(line) {
        if (!SetupLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(SetupLine.regex);
        const setup = tokens[1];
        return new SetupLine(setup);
    }
    toSdpLine() {
        return `a=setup:${this.setup}`;
    }
}
SetupLine.regex = /^setup:(actpass|active|passive)$/;

class SimulcastLayer {
    constructor(id, paused) {
        this.id = id;
        this.paused = paused;
    }
    toString() {
        return this.paused ? `~${this.id}` : this.id;
    }
}
class SimulcastLayerList {
    constructor() {
        this.layers = [];
    }
    addLayer(layer) {
        this.layers.push([layer]);
    }
    addLayerWithAlternatives(alternatives) {
        this.layers.push(alternatives);
    }
    get length() {
        return this.layers.length;
    }
    get(index) {
        return this.layers[index];
    }
    static fromString(str) {
        const layerList = new SimulcastLayerList();
        const tokens = str.split(';');
        if (tokens.length === 1 && !tokens[0].trim()) {
            throw new Error('simulcast stream list empty');
        }
        tokens.forEach((token) => {
            if (!token) {
                throw new Error('simulcast layer list empty');
            }
            const ridTokens = token.split(',');
            const layers = [];
            ridTokens.forEach((ridToken) => {
                if (!ridToken || ridToken === '~') {
                    throw new Error('rid empty');
                }
                const paused = ridToken[0] === '~';
                const rid = paused ? ridToken.substring(1) : ridToken;
                layers.push(new SimulcastLayer(rid, paused));
            });
            layerList.addLayerWithAlternatives(layers);
        });
        return layerList;
    }
    toString() {
        return this.layers
            .map((altArray) => altArray.map((v) => v.toString()).join(','))
            .join(';');
    }
}
class SimulcastLine extends Line {
    constructor(sendLayers, recvLayers) {
        super();
        this.sendLayers = sendLayers;
        this.recvLayers = recvLayers;
    }
    static fromSdpLine(line) {
        if (!SimulcastLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(SimulcastLine.regex);
        const bidirectional = tokens[3] && tokens[4];
        const firstDirection = tokens[1];
        const layerList1 = SimulcastLayerList.fromString(tokens[2]);
        let layerList2 = new SimulcastLayerList();
        if (bidirectional) {
            const secondDirection = tokens[3];
            if (firstDirection === secondDirection) {
                return undefined;
            }
            layerList2 = SimulcastLayerList.fromString(tokens[4]);
        }
        let sendLayerList;
        let recvLayerList;
        if (firstDirection === 'send') {
            sendLayerList = layerList1;
            recvLayerList = layerList2;
        }
        else {
            sendLayerList = layerList2;
            recvLayerList = layerList1;
        }
        return new SimulcastLine(sendLayerList, recvLayerList);
    }
    toSdpLine() {
        let str = 'a=simulcast:';
        if (this.sendLayers.length) {
            str += `send ${this.sendLayers.toString()}`;
            if (this.recvLayers.length) {
                str += ` `;
            }
        }
        if (this.recvLayers.length) {
            str += `recv ${this.recvLayers.toString()}`;
        }
        return str;
    }
}
SimulcastLine.regex = new RegExp(`^simulcast:(send|recv) (${ANY_NON_WS})(?: (send|recv) (${ANY_NON_WS}))?`);

class SsrcLine extends Line {
    constructor(ssrcId, attribute, attributeValue = undefined, attributeData = undefined) {
        super();
        this.ssrcId = ssrcId;
        this.attribute = attribute;
        this.attributeValue = attributeValue;
        this.attributeData = attributeData;
    }
    static fromSdpLine(line) {
        if (!SsrcLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(SsrcLine.regex);
        const ssrcId = parseInt(tokens[1], 10);
        const attribute = tokens[2];
        const attributeValue = tokens[3];
        const attributeData = tokens[4];
        return new SsrcLine(ssrcId, attribute, attributeValue, attributeData);
    }
    toSdpLine() {
        let str = `a=ssrc:${this.ssrcId} ${this.attribute}`;
        if (this.attributeValue) {
            str += `:${this.attributeValue}`;
        }
        if (this.attributeData) {
            str += ` ${this.attributeData}`;
        }
        return str;
    }
}
SsrcLine.regex = new RegExp(`^ssrc:(${NUM}) (${SDP_TOKEN})(?::(${SDP_TOKEN})?(?: (${ANY_NON_WS}))?)?$`);

class SsrcGroupLine extends Line {
    constructor(semantics, ssrcs) {
        super();
        this.semantics = semantics;
        this.ssrcs = ssrcs;
    }
    static fromSdpLine(line) {
        if (!SsrcGroupLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(SsrcGroupLine.regex);
        const semantics = tokens[1];
        const ssrcs = tokens[2].split(' ').map((ssrcStr) => parseInt(ssrcStr, 10));
        return new SsrcGroupLine(semantics, ssrcs);
    }
    toSdpLine() {
        return `a=ssrc-group:${this.semantics} ${this.ssrcs.join(' ')}`;
    }
}
SsrcGroupLine.regex = new RegExp(`^ssrc-group:(SIM|FID|FEC) ((?:${NUM}${SP}*)+)`);

class TimingLine extends Line {
    constructor(startTime, stopTime) {
        super();
        this.startTime = startTime;
        this.stopTime = stopTime;
    }
    static fromSdpLine(line) {
        if (!TimingLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(TimingLine.regex);
        const startTime = parseInt(tokens[1], 10);
        const stopTime = parseInt(tokens[2], 10);
        return new TimingLine(startTime, stopTime);
    }
    toSdpLine() {
        return `t=${this.startTime} ${this.stopTime}`;
    }
}
TimingLine.regex = new RegExp(`^(${NUM}) (${NUM})`);

class VersionLine extends Line {
    constructor(version) {
        super();
        this.version = version;
    }
    static fromSdpLine(line) {
        if (!VersionLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(VersionLine.regex);
        const version = parseInt(tokens[1], 10);
        return new VersionLine(version);
    }
    toSdpLine() {
        return `v=${this.version}`;
    }
}
VersionLine.regex = new RegExp(`^(${NUM})$`);

class UnknownLine extends Line {
    constructor(value) {
        super();
        this.value = value;
    }
    static fromSdpLine(line) {
        const tokens = line.match(UnknownLine.regex);
        const value = tokens[1];
        return new UnknownLine(value);
    }
    toSdpLine() {
        return `${this.value}`;
    }
}
UnknownLine.regex = new RegExp(`(${REST})`);

class IceInfo {
    constructor() {
        this.candidates = [];
    }
    addLine(line) {
        if (line instanceof IceUfragLine) {
            this.ufrag = line;
            return true;
        }
        if (line instanceof IcePwdLine) {
            this.pwd = line;
            return true;
        }
        if (line instanceof IceOptionsLine) {
            this.options = line;
            return true;
        }
        if (line instanceof CandidateLine) {
            this.candidates.push(line);
            return true;
        }
        return false;
    }
    toLines() {
        const lines = [];
        if (this.ufrag) {
            lines.push(this.ufrag);
        }
        if (this.pwd) {
            lines.push(this.pwd);
        }
        if (this.options) {
            lines.push(this.options);
        }
        this.candidates.forEach((candidate) => lines.push(candidate));
        return lines;
    }
}

class MediaDescription {
    constructor(type, port, protocol) {
        this.iceInfo = new IceInfo();
        this.otherLines = [];
        this.type = type;
        this.port = port;
        this.protocol = protocol;
    }
    findOtherLine(ty) {
        return this.otherLines.find((line) => line instanceof ty);
    }
    addLine(line) {
        if (line instanceof BundleGroupLine) {
            throw new Error(`Error: bundle group line not allowed in media description`);
        }
        if (line instanceof BandwidthLine) {
            this.bandwidth = line;
            return true;
        }
        if (line instanceof MidLine) {
            this.mid = line.mid;
            return true;
        }
        if (line instanceof FingerprintLine) {
            this.fingerprint = line.fingerprint;
            return true;
        }
        if (line instanceof SetupLine) {
            this.setup = line.setup;
            return true;
        }
        if (line instanceof ConnectionLine) {
            this.connection = line;
            return true;
        }
        if (line instanceof ContentLine) {
            this.content = line;
            return true;
        }
        return this.iceInfo.addLine(line);
    }
}

class ApplicationMediaDescription extends MediaDescription {
    constructor(mediaLine) {
        super(mediaLine.type, mediaLine.port, mediaLine.protocol);
        this.fmts = [];
        this.fmts = mediaLine.formats;
    }
    toLines() {
        const lines = [];
        lines.push(new MediaLine(this.type, this.port, this.protocol, this.fmts));
        if (this.connection) {
            lines.push(this.connection);
        }
        if (this.bandwidth) {
            lines.push(this.bandwidth);
        }
        lines.push(...this.iceInfo.toLines());
        if (this.fingerprint) {
            lines.push(new FingerprintLine(this.fingerprint));
        }
        if (this.setup) {
            lines.push(new SetupLine(this.setup));
        }
        if (this.mid) {
            lines.push(new MidLine(this.mid));
        }
        if (this.content) {
            lines.push(this.content);
        }
        if (this.sctpPort) {
            lines.push(new SctpPortLine(this.sctpPort));
        }
        if (this.maxMessageSize) {
            lines.push(new MaxMessageSizeLine(this.maxMessageSize));
        }
        lines.push(...this.otherLines);
        return lines;
    }
    addLine(line) {
        if (super.addLine(line)) {
            return true;
        }
        if (line instanceof MediaLine) {
            throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');
        }
        if (line instanceof SctpPortLine) {
            this.sctpPort = line.port;
            return true;
        }
        if (line instanceof MaxMessageSizeLine) {
            this.maxMessageSize = line.maxMessageSize;
            return true;
        }
        this.otherLines.push(line);
        return true;
    }
}

class CodecInfo {
    constructor(pt) {
        this.fmtParams = new Map();
        this.feedback = [];
        this.pt = pt;
    }
    addLine(line) {
        if (line instanceof RtpMapLine) {
            this.name = line.encodingName;
            this.clockRate = line.clockRate;
            this.encodingParams = line.encodingParams;
            return true;
        }
        if (line instanceof FmtpLine) {
            this.fmtParams = new Map([
                ...Array.from(this.fmtParams.entries()),
                ...Array.from(line.params.entries()),
            ]);
            if (line.params.has('apt')) {
                const apt = line.params.get('apt');
                this.primaryCodecPt = parseInt(apt, 10);
            }
            return true;
        }
        if (line instanceof RtcpFbLine) {
            this.feedback.push(line.feedback);
            return true;
        }
        return false;
    }
    toLines() {
        const lines = [];
        if (this.name && this.clockRate) {
            lines.push(new RtpMapLine(this.pt, this.name, this.clockRate, this.encodingParams));
        }
        this.feedback.forEach((fb) => {
            lines.push(new RtcpFbLine(this.pt, fb));
        });
        if (this.fmtParams.size > 0) {
            lines.push(new FmtpLine(this.pt, this.fmtParams));
        }
        return lines;
    }
}

class AvMediaDescription extends MediaDescription {
    constructor(mediaLine) {
        super(mediaLine.type, mediaLine.port, mediaLine.protocol);
        this.pts = [];
        this.extMaps = new Map();
        this.rids = [];
        this.codecs = new Map();
        this.rtcpMux = false;
        this.ssrcs = [];
        this.ssrcGroups = [];
        this.pts = mediaLine.formats.map((fmt) => {
            return parseInt(fmt, 10);
        });
        this.pts.forEach((pt) => this.codecs.set(pt, new CodecInfo(pt)));
    }
    toLines() {
        const lines = [];
        lines.push(new MediaLine(this.type, this.port, this.protocol, this.pts.map((pt) => `${pt}`)));
        if (this.connection) {
            lines.push(this.connection);
        }
        if (this.bandwidth) {
            lines.push(this.bandwidth);
        }
        lines.push(...this.iceInfo.toLines());
        if (this.fingerprint) {
            lines.push(new FingerprintLine(this.fingerprint));
        }
        if (this.setup) {
            lines.push(new SetupLine(this.setup));
        }
        if (this.mid) {
            lines.push(new MidLine(this.mid));
        }
        if (this.rtcpMux) {
            lines.push(new RtcpMuxLine());
        }
        if (this.content) {
            lines.push(this.content);
        }
        this.extMaps.forEach((extMap) => lines.push(extMap));
        this.rids.forEach((rid) => lines.push(rid));
        if (this.simulcast) {
            lines.push(this.simulcast);
        }
        if (this.direction) {
            lines.push(new DirectionLine(this.direction));
        }
        this.codecs.forEach((codec) => lines.push(...codec.toLines()));
        lines.push(...this.ssrcs);
        lines.push(...this.ssrcGroups);
        lines.push(...this.otherLines);
        return lines;
    }
    addLine(line) {
        if (super.addLine(line)) {
            return true;
        }
        if (line instanceof MediaLine) {
            throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');
        }
        if (line instanceof DirectionLine) {
            this.direction = line.direction;
            return true;
        }
        if (line instanceof ExtMapLine) {
            if (this.extMaps.has(line.id)) {
                throw new Error(`Tried to extension with duplicate ID: an extension already exists with ID ${line.id}`);
            }
            this.extMaps.set(line.id, line);
            return true;
        }
        if (line instanceof RidLine) {
            this.rids.push(line);
            return true;
        }
        if (line instanceof RtcpMuxLine) {
            this.rtcpMux = true;
            return true;
        }
        if (line instanceof SimulcastLine) {
            this.simulcast = line;
            return true;
        }
        if (line instanceof RtpMapLine || line instanceof FmtpLine || line instanceof RtcpFbLine) {
            const codec = this.codecs.get(line.payloadType);
            if (!codec) {
                throw new Error(`Error: got line for unknown codec: ${line.toSdpLine()}`);
            }
            codec.addLine(line);
            return true;
        }
        if (line instanceof SsrcLine) {
            this.ssrcs.push(line);
            return true;
        }
        if (line instanceof SsrcGroupLine) {
            this.ssrcGroups.push(line);
            return true;
        }
        this.otherLines.push(line);
        return true;
    }
    getCodecByPt(pt) {
        return this.codecs.get(pt);
    }
    removePt(pt) {
        const associatedPts = [...this.codecs.values()]
            .filter((ci) => ci.primaryCodecPt === pt)
            .map((ci) => ci.pt);
        const allPtsToRemove = [pt, ...associatedPts];
        allPtsToRemove.forEach((ptToRemove) => {
            this.codecs.delete(ptToRemove);
        });
        this.pts = this.pts.filter((existingPt) => allPtsToRemove.indexOf(existingPt) === -1);
    }
    addExtension({ uri, direction, attributes, id, }) {
        const getFirstFreeId = () => {
            let freeId = 1;
            for (;;) {
                if (!this.extMaps.has(freeId)) {
                    break;
                }
                freeId += 1;
            }
            return freeId;
        };
        const extId = id || getFirstFreeId();
        if (this.extMaps.has(extId)) {
            throw new Error(`Extension with ID ${id} already exists`);
        }
        if (extId === 0) {
            throw new Error(`Extension ID 0 is reserved`);
        }
        this.extMaps.set(extId, new ExtMapLine(extId, uri, direction, attributes));
    }
}

class SessionDescription {
    constructor() {
        this.groups = [];
        this.otherLines = [];
    }
    addLine(line) {
        if (line instanceof VersionLine) {
            this.version = line;
            return true;
        }
        if (line instanceof OriginLine) {
            this.origin = line;
            return true;
        }
        if (line instanceof SessionNameLine) {
            this.sessionName = line;
            return true;
        }
        if (line instanceof SessionInformationLine) {
            this.information = line;
            return true;
        }
        if (line instanceof TimingLine) {
            this.timing = line;
            return true;
        }
        if (line instanceof ConnectionLine) {
            this.connection = line;
            return true;
        }
        if (line instanceof BandwidthLine) {
            this.bandwidth = line;
            return true;
        }
        if (line instanceof BundleGroupLine) {
            this.groups.push(line);
            return true;
        }
        this.otherLines.push(line);
        return true;
    }
    toLines() {
        const lines = [];
        if (this.version) {
            lines.push(this.version);
        }
        if (this.origin) {
            lines.push(this.origin);
        }
        if (this.sessionName) {
            lines.push(this.sessionName);
        }
        if (this.information) {
            lines.push(this.information);
        }
        if (this.connection) {
            lines.push(this.connection);
        }
        if (this.bandwidth) {
            lines.push(this.bandwidth);
        }
        if (this.timing) {
            lines.push(this.timing);
        }
        if (this.groups) {
            lines.push(...this.groups);
        }
        lines.push(...this.otherLines);
        return lines;
    }
}

class Sdp {
    constructor() {
        this.session = new SessionDescription();
        this.media = [];
    }
    get avMedia() {
        return this.media.filter((mi) => mi instanceof AvMediaDescription);
    }
    toString() {
        const lines = [];
        lines.push(...this.session.toLines());
        this.media.forEach((m) => lines.push(...m.toLines()));
        return `${lines.map((l) => l.toSdpLine()).join('\r\n')}\r\n`;
    }
}

class Grammar {
    constructor() {
        this.parsers = new Map();
    }
    addParser(lineType, parser) {
        const parsers = this.parsers.get(lineType) || [];
        parsers.push(parser);
        this.parsers.set(lineType, parsers);
    }
    getParsers(lineType) {
        return this.parsers.get(lineType) || [];
    }
}
class SdpGrammar extends Grammar {
    constructor() {
        super();
        this.addParser('v', VersionLine.fromSdpLine);
        this.addParser('o', OriginLine.fromSdpLine);
        this.addParser('c', ConnectionLine.fromSdpLine);
        this.addParser('i', SessionInformationLine.fromSdpLine);
        this.addParser('m', MediaLine.fromSdpLine);
        this.addParser('s', SessionNameLine.fromSdpLine);
        this.addParser('t', TimingLine.fromSdpLine);
        this.addParser('b', BandwidthLine.fromSdpLine);
        this.addParser('a', RtpMapLine.fromSdpLine);
        this.addParser('a', RtcpFbLine.fromSdpLine);
        this.addParser('a', FmtpLine.fromSdpLine);
        this.addParser('a', DirectionLine.fromSdpLine);
        this.addParser('a', ExtMapLine.fromSdpLine);
        this.addParser('a', MidLine.fromSdpLine);
        this.addParser('a', IceUfragLine.fromSdpLine);
        this.addParser('a', IcePwdLine.fromSdpLine);
        this.addParser('a', IceOptionsLine.fromSdpLine);
        this.addParser('a', FingerprintLine.fromSdpLine);
        this.addParser('a', SetupLine.fromSdpLine);
        this.addParser('a', SctpPortLine.fromSdpLine);
        this.addParser('a', MaxMessageSizeLine.fromSdpLine);
        this.addParser('a', RtcpMuxLine.fromSdpLine);
        this.addParser('a', BundleGroupLine.fromSdpLine);
        this.addParser('a', ContentLine.fromSdpLine);
        this.addParser('a', RidLine.fromSdpLine);
        this.addParser('a', CandidateLine.fromSdpLine);
        this.addParser('a', SimulcastLine.fromSdpLine);
        this.addParser('a', SsrcLine.fromSdpLine);
        this.addParser('a', SsrcGroupLine.fromSdpLine);
    }
}
const DefaultSdpGrammar = new SdpGrammar();
function isValidLine(line) {
    return line.length > 2;
}
function parseToModel(lines) {
    const sdp = new Sdp();
    let currBlock = sdp.session;
    lines.forEach((l) => {
        if (l instanceof MediaLine) {
            let mediaInfo;
            if (l.type === 'audio' || l.type === 'video') {
                mediaInfo = new AvMediaDescription(l);
            }
            else if (l.type === 'application') {
                mediaInfo = new ApplicationMediaDescription(l);
            }
            else {
                throw new Error(`Unhandled media type: ${l.type}`);
            }
            sdp.media.push(mediaInfo);
            currBlock = mediaInfo;
        }
        else {
            currBlock.addLine(l);
        }
    });
    return sdp;
}
function parseToLines(sdp, grammar) {
    const lines = [];
    sdp
        .split(/(\r\n|\r|\n)/)
        .filter(isValidLine)
        .forEach((l) => {
        const lineType = l[0];
        const lineValue = l.slice(2);
        const parsers = grammar.getParsers(lineType);
        for (const parser of parsers) {
            const result = parser(lineValue);
            if (result) {
                lines.push(result);
                return;
            }
        }
        const result = UnknownLine.fromSdpLine(l);
        lines.push(result);
    });
    return lines;
}
function parse(sdp, grammar = DefaultSdpGrammar) {
    const lines = parseToLines(sdp, grammar);
    const parsed = parseToModel(lines);
    return parsed;
}

function disableRtcpFbValue(sdpOrAv, rtcpFbValue) {
    const mediaDescriptions = sdpOrAv instanceof Sdp ? sdpOrAv.avMedia : [sdpOrAv];
    mediaDescriptions.forEach((media) => {
        media.codecs.forEach((codec) => {
            codec.feedback = codec.feedback.filter((fb) => fb !== rtcpFbValue);
        });
    });
}
function disableTwcc(sdpOrAv) {
    disableRtcpFbValue(sdpOrAv, 'transport-cc');
}
function retainCodecs(av, predicate) {
    let filtered = false;
    av.codecs.forEach((codecInfo) => {
        if (!predicate(codecInfo)) {
            av.removePt(codecInfo.pt);
            filtered = true;
        }
    });
    return filtered;
}
function retainCodecsByCodecName(av, allowedCodecNames) {
    const allowedLowerCase = allowedCodecNames.map((s) => s.toLowerCase());
    return retainCodecs(av, (codecInfo) => !!codecInfo.name && allowedLowerCase.includes(codecInfo.name.toLowerCase()));
}
function retainCandidates(sdpOrMedia, predicate) {
    const mediaDescriptions = sdpOrMedia instanceof Sdp ? sdpOrMedia.media : [sdpOrMedia];
    let filtered = false;
    mediaDescriptions.forEach((media) => {
        media.iceInfo.candidates = media.iceInfo.candidates.filter((candidate) => {
            if (predicate(candidate)) {
                return true;
            }
            filtered = true;
            return false;
        });
    });
    return filtered;
}
function retainCandidatesByTransportType(sdpOrMedia, allowedTransportTypes) {
    const allowedLowerCase = allowedTransportTypes.map((s) => s.toLowerCase());
    return retainCandidates(sdpOrMedia, (candidate) => allowedLowerCase.includes(candidate.transport.toLowerCase()));
}

function hasCodec(codecName, mLine) {
    return [...mLine.codecs.values()].some((ci) => { var _a; return ((_a = ci.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === codecName.toLowerCase(); });
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var es5 = {exports: {}};

(function (module, exports) {
!function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return "NT";case"XP":return "XP";case"NT 5.0":return "2000";case"NT 5.1":return "XP";case"NT 5.2":return "2003";case"NT 6.0":return "Vista";case"NT 6.1":return "7";case"NT 6.2":return "8";case"NT 6.3":return "8.1";case"NT 10.0":return "10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1;}else if(u[0][a]<u[1][a])return -1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t];}));};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default;},18:function(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default;},91:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1);})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default;},92:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default;},93:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return {name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return {name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default;},94:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return {type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "blackberry"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return "bada"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "windows phone"===e.getBrowserName()},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(!0)&&t>=3},describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return "android"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "macos"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return "windows"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "linux"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "playstation 4"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}},{test:function(e){return "roku"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default;},95:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return "microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return {name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default;}})}));
}(es5));

var Bowser = /*@__PURE__*/getDefaultExportFromCjs(es5.exports);

var BrowserName;
(function (BrowserName) {
    BrowserName["CHROME"] = "Chrome";
    BrowserName["FIREFOX"] = "Firefox";
    BrowserName["EDGE"] = "Microsoft Edge";
    BrowserName["SAFARI"] = "Safari";
})(BrowserName || (BrowserName = {}));
var OSName;
(function (OSName) {
    OSName["WINDOWS"] = "Windows";
    OSName["MAC"] = "macOS";
    OSName["LINUX"] = "Linux";
})(OSName || (OSName = {}));
class BrowserInfo {
    static getBrowserDetails() {
        return this.browser.getBrowser();
    }
    static getOSDetails() {
        return this.browser.getOS();
    }
    static getPlatformDetails() {
        return this.browser.getPlatform();
    }
    static getEngineDetails() {
        return this.browser.getEngine();
    }
    static isChrome() {
        return this.browser.getBrowserName() === BrowserName.CHROME;
    }
    static isFirefox() {
        return this.browser.getBrowserName() === BrowserName.FIREFOX;
    }
    static isEdge() {
        return this.browser.getBrowserName() === BrowserName.EDGE;
    }
    static isSafari() {
        return this.browser.getBrowserName() === BrowserName.SAFARI;
    }
    static isWindows() {
        return this.browser.getOSName() === OSName.WINDOWS;
    }
    static isMac() {
        return this.browser.getOSName() === OSName.MAC;
    }
    static isLinux() {
        return this.browser.getOSName() === OSName.LINUX;
    }
    static isVersionGreaterThan(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `>${version}` };
        return this.browser.satisfies(checkTree);
    }
    static isVersionGreaterThanOrEqualTo(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `>=${version}` };
        return this.browser.satisfies(checkTree);
    }
    static isVersionLessThan(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `<${version}` };
        return this.browser.satisfies(checkTree);
    }
    static isVersionLessThanOrEqualTo(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `<=${version}` };
        return this.browser.satisfies(checkTree);
    }
    static isSubVersionOf(version) {
        const browserName = this.browser.getBrowserName();
        const checkTree = { [browserName]: `~${version}` };
        return this.browser.satisfies(checkTree);
    }
}
BrowserInfo.browser = Bowser.getParser(window.navigator.userAgent);

var CapabilityState;
(function (CapabilityState) {
    CapabilityState["NOT_CAPABLE"] = "not capable";
    CapabilityState["CAPABLE"] = "capable";
    CapabilityState["UNKNOWN"] = "unknown";
})(CapabilityState || (CapabilityState = {}));

const simulcastMaxFrameSizes = {
    0: '240',
    1: '2304',
    2: '8160',
};

class JmpLine extends Line {
    static fromSdpLine(line) {
        if (!JmpLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(JmpLine.regex);
        const versions = tokens[1].split(',').filter((v) => v.length);
        return new JmpLine(versions);
    }
    constructor(versions) {
        super();
        this.versions = versions;
    }
    toSdpLine() {
        return `a=jmp:${this.versions.join(',')}`;
    }
}
JmpLine.regex = /^jmp:((?:v\d+,?)+)/;
class JmpStreamIdModeLine extends Line {
    constructor(streamIdMode) {
        super();
        this.streamIdMode = streamIdMode;
    }
    static fromSdpLine(line) {
        if (!JmpStreamIdModeLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(JmpStreamIdModeLine.regex);
        const mode = tokens[1];
        return new JmpStreamIdModeLine(mode);
    }
    toSdpLine() {
        return `a=jmp-stream-id-mode:${this.streamIdMode}`;
    }
}
JmpStreamIdModeLine.regex = /^jmp-stream-id-mode:(MID-RID|SSRC)$/;
class JmpSourceLine extends Line {
    constructor(source, csi) {
        super();
        this.source = source;
        this.csi = csi;
    }
    static fromSdpLine(line) {
        if (!JmpSourceLine.regex.test(line)) {
            return undefined;
        }
        const tokens = line.match(JmpSourceLine.regex);
        const source = tokens[1];
        const csi = tokens[2];
        return new JmpSourceLine(source, csi);
    }
    toSdpLine() {
        let line = `a=jmp-source:${this.source}`;
        if (this.csi) {
            line += ` csi=${this.csi}`;
        }
        return line;
    }
}
JmpSourceLine.regex = new RegExp(`^jmp-source:(${ANY_NON_WS}) (?:csi=(${ANY_NON_WS}))`);
DefaultSdpGrammar.addParser('a', JmpLine.fromSdpLine);
DefaultSdpGrammar.addParser('a', JmpSourceLine.fromSdpLine);
DefaultSdpGrammar.addParser('a', JmpStreamIdModeLine.fromSdpLine);

function deepCopy(source) {
    return Array.isArray(source)
        ? source.map((item) => deepCopy(item))
        : source instanceof Map
            ? new Map(source)
            : source instanceof Date
                ? new Date(source.getTime())
                : source && typeof source === 'object'
                    ? Object.getOwnPropertyNames(source).reduce((o, prop) => {
                        Object.defineProperty(o, prop, Object.getOwnPropertyDescriptor(source, prop));
                        o[prop] = deepCopy(source[prop]);
                        return o;
                    }, Object.create(Object.getPrototypeOf(source)))
                    : source;
}

const ipv4Regex = /(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.)(\d{1,3}\b)/g;
const ipv6Regex = /(\b[\da-fA-F]{1,4}(:[\da-fA-F]{1,4}){7}\b)/g;
function matchMediaDescriptionsInAnswer(parsedOffer, parsedAnswer) {
    parsedAnswer.session.groups = parsedOffer.session.groups;
    parsedAnswer.media = parsedOffer.media.map((offerMediaDescription) => {
        if (!offerMediaDescription.mid) {
            logErrorAndThrow(exports.WcmeErrorType.OFFER_ANSWER_MISMATCH, `Named media groups can only be set for audio.`);
        }
        const answerMediaDescription = parsedAnswer.media.find((m) => m.mid === offerMediaDescription.mid);
        if (answerMediaDescription) {
            return answerMediaDescription;
        }
        if (!(offerMediaDescription instanceof AvMediaDescription)) {
            logErrorAndThrow(exports.WcmeErrorType.OFFER_ANSWER_MISMATCH, `Answer is missing a non-AV media description for MID ${offerMediaDescription.mid}.`);
        }
        const startingMediaDescription = parsedAnswer.avMedia.find((m) => m.type === offerMediaDescription.type);
        if (!startingMediaDescription) {
            logErrorAndThrow(exports.WcmeErrorType.OFFER_ANSWER_MISMATCH, `Answer has no media description of type ${offerMediaDescription.type}, can't generate synthetic answer media description for MID ${offerMediaDescription.mid}.`);
        }
        const fakeCorrespondingDescription = deepCopy(startingMediaDescription);
        fakeCorrespondingDescription.mid = offerMediaDescription.mid;
        fakeCorrespondingDescription.simulcast = undefined;
        fakeCorrespondingDescription.bandwidth = undefined;
        if (offerMediaDescription.direction === 'sendrecv' ||
            offerMediaDescription.direction === 'sendonly') {
            fakeCorrespondingDescription.direction = 'recvonly';
        }
        if (offerMediaDescription.direction === 'recvonly') {
            fakeCorrespondingDescription.direction = 'sendonly';
        }
        return fakeCorrespondingDescription;
    });
}
function setupBundle(parsedSdp, bundlePolicy, midMap) {
    if (bundlePolicy === 'max-compat') {
        const audioMainMids = midMap.get(exports.MediaType.AudioMain);
        const videoMainMids = midMap.get(exports.MediaType.VideoMain);
        const audioContentMids = midMap.get(exports.MediaType.AudioSlides);
        const videoContentMids = midMap.get(exports.MediaType.VideoSlides);
        parsedSdp.session.groups.splice(0, parsedSdp.session.groups.length);
        if (audioMainMids) {
            parsedSdp.session.groups.push(new BundleGroupLine(audioMainMids));
        }
        if (videoMainMids) {
            parsedSdp.session.groups.push(new BundleGroupLine(videoMainMids));
        }
        if (audioContentMids) {
            parsedSdp.session.groups.push(new BundleGroupLine(audioContentMids));
        }
        if (videoContentMids) {
            parsedSdp.session.groups.push(new BundleGroupLine(videoContentMids));
        }
    }
}
function filterRecvOnlyMediaDescriptions(parsedSdp) {
    const filteredMids = [];
    parsedSdp.media = parsedSdp.media.filter((media) => {
        if (media instanceof ApplicationMediaDescription ||
            (media instanceof AvMediaDescription && media.direction !== 'recvonly')) {
            filteredMids.push(media.mid);
            return true;
        }
        return false;
    });
    parsedSdp.session.groups.forEach((g) => {
        g.mids = g.mids.filter((m) => filteredMids.includes(m));
    });
}
function injectContentType(mediaDescription, mediaContent) {
    if (mediaContent === exports.MediaContent.Slides) {
        mediaDescription.addLine(new ContentLine(['slides']));
    }
}
function injectJmpAttributes(mediaDescription, csi, streamSignalingMode) {
    if (!mediaDescription.otherLines.find((line) => line instanceof JmpLine)) {
        mediaDescription.addLine(new JmpLine(['v1']));
    }
    if (!mediaDescription.otherLines.find((line) => line instanceof JmpSourceLine)) {
        mediaDescription.addLine(new JmpSourceLine(mediaDescription.mid, csi.toString()));
    }
    if (!mediaDescription.otherLines.find((line) => line instanceof JmpStreamIdModeLine)) {
        mediaDescription.addLine(new JmpStreamIdModeLine(streamSignalingMode));
    }
}
function injectDummyCandidates(mediaDescription) {
    mediaDescription.iceInfo.candidates = [];
    mediaDescription.addLine(new CandidateLine('dummy1', 1, 'udp', 3, '0.0.0.0', 9, 'host'));
    mediaDescription.addLine(new CandidateLine('dummy2', 1, 'tcp', 2, '0.0.0.0', 9, 'host'));
    mediaDescription.addLine(new CandidateLine('dummy3', 1, 'udp', 1, '0.0.0.0', 9, 'relay'));
}
function maskIp(sdp) {
    let maskedSdp = sdp.replace(ipv4Regex, (match, firstOctets) => {
        return `${firstOctets}0`;
    });
    maskedSdp = maskedSdp.replace(ipv6Regex, (match) => {
        return match.replace(/:[\da-fA-F]{1,4}$/, ':0');
    });
    return maskedSdp;
}
function removeMidRidExtensions(mediaDescription) {
    mediaDescription.extMaps.forEach((extMapLine, extId, extMap) => {
        if (/^urn:ietf:params:rtp-hdrext:sdes:(?:mid|rtp-stream-id|repaired-rtp-stream-id)$/.test(extMapLine.uri)) {
            extMap.delete(extId);
        }
    });
}
function addVlaExtension(mediaDescription) {
    const vlaExtensionUri = 'http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00';
    if (![...mediaDescription.extMaps.values()].some((extMapLine) => extMapLine.uri === vlaExtensionUri)) {
        mediaDescription.addExtension({ uri: vlaExtensionUri });
    }
}
function applyFormatParameters(mediaDescription, codecs, paramsMap) {
    paramsMap.forEach((value, param) => {
        [...mediaDescription.codecs.values()]
            .filter((ci) => ci.name && codecs.includes(ci.name))
            .forEach((ci) => {
            if (value === null) {
                ci.fmtParams.delete(param);
            }
            else {
                ci.fmtParams.set(param, `${value}`);
            }
        });
    });
}
function hasIceCandidates(sdp) {
    return sdp.media.some((media) => media.iceInfo.candidates.length);
}

function generateSsrc() {
    return Math.floor(Math.random() * 0xffffffff) + 1;
}

class EgressSdpMunger {
    constructor() {
        this.streamIds = [];
        this.customCodecParameters = new Map();
    }
    reset() {
        this.streamIds = [];
    }
    mungeLocalDescription(mediaDescription, options) {
        var _a;
        retainCodecsByCodecName(mediaDescription, ['h264', 'opus', 'rtx']);
        if (options.forceSoftwareEncoder) {
            const isH264Cbp = (codecInfo) => {
                var _a;
                if (((_a = codecInfo.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'h264') {
                    const profileLevelId = codecInfo.fmtParams.get('profile-level-id');
                    return !!profileLevelId && /^42[^0]/.test(profileLevelId);
                }
                return false;
            };
            if ([...mediaDescription.codecs.values()].some(isH264Cbp)) {
                retainCodecs(mediaDescription, (codecInfo) => { var _a; return ((_a = codecInfo.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'h264' || isH264Cbp(codecInfo); });
            }
            else {
                logger.log(`No H.264 CBP present in m-line with MID ${mediaDescription.mid}, so all H.264 codecs have been retained.`);
            }
        }
        if (mediaDescription.codecs.size === 0) {
            logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_MISSING_CODECS, `No codecs present in m-line with MID ${mediaDescription.mid} after filtering.`);
        }
        mediaDescription.rids = [];
        mediaDescription.simulcast = undefined;
        removeMidRidExtensions(mediaDescription);
        if (options.simulcastEnabled) {
            addVlaExtension(mediaDescription);
        }
        const numStreams = options.simulcastEnabled ? 3 : 1;
        if (!this.streamIds.length) {
            if (mediaDescription.ssrcs.length) {
                const ssrcs = [
                    ...new Set(mediaDescription.ssrcs.map((ssrcLine) => ssrcLine.ssrcId)),
                ];
                mediaDescription.ssrcGroups.forEach((sg) => {
                    if (!sg.ssrcs.every((ssrc) => ssrcs.includes(ssrc))) {
                        logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_FAILED, 'SSRC present in SSRC groups is missing from SSRC lines.');
                    }
                });
                const rtxSsrcGroups = mediaDescription.ssrcGroups.filter((sg) => sg.semantics === 'FID');
                if (rtxSsrcGroups.length && rtxSsrcGroups.length !== numStreams) {
                    logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_FAILED, `Expected ${numStreams} RTX SSRC groups, got ${rtxSsrcGroups.length}.`);
                }
                rtxSsrcGroups.forEach((sg) => {
                    this.streamIds.push({
                        ssrc: sg.ssrcs[0],
                        rtxSsrc: sg.ssrcs[1],
                    });
                });
                const simulcastSsrcs = (_a = mediaDescription.ssrcGroups.find((sg) => sg.semantics === 'SIM')) === null || _a === void 0 ? void 0 : _a.ssrcs;
                if (simulcastSsrcs) {
                    if (simulcastSsrcs.length !== numStreams ||
                        !this.streamIds.every(({ ssrc }) => simulcastSsrcs.includes(ssrc))) {
                        logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_FAILED, 'SSRCs in simulcast SSRC group do not match primary SSRCs in RTX SSRC groups.');
                    }
                    this.streamIds.sort((a, b) => simulcastSsrcs.indexOf(a.ssrc) - simulcastSsrcs.indexOf(b.ssrc));
                }
                else if (rtxSsrcGroups.length > 1) {
                    logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_FAILED, 'Multiple RTX SSRC groups but no simulcast SSRC group found.');
                }
                if (!this.streamIds.length) {
                    this.streamIds.push({ ssrc: ssrcs[0] });
                }
            }
            else {
                [...Array(numStreams).keys()].forEach(() => {
                    const newStreamId = {
                        ssrc: generateSsrc(),
                    };
                    if (options.rtxEnabled) {
                        newStreamId.rtxSsrc = generateSsrc();
                    }
                    this.streamIds.push(newStreamId);
                });
            }
        }
        mediaDescription.ssrcs = [];
        mediaDescription.ssrcGroups = [];
        this.streamIds.forEach((streamId) => {
            const rtpSsrc = streamId.ssrc;
            mediaDescription.addLine(new SsrcLine(rtpSsrc, 'cname', `${rtpSsrc}-cname`));
            mediaDescription.addLine(new SsrcLine(rtpSsrc, 'msid', '-', `${mediaDescription.mid}`));
            if (options.rtxEnabled) {
                const { rtxSsrc } = streamId;
                if (rtxSsrc) {
                    mediaDescription.addLine(new SsrcLine(rtxSsrc, 'cname', `${rtpSsrc}-cname`));
                    mediaDescription.addLine(new SsrcLine(rtxSsrc, 'msid', '-', `${mediaDescription.mid}`));
                    mediaDescription.addLine(new SsrcGroupLine('FID', [rtpSsrc, rtxSsrc]));
                }
            }
        });
        if (options.simulcastEnabled) {
            mediaDescription.addLine(new SsrcGroupLine('SIM', this.streamIds.map((streamId) => streamId.ssrc)));
        }
        applyFormatParameters(mediaDescription, ['H264', 'opus'], this.customCodecParameters);
        if (options.twccDisabled) {
            disableTwcc(mediaDescription);
        }
    }
    mungeLocalDescriptionForRemoteServer(mediaDescription, mediaContent, csi, mungeOptions = { injectDummyCandidates: true }) {
        injectContentType(mediaDescription, mediaContent);
        injectJmpAttributes(mediaDescription, csi, 'SSRC');
        if (mungeOptions.injectDummyCandidates) {
            injectDummyCandidates(mediaDescription);
        }
        if (mediaDescription.type === 'video') {
            const ssrcGroup = mediaDescription.ssrcGroups.find((sg) => sg.semantics === 'SIM');
            if (ssrcGroup) {
                ssrcGroup.ssrcs.forEach((ssrc, index) => {
                    mediaDescription.addLine(new SsrcLine(ssrc, 'fmtp', `* max-fs=${simulcastMaxFrameSizes[index]}`));
                });
            }
        }
    }
    mungeRemoteDescription(mediaDescription) {
        if (retainCandidatesByTransportType(mediaDescription, ['udp', 'tcp'])) {
            logger.log(`Some unsupported remote candidates have been removed from mid ${mediaDescription.mid}`);
        }
        mediaDescription.bandwidth = undefined;
        [...mediaDescription.codecs.values()].forEach((ci) => {
            ci.fmtParams.set('x-google-start-bitrate', '60000');
        });
    }
    getSenderIds() {
        return this.streamIds;
    }
    getEncodingIndexForStreamId(streamId) {
        return this.streamIds.findIndex((currStreamId) => areStreamIdsEqual(currStreamId, streamId));
    }
    setCodecParameters(parameters) {
        Object.entries(parameters).forEach(([param, value]) => {
            this.customCodecParameters.set(param, value);
        });
    }
    deleteCodecParameters(parameters) {
        parameters.forEach((param) => {
            this.customCodecParameters.set(param, null);
        });
    }
}

var events$1 = {exports: {}};

var R$1 = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply$1 = R$1 && typeof R$1.apply === 'function'
  ? R$1.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };

var ReflectOwnKeys$1;
if (R$1 && typeof R$1.ownKeys === 'function') {
  ReflectOwnKeys$1 = R$1.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys$1 = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys$1 = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning$1(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN$1 = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter$3() {
  EventEmitter$3.init.call(this);
}
events$1.exports = EventEmitter$3;
events$1.exports.once = once$2;

// Backwards-compat with node 0.10.x
EventEmitter$3.EventEmitter = EventEmitter$3;

EventEmitter$3.prototype._events = undefined;
EventEmitter$3.prototype._eventsCount = 0;
EventEmitter$3.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners$1 = 10;

function checkListener$1(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter$3, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners$1;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN$1(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners$1 = arg;
  }
});

EventEmitter$3.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$3.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN$1(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners$1(that) {
  if (that._maxListeners === undefined)
    return EventEmitter$3.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter$3.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners$1(this);
};

EventEmitter$3.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply$1(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone$1(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply$1(listeners[i], this, args);
  }

  return true;
};

function _addListener$1(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener$1(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners$1(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning$1(w);
    }
  }

  return target;
}

EventEmitter$3.prototype.addListener = function addListener(type, listener) {
  return _addListener$1(this, type, listener, false);
};

EventEmitter$3.prototype.on = EventEmitter$3.prototype.addListener;

EventEmitter$3.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener$1(this, type, listener, true);
    };

function onceWrapper$1() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap$1(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper$1.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter$3.prototype.once = function once(type, listener) {
  checkListener$1(listener);
  this.on(type, _onceWrap$1(this, type, listener));
  return this;
};

EventEmitter$3.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener$1(listener);
      this.prependListener(type, _onceWrap$1(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter$3.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener$1(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne$1(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter$3.prototype.off = EventEmitter$3.prototype.removeListener;

EventEmitter$3.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners$1(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners$1(evlistener) : arrayClone$1(evlistener, evlistener.length);
}

EventEmitter$3.prototype.listeners = function listeners(type) {
  return _listeners$1(this, type, true);
};

EventEmitter$3.prototype.rawListeners = function rawListeners(type) {
  return _listeners$1(this, type, false);
};

EventEmitter$3.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount$1.call(emitter, type);
  }
};

EventEmitter$3.prototype.listenerCount = listenerCount$1;
function listenerCount$1(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter$3.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys$1(this._events) : [];
};

function arrayClone$1(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne$1(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners$1(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once$2(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener$1(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter$1(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter$1(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener$1(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener$1(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

class EventEmitter$2 extends events$1.exports.EventEmitter {
}

class IngressSdpMunger {
    constructor() {
        this.customCodecParameters = new Map();
        this.customRtxCodecParameters = new Map();
        this.ssrc = generateSsrc();
    }
    getReceiverId() {
        return Object.assign({ ssrc: this.ssrc }, (this.rtxSsrc ? { rtxSsrc: this.rtxSsrc } : {}));
    }
    mungeLocalDescription(mediaDescription, options) {
        retainCodecsByCodecName(mediaDescription, ['h264', 'opus', 'rtx']);
        if (mediaDescription.codecs.size === 0) {
            logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_MISSING_CODECS, `No codecs present in m-line with MID ${mediaDescription.mid} after filtering.`);
        }
        removeMidRidExtensions(mediaDescription);
        applyFormatParameters(mediaDescription, ['H264', 'opus'], this.customCodecParameters);
        applyFormatParameters(mediaDescription, ['rtx'], this.customRtxCodecParameters);
        if (options.twccDisabled) {
            disableTwcc(mediaDescription);
        }
    }
    mungeRemoteDescription(mediaDescription) {
        if (!mediaDescription.ssrcs.length) {
            mediaDescription.addLine(new SsrcLine(this.ssrc, 'cname', `${this.ssrc}-cname`));
            mediaDescription.addLine(new SsrcLine(this.ssrc, 'msid', '-', `${mediaDescription.mid}`));
            if (hasCodec('rtx', mediaDescription)) {
                if (!this.rtxSsrc) {
                    this.rtxSsrc = generateSsrc();
                }
                mediaDescription.addLine(new SsrcLine(this.rtxSsrc, 'cname', `${this.ssrc}-cname`));
                mediaDescription.addLine(new SsrcLine(this.rtxSsrc, 'msid', '-', `${mediaDescription.mid}`));
                mediaDescription.addLine(new SsrcGroupLine('FID', [this.ssrc, this.rtxSsrc]));
            }
        }
        if (retainCandidatesByTransportType(mediaDescription, ['udp', 'tcp'])) {
            logger.log(`Some unsupported remote candidates have been removed from mid ${mediaDescription.mid}`);
        }
        [...mediaDescription.codecs.values()].forEach((ci) => {
            ci.fmtParams.set('x-google-start-bitrate', '60000');
        });
        applyFormatParameters(mediaDescription, ['rtx'], this.customRtxCodecParameters);
    }
    setCodecParameters(parameters) {
        Object.entries(parameters).forEach(([param, value]) => {
            this.customCodecParameters.set(param, value);
        });
    }
    setRtxCodecParameters(parameters) {
        Object.entries(parameters).forEach(([param, value]) => {
            this.customRtxCodecParameters.set(param, value);
        });
    }
    reset() {
        this.ssrc = generateSsrc();
    }
}

class MidPredictor {
    constructor() {
        this.currentMid = 0;
        this.midMap = new Map();
    }
    getNextMid(mediaType) {
        const mid = this.currentMid++;
        const mids = this.midMap.get(mediaType) || [];
        mids.push(`${mid}`);
        this.midMap.set(mediaType, mids);
        return `${mid}`;
    }
    allocateMidForDatachannel() {
        this.currentMid += 1;
    }
    reset() {
        this.midMap = new Map();
        this.currentMid = 0;
    }
    getMidMap() {
        return this.midMap;
    }
}

var OveruseState;
(function (OveruseState) {
    OveruseState[OveruseState["NOT_OVERUSED"] = 0] = "NOT_OVERUSED";
    OveruseState[OveruseState["OVERUSED"] = 1] = "OVERUSED";
})(OveruseState || (OveruseState = {}));

class OveruseStateManager {
    constructor(callback) {
        this.monitors = [];
        this.lastOverallOveruseState = OveruseState.NOT_OVERUSED;
        this.isRunning = false;
        this.overuseUpdateCallback = callback;
    }
    addMonitor(monitor) {
        this.monitors.push(monitor);
        if (this.isRunning) {
            monitor.startMonitoring(() => this.onMonitorOveruseUpdate());
        }
    }
    start() {
        this.isRunning = true;
        this.monitors.forEach((monitor) => monitor.startMonitoring(() => this.onMonitorOveruseUpdate()));
    }
    stop() {
        this.isRunning = false;
        this.monitors.forEach((monitor) => monitor.stopMonitoring());
    }
    onMonitorOveruseUpdate() {
        const overuseStates = this.monitors.map((monitor) => monitor.getLastOveruseState());
        const overallOveruseState = overuseStates.some((overuseState) => overuseState === OveruseState.OVERUSED)
            ? OveruseState.OVERUSED
            : OveruseState.NOT_OVERUSED;
        if (overallOveruseState !== this.lastOverallOveruseState) {
            this.lastOverallOveruseState = overallOveruseState;
            this.overuseUpdateCallback(overallOveruseState);
        }
    }
}

function areReceiveSlotIdsEqual(id1, id2) {
    return areStreamIdsEqual(id1, id2);
}
exports.ReceiveSlotEvents = void 0;
(function (ReceiveSlotEvents) {
    ReceiveSlotEvents["MediaStarted"] = "media-started";
    ReceiveSlotEvents["MediaStopped"] = "media-stopped";
    ReceiveSlotEvents["MediaEnded"] = "media-ended";
    ReceiveSlotEvents["SourceUpdate"] = "source-update";
})(exports.ReceiveSlotEvents || (exports.ReceiveSlotEvents = {}));
class ReceiveSlot extends EventEmitter$2 {
    constructor(idGetter, track) {
        super();
        this._idGetter = idGetter;
        this.handleStreamMediaStateChange = this.handleStreamMediaStateChange.bind(this);
        this.handleStreamEnded = this.handleStreamEnded.bind(this);
        this._stream = new RemoteStream(new MediaStream([track]));
        this._sourceState = track.kind === exports.MediaStreamTrackKind.Video ? 'no source' : undefined;
        this._stream.on(exports.RemoteStreamEventNames.MediaStateChange, this.handleStreamMediaStateChange);
        this._stream.on(exports.StreamEventNames.Ended, this.handleStreamEnded);
    }
    handleStreamMediaStateChange(state) {
        if (state === exports.RemoteMediaState.Stopped) {
            this.emit(exports.ReceiveSlotEvents.MediaStopped);
        }
        else {
            this.emit(exports.ReceiveSlotEvents.MediaStarted);
        }
    }
    handleStreamEnded() {
        this.emit(exports.ReceiveSlotEvents.MediaEnded);
    }
    _replaceTrack(newTrack) {
        this._stream.replaceTrack(newTrack);
    }
    _updateSource(state, csi) {
        if (state !== this._sourceState || csi !== this._currentRxCsi) {
            this._sourceState = state;
            this._currentRxCsi = csi;
            this.emit(exports.ReceiveSlotEvents.SourceUpdate, state, csi);
        }
    }
    close() {
        this._stream.off(exports.RemoteStreamEventNames.MediaStateChange, this.handleStreamMediaStateChange);
        this._stream.off(exports.StreamEventNames.Ended, this.handleStreamEnded);
    }
    get id() {
        return this._idGetter();
    }
    get stream() {
        return this._stream.outputStream;
    }
    get currentRxCsi() {
        return this._currentRxCsi;
    }
    get sourceState() {
        return this._sourceState;
    }
}
ReceiveSlot.Events = exports.ReceiveSlotEvents;

function getCurrentTimestamp() {
    return performance.timeOrigin + performance.now();
}
class StatsManager {
    constructor(statsGetter, statsPreprocessor = () => __awaiter$1(this, void 0, void 0, function* () { })) {
        this.statsGetter = statsGetter;
        this.statsPreProcessor = statsPreprocessor;
    }
    getStats() {
        return __awaiter$1(this, void 0, void 0, function* () {
            const statsReport = yield this.statsGetter();
            const statsMap = new Map();
            statsReport.forEach((stats, key) => statsMap.set(key, stats));
            yield this.statsPreProcessor(statsMap);
            return statsMap;
        });
    }
}

class Transceiver {
    constructor(config) {
        this.twccDisabled = false;
        this._rtcRtpTransceiver = config.rtcRtpTransceiver;
        this.mid = config.mid;
        this.mediaType = config.mediaType;
    }
    replaceTransceiver(newRtcRtpTransceiver) {
        this._rtcRtpTransceiver = newRtcRtpTransceiver;
    }
    get receiver() {
        return this._rtcRtpTransceiver.receiver;
    }
    get sender() {
        return this._rtcRtpTransceiver.sender;
    }
    close() {
        try {
            this._rtcRtpTransceiver.stop();
        }
        catch (error) {
            if (error instanceof DOMException && error.name === 'InvalidStateError') {
                logger.warn('Peer connection is already closed, skipping call to RTCRtpTransceiver.stop()');
            }
            else {
                logger.error('An unexpected error occurred while stopping the RTCRtpTransceiver:', error);
                throw error;
            }
        }
    }
}

class ReceiveOnlyTransceiver extends Transceiver {
    constructor(config) {
        super(config);
        this.metadata = { isRequested: false, isActiveSpeaker: false };
        this.munger = config.munger;
        this._receiveSlot = new ReceiveSlot(() => {
            if (!this._rtcRtpTransceiver.mid) {
                return null;
            }
            return this.munger.getReceiverId();
        }, this._rtcRtpTransceiver.receiver.track);
    }
    replaceTransceiver(newRtcRtpTransceiver) {
        super.replaceTransceiver(newRtcRtpTransceiver);
        this._receiveSlot._replaceTrack(newRtcRtpTransceiver.receiver.track);
    }
    close() {
        super.close();
        this._receiveSlot.close();
    }
    get receiveSlot() {
        return this._receiveSlot;
    }
    getStats() {
        return __awaiter$1(this, void 0, void 0, function* () {
            const statsMap = new Map();
            const statsReport = yield this.receiver.getStats();
            statsReport.forEach((stats, key) => {
                if (stats.type === 'inbound-rtp') {
                    stats.mid = this.mid;
                    stats.csi = this.receiveSlot.currentRxCsi;
                    stats.sourceState = this.receiveSlot.sourceState;
                    stats.calliopeMediaType = this.mediaType;
                    stats.requestedBitrate = this.metadata.requestedBitrate;
                    stats.requestedFrameSize = this.metadata.requestedFrameSize;
                    stats.requestedFrameRate = this.metadata.requestedFrameRate;
                    stats.isRequested = this.metadata.isRequested;
                    stats.lastRequestedUpdateTimestamp = this.metadata.lastRequestedUpdateTimestamp;
                    stats.isActiveSpeaker = this.metadata.isActiveSpeaker;
                    stats.lastActiveSpeakerUpdateTimestamp = this.metadata.lastActiveSpeakerUpdateTimestamp;
                    Object.assign(stats, this.receiverId);
                }
                statsMap.set(key, stats);
            });
            return statsMap;
        });
    }
    mungeLocalDescription(mediaDescription) {
        this.munger.mungeLocalDescription(mediaDescription, {
            twccDisabled: this.twccDisabled,
        });
    }
    mungeRemoteDescription(mediaDescription) {
        this.munger.mungeRemoteDescription(mediaDescription);
    }
    get receiverId() {
        return this.munger.getReceiverId();
    }
    resetSdpMunger() {
        this.munger.reset();
    }
    handleRequested(streamRequest) {
        var _a, _b, _c, _d;
        if (!this.metadata.isRequested) {
            this.metadata.isRequested = true;
            this.metadata.lastRequestedUpdateTimestamp = getCurrentTimestamp();
        }
        this.metadata.requestedBitrate = streamRequest.maxPayloadBitsPerSecond;
        this.metadata.requestedFrameSize = (_b = (_a = streamRequest.codecInfos[0]) === null || _a === void 0 ? void 0 : _a.h264) === null || _b === void 0 ? void 0 : _b.maxFs;
        this.metadata.requestedFrameRate = (_d = (_c = streamRequest.codecInfos[0]) === null || _c === void 0 ? void 0 : _c.h264) === null || _d === void 0 ? void 0 : _d.maxFps;
    }
    handleUnrequested() {
        if (this.metadata.isRequested) {
            this.metadata.isRequested = false;
            this.metadata.lastRequestedUpdateTimestamp = getCurrentTimestamp();
        }
        this.metadata.requestedBitrate = undefined;
        this.metadata.requestedFrameSize = undefined;
        this.metadata.requestedFrameRate = undefined;
        this.receiveSlot._updateSource('no source', undefined);
    }
    handleActiveSpeakerUpdate(value) {
        if (this.metadata.isActiveSpeaker !== value) {
            this.metadata.isActiveSpeaker = value;
            this.metadata.lastActiveSpeakerUpdateTimestamp = getCurrentTimestamp();
        }
    }
    setCodecParameters(parameters) {
        this.munger.setCodecParameters(parameters);
    }
    setRtxCodecParameters(parameters) {
        this.munger.setRtxCodecParameters(parameters);
    }
}
ReceiveOnlyTransceiver.rid = '1';

var events = {exports: {}};

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };

var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter$1() {
  EventEmitter$1.init.call(this);
}
events.exports = EventEmitter$1;
events.exports.once = once$1;

// Backwards-compat with node 0.10.x
EventEmitter$1.EventEmitter = EventEmitter$1;

EventEmitter$1.prototype._events = undefined;
EventEmitter$1.prototype._eventsCount = 0;
EventEmitter$1.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter$1, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter$1.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$1.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter$1.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter$1.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter$1.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter$1.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;

EventEmitter$1.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter$1.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter$1.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter$1.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter$1.prototype.off = EventEmitter$1.prototype.removeListener;

EventEmitter$1.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter$1.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter$1.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter$1.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter$1.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter$1.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once$1(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

class EventEmitter extends events.exports.EventEmitter {
}
class TypedEvent {
    constructor() {
        this.emitter = new EventEmitter();
    }
    on(handler) {
        this.emitter.on('event', handler);
    }
    once(handler) {
        this.emitter.once('event', handler);
    }
    off(handler) {
        this.emitter.off('event', handler);
    }
    emit(...args) {
        this.emitter.emit('event', ...args);
    }
}

/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */

function initialParams (fn) {
    return function (...args/*, callback*/) {
        var callback = args.pop();
        return fn.call(this, args, callback);
    };
}

/* istanbul ignore file */

var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;
var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return (fn, ...args) => defer(() => fn(...args));
}

var _defer;

if (hasQueueMicrotask) {
    _defer = queueMicrotask;
} else if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

var setImmediate$1 = wrap(_defer);

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    if (isAsync(func)) {
        return function (...args/*, callback*/) {
            const callback = args.pop();
            const promise = func.apply(this, args);
            return handlePromise(promise, callback)
        }
    }

    return initialParams(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if (result && typeof result.then === 'function') {
            return handlePromise(result, callback)
        } else {
            callback(null, result);
        }
    });
}

function handlePromise(promise, callback) {
    return promise.then(value => {
        invokeCallback(callback, null, value);
    }, err => {
        invokeCallback(callback, err && err.message ? err : new Error(err));
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (err) {
        setImmediate$1(e => { throw e }, err);
    }
}

function isAsync(fn) {
    return fn[Symbol.toStringTag] === 'AsyncFunction';
}

function isAsyncGenerator(fn) {
    return fn[Symbol.toStringTag] === 'AsyncGenerator';
}

function isAsyncIterable(obj) {
    return typeof obj[Symbol.asyncIterator] === 'function';
}

function wrapAsync(asyncFn) {
    if (typeof asyncFn !== 'function') throw new Error('expected a function')
    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}

// conditionally promisify a function.
// only return a promise if a callback is omitted
function awaitify (asyncFn, arity = asyncFn.length) {
    if (!arity) throw new Error('arity is undefined')
    function awaitable (...args) {
        if (typeof args[arity - 1] === 'function') {
            return asyncFn.apply(this, args)
        }

        return new Promise((resolve, reject) => {
            args[arity - 1] = (err, ...cbArgs) => {
                if (err) return reject(err)
                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
            };
            asyncFn.apply(this, args);
        })
    }

    return awaitable
}

function _asyncMap(eachfn, arr, iteratee, callback) {
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = wrapAsync(iteratee);

    return eachfn(arr, (value, _, iterCb) => {
        var index = counter++;
        _iteratee(value, (err, v) => {
            results[index] = v;
            iterCb(err);
        });
    }, err => {
        callback(err, results);
    });
}

function isArrayLike(value) {
    return value &&
        typeof value.length === 'number' &&
        value.length >= 0 &&
        value.length % 1 === 0;
}

// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
const breakLoop = {};

function once(fn) {
    function wrapper (...args) {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    }
    Object.assign(wrapper, fn);
    return wrapper
}

function getIterator (coll) {
    return coll[Symbol.iterator] && coll[Symbol.iterator]();
}

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
    }
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done)
            return null;
        i++;
        return {value: item.value, key: i};
    }
}

function createObjectIterator(obj) {
    var okeys = obj ? Object.keys(obj) : [];
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        if (key === '__proto__') {
            return next();
        }
        return i < len ? {value: obj[key], key} : null;
    };
}

function createIterator(coll) {
    if (isArrayLike(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}

function onlyOnce(fn) {
    return function (...args) {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    };
}

// for async generators
function asyncEachOfLimit(generator, limit, iteratee, callback) {
    let done = false;
    let canceled = false;
    let awaiting = false;
    let running = 0;
    let idx = 0;

    function replenish() {
        //console.log('replenish')
        if (running >= limit || awaiting || done) return
        //console.log('replenish awaiting')
        awaiting = true;
        generator.next().then(({value, done: iterDone}) => {
            //console.log('got value', value)
            if (canceled || done) return
            awaiting = false;
            if (iterDone) {
                done = true;
                if (running <= 0) {
                    //console.log('done nextCb')
                    callback(null);
                }
                return;
            }
            running++;
            iteratee(value, idx, iterateeCallback);
            idx++;
            replenish();
        }).catch(handleError);
    }

    function iterateeCallback(err, result) {
        //console.log('iterateeCallback')
        running -= 1;
        if (canceled) return
        if (err) return handleError(err)

        if (err === false) {
            done = true;
            canceled = true;
            return
        }

        if (result === breakLoop || (done && running <= 0)) {
            done = true;
            //console.log('done iterCb')
            return callback(null);
        }
        replenish();
    }

    function handleError(err) {
        if (canceled) return
        awaiting = false;
        done = true;
        callback(err);
    }

    replenish();
}

var eachOfLimit = (limit) => {
    return (obj, iteratee, callback) => {
        callback = once(callback);
        if (limit <= 0) {
            throw new RangeError('concurrency limit cannot be less than 1')
        }
        if (!obj) {
            return callback(null);
        }
        if (isAsyncGenerator(obj)) {
            return asyncEachOfLimit(obj, limit, iteratee, callback)
        }
        if (isAsyncIterable(obj)) {
            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)
        }
        var nextElem = createIterator(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            if (canceled) return
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            }
            else if (err === false) {
                done = true;
                canceled = true;
            }
            else if (value === breakLoop || (done && running <= 0)) {
                done = true;
                return callback(null);
            }
            else if (!looping) {
                replenish();
            }
        }

        function replenish () {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
};

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachOfLimit$1(coll, limit, iteratee, callback) {
    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
}

var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback);
    var index = 0,
        completed = 0,
        {length} = coll,
        canceled = false;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err === false) {
            canceled = true;
        }
        if (canceled === true) return
        if (err) {
            callback(err);
        } else if ((++completed === length) || value === breakLoop) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, onlyOnce(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
function eachOfGeneric (coll, iteratee, callback) {
    return eachOfLimit$2(coll, Infinity, iteratee, callback);
}

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dev.json is a file containing a valid json object config for dev environment
 * // dev.json is a file containing a valid json object config for test environment
 * // prod.json is a file containing a valid json object config for prod environment
 * // invalid.json is a file with a malformed json object
 *
 * let configs = {}; //global variable
 * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};
 * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};
 *
 * // asynchronous function that reads a json file and parses the contents as json object
 * function parseFile(file, key, callback) {
 *     fs.readFile(file, "utf8", function(err, data) {
 *         if (err) return calback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }
 *
 * // Using callbacks
 * async.forEachOf(validConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *     } else {
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *         // JSON parse error exception
 *     } else {
 *         console.log(configs);
 *     }
 * });
 *
 * // Using Promises
 * async.forEachOf(validConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 *     // configs is now a map of JSON data, e.g.
 *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 * }).catch( err => {
 *     console.error(err);
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 * }).catch( err => {
 *     console.error(err);
 *     // JSON parse error exception
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.forEachOf(validConfigFileMap, parseFile);
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * //Error handing
 * async () => {
 *     try {
 *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);
 *         console.log(configs);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // JSON parse error exception
 *     }
 * }
 *
 */
function eachOf(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    return eachOfImplementation(coll, wrapAsync(iteratee), callback);
}

var eachOf$1 = awaitify(eachOf, 3);

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callbacks
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.map(fileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(results);
 *     }
 * });
 *
 * // Using Promises
 * async.map(fileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now an array of the file size in bytes for each file, e.g.
 *     // [ 1000, 2000, 3000]
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.map(fileList, getFileSizeInBytes);
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.map(withMissingFileList, getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function map (coll, iteratee, callback) {
    return _asyncMap(eachOf$1, coll, iteratee, callback)
}
var map$1 = awaitify(map, 3);

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachOfSeries(coll, iteratee, callback) {
    return eachOfLimit$2(coll, 1, iteratee, callback)
}
var eachOfSeries$1 = awaitify(eachOfSeries, 3);

/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapSeries (coll, iteratee, callback) {
    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)
}
awaitify(mapSeries, 3);

// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
class DLL {
    constructor() {
        this.head = this.tail = null;
        this.length = 0;
    }

    removeLink(node) {
        if (node.prev) node.prev.next = node.next;
        else this.head = node.next;
        if (node.next) node.next.prev = node.prev;
        else this.tail = node.prev;

        node.prev = node.next = null;
        this.length -= 1;
        return node;
    }

    empty () {
        while(this.head) this.shift();
        return this;
    }

    insertAfter(node, newNode) {
        newNode.prev = node;
        newNode.next = node.next;
        if (node.next) node.next.prev = newNode;
        else this.tail = newNode;
        node.next = newNode;
        this.length += 1;
    }

    insertBefore(node, newNode) {
        newNode.prev = node.prev;
        newNode.next = node;
        if (node.prev) node.prev.next = newNode;
        else this.head = newNode;
        node.prev = newNode;
        this.length += 1;
    }

    unshift(node) {
        if (this.head) this.insertBefore(this.head, node);
        else setInitial(this, node);
    }

    push(node) {
        if (this.tail) this.insertAfter(this.tail, node);
        else setInitial(this, node);
    }

    shift() {
        return this.head && this.removeLink(this.head);
    }

    pop() {
        return this.tail && this.removeLink(this.tail);
    }

    toArray() {
        return [...this]
    }

    *[Symbol.iterator] () {
        var cur = this.head;
        while (cur) {
            yield cur.data;
            cur = cur.next;
        }
    }

    remove (testFn) {
        var curr = this.head;
        while(curr) {
            var {next} = curr;
            if (testFn(curr)) {
                this.removeLink(curr);
            }
            curr = next;
        }
        return this;
    }
}

function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}

function queue(worker, concurrency, payload) {
    if (concurrency == null) {
        concurrency = 1;
    }
    else if(concurrency === 0) {
        throw new RangeError('Concurrency must not be zero');
    }

    var _worker = wrapAsync(worker);
    var numRunning = 0;
    var workersList = [];
    const events = {
        error: [],
        drain: [],
        saturated: [],
        unsaturated: [],
        empty: []
    };

    function on (event, handler) {
        events[event].push(handler);
    }

    function once (event, handler) {
        const handleAndRemove = (...args) => {
            off(event, handleAndRemove);
            handler(...args);
        };
        events[event].push(handleAndRemove);
    }

    function off (event, handler) {
        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])
        if (!handler) return events[event] = []
        events[event] = events[event].filter(ev => ev !== handler);
    }

    function trigger (event, ...args) {
        events[event].forEach(handler => handler(...args));
    }

    var processingScheduled = false;
    function _insert(data, insertAtFront, rejectOnError, callback) {
        if (callback != null && typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;

        var res, rej;
        function promiseCallback (err, ...args) {
            // we don't care about the error, let the global error handler
            // deal with it
            if (err) return rejectOnError ? rej(err) : res()
            if (args.length <= 1) return res(args[0])
            res(args);
        }

        var item = q._createTaskItem(
            data,
            rejectOnError ? promiseCallback :
                (callback || promiseCallback)
        );

        if (insertAtFront) {
            q._tasks.unshift(item);
        } else {
            q._tasks.push(item);
        }

        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(() => {
                processingScheduled = false;
                q.process();
            });
        }

        if (rejectOnError || !callback) {
            return new Promise((resolve, reject) => {
                res = resolve;
                rej = reject;
            })
        }
    }

    function _createCB(tasks) {
        return function (err, ...args) {
            numRunning -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) {
                var task = tasks[i];

                var index = workersList.indexOf(task);
                if (index === 0) {
                    workersList.shift();
                } else if (index > 0) {
                    workersList.splice(index, 1);
                }

                task.callback(err, ...args);

                if (err != null) {
                    trigger('error', err, task.data);
                }
            }

            if (numRunning <= (q.concurrency - q.buffer) ) {
                trigger('unsaturated');
            }

            if (q.idle()) {
                trigger('drain');
            }
            q.process();
        };
    }

    function _maybeDrain(data) {
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            setImmediate$1(() => trigger('drain'));
            return true
        }
        return false
    }

    const eventMethod = (name) => (handler) => {
        if (!handler) {
            return new Promise((resolve, reject) => {
                once(name, (err, data) => {
                    if (err) return reject(err)
                    resolve(data);
                });
            })
        }
        off(name);
        on(name, handler);

    };

    var isProcessing = false;
    var q = {
        _tasks: new DLL(),
        _createTaskItem (data, callback) {
            return {
                data,
                callback
            };
        },
        *[Symbol.iterator] () {
            yield* q._tasks[Symbol.iterator]();
        },
        concurrency,
        payload,
        buffer: concurrency / 4,
        started: false,
        paused: false,
        push (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, false, false, callback))
            }
            return _insert(data, false, false, callback);
        },
        pushAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, false, true, callback))
            }
            return _insert(data, false, true, callback);
        },
        kill () {
            off();
            q._tasks.empty();
        },
        unshift (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, true, false, callback))
            }
            return _insert(data, true, false, callback);
        },
        unshiftAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, true, true, callback))
            }
            return _insert(data, true, true, callback);
        },
        remove (testFn) {
            q._tasks.remove(testFn);
        },
        process () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) {
                return;
            }
            isProcessing = true;
            while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                var tasks = [], data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) {
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }

                numRunning += 1;

                if (q._tasks.length === 0) {
                    trigger('empty');
                }

                if (numRunning === q.concurrency) {
                    trigger('saturated');
                }

                var cb = onlyOnce(_createCB(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length () {
            return q._tasks.length;
        },
        running () {
            return numRunning;
        },
        workersList () {
            return workersList;
        },
        idle() {
            return q._tasks.length + numRunning === 0;
        },
        pause () {
            q.paused = true;
        },
        resume () {
            if (q.paused === false) { return; }
            q.paused = false;
            setImmediate$1(q.process);
        }
    };
    // define these as fixed properties, so people get useful errors when updating
    Object.defineProperties(q, {
        saturated: {
            writable: false,
            value: eventMethod('saturated')
        },
        unsaturated: {
            writable: false,
            value: eventMethod('unsaturated')
        },
        empty: {
            writable: false,
            value: eventMethod('empty')
        },
        drain: {
            writable: false,
            value: eventMethod('drain')
        },
        error: {
            writable: false,
            value: eventMethod('error')
        },
    });
    return q;
}

/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee completes with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];
 *
 * // asynchronous function that computes the file size in bytes
 * // file size is added to the memoized value, then returned
 * function getFileSizeInBytes(memo, file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, memo + stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(result);
 *     }
 * });
 *
 * // Using Promises
 * async.reduce(fileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 *     // 6000
 *     // which is the sum of the file sizes of the three files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function reduce(coll, memo, iteratee, callback) {
    callback = once(callback);
    var _iteratee = wrapAsync(iteratee);
    return eachOfSeries$1(coll, (x, i, iterCb) => {
        _iteratee(memo, x, (err, v) => {
            memo = v;
            iterCb(err);
        });
    }, err => callback(err, memo));
}
awaitify(reduce, 4);

/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapLimit (coll, limit, iteratee, callback) {
    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)
}
var mapLimit$1 = awaitify(mapLimit, 4);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapLimit
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */
function concatLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, ...args) => {
            if (err) return iterCb(err);
            return iterCb(err, args);
        });
    }, (err, mapResults) => {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                result = result.concat(...mapResults[i]);
            }
        }

        return callback(err, result);
    });
}
var concatLimit$1 = awaitify(concatLimit, 4);

/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. The results array will be returned in
 * the original order of `coll` passed to the `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @alias flatMap
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * let directoryList = ['dir1','dir2','dir3'];
 * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];
 *
 * // Using callbacks
 * async.concat(directoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *    }
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *        // [ Error: ENOENT: no such file or directory ]
 *        // since dir4 does not exist
 *    } else {
 *        console.log(results);
 *    }
 * });
 *
 * // Using Promises
 * async.concat(directoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 * }).catch(err => {
 *      console.log(err);
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 * }).catch(err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4 does not exist
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.concat(directoryList, fs.readdir);
 *         console.log(results);
 *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *     } catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.concat(withMissingDirectoryList, fs.readdir);
 *         console.log(results);
 *     } catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4 does not exist
 *     }
 * }
 *
 */
function concat(coll, iteratee, callback) {
    return concatLimit$1(coll, Infinity, iteratee, callback)
}
awaitify(concat, 3);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapSeries
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */
function concatSeries(coll, iteratee, callback) {
    return concatLimit$1(coll, 1, iteratee, callback)
}
awaitify(concatSeries, 3);

function _createTester(check, getResult) {
    return (eachfn, arr, _iteratee, cb) => {
        var testPassed = false;
        var testResult;
        const iteratee = wrapAsync(_iteratee);
        eachfn(arr, (value, _, callback) => {
            iteratee(value, (err, result) => {
                if (err || err === false) return callback(err);

                if (check(result) && !testResult) {
                    testPassed = true;
                    testResult = getResult(true, value);
                    return callback(null, breakLoop);
                }
                callback();
            });
        }, err => {
            if (err) return cb(err);
            cb(null, testPassed ? testResult : getResult(false));
        });
    };
}

/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // dir1/file1.txt
 *        // result now equals the first file in the list that exists
 *    }
 *);
 *
 * // Using Promises
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)
 * .then(result => {
 *     console.log(result);
 *     // dir1/file1.txt
 *     // result now equals the first file in the list that exists
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);
 *         console.log(result);
 *         // dir1/file1.txt
 *         // result now equals the file in the list that exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function detect(coll, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)
}
awaitify(detect, 3);

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 */
function detectLimit(coll, limit, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)
}
awaitify(detectLimit, 4);

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 */
function detectSeries(coll, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)
}

awaitify(detectSeries, 3);

/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */
function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results;

    function next(err, ...args) {
        if (err) return callback(err);
        if (err === false) return;
        results = args;
        _test(...args, check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }

    return check(null, true);
}

awaitify(doWhilst, 3);

function _withoutIndex(iteratee) {
    return (value, index, callback) => iteratee(value, callback);
}

/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];
 * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];
 *
 * // asynchronous function that deletes a file
 * const deleteFile = function(file, callback) {
 *     fs.unlink(file, callback);
 * };
 *
 * // Using callbacks
 * async.each(fileList, deleteFile, function(err) {
 *     if( err ) {
 *         console.log(err);
 *     } else {
 *         console.log('All files have been deleted successfully');
 *     }
 * });
 *
 * // Error Handling
 * async.each(withMissingFileList, deleteFile, function(err){
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using Promises
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         await async.each(files, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         await async.each(withMissingFileList, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4/file2.txt does not exist
 *         // dir1/file1.txt could have been deleted
 *     }
 * }
 *
 */
function eachLimit(coll, iteratee, callback) {
    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

awaitify(eachLimit, 3);

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachLimit$1(coll, limit, iteratee, callback) {
    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var eachLimit$2 = awaitify(eachLimit$1, 4);

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item
 * in series and therefore the iteratee functions will complete in order.

 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachSeries(coll, iteratee, callback) {
    return eachLimit$2(coll, 1, iteratee, callback)
}
var eachSeries$1 = awaitify(eachSeries, 3);

/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */
function ensureAsync(fn) {
    if (isAsync(fn)) return fn;
    return function (...args/*, callback*/) {
        var callback = args.pop();
        var sync = true;
        args.push((...innerArgs) => {
            if (sync) {
                setImmediate$1(() => callback(...innerArgs));
            } else {
                callback(...innerArgs);
            }
        });
        fn.apply(this, args);
        sync = false;
    };
}

/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.every(fileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * });
 *
 * async.every(withMissingFileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * });
 *
 * // Using Promises
 * async.every(fileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.every(withMissingFileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.every(fileList, fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.every(withMissingFileList, fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since NOT every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function every(coll, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)
}
awaitify(every, 3);

/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function everyLimit(coll, limit, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)
}
awaitify(everyLimit, 4);

/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function everySeries(coll, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)
}
awaitify(everySeries, 3);

function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, (x, index, iterCb) => {
        iteratee(x, (err, v) => {
            truthValues[index] = !!v;
            iterCb(err);
        });
    }, err => {
        if (err) return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
            if (truthValues[i]) results.push(arr[i]);
        }
        callback(null, results);
    });
}

function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, (x, index, iterCb) => {
        iteratee(x, (err, v) => {
            if (err) return iterCb(err);
            if (v) {
                results.push({index, value: x});
            }
            iterCb(err);
        });
    }, err => {
        if (err) return callback(err);
        callback(null, results
            .sort((a, b) => a.index - b.index)
            .map(v => v.value));
    });
}

function _filter(eachfn, coll, iteratee, callback) {
    var filter = isArrayLike(coll) ? filterArray : filterGeneric;
    return filter(eachfn, coll, wrapAsync(iteratee), callback);
}

/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.filter(files, fileExists, function(err, results) {
 *    if(err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *        // results is now an array of the existing files
 *    }
 * });
 *
 * // Using Promises
 * async.filter(files, fileExists)
 * .then(results => {
 *     console.log(results);
 *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *     // results is now an array of the existing files
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.filter(files, fileExists);
 *         console.log(results);
 *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *         // results is now an array of the existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function filter (coll, iteratee, callback) {
    return _filter(eachOf$1, coll, iteratee, callback)
}
awaitify(filter, 3);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 */
function filterLimit (coll, limit, iteratee, callback) {
    return _filter(eachOfLimit(limit), coll, iteratee, callback)
}
awaitify(filterLimit, 4);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 * @returns {Promise} a promise, if no callback provided
 */
function filterSeries (coll, iteratee, callback) {
    return _filter(eachOfSeries$1, coll, iteratee, callback)
}
awaitify(filterSeries, 3);

/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @returns {Promise} a promise that rejects if an error occurs and an errback
 * is not passed
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */
function forever(fn, errback) {
    var done = onlyOnce(errback);
    var task = wrapAsync(ensureAsync(fn));

    function next(err) {
        if (err) return done(err);
        if (err === false) return;
        task(next);
    }
    return next();
}
awaitify(forever, 2);

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */
function groupByLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, key) => {
            if (err) return iterCb(err);
            return iterCb(err, {key, val});
        });
    }, (err, mapResults) => {
        var result = {};
        // from MDN, handle object having an `hasOwnProperty` prop
        var {hasOwnProperty} = Object.prototype;

        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                var {key} = mapResults[i];
                var {val} = mapResults[i];

                if (hasOwnProperty.call(result, key)) {
                    result[key].push(val);
                } else {
                    result[key] = [val];
                }
            }
        }

        return callback(err, result);
    });
}

awaitify(groupByLimit, 4);

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback);
    var newObj = {};
    var _iteratee = wrapAsync(iteratee);
    return eachOfLimit(limit)(obj, (val, key, next) => {
        _iteratee(val, key, (err, result) => {
            if (err) return next(err);
            newObj[key] = result;
            next(err);
        });
    }, err => callback(err, newObj));
}

awaitify(mapValuesLimit, 4);

if (hasNextTick) {
    process.nextTick;
} else if (hasSetImmediate) {
    setImmediate;
} else ;

awaitify((eachfn, tasks, callback) => {
    var results = isArrayLike(tasks) ? [] : {};

    eachfn(tasks, (task, key, taskCb) => {
        wrapAsync(task)((err, ...result) => {
            if (result.length < 2) {
                [result] = result;
            }
            results[key] = result;
            taskCb(err);
        });
    }, err => callback(err, results));
}, 3);

/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Iterable} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {number} payload - an integer that specifies how many items are
 * passed to the worker function at a time. only applies if this is a
 * [cargo]{@link module:ControlFlow.cargo} object
 * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns
 * a promise that rejects if an error occurs.
 * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns
 * a promise that rejects if an error occurs.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a function that sets a callback that is
 * called when the number of running workers hits the `concurrency` limit, and
 * further tasks will be queued.  If the callback is omitted, `q.saturated()`
 * returns a promise for the next occurrence.
 * @property {Function} unsaturated - a function that sets a callback that is
 * called when the number of running workers is less than the `concurrency` &
 * `buffer` limits, and further tasks will not be queued. If the callback is
 * omitted, `q.unsaturated()` returns a promise for the next occurrence.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a function that sets a callback that is called
 * when the last item from the `queue` is given to a `worker`. If the callback
 * is omitted, `q.empty()` returns a promise for the next occurrence.
 * @property {Function} drain - a function that sets a callback that is called
 * when the last item from the `queue` has returned from the `worker`. If the
 * callback is omitted, `q.drain()` returns a promise for the next occurrence.
 * @property {Function} error - a function that sets a callback that is called
 * when a task errors. Has the signature `function(error, task)`. If the
 * callback is omitted, `error()` returns a promise that rejects on the next
 * error.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 *
 * @example
 * const q = async.queue(worker, 2)
 * q.push(item1)
 * q.push(item2)
 * q.push(item3)
 * // queues are iterable, spread into an array to inspect
 * const items = [...q] // [item1, item2, item3]
 * // or use for of
 * for (let item of q) {
 *     console.log(item)
 * }
 *
 * q.drain(() => {
 *     console.log('all done')
 * })
 * // or
 * await q.drain()
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain(function() {
 *     console.log('all items have been processed');
 * });
 * // or await the end
 * await q.drain()
 *
 * // assign an error callback
 * q.error(function(err, task) {
 *     console.error('task experienced an error');
 * });
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * // callback is optional
 * q.push({name: 'bar'});
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */
function queue$1 (worker, concurrency) {
    var _worker = wrapAsync(worker);
    return queue((items, cb) => {
        _worker(items[0], cb);
    }, concurrency, 1);
}

/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */
function race(tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();
    for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
    }
}

awaitify(race, 2);

function reject(eachfn, arr, _iteratee, callback) {
    const iteratee = wrapAsync(_iteratee);
    return _filter(eachfn, arr, (value, cb) => {
        iteratee(value, (err, v) => {
            cb(err, !v);
        });
    }, callback);
}

/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.reject(fileList, fileExists, function(err, results) {
 *    // [ 'dir3/file6.txt' ]
 *    // results now equals an array of the non-existing files
 * });
 *
 * // Using Promises
 * async.reject(fileList, fileExists)
 * .then( results => {
 *     console.log(results);
 *     // [ 'dir3/file6.txt' ]
 *     // results now equals an array of the non-existing files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.reject(fileList, fileExists);
 *         console.log(results);
 *         // [ 'dir3/file6.txt' ]
 *         // results now equals an array of the non-existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function reject$1 (coll, iteratee, callback) {
    return reject(eachOf$1, coll, iteratee, callback)
}
awaitify(reject$1, 3);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function rejectLimit (coll, limit, iteratee, callback) {
    return reject(eachOfLimit(limit), coll, iteratee, callback)
}
awaitify(rejectLimit, 4);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function rejectSeries (coll, iteratee, callback) {
    return reject(eachOfSeries$1, coll, iteratee, callback)
}
awaitify(rejectSeries, 3);

/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // true
 *        // result is true since some file in the list exists
 *    }
 *);
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // false
 *        // result is false since none of the files exists
 *    }
 *);
 *
 * // Using Promises
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since some file in the list exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since none of the files exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since some file in the list exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since none of the files exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function some(coll, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)
}
awaitify(some, 3);

/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function someLimit(coll, limit, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)
}
awaitify(someLimit, 4);

/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function someSeries(coll, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)
}
awaitify(someSeries, 3);

/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback passed
 * @example
 *
 * // bigfile.txt is a file that is 251100 bytes in size
 * // mediumfile.txt is a file that is 11000 bytes in size
 * // smallfile.txt is a file that is 121 bytes in size
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) return callback(getFileSizeErr);
 *         callback(null, fileSize);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // descending order
 * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) {
 *             return callback(getFileSizeErr);
 *         }
 *         callback(null, fileSize * -1);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']
 *         }
 *     }
 * );
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *             // [ Error: ENOENT: no such file or directory ]
 *         } else {
 *             console.log(results);
 *         }
 *     }
 * );
 *
 * // Using Promises
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now the original array of files sorted by
 *     // file size (ascending by default), e.g.
 *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * (async () => {
 *     try {
 *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *         // results is now the original array of files sorted by
 *         // file size (ascending by default), e.g.
 *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * })();
 *
 * // Error handling
 * async () => {
 *     try {
 *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function sortBy (coll, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return map$1(coll, (x, iterCb) => {
        _iteratee(x, (err, criteria) => {
            if (err) return iterCb(err);
            iterCb(err, {value: x, criteria});
        });
    }, (err, results) => {
        if (err) return callback(err);
        callback(null, results.sort(comparator).map(v => v.value));
    });

    function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
    }
}
awaitify(sortBy, 3);

/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */
function tryEach(tasks, callback) {
    var error = null;
    var result;
    return eachSeries$1(tasks, (task, taskCb) => {
        wrapAsync(task)((err, ...args) => {
            if (err === false) return taskCb(err);

            if (args.length < 2) {
                [result] = args;
            } else {
                result = args;
            }
            error = err;
            taskCb(err ? null : {});
        });
    }, () => callback(error, result));
}

awaitify(tryEach);

/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function test(cb) { cb(null, count < 5); },
 *     function iter(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */
function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results = [];

    function next(err, ...rest) {
        if (err) return callback(err);
        results = rest;
        if (err === false) return;
        _test(check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }

    return _test(check);
}
awaitify(whilst, 3);

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
function waterfall (tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = wrapAsync(tasks[taskIndex++]);
        task(...args, onlyOnce(next));
    }

    function next(err, ...args) {
        if (err === false) return
        if (err || taskIndex === tasks.length) {
            return callback(err, ...args);
        }
        nextTask(args);
    }

    nextTask([]);
}

awaitify(waterfall);

function processTasks(task, finishedCallback) {
    return __awaiter$1(this, void 0, void 0, function* () {
        try {
            yield task();
            finishedCallback();
        }
        catch (e) {
            finishedCallback(e);
        }
    });
}
class AsyncQueue {
    constructor() {
        this.queue = queue$1(processTasks, 1);
    }
    push(task) {
        return this.queue.pushAsync(task);
    }
    empty() {
        return this.queue.empty();
    }
}

const NOISE_REDUCTION_KIND = 'noise-reduction-effect';
const VIRTUAL_BACKGROUND_KIND = 'virtual-background-effect';
const isNoiseReductionEffect = (effect) => {
    return (effect === null || effect === void 0 ? void 0 : effect.kind) === NOISE_REDUCTION_KIND;
};
const isVirtualBackgroundEffect = (effect) => {
    return (effect === null || effect === void 0 ? void 0 : effect.kind) === VIRTUAL_BACKGROUND_KIND;
};

var OfferAnswerType;
(function (OfferAnswerType) {
    OfferAnswerType[OfferAnswerType["LocalOnly"] = 0] = "LocalOnly";
    OfferAnswerType[OfferAnswerType["Remote"] = 1] = "Remote";
})(OfferAnswerType || (OfferAnswerType = {}));
class SendOnlyTransceiver extends Transceiver {
    constructor(config) {
        super(config);
        this.rtxEnabled = false;
        this.streamMuteStateChange = new TypedEvent();
        this.streamPublishStateChange = new TypedEvent();
        this.negotiationNeeded = new TypedEvent();
        this.namedMediaGroupsChange = new TypedEvent();
        this.requestedIdEncodingParamsMap = new Map();
        this.updateSendParametersQueue = new AsyncQueue();
        this.sourceStateOverrideChange = new TypedEvent();
        this.metadata = { lastRequestedUpdateTimestampsMap: new Map() };
        this.munger = config.munger;
        this.csi = config.csi;
        this.direction = 'sendrecv';
        this.handleTrackChange = this.handleTrackChange.bind(this);
        this.handleStreamConstraintsChange = this.handleStreamConstraintsChange.bind(this);
        this.handleStreamMuteStateChange = this.handleStreamMuteStateChange.bind(this);
    }
    replaceSenderSource(stream) {
        var _a, _b;
        return __awaiter$1(this, void 0, void 0, function* () {
            const trackOrNull = (_a = stream === null || stream === void 0 ? void 0 : stream.outputStream.getTracks()[0]) !== null && _a !== void 0 ? _a : null;
            if (((_b = this.sender.track) === null || _b === void 0 ? void 0 : _b.id) !== (trackOrNull === null || trackOrNull === void 0 ? void 0 : trackOrNull.id)) {
                yield this.sender.replaceTrack(trackOrNull);
                if (trackOrNull) {
                    logger.log(`Sender source for ${this.mediaType} replaced with track ID ${trackOrNull.id}`);
                }
                else {
                    logger.log(`Sender source for ${this.mediaType} set to null, sender stopped`);
                }
            }
        });
    }
    handleTrackChange() {
        return __awaiter$1(this, void 0, void 0, function* () {
            if (this.requested) {
                yield this.replaceSenderSource(this.publishedStream);
            }
        });
    }
    handleStreamConstraintsChange() {
        return __awaiter$1(this, void 0, void 0, function* () {
            yield this.updateSendParameters(this.requestedIdEncodingParamsMap);
        });
    }
    handleStreamMuteStateChange() {
        this.streamMuteStateChange.emit();
    }
    get requested() {
        return this.requestedIdEncodingParamsMap.size > 0;
    }
    replaceTransceiver(newRtcRtpTransceiver) {
        const _super = Object.create(null, {
            replaceTransceiver: { get: () => super.replaceTransceiver }
        });
        return __awaiter$1(this, void 0, void 0, function* () {
            _super.replaceTransceiver.call(this, newRtcRtpTransceiver);
            newRtcRtpTransceiver.direction = this.direction;
            if (this.requested) {
                yield this.replaceSenderSource(this.publishedStream);
            }
        });
    }
    replacePublishedStream(newStream) {
        return __awaiter$1(this, void 0, void 0, function* () {
            const oldStream = this.publishedStream;
            oldStream === null || oldStream === void 0 ? void 0 : oldStream.off(exports.LocalStreamEventNames.OutputTrackChange, this.handleTrackChange);
            oldStream === null || oldStream === void 0 ? void 0 : oldStream.off(exports.LocalStreamEventNames.ConstraintsChange, this.handleStreamConstraintsChange);
            oldStream === null || oldStream === void 0 ? void 0 : oldStream.off(exports.LocalStreamEventNames.UserMuteStateChange, this.handleStreamMuteStateChange);
            oldStream === null || oldStream === void 0 ? void 0 : oldStream.off(exports.LocalStreamEventNames.SystemMuteStateChange, this.handleStreamMuteStateChange);
            if (this.requested) {
                yield this.replaceSenderSource(newStream);
            }
            this.publishedStream = newStream;
            newStream === null || newStream === void 0 ? void 0 : newStream.on(exports.LocalStreamEventNames.OutputTrackChange, this.handleTrackChange);
            newStream === null || newStream === void 0 ? void 0 : newStream.on(exports.LocalStreamEventNames.ConstraintsChange, this.handleStreamConstraintsChange);
            newStream === null || newStream === void 0 ? void 0 : newStream.on(exports.LocalStreamEventNames.UserMuteStateChange, this.handleStreamMuteStateChange);
            newStream === null || newStream === void 0 ? void 0 : newStream.on(exports.LocalStreamEventNames.SystemMuteStateChange, this.handleStreamMuteStateChange);
            if ((!oldStream && newStream && !newStream.muted) ||
                (oldStream && !newStream && !oldStream.muted)) {
                this.streamPublishStateChange.emit();
            }
            else if ((oldStream === null || oldStream === void 0 ? void 0 : oldStream.muted) !== (newStream === null || newStream === void 0 ? void 0 : newStream.muted)) {
                this.streamMuteStateChange.emit();
            }
        });
    }
    setNamedMediaGroups(namedMediaGroups) {
        if (this.mediaType !== exports.MediaType.AudioMain) {
            logErrorAndThrow(exports.WcmeErrorType.SET_NMG_FAILED, `Named media groups can only be set for audio.`);
        }
        this.namedMediaGroups = namedMediaGroups;
        this.namedMediaGroupsChange.emit();
    }
    publishStream(stream) {
        return this.replacePublishedStream(stream);
    }
    unpublishStream() {
        return this.replacePublishedStream();
    }
    get active() {
        return this._rtcRtpTransceiver.direction === 'sendrecv';
    }
    set active(enabled) {
        this.direction = enabled ? 'sendrecv' : 'inactive';
        this._rtcRtpTransceiver.direction = this.direction;
        if (this._rtcRtpTransceiver.direction !== this._rtcRtpTransceiver.currentDirection) {
            this.negotiationNeeded.emit(OfferAnswerType.Remote);
        }
    }
    getStats() {
        return __awaiter$1(this, void 0, void 0, function* () {
            const statsMap = new Map();
            const statsReport = yield this.sender.getStats();
            statsReport.forEach((stats, key) => {
                var _a, _b, _c, _d, _e;
                if (stats.type === 'outbound-rtp') {
                    stats.mid = this.mid;
                    stats.csi = this.csi;
                    stats.calliopeMediaType = this.mediaType;
                    const senderId = this.munger.getSenderIds().find((id) => id.ssrc === stats.ssrc);
                    if (senderId) {
                        const encodingIndex = this.getEncodingIndexForStreamId(senderId);
                        const encodingParams = this.requestedIdEncodingParamsMap.get(encodingIndex);
                        stats.requestedBitrate = encodingParams === null || encodingParams === void 0 ? void 0 : encodingParams.maxPayloadBitsPerSecond;
                        stats.requestedFrameSize = encodingParams === null || encodingParams === void 0 ? void 0 : encodingParams.maxFs;
                        stats.isRequested = !!encodingParams;
                        stats.lastRequestedUpdateTimestamp =
                            this.metadata.lastRequestedUpdateTimestampsMap.get(encodingIndex);
                    }
                    const effect = (_b = (_a = this.publishedStream) === null || _a === void 0 ? void 0 : _a.getEffects()) === null || _b === void 0 ? void 0 : _b[0];
                    if (effect === null || effect === void 0 ? void 0 : effect.isEnabled) {
                        if (isNoiseReductionEffect(effect)) {
                            stats.effect = {
                                kind: effect.kind,
                                noiseReductionMode: 'LOW_POWER',
                            };
                        }
                        else if (isVirtualBackgroundEffect(effect)) {
                            stats.effect = {
                                kind: effect.kind,
                                virtualBackgroundMode: (_c = effect.options) === null || _c === void 0 ? void 0 : _c.mode,
                            };
                        }
                        else {
                            stats.effect = {
                                kind: effect.kind,
                            };
                        }
                    }
                    const trackSettings = (_d = this.publishedStream) === null || _d === void 0 ? void 0 : _d.getSettings();
                    if (trackSettings === null || trackSettings === void 0 ? void 0 : trackSettings.frameRate) {
                        stats.targetFrameRate = trackSettings === null || trackSettings === void 0 ? void 0 : trackSettings.frameRate;
                    }
                }
                else if (stats.type === 'media-source') {
                    stats.calliopeMediaType = this.mediaType;
                    stats.trackLabel = (_e = this.publishedStream) === null || _e === void 0 ? void 0 : _e.label;
                }
                statsMap.set(key, stats);
            });
            return statsMap;
        });
    }
    updateSendParameters(requestedIdEncodingParamsMap) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.updateSendParametersQueue.push(() => __awaiter$1(this, void 0, void 0, function* () {
                const sendParameters = this.sender.getParameters();
                sendParameters.encodings.forEach((encoding, index) => {
                    var _a, _b;
                    const encodingParams = requestedIdEncodingParamsMap.get(index);
                    encoding.active = !!encodingParams;
                    if (encodingParams) {
                        const { maxPayloadBitsPerSecond, maxFs, maxWidth, maxHeight } = encodingParams;
                        const scaleDownRatio = getScaleDownRatio((_a = this.publishedStream) === null || _a === void 0 ? void 0 : _a.getSettings().width, (_b = this.publishedStream) === null || _b === void 0 ? void 0 : _b.getSettings().height, maxFs, maxWidth, maxHeight);
                        if (maxPayloadBitsPerSecond !== undefined && maxPayloadBitsPerSecond >= 0) {
                            encoding.maxBitrate = maxPayloadBitsPerSecond;
                        }
                        if (scaleDownRatio !== undefined && scaleDownRatio >= 1.0) {
                            encoding.scaleResolutionDownBy = scaleDownRatio;
                        }
                    }
                });
                yield this.sender.setParameters(sendParameters);
                logger.log(`Sender parameters for ${this.mediaType} set to ${JSON.stringify(sendParameters)}`);
                const timestamp = getCurrentTimestamp();
                requestedIdEncodingParamsMap.forEach((_, index) => {
                    if (!this.requestedIdEncodingParamsMap.has(index)) {
                        this.metadata.lastRequestedUpdateTimestampsMap.set(index, timestamp);
                    }
                });
                this.requestedIdEncodingParamsMap.forEach((_, index) => {
                    if (!requestedIdEncodingParamsMap.has(index)) {
                        this.metadata.lastRequestedUpdateTimestampsMap.set(index, timestamp);
                    }
                });
                const oldRequested = this.requested;
                const newRequested = requestedIdEncodingParamsMap.size > 0;
                this.requestedIdEncodingParamsMap = requestedIdEncodingParamsMap;
                if (oldRequested !== newRequested) {
                    yield this.replaceSenderSource(newRequested ? this.publishedStream : null);
                }
            }));
        });
    }
    isSimulcastEnabled() {
        const params = this.sender.getParameters();
        return params.encodings.length > 1;
    }
    mungeLocalDescription(mediaDescription) {
        this.munger.mungeLocalDescription(mediaDescription, {
            simulcastEnabled: this.isSimulcastEnabled(),
            rtxEnabled: this.rtxEnabled,
            twccDisabled: this.twccDisabled,
            forceSoftwareEncoder: this.mediaType === exports.MediaType.VideoSlides &&
                (BrowserInfo.isWindows() || BrowserInfo.isMac()) &&
                (BrowserInfo.isChrome() || BrowserInfo.isEdge()),
        });
    }
    mungeLocalDescriptionForRemoteServer(mediaDescription, mungeOptions = { injectDummyCandidates: true }) {
        this.munger.mungeLocalDescriptionForRemoteServer(mediaDescription, getMediaContent(this.mediaType), this.csi, mungeOptions);
    }
    mungeRemoteDescription(mediaDescription) {
        this.munger.mungeRemoteDescription(mediaDescription);
    }
    get senderIds() {
        return this.munger.getSenderIds();
    }
    get numActiveSimulcastLayers() {
        var _a;
        if (getMediaFamily(this.mediaType) === exports.MediaFamily.Video) {
            return (_a = this.publishedStream) === null || _a === void 0 ? void 0 : _a.getNumActiveSimulcastLayers();
        }
        return this.publishedStream ? 0 : undefined;
    }
    getEncodingIndexForStreamId(id) {
        return this.munger.getEncodingIndexForStreamId(id);
    }
    resetSdpMunger() {
        this.munger.reset();
    }
    setCodecParameters(parameters) {
        this.munger.setCodecParameters(parameters);
        this.negotiationNeeded.emit(OfferAnswerType.LocalOnly);
    }
    deleteCodecParameters(parameters) {
        this.munger.deleteCodecParameters(parameters);
        this.negotiationNeeded.emit(OfferAnswerType.LocalOnly);
    }
    setSourceStateOverride(state) {
        this.sourceStateOverride = state;
        this.sourceStateOverrideChange.emit();
    }
    get currentSourceState() {
        if (this.sourceStateOverride) {
            return this.sourceStateOverride;
        }
        if (!this.publishedStream) {
            return 'no source';
        }
        if (this.publishedStream.muted) {
            return 'avatar';
        }
        return 'live';
    }
}

class SendSlot {
    constructor(sendTransceiver) {
        this.sendTransceiver = sendTransceiver;
    }
    publishStream(stream) {
        return __awaiter$1(this, void 0, void 0, function* () {
            if (stream === this.sendTransceiver.publishedStream) {
                return Promise.resolve();
            }
            return this.sendTransceiver.publishStream(stream);
        });
    }
    unpublishStream() {
        return __awaiter$1(this, void 0, void 0, function* () {
            if (!this.sendTransceiver.publishedStream) {
                return Promise.resolve();
            }
            return this.sendTransceiver.unpublishStream();
        });
    }
    setNamedMediaGroups(namedMediaGroups) {
        this.sendTransceiver.setNamedMediaGroups(namedMediaGroups);
    }
    clearNamedMediaGroups() {
        this.setNamedMediaGroups([]);
    }
    get active() {
        return this.sendTransceiver.active;
    }
    set active(active) {
        this.sendTransceiver.active = active;
    }
    setCodecParameters(parameters) {
        return __awaiter$1(this, void 0, void 0, function* () {
            this.sendTransceiver.setCodecParameters(parameters);
        });
    }
    deleteCodecParameters(parameters) {
        return __awaiter$1(this, void 0, void 0, function* () {
            this.sendTransceiver.deleteCodecParameters(parameters);
        });
    }
    setSourceStateOverride(state) {
        this.sendTransceiver.setSourceStateOverride(state);
    }
    clearSourceStateOverride() {
        this.sendTransceiver.setSourceStateOverride(undefined);
    }
}

const organizeTransceiverStats = (sendTransceivers, recvTransceivers) => __awaiter$1(void 0, void 0, void 0, function* () {
    const result = {
        audio: {
            senders: [],
            receivers: [],
        },
        video: {
            senders: [],
            receivers: [],
        },
        screenShareAudio: {
            senders: [],
            receivers: [],
        },
        screenShareVideo: {
            senders: [],
            receivers: [],
        },
    };
    yield Promise.all([...sendTransceivers.entries()].map(([mediaType, transceiver]) => __awaiter$1(void 0, void 0, void 0, function* () {
        var _a;
        const item = {
            report: yield transceiver.getStats(),
            mid: transceiver.mid,
            csi: transceiver.csi,
            currentDirection: 'sendonly',
            localTrackLabel: (_a = transceiver.publishedStream) === null || _a === void 0 ? void 0 : _a.label,
        };
        if (mediaType === exports.MediaType.AudioMain) {
            result.audio.senders.push(item);
        }
        if (mediaType === exports.MediaType.VideoMain) {
            result.video.senders.push(item);
        }
        if (mediaType === exports.MediaType.AudioSlides) {
            result.screenShareAudio.senders.push(item);
        }
        if (mediaType === exports.MediaType.VideoSlides) {
            result.screenShareVideo.senders.push(item);
        }
    })));
    yield Promise.all([...recvTransceivers.entries()].map(([mediaType, transceivers]) => __awaiter$1(void 0, void 0, void 0, function* () {
        return Promise.all(transceivers.map((t) => __awaiter$1(void 0, void 0, void 0, function* () {
            var _b;
            const item = {
                report: yield t.getStats(),
                csi: t.receiveSlot.currentRxCsi,
                currentDirection: 'recvonly',
                localTrackLabel: (_b = t.receiveSlot.stream.getTracks()[0]) === null || _b === void 0 ? void 0 : _b.label,
            };
            if (mediaType === exports.MediaType.AudioMain) {
                result.audio.receivers.push(item);
            }
            if (mediaType === exports.MediaType.VideoMain) {
                result.video.receivers.push(item);
            }
            if (mediaType === exports.MediaType.AudioSlides) {
                result.screenShareAudio.receivers.push(item);
            }
            if (mediaType === exports.MediaType.VideoSlides) {
                result.screenShareVideo.receivers.push(item);
            }
        })));
    })));
    return result;
});

function toMediaStreamTrackKind(mediaType) {
    return [exports.MediaType.VideoMain, exports.MediaType.VideoSlides].includes(mediaType)
        ? exports.MediaStreamTrackKind.Video
        : exports.MediaStreamTrackKind.Audio;
}
function webRtcVideoContentHintToJmpVideoContentHint(hint) {
    if (hint === 'motion') {
        return 'motion';
    }
    if (hint === 'detail') {
        return 'sharpness';
    }
    return undefined;
}
exports.MultistreamConnectionEventNames = void 0;
(function (MultistreamConnectionEventNames) {
    MultistreamConnectionEventNames["VideoSourceCountUpdate"] = "video-source-count-update";
    MultistreamConnectionEventNames["AudioSourceCountUpdate"] = "audio-source-count-update";
    MultistreamConnectionEventNames["ActiveSpeakerNotification"] = "active-speaker-notification";
    MultistreamConnectionEventNames["PeerConnectionStateUpdate"] = "peer-connection-state-update";
    MultistreamConnectionEventNames["IceConnectionStateUpdate"] = "ice-connection-state-update";
    MultistreamConnectionEventNames["IceGatheringStateUpdate"] = "ice-gathering-state-update";
    MultistreamConnectionEventNames["NegotiationNeeded"] = "negotiation-needed";
    MultistreamConnectionEventNames["CreateOfferOnSuccess"] = "createofferonsuccess";
    MultistreamConnectionEventNames["CreateAnswerOnSuccess"] = "createansweronsuccess";
    MultistreamConnectionEventNames["SetLocalDescriptionOnSuccess"] = "setlocaldescriptiononsuccess";
    MultistreamConnectionEventNames["SetRemoteDescriptionOnSuccess"] = "setremotedescriptiononsuccess";
    MultistreamConnectionEventNames["IceCandidate"] = "icecandidate";
    MultistreamConnectionEventNames["IceCandidateError"] = "icecandidateerror";
})(exports.MultistreamConnectionEventNames || (exports.MultistreamConnectionEventNames = {}));
const defaultMultistreamConnectionOptions = {
    disableSimulcast: BrowserInfo.isFirefox(),
    bundlePolicy: 'max-compat',
    iceServers: undefined,
    iceTransportPolicy: 'all',
    disableContentSimulcast: true,
    disableAudioTwcc: true,
    doFullIce: BrowserInfo.isFirefox(),
    metricsCallback: () => { },
};
class MultistreamConnection extends EventEmitter$2 {
    constructor(userOptions = {}) {
        super();
        this.sendTransceivers = new Map();
        this.recvTransceivers = new Map();
        this.jmpSessions = new Map();
        this.pendingJmpTasks = [];
        this.overuseUpdateCallback = () => { };
        this.midPredictor = new MidPredictor();
        this.offerAnswerQueue = new AsyncQueue();
        this.currentCreateOfferId = 0;
        this.options = Object.assign(Object.assign({}, defaultMultistreamConnectionOptions), userOptions);
        logger.info(`Creating multistream connection with options ${JSON.stringify(this.options)}`);
        this.metricsCallback = this.options.metricsCallback;
        this.initializePeerConnection();
        this.overuseStateManager = new OveruseStateManager((overuseState) => this.overuseUpdateCallback(overuseState));
        this.overuseStateManager.start();
        this.statsManager = new StatsManager(() => this.pc.getStats(), (stats) => this.preProcessStats(stats));
        const mainSceneId = generateSceneId();
        const slidesSceneId = generateSceneId();
        const videoMainEncodingOptions = this.getVideoEncodingOptions(exports.MediaContent.Main);
        const videoSlidesEncodingOptions = this.getVideoEncodingOptions(exports.MediaContent.Slides);
        this.createSendTransceiver(exports.MediaType.VideoMain, mainSceneId, videoMainEncodingOptions);
        this.createSendTransceiver(exports.MediaType.AudioMain, mainSceneId);
        this.createSendTransceiver(exports.MediaType.VideoSlides, slidesSceneId, videoSlidesEncodingOptions);
        this.createSendTransceiver(exports.MediaType.AudioSlides, slidesSceneId);
    }
    initializePeerConnection() {
        var _a;
        (_a = this.pc) === null || _a === void 0 ? void 0 : _a.close();
        this.pc = new PeerConnection({
            iceServers: this.options.iceServers,
            bundlePolicy: this.options.bundlePolicy,
            iceTransportPolicy: this.options.iceTransportPolicy,
        });
        this.propagatePeerConnectionEvents();
        this.attachMetricsObserver();
        this.createDataChannel();
    }
    propagatePeerConnectionEvents() {
        this.pc.on(PeerConnection.Events.PeerConnectionStateChange, (state) => {
            this.emit(exports.MultistreamConnectionEventNames.PeerConnectionStateUpdate, state);
        });
        this.pc.on(PeerConnection.Events.IceConnectionStateChange, (state) => {
            this.emit(exports.MultistreamConnectionEventNames.IceConnectionStateUpdate, state);
        });
        this.pc.on(PeerConnection.Events.CreateOfferOnSuccess, (description) => {
            this.emit(exports.MultistreamConnectionEventNames.CreateOfferOnSuccess, description);
        });
        this.pc.on(PeerConnection.Events.CreateAnswerOnSuccess, (description) => {
            this.emit(exports.MultistreamConnectionEventNames.CreateAnswerOnSuccess, description);
        });
        this.pc.on(PeerConnection.Events.SetLocalDescriptionOnSuccess, (description) => {
            this.emit(exports.MultistreamConnectionEventNames.SetLocalDescriptionOnSuccess, description);
        });
        this.pc.on(PeerConnection.Events.SetRemoteDescriptionOnSuccess, (description) => {
            this.emit(exports.MultistreamConnectionEventNames.SetRemoteDescriptionOnSuccess, description);
        });
        this.pc.on(PeerConnection.Events.IceGatheringStateChange, () => {
            this.emit(exports.MultistreamConnectionEventNames.IceGatheringStateUpdate, this.getIceGatheringState());
        });
        this.pc.on(PeerConnection.Events.IceCandidate, (candidate) => {
            this.emit(exports.MultistreamConnectionEventNames.IceCandidate, candidate);
        });
        this.pc.on(PeerConnection.Events.IceCandidateError, (error) => {
            this.emit(exports.MultistreamConnectionEventNames.IceCandidateError, error);
        });
    }
    getConnectionState() {
        return this.pc.getConnectionState();
    }
    getPeerConnectionState() {
        return this.pc.getPeerConnectionState();
    }
    getIceConnectionState() {
        return this.pc.getIceConnectionState();
    }
    getCurrentConnectionType() {
        return this.pc.getCurrentConnectionType();
    }
    getIceGatheringState() {
        return this.pc.iceGatheringState;
    }
    getVideoEncodingOptions(content) {
        const enabledSimulcast = content === exports.MediaContent.Main
            ? !this.options.disableSimulcast
            : !this.options.disableContentSimulcast;
        return enabledSimulcast
            ? [
                { scaleResolutionDownBy: 4, active: false },
                { scaleResolutionDownBy: 2, active: false },
                { active: false },
            ]
            : [{ active: false }];
    }
    createSendTransceiver(mediaType, sceneId, sendEncodingsOptions) {
        let rtcRtpTransceiver;
        try {
            rtcRtpTransceiver = this.pc.addTransceiver(toMediaStreamTrackKind(mediaType), {
                direction: 'sendrecv',
                sendEncodings: sendEncodingsOptions,
            });
        }
        catch (e) {
            logger.error(`addTransceiver failed due to : ${e}`);
            throw e;
        }
        const mid = this.midPredictor.getNextMid(mediaType);
        const csi = generateCsi(getMediaFamily(mediaType), sceneId);
        const munger = new EgressSdpMunger();
        const transceiver = new SendOnlyTransceiver({
            rtcRtpTransceiver,
            mid,
            mediaType,
            munger,
            csi,
        });
        if (getMediaFamily(mediaType) === exports.MediaFamily.Video) {
            transceiver.rtxEnabled = true;
            transceiver.setCodecParameters({
                'max-mbps': `${defaultMaxVideoEncodeMbps}`,
                'max-fs': `${defaultMaxVideoEncodeFrameSize}`,
            });
        }
        transceiver.twccDisabled =
            getMediaFamily(mediaType) === exports.MediaFamily.Audio ? this.options.disableAudioTwcc : false;
        transceiver.active = false;
        transceiver.streamMuteStateChange.on(() => {
            this.sendSourceAdvertisement(mediaType);
            this.sendMediaRequestStatus(mediaType);
        });
        transceiver.streamPublishStateChange.on(() => {
            this.sendSourceAdvertisement(mediaType);
            this.sendMediaRequestStatus(mediaType);
        });
        transceiver.negotiationNeeded.on((offerAnswerType) => {
            if (offerAnswerType === OfferAnswerType.Remote) {
                this.emit(exports.MultistreamConnectionEventNames.NegotiationNeeded);
            }
            else if (this.pc.getRemoteDescription()) {
                this.queueLocalOfferAnswer();
            }
        });
        transceiver.namedMediaGroupsChange.on(() => {
            this.sendSourceAdvertisement(mediaType);
        });
        transceiver.sourceStateOverrideChange.on(() => {
            this.sendMediaRequestStatus(mediaType);
        });
        this.sendTransceivers.set(mediaType, transceiver);
        this.createJmpSession(mediaType);
    }
    createSendSlot(mediaType, active = true) {
        const transceiver = this.getSendTransceiverOrThrow(mediaType);
        transceiver.active = active;
        return new SendSlot(transceiver);
    }
    createJmpSession(mediaType) {
        const jmpSession = new JmpSession(getMediaFamily(mediaType), getMediaContent(mediaType));
        jmpSession.setTxCallback((msg) => {
            var _a;
            if (((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.readyState) !== 'open') {
                logger.error(`DataChannel not created or not connected. Unable to send JMP message.`);
                return;
            }
            try {
                logger.info(`Sending JMP message (size: ${msg.length}): ${msg}`);
                this.dataChannel.send(msg);
            }
            catch (err) {
                const { bufferedAmount, readyState } = this.dataChannel;
                const { sctp } = this.pc.getUnderlyingRTCPeerConnection();
                const { maxMessageSize, state } = sctp || {};
                logErrorAndThrow(exports.WcmeErrorType.DATA_CHANNEL_SEND_FAILED, `Sending JMP message failed with error: ${err},
Message size: ${msg.length},
Data Channel State: ${readyState},
Data Channel Buffered amount: ${bufferedAmount},
SCTP State: ${state},
SCTP Max Message Size: ${maxMessageSize}`);
            }
        });
        let prevNumTotalSources = 0;
        let prevNumLiveSources = 0;
        jmpSession.on(JmpSessionEvents.SourceAdvertisementReceived, (data) => {
            logger.log(`SourceAdvertisement received: ${JSON.stringify(data)}`);
            if (data.numTotalSources !== prevNumTotalSources ||
                data.numLiveSources !== prevNumLiveSources) {
                prevNumTotalSources = data.numTotalSources;
                prevNumLiveSources = data.numLiveSources;
                const eventName = getMediaFamily(mediaType) === exports.MediaFamily.Video
                    ? exports.MultistreamConnectionEventNames.VideoSourceCountUpdate
                    : exports.MultistreamConnectionEventNames.AudioSourceCountUpdate;
                this.emit(eventName, data.numTotalSources, data.numLiveSources, getMediaContent(mediaType));
            }
            else {
                logger.log('Number of sources was unchanged, ignoring message');
            }
        });
        jmpSession.on(JmpSessionEvents.MediaRequestStatusReceived, (data) => {
            logger.log(`MediaRequestStatus received: ${JSON.stringify(data)}`);
            data.streamStates.forEach((s) => {
                if (!isValidSsrcStreamId(s.id)) {
                    logger.error(`Received MediaRequestStatus with non-SSRC based stream ID, which is currently not supported: ${JSON.stringify(s.id)}`);
                    return;
                }
                const receiveSlot = this.getReceiveSlotById(s.id);
                if (!receiveSlot) {
                    logger.warn(`Got MediaRequestStatus for unknown receive slot: ${JSON.stringify(s.id)}`);
                    return;
                }
                receiveSlot._updateSource(s.state, s.csi);
            });
        });
        jmpSession.on(JmpSessionEvents.MediaRequestReceived, (data) => {
            logger.log(`MediaRequest received: ${JSON.stringify(data)}`);
            this.updateRequestedStreams(mediaType, data.requests).then(() => {
                if (getMediaFamily(mediaType) === exports.MediaFamily.Video) {
                    this.sendMediaRequestStatus(mediaType);
                }
            });
        });
        jmpSession.on(JmpSessionEvents.ActiveSpeaker, (data) => {
            this.emit(exports.MultistreamConnectionEventNames.ActiveSpeakerNotification, data.csis);
            this.recvTransceivers.forEach((transceivers) => {
                transceivers.forEach((t) => {
                    const { currentRxCsi } = t.receiveSlot;
                    if (currentRxCsi !== undefined) {
                        const isActiveSpeaker = data.csis.some((activeCsi) => (activeCsi & 0xfffffffe) === (currentRxCsi & 0xfffffffe));
                        t.handleActiveSpeakerUpdate(isActiveSpeaker);
                    }
                });
            });
        });
        this.jmpSessions.set(mediaType, jmpSession);
    }
    updateRequestedStreams(mediaType, requests) {
        const sendTransceiver = this.getSendTransceiverOrThrow(mediaType);
        const mediaFamily = getMediaFamily(mediaType);
        const requestedIdEncodingParamsMap = new Map();
        const rsRequests = requests.filter((r) => isValidReceiverSelectedInfo(r.policySpecificInfo));
        if (rsRequests.length !== requests.length) {
            logger.warn('Ignoring non-receiver-selected requests');
        }
        rsRequests.forEach(({ ids, policySpecificInfo, codecInfos, maxPayloadBitsPerSecond }) => {
            var _a, _b, _c;
            if (ids.length > 1) {
                logErrorAndThrow(exports.WcmeErrorType.INVALID_STREAM_REQUEST, `Stream request cannot have more than one ID.`);
            }
            if (ids.length === 0) {
                return;
            }
            if (sendTransceiver.csi !== policySpecificInfo.csi) {
                logger.warn('csi in the StreamRequest does not match');
                return;
            }
            const id = ids[0];
            const codecInfo = codecInfos[0];
            if (!isValidSsrcStreamId(id)) {
                logger.warn(`${mediaType}: The stream ID is not a valid SsrcStreamId: ${JSON.stringify(id)}`);
                return;
            }
            const streamIdsMatched = sendTransceiver.senderIds.some((validId) => areStreamIdsEqual(id, validId));
            if (streamIdsMatched) {
                const encodingIndex = sendTransceiver.getEncodingIndexForStreamId(id);
                if (encodingIndex !== -1) {
                    const encodingParams = { maxPayloadBitsPerSecond };
                    if (mediaFamily === exports.MediaFamily.Video) {
                        encodingParams.maxFs = (_a = codecInfo === null || codecInfo === void 0 ? void 0 : codecInfo.h264) === null || _a === void 0 ? void 0 : _a.maxFs;
                        encodingParams.maxWidth = (_b = codecInfo === null || codecInfo === void 0 ? void 0 : codecInfo.h264) === null || _b === void 0 ? void 0 : _b.maxWidth;
                        encodingParams.maxHeight = (_c = codecInfo === null || codecInfo === void 0 ? void 0 : codecInfo.h264) === null || _c === void 0 ? void 0 : _c.maxHeight;
                    }
                    requestedIdEncodingParamsMap.set(encodingIndex, encodingParams);
                }
                else {
                    logger.warn(`${mediaType}: Unable to get encoding index for stream ID: ${JSON.stringify(id)}`);
                }
            }
            else {
                logger.warn(`${mediaType}: Unable to find matching stream ID for requested ID: ${JSON.stringify(id)}`);
            }
        });
        return sendTransceiver.updateSendParameters(requestedIdEncodingParamsMap);
    }
    createDataChannel() {
        const dataChannel = this.pc.createDataChannel('datachannel', {
            ordered: false,
            maxRetransmits: 0,
        });
        dataChannel.onopen = (event) => {
            logger.info('DataChannel opened:', JSON.stringify(event));
            [...this.sendTransceivers.keys()].forEach((mediaType) => {
                this.sendSourceAdvertisement(mediaType);
            });
            logger.info(`Flushing pending JMP task queue`);
            this.pendingJmpTasks.forEach((t) => t());
            this.pendingJmpTasks = [];
        };
        dataChannel.onmessage = (e) => {
            let parsed;
            try {
                parsed = JSON.parse(e.data);
            }
            catch (err) {
                logger.error(`Error parsing datachannel JSON: ${err}`);
                return;
            }
            logger.debug('DataChannel got msg:', e.data);
            const homerMsg = HomerMsg.fromJson(parsed);
            if (!homerMsg) {
                logger.error(`Received invalid datachannel message: ${e}`);
                return;
            }
            const jmpMsg = homerMsg.payload;
            if (!isValidJmpMsg(jmpMsg)) {
                logger.error(`Received invalid JMP msg: ${JSON.stringify(jmpMsg)}`);
                return;
            }
            const mediaType = getMediaType(jmpMsg.mediaFamily, jmpMsg.mediaContent);
            const jmpSession = this.jmpSessions.get(mediaType);
            if (!jmpSession) {
                logger.error(`Unable to find JMP session for media type ${mediaType}.`);
                return;
            }
            jmpSession.receive(jmpMsg);
        };
        dataChannel.onclose = (event) => {
            logger.info('DataChannel closed:', JSON.stringify(event));
        };
        dataChannel.onerror = (event) => {
            logger.info('DataChannel error:', JSON.stringify(event));
        };
        this.dataChannel = dataChannel;
    }
    close() {
        this.sendTransceivers.forEach((t) => t.close());
        this.recvTransceivers.forEach((recvTransceivers) => {
            recvTransceivers.forEach((t) => t.close());
        });
        this.jmpSessions.forEach((jmpSession) => jmpSession.close());
        this.pc.close();
    }
    sendMediaRequestStatus(mediaType) {
        var _a;
        if (getMediaFamily(mediaType) !== exports.MediaFamily.Video) {
            return;
        }
        if (!this.getSendTransceiverOrThrow(mediaType).requested) {
            return;
        }
        const streamStates = this.getVideoStreamStates(mediaType);
        const task = () => {
            var _a;
            (_a = this.jmpSessions.get(mediaType)) === null || _a === void 0 ? void 0 : _a.sendMediaRequestStatus(streamStates);
        };
        if (((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.readyState) === 'open') {
            task();
        }
        else {
            this.pendingJmpTasks.push(task);
        }
    }
    sendSourceAdvertisement(mediaType) {
        var _a, _b;
        const transceiver = this.getSendTransceiverOrThrow(mediaType);
        const numLiveSources = ((_a = transceiver.publishedStream) === null || _a === void 0 ? void 0 : _a.muted) === false ? 1 : 0;
        let task;
        if (getMediaFamily(mediaType) === exports.MediaFamily.Video) {
            const sources = this.getVideoStreamStates(mediaType);
            if (sources === null) {
                return;
            }
            let contentHint;
            if (transceiver.publishedStream && mediaType === exports.MediaType.VideoSlides) {
                contentHint = transceiver.publishedStream.contentHint;
            }
            task = () => {
                var _a;
                (_a = this.jmpSessions
                    .get(mediaType)) === null || _a === void 0 ? void 0 : _a.sendSourceAdvertisement(1, numLiveSources, [], webRtcVideoContentHintToJmpVideoContentHint(contentHint));
            };
        }
        else {
            task = () => {
                var _a;
                return (_a = this.jmpSessions
                    .get(mediaType)) === null || _a === void 0 ? void 0 : _a.sendSourceAdvertisement(1, numLiveSources, mediaType === exports.MediaType.AudioMain ? transceiver.namedMediaGroups : []);
            };
        }
        if (((_b = this.dataChannel) === null || _b === void 0 ? void 0 : _b.readyState) === 'open') {
            task();
        }
        else {
            this.pendingJmpTasks.push(task);
        }
    }
    getVideoStreamStates(mediaType) {
        const sendTransceiver = this.getSendTransceiverOrThrow(mediaType);
        return sendTransceiver.senderIds.map((id) => ({
            id,
            state: sendTransceiver.currentSourceState,
            csi: sendTransceiver.csi,
        }));
    }
    createReceiveTransceiver(mediaType) {
        const rtcRtpTransceiver = this.pc.addTransceiver(toMediaStreamTrackKind(mediaType), {
            direction: 'recvonly',
        });
        const mid = this.midPredictor.getNextMid(mediaType);
        const munger = new IngressSdpMunger();
        const recvOnlyTransceiver = new ReceiveOnlyTransceiver({
            rtcRtpTransceiver,
            mid,
            mediaType,
            munger,
        });
        if (getMediaFamily(mediaType) === exports.MediaFamily.Video) {
            recvOnlyTransceiver.setCodecParameters({
                'sps-pps-idr-in-keyframe': '1',
            });
            recvOnlyTransceiver.setRtxCodecParameters({
                'rtx-time': mediaType === exports.MediaType.VideoMain ? defaultVideoMainRtxTime : defaultVideoSlidesRtxTime,
            });
        }
        recvOnlyTransceiver.twccDisabled =
            getMediaFamily(mediaType) === exports.MediaFamily.Audio ? this.options.disableAudioTwcc : false;
        this.recvTransceivers.set(mediaType, [
            ...(this.recvTransceivers.get(mediaType) || []),
            recvOnlyTransceiver,
        ]);
        return recvOnlyTransceiver;
    }
    createReceiveSlot(mediaType) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return (yield this.createReceiveSlots(mediaType, 1))[0];
        });
    }
    createReceiveSlots(mediaType, count = 1) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return new Promise((createReceiveSlotsResolve) => {
                this.offerAnswerQueue.push(() => __awaiter$1(this, void 0, void 0, function* () {
                    const createdReceiveOnlyTransceivers = [];
                    for (let i = 0; i < count; i++) {
                        const recvOnlyTransceiver = this.createReceiveTransceiver(mediaType);
                        createdReceiveOnlyTransceivers.push(recvOnlyTransceiver);
                    }
                    if (this.pc.getRemoteDescription()) {
                        yield this.doLocalOfferAnswer();
                    }
                    const receiveSlots = createdReceiveOnlyTransceivers.map((transceiver) => transceiver.receiveSlot);
                    createReceiveSlotsResolve(receiveSlots);
                }));
            });
        });
    }
    getIngressPayloadType(mediaType, mimeType) {
        var _a, _b, _c;
        const requestedMediaCodecType = mimeType.split('/')[1];
        const requestedMid = (_a = this.sendTransceivers.get(mediaType)) === null || _a === void 0 ? void 0 : _a.mid;
        const parsedOffer = parse((_b = this.pc.getLocalDescription()) === null || _b === void 0 ? void 0 : _b.sdp);
        const parsedAnswer = parse((_c = this.pc.getRemoteDescription()) === null || _c === void 0 ? void 0 : _c.sdp);
        const senderCodecs = parsedAnswer.avMedia
            .filter((media) => requestedMid === media.mid)
            .map((media) => [...media.codecs.values()])
            .flat()
            .filter((ci) => ci.name === requestedMediaCodecType);
        const receiverCodecs = parsedOffer.avMedia
            .filter((media) => requestedMid === media.mid)
            .map((media) => [...media.codecs.values()])
            .flat()
            .filter((ci) => ci.name === requestedMediaCodecType);
        if (!senderCodecs ||
            !receiverCodecs ||
            senderCodecs.length === 0 ||
            receiverCodecs.length === 0) {
            logErrorAndThrow(exports.WcmeErrorType.GET_PAYLOAD_TYPE_FAILED, `Sender codecs or receiver codecs is undefined or empty.`);
        }
        const senderCodec = senderCodecs[0];
        const targetCodec = receiverCodecs.find((receiverCodec) => {
            return areCodecsCompatible(senderCodec, receiverCodec);
        });
        if (!targetCodec || !targetCodec.pt) {
            logErrorAndThrow(exports.WcmeErrorType.GET_PAYLOAD_TYPE_FAILED, `Cannot find matching receiver codec for the given mediaType/mimeType.`);
        }
        return targetCodec.pt;
    }
    waitForIceGatheringComplete() {
        return __awaiter$1(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                if (this.pc.iceGatheringState === 'complete') {
                    resolve();
                }
                else {
                    this.pc.on(PeerConnection.Events.IceGatheringStateChange, () => {
                        if (this.pc.iceGatheringState === 'complete') {
                            resolve();
                        }
                    });
                }
            });
        });
    }
    createOffer() {
        return __awaiter$1(this, void 0, void 0, function* () {
            if (!this.pc.getLocalDescription()) {
                this.midPredictor.allocateMidForDatachannel();
            }
            if (this.setAnswerResolve) {
                logger.info('Canceling previous offer since setAnswer was never called for it');
                this.setAnswerResolve();
                this.setAnswerResolve = undefined;
            }
            const createOfferId = ++this.currentCreateOfferId;
            return new Promise((createOfferResolve, createOfferReject) => {
                this.offerAnswerQueue.push(() => __awaiter$1(this, void 0, void 0, function* () {
                    var _a;
                    try {
                        const offer = yield this.pc.createOffer();
                        if (!offer.sdp) {
                            logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED, 'SDP not found in offer.');
                        }
                        offer.sdp = this.preProcessLocalOffer(offer.sdp);
                        yield this.pc
                            .setLocalDescription(offer)
                            .then(() => __awaiter$1(this, void 0, void 0, function* () {
                            logger.info('this.pc.setLocalDescription() resolved');
                        }))
                            .catch((error) => {
                            var _a;
                            logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED, `Error: ${error}. SDP: ${maskIp((_a = offer.sdp) !== null && _a !== void 0 ? _a : '')}`);
                        });
                        if (this.options.doFullIce) {
                            yield this.waitForIceGatheringComplete();
                        }
                        const sdpToSend = this.prepareLocalOfferForRemoteServer((_a = this.pc.getLocalDescription()) === null || _a === void 0 ? void 0 : _a.sdp);
                        createOfferResolve({ type: 'offer', sdp: sdpToSend });
                        if (this.currentCreateOfferId > createOfferId) {
                            logger.log('Canceling previous offer since createOffer was called while it was being created');
                        }
                        else {
                            yield new Promise((setAnswerResolve) => {
                                this.setAnswerResolve = setAnswerResolve;
                            });
                        }
                    }
                    catch (error) {
                        createOfferReject(error);
                    }
                }));
            });
        });
    }
    setAnswer(answer) {
        return __awaiter$1(this, void 0, void 0, function* () {
            const sdp = this.preProcessRemoteAnswer(answer);
            if (!this.setAnswerResolve) {
                logErrorAndThrow(exports.WcmeErrorType.SET_ANSWER_FAILED, `Call to setAnswer without having previously called createOffer.`);
            }
            logger.info('calling this.pc.setRemoteDescription()');
            return this.pc
                .setRemoteDescription({ type: 'answer', sdp })
                .then(() => __awaiter$1(this, void 0, void 0, function* () {
                logger.info('this.pc.setRemoteDescription() resolved');
                if (this.setAnswerResolve) {
                    this.setAnswerResolve();
                    this.setAnswerResolve = undefined;
                }
                else {
                    logger.debug(`setAnswerResolve function was cleared between setAnswer and result of setRemoteDescription`);
                }
            }))
                .catch((error) => {
                logErrorAndThrow(exports.WcmeErrorType.SET_ANSWER_FAILED, `Error: ${error}. SDP: ${maskIp(answer)}`);
            });
        });
    }
    doLocalOfferAnswer() {
        var _a;
        return __awaiter$1(this, void 0, void 0, function* () {
            const offer = yield this.pc.createOffer();
            if (!offer.sdp) {
                logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED, 'SDP not found in offer.');
            }
            offer.sdp = this.preProcessLocalOffer(offer.sdp);
            yield this.pc
                .setLocalDescription(offer)
                .then(() => __awaiter$1(this, void 0, void 0, function* () {
                logger.info('this.pc.setLocalDescription() resolved');
            }))
                .catch((error) => {
                var _a;
                logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED, `Error: ${error}. SDP: ${maskIp((_a = offer.sdp) !== null && _a !== void 0 ? _a : '')}`);
            });
            const answer = this.preProcessRemoteAnswer((_a = this.pc.getRemoteDescription()) === null || _a === void 0 ? void 0 : _a.sdp);
            return this.pc
                .setRemoteDescription({ type: 'answer', sdp: answer })
                .then(() => __awaiter$1(this, void 0, void 0, function* () {
                logger.info('this.pc.setRemoteDescription() resolved');
            }))
                .catch((error) => {
                logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED, `Error: ${error}. SDP: ${maskIp(answer)}`);
            });
        });
    }
    queueLocalOfferAnswer() {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.offerAnswerQueue.push(() => __awaiter$1(this, void 0, void 0, function* () {
                yield this.doLocalOfferAnswer();
            }));
        });
    }
    preProcessLocalOffer(offer) {
        const parsedOffer = parse(offer);
        parsedOffer.avMedia
            .filter((av) => av.direction === 'recvonly')
            .forEach((av) => {
            const recvTransceiver = this.getRecvTransceiverByMidOrThrow(av.mid);
            recvTransceiver.mungeLocalDescription(av);
        });
        parsedOffer.avMedia
            .filter((av) => av.direction === 'sendrecv' || av.direction === 'inactive')
            .forEach((av) => {
            const sendTransceiver = this.getSendTransceiverByMidOrThrow(av.mid);
            sendTransceiver.mungeLocalDescription(av);
        });
        if (BrowserInfo.isFirefox()) {
            setupBundle(parsedOffer, this.options.bundlePolicy, this.midPredictor.getMidMap());
        }
        return parsedOffer.toString();
    }
    prepareLocalOfferForRemoteServer(offer) {
        const parsedOffer = parse(offer);
        const shouldInjectDummyCandidates = () => {
            if (!this.options.doFullIce) {
                return true;
            }
            return !hasIceCandidates(parsedOffer);
        };
        const mungeOptions = {
            injectDummyCandidates: shouldInjectDummyCandidates(),
        };
        parsedOffer.avMedia
            .filter((av) => av.direction === 'sendrecv' || av.direction === 'inactive')
            .forEach((av) => {
            const sendTransceiver = this.getSendTransceiverByMidOrThrow(av.mid);
            sendTransceiver.mungeLocalDescriptionForRemoteServer(av, mungeOptions);
        });
        if (mungeOptions.injectDummyCandidates) {
            parsedOffer.media
                .filter((media) => media instanceof ApplicationMediaDescription)
                .forEach((media) => {
                injectDummyCandidates(media);
            });
        }
        if (BrowserInfo.isFirefox() && this.options.doFullIce) {
            const { candidates } = parsedOffer.media[0].iceInfo;
            parsedOffer.media.forEach((media) => {
                media.iceInfo.candidates = candidates;
            });
        }
        if (BrowserInfo.isFirefox()) {
            setupBundle(parsedOffer, this.options.bundlePolicy, this.midPredictor.getMidMap());
            if (this.options.bundlePolicy === 'max-bundle') {
                parsedOffer.media.forEach((media, index) => {
                    if (index > 0) {
                        media.port = parsedOffer.media[0].port;
                    }
                });
            }
        }
        filterRecvOnlyMediaDescriptions(parsedOffer);
        return parsedOffer.toString();
    }
    preProcessRemoteAnswer(answer) {
        var _a;
        const parsedAnswer = parse(answer);
        const parsedOffer = parse((_a = this.pc.getLocalDescription()) === null || _a === void 0 ? void 0 : _a.sdp);
        matchMediaDescriptionsInAnswer(parsedOffer, parsedAnswer);
        parsedAnswer.avMedia
            .filter((av) => av.direction === 'sendonly')
            .forEach((av) => {
            const recvTransceiver = this.getRecvTransceiverByMidOrThrow(av.mid);
            recvTransceiver.mungeRemoteDescription(av);
        });
        parsedAnswer.avMedia
            .filter((av) => av.direction === 'sendrecv' || av.direction === 'recvonly')
            .forEach((av) => {
            const sendTransceiver = this.getSendTransceiverByMidOrThrow(av.mid);
            sendTransceiver.mungeRemoteDescription(av);
        });
        parsedAnswer.media
            .filter((media) => media instanceof ApplicationMediaDescription)
            .forEach((media) => {
            if (retainCandidatesByTransportType(media, ['udp', 'tcp'])) {
                logger.log(`Some unsupported remote candidates have been removed from mid ${media.mid}`);
            }
        });
        if (BrowserInfo.isFirefox()) {
            setupBundle(parsedAnswer, this.options.bundlePolicy, this.midPredictor.getMidMap());
        }
        return parsedAnswer.toString();
    }
    getSendTransceiverOrThrow(mediaType) {
        const sendTransceiver = this.sendTransceivers.get(mediaType);
        if (!sendTransceiver) {
            logErrorAndThrow(exports.WcmeErrorType.GET_TRANSCEIVER_FAILED, `Unable to find send transceiver for media type ${mediaType}.`);
        }
        return sendTransceiver;
    }
    getSendTransceiverByMidOrThrow(mid) {
        const transceiver = [...this.sendTransceivers.values()].find((t) => t.mid === mid);
        if (!transceiver) {
            logErrorAndThrow(exports.WcmeErrorType.GET_TRANSCEIVER_FAILED, `Unable to find send transceiver with MID ${mid}.`);
        }
        return transceiver;
    }
    getRecvTransceiverByMidOrThrow(mid) {
        const transceiver = [...this.recvTransceivers.values()].flat().find((t) => t.mid === mid);
        if (!transceiver) {
            logErrorAndThrow(exports.WcmeErrorType.GET_TRANSCEIVER_FAILED, `Unable to find recv transceiver with MID ${mid}.`);
        }
        return transceiver;
    }
    requestMedia(mediaType, streamRequests) {
        var _a;
        const task = () => {
            var _a;
            const jmpSession = this.jmpSessions.get(mediaType);
            if (!jmpSession) {
                logger.error(`Unable to find jmp session for ${mediaType}`);
                return;
            }
            const requestedReceiveSlotIds = [];
            streamRequests.forEach((request) => {
                if (request.receiveSlots.length === 0) {
                    logger.error('Stream request ids cannot be empty.');
                    return;
                }
                request.receiveSlots.forEach((slot) => {
                    if (!slot.id) {
                        logger.error('Running stream request task, but ReceiveSlot ID is missing.');
                    }
                    if (!requestedReceiveSlotIds.some((id) => areStreamIdsEqual(id, slot.id))) {
                        requestedReceiveSlotIds.push(slot.id);
                    }
                    else {
                        logger.error(`Stream id duplicate found ${JSON.stringify(slot.id)}.`);
                    }
                });
            });
            jmpSession.sendRequests(streamRequests.map((sr) => sr._toJmpStreamRequest()));
            (_a = this.recvTransceivers.get(mediaType)) === null || _a === void 0 ? void 0 : _a.forEach((transceiver) => {
                if (requestedReceiveSlotIds.some((id) => areStreamIdsEqual(id, transceiver.receiveSlot.id))) {
                    const relevantRequest = streamRequests.find((request) => request.receiveSlots.some((slot) => areStreamIdsEqual(slot.id, transceiver.receiveSlot.id)));
                    transceiver.handleRequested(relevantRequest);
                }
                else {
                    transceiver.handleUnrequested();
                }
            });
        };
        if (((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.readyState) === 'open') {
            task();
        }
        else {
            this.pendingJmpTasks.push(task);
        }
    }
    renewPeerConnection(userOptions) {
        if (userOptions) {
            this.options = Object.assign(Object.assign({}, this.options), userOptions);
        }
        logger.info(`Renewing multistream connection with options ${JSON.stringify(this.options)}`);
        this.midPredictor.reset();
        this.initializePeerConnection();
        const mainSceneId = generateSceneId();
        const slidesSceneId = generateSceneId();
        this.sendTransceivers.forEach((transceiver, mediaType) => {
            var _a;
            const mediaContent = getMediaContent(mediaType);
            const sceneId = mediaContent === exports.MediaContent.Main ? mainSceneId : slidesSceneId;
            const mid = this.midPredictor.getNextMid(mediaType);
            transceiver.replaceTransceiver(this.pc.addTransceiver(toMediaStreamTrackKind(mediaType), {
                direction: 'sendrecv',
                sendEncodings: getMediaFamily(mediaType) === exports.MediaFamily.Video
                    ? this.getVideoEncodingOptions(mediaContent)
                    : undefined,
            }));
            transceiver.mid = mid;
            transceiver.csi = generateCsi(getMediaFamily(mediaType), sceneId);
            transceiver.resetSdpMunger();
            (_a = this.jmpSessions.get(mediaType)) === null || _a === void 0 ? void 0 : _a.close();
            this.createJmpSession(mediaType);
        });
        this.recvTransceivers.forEach((transceivers, mediaType) => {
            transceivers.forEach((t) => {
                const mid = this.midPredictor.getNextMid(mediaType);
                t.replaceTransceiver(this.pc.addTransceiver(toMediaStreamTrackKind(mediaType), {
                    direction: 'recvonly',
                }));
                t.mid = mid;
            });
        });
    }
    getReceiveSlotById(id) {
        return [...this.recvTransceivers.values()]
            .flat()
            .map((transceiver) => transceiver.receiveSlot)
            .find((receiveSlot) => {
            const receiveSlotId = receiveSlot.id || {};
            return (Object.keys(receiveSlotId).length === Object.keys(id).length &&
                Object.keys(receiveSlotId).every((key) => Object.prototype.hasOwnProperty.call(id, key) && receiveSlotId[key] === id[key]));
        });
    }
    getStats() {
        return this.statsManager.getStats();
    }
    getTransceiverStats() {
        return __awaiter$1(this, void 0, void 0, function* () {
            return organizeTransceiverStats(this.sendTransceivers, this.recvTransceivers);
        });
    }
    preProcessStats(stats) {
        return __awaiter$1(this, void 0, void 0, function* () {
            yield Promise.all([...this.sendTransceivers.values()].map((transceiver) => __awaiter$1(this, void 0, void 0, function* () {
                (yield transceiver.getStats()).forEach((senderStats) => {
                    if (senderStats.type === 'outbound-rtp' || senderStats.type === 'media-source') {
                        stats.set(senderStats.id, senderStats);
                    }
                });
            })));
            yield Promise.all([...this.recvTransceivers.values()].map((transceivers) => __awaiter$1(this, void 0, void 0, function* () {
                yield Promise.all(transceivers.map((transceiver) => __awaiter$1(this, void 0, void 0, function* () {
                    (yield transceiver.getStats()).forEach((receiverStats) => {
                        if (receiverStats.type === 'inbound-rtp') {
                            stats.set(receiverStats.id, receiverStats);
                        }
                    });
                })));
            })));
        });
    }
    attachMetricsObserver() {
        this.forceStatsReport = rtcStats_1(this.pc.getUnderlyingRTCPeerConnection(), (data) => this.metricsCallback(data), 5000, (stats) => this.preProcessStats(stats)).forceStatsReport;
    }
    forceRtcMetricsCallback() {
        var _a;
        return (_a = this.forceStatsReport) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    setOveruseUpdateCallback(callback) {
        this.overuseUpdateCallback = callback;
    }
    getCsiByMediaType(mediaType) {
        var _a;
        return (_a = this.sendTransceivers.get(mediaType)) === null || _a === void 0 ? void 0 : _a.csi;
    }
    getAllCsis() {
        return {
            audioMain: this.getCsiByMediaType(exports.MediaType.AudioMain),
            audioSlides: this.getCsiByMediaType(exports.MediaType.AudioSlides),
            videoMain: this.getCsiByMediaType(exports.MediaType.VideoMain),
            videoSlides: this.getCsiByMediaType(exports.MediaType.VideoSlides),
        };
    }
}

class StreamRequest {
    constructor(policy, policySpecificInfo, receiveSlots, maxPayloadBitsPerSecond, codecInfos = []) {
        this.policy = policy;
        this.policySpecificInfo = policySpecificInfo;
        this.receiveSlots = receiveSlots;
        this.maxPayloadBitsPerSecond = maxPayloadBitsPerSecond;
        this.codecInfos = codecInfos;
    }
    _toJmpStreamRequest() {
        return new StreamRequest$1(this.policy, this.policySpecificInfo, this.receiveSlots.map((rs) => rs.id), this.maxPayloadBitsPerSecond, this.codecInfos);
    }
}

const { DeviceKind } = media;

exports.ActiveSpeakerInfo = ActiveSpeakerInfo;
exports.CodecInfo = CodecInfo$1;
exports.DeviceKind = DeviceKind;
exports.H264Codec = H264Codec;
exports.JMPLogger = Logger$1;
exports.LocalCameraStream = LocalCameraStream;
exports.LocalDisplayStream = LocalDisplayStream;
exports.LocalMicrophoneStream = LocalMicrophoneStream;
exports.LocalStream = LocalStream;
exports.LocalSystemAudioStream = LocalSystemAudioStream;
exports.Logger = Logger;
exports.MultistreamConnection = MultistreamConnection;
exports.PeerConnection = PeerConnection;
exports.ReceiveSlot = ReceiveSlot;
exports.ReceiverSelectedInfo = ReceiverSelectedInfo;
exports.RemoteStream = RemoteStream;
exports.SendSlot = SendSlot;
exports.StreamRequest = StreamRequest;
exports.WcmeError = WcmeError;
exports.WebRtcCoreLogger = Logger$2;
exports.WebrtcCoreError = WebrtcCoreError;
exports.areReceiveSlotIdsEqual = areReceiveSlotIdsEqual;
exports.createCameraAndMicrophoneStreams = createCameraAndMicrophoneStreams;
exports.createCameraStream = createCameraStream;
exports.createDisplayMedia = createDisplayMedia;
exports.createDisplayStream = createDisplayStream;
exports.createDisplayStreamWithAudio = createDisplayStreamWithAudio;
exports.createMicrophoneStream = createMicrophoneStream;
exports.getAudioInputDevices = getAudioInputDevices;
exports.getAudioOutputDevices = getAudioOutputDevices;
exports.getDevices = getDevices;
exports.getLogLevel = getLogLevel;
exports.getMediaContent = getMediaContent;
exports.getMediaFamily = getMediaFamily;
exports.getMediaType = getMediaType;
exports.getRecommendedMaxBitrateForFrameSize = getRecommendedMaxBitrateForFrameSize;
exports.getVideoInputDevices = getVideoInputDevices;
exports.logErrorAndThrow = logErrorAndThrow;
exports.setLogHandler = setLogHandler;
exports.setLogLevel = setLogLevel;
exports.setOnDeviceChangeHandler = setOnDeviceChangeHandler;
//# sourceMappingURL=index.js.map
