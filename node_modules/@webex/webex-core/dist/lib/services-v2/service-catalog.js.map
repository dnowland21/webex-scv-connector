{"version":3,"names":["_ampersandState","_interopRequireDefault","require","_lodash","_serviceDetail","_createForOfIteratorHelper","o","allowArrayLike","it","_Symbol","_Symbol$iterator","_Array$isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","_Array$from","test","arr","len","arr2","Array","ServiceCatalog","AmpState","extend","namespace","props","serviceGroups","discovery","override","preauth","postauth","signin","status","ready","collecting","isReady","allowedDomains","_getAllServiceDetails","serviceGroup","serviceDetails","concat","_toConsumableArray2","default","_getServiceDetail","clusterId","find","serviceDetail","id","_loadServiceDetails","_this","existingService","forEach","service","push","_unloadServiceDetails","_this2","splice","indexOf","clean","findClusterId","url","_allServiceDetails$fi","incomingUrlObj","URL","allServiceDetails","serviceUrls","_ref","host","_unused","undefined","findServiceFromClusterId","_ref2","arguments","serviceName","get","findServiceDetailFromUrl","_ref3","_iterator","_step","serviceUrl","startsWith","baseUrl","findAllowedDomain","urlObj","allowedDomain","includes","_unused2","getAllowedDomains","markFailedServiceUrl","serviceDetailWithFailedHost","failHost","setAllowedDomains","addAllowedDomains","newAllowedDomains","union","updateServiceGroups","_this3","currentServiceDetails","unusedServicesDetails","filter","every","_ref4","serviceObj","ServiceDetail","trigger","waitForCatalog","timeout","_this4","_promise","resolve","reject","validatedTimeout","timeoutTimer","setTimeout","Error","once","clearTimeout","_default","exports"],"sources":["service-catalog.ts"],"sourcesContent":["import AmpState from 'ampersand-state';\n\nimport {union} from 'lodash';\nimport ServiceDetail from './service-detail';\nimport {IServiceDetail} from './types';\n\n/**\n * @class\n */\nconst ServiceCatalog = AmpState.extend({\n  namespace: 'ServiceCatalog',\n\n  props: {\n    serviceGroups: [\n      'object',\n      true,\n      () => ({\n        discovery: [],\n        override: [],\n        preauth: [],\n        postauth: [],\n        signin: [],\n      }),\n    ],\n    status: [\n      'object',\n      true,\n      () => ({\n        discovery: {\n          ready: false,\n          collecting: false,\n        },\n        override: {\n          ready: false,\n          collecting: false,\n        },\n        preauth: {\n          ready: false,\n          collecting: false,\n        },\n        postauth: {\n          ready: false,\n          collecting: false,\n        },\n        signin: {\n          ready: false,\n          collecting: false,\n        },\n      }),\n    ],\n    isReady: ['boolean', false, false],\n    allowedDomains: ['array', false, () => []],\n  },\n\n  /**\n   * @private\n   * Get all service details for a given service group or return all details if no group is specified.\n   * @param {string} serviceGroup - The name of the service group to retrieve details for.\n   * @returns {Array<IServiceDetail>} - An array of service details.\n   */\n  _getAllServiceDetails(serviceGroup: string): Array<IServiceDetail> {\n    const serviceDetails =\n      typeof serviceGroup === 'string'\n        ? this.serviceGroups[serviceGroup] || []\n        : [\n            ...this.serviceGroups.override,\n            ...this.serviceGroups.postauth,\n            ...this.serviceGroups.signin,\n            ...this.serviceGroups.preauth,\n            ...this.serviceGroups.discovery,\n          ];\n\n    return serviceDetails;\n  },\n\n  /**\n   * @private\n   * Search the service details array to locate a `ServiceDetails`\n   * class object based on its id.\n   * @param {string} clusterId\n   * @param {string} [serviceGroup]\n   * @returns {IServiceDetail}\n   */\n  _getServiceDetail(clusterId: string, serviceGroup: string): IServiceDetail | undefined {\n    const serviceDetails = this._getAllServiceDetails(serviceGroup);\n\n    return serviceDetails.find((serviceDetail: IServiceDetail) => serviceDetail.id === clusterId);\n  },\n\n  /**\n   * @private\n   * Safely load one or more `ServiceDetail`s into this `ServiceCatalog` instance.\n   * @param {string} serviceGroup\n   * @param  {Array<ServiceDetail>} serviceDetails\n   * @returns {void}\n   */\n  _loadServiceDetails(serviceGroup: string, serviceDetails: Array<IServiceDetail>): void {\n    // declare namespaces outside of loop\n    let existingService: IServiceDetail | undefined;\n\n    serviceDetails.forEach((service) => {\n      existingService = this._getServiceDetail(service.id, serviceGroup);\n\n      if (!existingService) {\n        this.serviceGroups[serviceGroup].push(service);\n      }\n    });\n  },\n\n  /**\n   * @private\n   * Safely unload one or more `ServiceDetail`s into this `Services` instance\n   * @param {string} serviceGroup\n   * @param  {Array<ServiceDetail>} serviceDetails\n   * @returns {void}\n   */\n  _unloadServiceDetails(serviceGroup: string, serviceDetails: Array<IServiceDetail>): void {\n    // declare namespaces outside of loop\n    let existingService: IServiceDetail | undefined;\n\n    serviceDetails.forEach((service) => {\n      existingService = this._getServiceDetail(service.id, serviceGroup);\n\n      if (existingService) {\n        this.serviceGroups[serviceGroup].splice(\n          this.serviceGroups[serviceGroup].indexOf(existingService),\n          1\n        );\n      }\n    });\n  },\n\n  /**\n   * Clear all collected catalog data and reset catalog status.\n   *\n   * @returns {void}\n   */\n  clean(): void {\n    this.serviceGroups.preauth.length = 0;\n    this.serviceGroups.signin.length = 0;\n    this.serviceGroups.postauth.length = 0;\n    this.status.preauth = {ready: false};\n    this.status.signin = {ready: false};\n    this.status.postauth = {ready: false};\n  },\n\n  /**\n   * Search over all service groups to find a cluster id based\n   * on a given url.\n   * @param {string} url - Must be parsable by `Url`\n   * @returns {string | undefined} - ClusterId of a given url\n   */\n  findClusterId(url: string): string | undefined {\n    try {\n      const incomingUrlObj = new URL(url);\n      const allServiceDetails = this._getAllServiceDetails();\n\n      return allServiceDetails.find((serviceDetail: IServiceDetail) =>\n        serviceDetail.serviceUrls.find(({host}) => host === incomingUrlObj.host)\n      )?.id;\n    } catch {\n      // If the URL is invalid or can't be found, return undefined\n      return undefined;\n    }\n  },\n\n  /**\n   * Search over all service groups and return a service value from a provided\n   * clusterId.\n   * @param {object} params\n   * @param {string} params.clusterId - clusterId of found service\n   * @param {string} [params.serviceGroup] - specify service group\n   * @returns {object} service\n   * @returns {string} service.name\n   * @returns {string} service.url\n   */\n  findServiceFromClusterId(\n    {clusterId, serviceGroup} = {} as {clusterId: string; serviceGroup: string}\n  ): {name: string; url: string} | undefined {\n    const serviceDetails = this._getServiceDetail(clusterId, serviceGroup);\n\n    if (serviceDetails) {\n      return {\n        name: serviceDetails.serviceName,\n        url: serviceDetails.get(),\n      };\n    }\n\n    return undefined;\n  },\n\n  /**\n   * Find a service based on the provided url.\n   * @param {string} url - Must be parsable by `Url`\n   * @returns {IServiceDetail} - ServiceDetail assocated with provided url\n   */\n  findServiceDetailFromUrl(url: string): IServiceDetail | undefined {\n    const serviceDetails = this._getAllServiceDetails();\n\n    return serviceDetails.find(({serviceUrls}) => {\n      for (const serviceUrl of serviceUrls) {\n        if (url.startsWith(serviceUrl.baseUrl)) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n  },\n\n  /**\n   * Finds an allowed domain that matches a specific url.\n   *\n   * @param {string} url - The url to match the allowed domains against.\n   * @returns {string} - The matching allowed domain.\n   */\n  findAllowedDomain(url: string): string {\n    try {\n      const urlObj = new URL(url);\n\n      return this.allowedDomains.find((allowedDomain) => urlObj.host.includes(allowedDomain));\n    } catch {\n      // If the URL is invalid or can't be found, return undefined\n      return undefined;\n    }\n  },\n\n  /**\n   * Get a service url from the current services list by name.\n   * @param {string} clusterId\n   * @param {string} serviceGroup\n   * @returns {string}\n   */\n  get(clusterId: string, serviceGroup: string): string | undefined {\n    const serviceDetail = this._getServiceDetail(clusterId, serviceGroup);\n\n    return serviceDetail ? serviceDetail.get() : undefined;\n  },\n\n  /**\n   * Get the current allowed domains list.\n   *\n   * @returns {Array<string>} - the current allowed domains list.\n   */\n  getAllowedDomains(): Array<string> {\n    return [...this.allowedDomains];\n  },\n\n  /**\n   * Mark a priority host service url as failed.\n   * This will mark the host associated with the\n   * `ServiceDetail` to be removed from the its\n   * respective host array, and then return the next\n   * viable host from the `ServiceDetail` host array,\n   * or the `ServiceDetail` default url if no other priority\n   * hosts are available, or if `noPriorityHosts` is set to\n   * `true`.\n   * @param {string} url\n   * @returns {string}\n   */\n  markFailedServiceUrl(url: string): string | undefined {\n    const serviceDetails = this._getAllServiceDetails();\n\n    const serviceDetailWithFailedHost = serviceDetails.find((serviceDetail: IServiceDetail) =>\n      serviceDetail.failHost(url)\n    );\n\n    // if we couldn't find the url we wanted to fail, return undefined\n    if (!serviceDetailWithFailedHost) {\n      return undefined;\n    }\n\n    return serviceDetailWithFailedHost.get();\n  },\n\n  /**\n   * Set the allowed domains for the catalog.\n   *\n   * @param {Array<string>} allowedDomains - allowed domains to be assigned.\n   * @returns {void}\n   */\n  setAllowedDomains(allowedDomains: Array<string>): void {\n    this.allowedDomains = [...allowedDomains];\n  },\n\n  /**\n   *\n   * @param {Array<string>} newAllowedDomains - new allowed domains to add to existing set of allowed domains\n   * @returns {void}\n   */\n  addAllowedDomains(newAllowedDomains: Array<string>): void {\n    this.allowedDomains = union(this.allowedDomains, newAllowedDomains);\n  },\n\n  /**\n   * Update the current list of `ServiceDetail`s against a provided\n   * service hostmap.\n   * @emits ServiceCatalog#preauthorized\n   * @emits ServiceCatalog#postauthorized\n   * @param {string} serviceGroup\n   * @param {Array<IServiceDetail>} serviceDetails\n   * @returns {void}\n   */\n  updateServiceGroups(serviceGroup: string, serviceDetails: Array<IServiceDetail>) {\n    const currentServiceDetails = this.serviceGroups[serviceGroup];\n\n    const unusedServicesDetails = currentServiceDetails.filter((serviceDetail) =>\n      serviceDetails.every(({id}) => id !== serviceDetail.id)\n    );\n\n    this._unloadServiceDetails(serviceGroup, unusedServicesDetails);\n\n    serviceDetails.forEach((serviceObj) => {\n      const serviceDetail = this._getServiceDetail(serviceObj.id, serviceGroup);\n\n      if (serviceDetail) {\n        serviceDetail.serviceUrls = serviceObj.serviceUrls || [];\n      } else {\n        this._loadServiceDetails(serviceGroup, [new ServiceDetail(serviceObj)]);\n      }\n    });\n\n    this.status[serviceGroup].ready = true;\n    this.trigger(serviceGroup);\n  },\n\n  /**\n   * Wait until the service catalog is available,\n   * or reject after a timeout of 60 seconds.\n   * @param {string} serviceGroup\n   * @param {number} [timeout] - in seconds\n   * @returns {Promise<void>}\n   */\n  waitForCatalog(serviceGroup: string, timeout: number): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this.status[serviceGroup].ready) {\n        resolve();\n      }\n\n      const validatedTimeout = typeof timeout === 'number' && timeout >= 0 ? timeout : 60;\n\n      const timeoutTimer = setTimeout(\n        () =>\n          reject(\n            new Error(\n              `services: timeout occured while waiting for '${serviceGroup}' catalog to populate`\n            )\n          ),\n        validatedTimeout * 1000\n      );\n\n      this.once(serviceGroup, () => {\n        clearTimeout(timeoutTimer);\n        resolve();\n      });\n    });\n  },\n});\n\nexport default ServiceCatalog;\n"],"mappings":"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"}