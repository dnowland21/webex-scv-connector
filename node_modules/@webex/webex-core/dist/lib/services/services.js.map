{"version":3,"names":["_sha","_interopRequireDefault","require","_lodash","_webexPlugin","_metrics","_serviceCatalog","_serviceRegistry","_serviceState","_serviceFedRamp","_constants","ownKeys","e","r","t","_Object$keys2","_Object$getOwnPropertySymbols","o","filter","_Object$getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","Object","forEach","_defineProperty2","default","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","trailingSlashes","DEFAULT_CLUSTER","exports","DEFAULT_CLUSTER_SERVICE","CLUSTER_SERVICE","process","env","WEBEX_CONVERSATION_CLUSTER_SERVICE","DEFAULT_CLUSTER_IDENTIFIER","WEBEX_CONVERSATION_DEFAULT_CLUSTER","concat","Services","WebexPlugin","extend","namespace","registries","_weakMap","states","props","validateDomains","initFailed","_catalogs","_serviceUrls","_hostCatalog","getRegistry","get","webex","getState","_getCatalog","name","priorityHost","serviceGroup","catalog","hasService","serviceName","hasAllowedDomains","getAllowedDomains","list","markFailedUrl","url","noPriorityHosts","_updateServiceUrls","serviceUrls","_updateHostCatalog","hostCatalog","updateServices","_this","_ref","undefined","from","query","token","forceRefresh","formattedQuery","status","collecting","waitForCatalog","queryKey","_keys","includes","_promise","reject","Error","email","emailhash","sha256","toLowerCase","toString","_fetchNewServiceHostmap","then","serviceHostMap","updateServiceUrls","updateCredentialsConfig","catch","error","validateUser","_ref2","_this2","_ref2$reqId","reqId","_ref2$forceRefresh","_ref2$activationOptio","activationOptions","preloginUserId","logger","info","canAuthorize","credentials","getUserToken","sendUserActivation","userObj","activated","exists","details","user","_this$webex$credentia","config","client_id","client_secret","collectPreauthCatalog","idbrokerService","getClientToken","uri","scope","tokenObj","collectSigninCatalog","rto","all","_ref3","_ref4","_slicedToArray2","response","statusCode","responseText","body","message","getMeetingPreferences","_this3","request","method","service","resource","res","err","fetchClientRegionInfo","_this4","services","discovery","sqdiscovery","addAuthHeader","headers","timeout","_ref5","_this5","countryCode","timezone","clientRegionInfo","accept","authorization","timeZone","shouldRefreshAccessToken","_ref6","updateCatalog","hostMap","_formatReceivedHostmap","mode","_ref7","_this$list","idbroker","identity","_this$webex$config$cr","authorizationString","authorizeUrl","replace","setConfig","supertoken","access_token","postauth","ready","preauth","initServiceCatalogs","waitForService","_ref8","_this6","_ref8$timeout","fetchFromServiceUrl","servicesNotNeedValidation","find","resolve","priorityUrl","priorityUrlObj","getServiceFromUrl","isReady","internal","metrics","submitClientMetrics","METRICS","JS_SDK_SERVICE_NOT_FOUND","fields","service_name","groupsToCheck","checkCatalog","catalogGroup","scopedPriorityUrl","scopedPrioriryUrlObj","map","group","replaceHostFromHostmap","URL","host","newHost","serviceHostmap","extractId","entry","id","split","formattedHostmap","serviceLinks","_formattedHost$hosts","serviceUrl","matchingCatalogEntry","formattedHost","defaultUrl","defaultHost","hosts","serviceId","homeCluster","otherHosts","entryHost","getClusterId","findClusterId","getServiceFromClusterId","params","findServiceFromClusterId","getServiceUrlFromClusterId","_ref9","_ref9$cluster","cluster","clusterId","_ref10","findServiceUrlFromUrl","isServiceUrl","isAllowedDomainUrl","findAllowedDomain","convertUrlToPriorityHostUrl","data","_this7","_ref11","qs","format","timestamp","Date","getTime","requestObject","newMetrics","callDiagnosticLatencies","measureLatency","_ref12","initConfig","_this$webex$config","fedramp","fedRampServices","formattedDiscoveryServices","key","override","formattedOverrideServices","allowedDomains","union","COMMERCIAL_ALLOWED_DOMAINS","setAllowedDomains","_this8","getOrgId","orgId","warn","initialize","_this9","ServiceCatalog","registry","ServiceRegistry","state","ServiceState","set","listenToOnce","version","_default"],"sources":["services.js"],"sourcesContent":["import sha256 from 'crypto-js/sha256';\n\nimport {union, forEach} from 'lodash';\nimport WebexPlugin from '../webex-plugin';\n\nimport METRICS from './metrics';\nimport ServiceCatalog from './service-catalog';\nimport ServiceRegistry from './service-registry';\nimport ServiceState from './service-state';\nimport fedRampServices from './service-fed-ramp';\nimport {COMMERCIAL_ALLOWED_DOMAINS} from './constants';\n\nconst trailingSlashes = /(?:^\\/)|(?:\\/$)/;\n\n// The default cluster when one is not provided (usually as 'US' from hydra)\nexport const DEFAULT_CLUSTER = 'urn:TEAM:us-east-2_a';\n// The default service name for convo (currently identityLookup due to some weird CSB issue)\nexport const DEFAULT_CLUSTER_SERVICE = 'identityLookup';\n\nconst CLUSTER_SERVICE = process.env.WEBEX_CONVERSATION_CLUSTER_SERVICE || DEFAULT_CLUSTER_SERVICE;\nconst DEFAULT_CLUSTER_IDENTIFIER =\n  process.env.WEBEX_CONVERSATION_DEFAULT_CLUSTER || `${DEFAULT_CLUSTER}:${CLUSTER_SERVICE}`;\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst Services = WebexPlugin.extend({\n  namespace: 'Services',\n\n  /**\n   * The {@link WeakMap} of {@link ServiceRegistry} class instances that are\n   * keyed with WebexCore instances.\n   *\n   * @instance\n   * @type {WeakMap<WebexCore, ServiceRegistry>}\n   * @private\n   * @memberof Services\n   */\n  registries: new WeakMap(),\n\n  /**\n   * The {@link WeakMap} of {@link ServiceState} class instances that are\n   * keyed with WebexCore instances.\n   *\n   * @instance\n   * @type {WeakMap<WebexCore, ServiceState>}\n   * @private\n   * @memberof Services\n   */\n  states: new WeakMap(),\n\n  props: {\n    validateDomains: ['boolean', false, true],\n    initFailed: ['boolean', false, false],\n  },\n\n  _catalogs: new WeakMap(),\n\n  _serviceUrls: null,\n\n  _hostCatalog: null,\n\n  /**\n   * Get the registry associated with this webex instance.\n   *\n   * @private\n   * @memberof Services\n   * @returns {ServiceRegistry} - The associated {@link ServiceRegistry}.\n   */\n  getRegistry() {\n    return this.registries.get(this.webex);\n  },\n\n  /**\n   * Get the state associated with this webex instance.\n   *\n   * @private\n   * @memberof Services\n   * @returns {ServiceState} - The associated {@link ServiceState}.\n   */\n  getState() {\n    return this.states.get(this.webex);\n  },\n\n  /**\n   * @private\n   * Get the current catalog based on the assocaited\n   * webex instance.\n   * @returns {ServiceCatalog}\n   */\n  _getCatalog() {\n    return this._catalogs.get(this.webex);\n  },\n\n  /**\n   * Get a service url from the current services list by name\n   * from the associated instance catalog.\n   * @param {string} name\n   * @param {boolean} [priorityHost]\n   * @param {string} [serviceGroup]\n   * @returns {string|undefined}\n   */\n  get(name, priorityHost, serviceGroup) {\n    const catalog = this._getCatalog();\n\n    return catalog.get(name, priorityHost, serviceGroup);\n  },\n\n  /**\n   * Determine if the catalog contains a specific service\n   *\n   * @param {string} serviceName - The service name to validate.\n   * @returns {boolean} - True if the service exists.\n   */\n  hasService(serviceName) {\n    return !!this.get(serviceName);\n  },\n\n  /**\n   * Determine if a whilelist exists in the service catalog.\n   *\n   * @returns {boolean} - True if a allowed domains list exists.\n   */\n  hasAllowedDomains() {\n    const catalog = this._getCatalog();\n\n    return catalog.getAllowedDomains().length > 0;\n  },\n\n  /**\n   * Generate a service catalog as an object from\n   * the associated instance catalog.\n   * @param {boolean} [priorityHost] - use highest priority host if set to `true`\n   * @param {string} [serviceGroup]\n   * @returns {Record<string, string>}\n   */\n  list(priorityHost, serviceGroup) {\n    const catalog = this._getCatalog();\n\n    return catalog.list(priorityHost, serviceGroup);\n  },\n\n  /**\n   * Mark a priority host service url as failed.\n   * This will mark the host associated with the\n   * `ServiceUrl` to be removed from the its\n   * respective host array, and then return the next\n   * viable host from the `ServiceUrls` host array,\n   * or the `ServiceUrls` default url if no other priority\n   * hosts are available, or if `noPriorityHosts` is set to\n   * `true`.\n   * @param {string} url\n   * @param {boolean} noPriorityHosts\n   * @returns {string}\n   */\n  markFailedUrl(url, noPriorityHosts) {\n    const catalog = this._getCatalog();\n\n    return catalog.markFailedUrl(url, noPriorityHosts);\n  },\n\n  /**\n   * saves all the services from the pre and post catalog service\n   * @param {Object} serviceUrls\n   * @returns {void}\n   */\n  _updateServiceUrls(serviceUrls) {\n    this._serviceUrls = {...this._serviceUrls, ...serviceUrls};\n  },\n\n  /**\n   * saves the hostCatalog object\n   * @param {Object} hostCatalog\n   * @returns {void}\n   */\n  _updateHostCatalog(hostCatalog) {\n    this._hostCatalog = {...this._hostCatalog, ...hostCatalog};\n  },\n\n  /**\n   * Update a list of `serviceUrls` to the most current\n   * catalog via the defined `discoveryUrl` then returns the current\n   * list of services.\n   * @param {object} [param]\n   * @param {string} [param.from] - This accepts `limited` or `signin`\n   * @param {object} [param.query] - This accepts `email`, `orgId` or `userId` key values\n   * @param {string} [param.query.email] - must be a standard-format email\n   * @param {string} [param.query.orgId] - must be an organization id\n   * @param {string} [param.query.userId] - must be a user id\n   * @param {string} [param.token] - used for signin catalog\n   * @returns {Promise<object>}\n   */\n  updateServices({from, query, token, forceRefresh} = {}) {\n    const catalog = this._getCatalog();\n    let formattedQuery;\n    let serviceGroup;\n\n    // map catalog name to service group name.\n    switch (from) {\n      case 'limited':\n        serviceGroup = 'preauth';\n        break;\n      case 'signin':\n        serviceGroup = 'signin';\n        break;\n      default:\n        serviceGroup = 'postauth';\n        break;\n    }\n\n    // confirm catalog update for group is not in progress.\n    if (catalog.status[serviceGroup].collecting) {\n      return this.waitForCatalog(serviceGroup);\n    }\n\n    catalog.status[serviceGroup].collecting = true;\n\n    if (serviceGroup === 'preauth') {\n      const queryKey = query && Object.keys(query)[0];\n\n      if (!['email', 'emailhash', 'userId', 'orgId', 'mode'].includes(queryKey)) {\n        return Promise.reject(\n          new Error('a query param of email, emailhash, userId, orgId, or mode is required')\n        );\n      }\n    }\n    // encode email when query key is email\n    if (serviceGroup === 'preauth' || serviceGroup === 'signin') {\n      const queryKey = Object.keys(query)[0];\n\n      formattedQuery = {};\n\n      if (queryKey === 'email' && query.email) {\n        formattedQuery.emailhash = sha256(query.email.toLowerCase()).toString();\n      } else {\n        formattedQuery[queryKey] = query[queryKey];\n      }\n    }\n\n    return this._fetchNewServiceHostmap({\n      from,\n      token,\n      query: formattedQuery,\n      forceRefresh,\n    })\n      .then((serviceHostMap) => {\n        catalog.updateServiceUrls(serviceGroup, serviceHostMap);\n        this.updateCredentialsConfig();\n        catalog.status[serviceGroup].collecting = false;\n      })\n      .catch((error) => {\n        catalog.status[serviceGroup].collecting = false;\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * User validation parameter transfer object for {@link validateUser}.\n   * @param {object} ValidateUserPTO\n   * @property {string} ValidateUserPTO.email - The email of the user.\n   * @property {string} [ValidateUserPTO.reqId] - The activation requester.\n   * @property {object} [ValidateUserPTO.activationOptions] - Extra options to pass when sending the activation\n   * @property {object} [ValidateUserPTO.preloginUserId] - The prelogin user id to set when sending the activation.\n   */\n\n  /**\n   * User validation return transfer object for {@link validateUser}.\n   * @param {object} ValidateUserRTO\n   * @property {boolean} ValidateUserRTO.activated - If the user is activated.\n   * @property {boolean} ValidateUserRTO.exists - If the user exists.\n   * @property {string} ValidateUserRTO.details - A descriptive status message.\n   * @property {object} ValidateUserRTO.user - **License** service user object.\n   */\n\n  /**\n   * Validate if a user is activated and update the service catalogs as needed\n   * based on the user's activation status.\n   *\n   * @param {ValidateUserPTO} - The parameter transfer object.\n   * @returns {ValidateUserRTO} - The return transfer object.\n   */\n  validateUser({\n    email,\n    reqId = 'WEBCLIENT',\n    forceRefresh = false,\n    activationOptions = {},\n    preloginUserId,\n  }) {\n    this.logger.info('services: validating a user');\n\n    // Validate that an email parameter key was provided.\n    if (!email) {\n      return Promise.reject(new Error('`email` is required'));\n    }\n\n    // Destructure the credentials object.\n    const {canAuthorize} = this.webex.credentials;\n\n    // Validate that the user is already authorized.\n    if (canAuthorize) {\n      return this.updateServices({forceRefresh})\n        .then(() => this.webex.credentials.getUserToken())\n        .then((token) =>\n          this.sendUserActivation({\n            email,\n            reqId,\n            token: token.toString(),\n            activationOptions,\n            preloginUserId,\n          })\n        )\n        .then((userObj) => ({\n          activated: true,\n          exists: true,\n          details: 'user is authorized via a user token',\n          user: userObj,\n        }));\n    }\n\n    // Destructure the client authorization details.\n    /* eslint-disable camelcase */\n    const {client_id, client_secret} = this.webex.credentials.config;\n\n    // Validate that client authentication details exist.\n    if (!client_id || !client_secret) {\n      return Promise.reject(new Error('client authentication details are not available'));\n    }\n    /* eslint-enable camelcase */\n\n    // Declare a class-memeber-scoped token for usage within the promise chain.\n    let token;\n\n    // Begin client authentication user validation.\n    return (\n      this.collectPreauthCatalog({email})\n        .then(() => {\n          // Retrieve the service url from the updated catalog. This is required\n          // since `WebexCore` is usually not fully initialized at the time this\n          // request completes.\n          const idbrokerService = this.get('idbroker', true);\n\n          // Collect the client auth token.\n          return this.webex.credentials.getClientToken({\n            uri: `${idbrokerService}idb/oauth2/v1/access_token`,\n            scope: 'webexsquare:admin webexsquare:get_conversation Identity:SCIM',\n          });\n        })\n        .then((tokenObj) => {\n          // Generate the token string.\n          token = tokenObj.toString();\n\n          // Collect the signin catalog using the client auth information.\n          return this.collectSigninCatalog({email, token, forceRefresh});\n        })\n        // Validate if collecting the signin catalog failed and populate the RTO\n        // with the appropriate content.\n        .catch((error) => ({\n          exists: error.name !== 'NotFound',\n          activated: false,\n          details:\n            error.name !== 'NotFound'\n              ? 'user exists but is not activated'\n              : 'user does not exist and is not activated',\n        }))\n        // Validate if the previous promise resolved with an RTO and populate the\n        // new RTO accordingly.\n        .then((rto) =>\n          Promise.all([\n            rto || {\n              activated: true,\n              exists: true,\n              details: 'user exists and is activated',\n            },\n            this.sendUserActivation({\n              email,\n              reqId,\n              token,\n              activationOptions,\n              preloginUserId,\n            }),\n          ])\n        )\n        .then(([rto, user]) => ({...rto, user}))\n        .catch((error) => {\n          const response = {\n            statusCode: error.statusCode,\n            responseText: error.body && error.body.message,\n            body: error.body,\n          };\n\n          return Promise.reject(response);\n        })\n    );\n  },\n\n  /**\n   * Get user meeting preferences (preferred webex site).\n   *\n   * @returns {object} - User Information including user preferrences .\n   */\n  getMeetingPreferences() {\n    return this.request({\n      method: 'GET',\n      service: 'hydra',\n      resource: 'meetingPreferences',\n    })\n      .then((res) => {\n        this.logger.info('services: received user region info');\n\n        return res.body;\n      })\n      .catch((err) => {\n        this.logger.info('services: was not able to fetch user login information', err);\n        // resolve successfully even if request failed\n      });\n  },\n\n  /**\n   * Fetches client region info such as countryCode and timezone.\n   *\n   * @returns {object} - The region info object.\n   */\n  fetchClientRegionInfo() {\n    const {services} = this.webex.config;\n\n    return this.request({\n      uri: services.discovery.sqdiscovery,\n      addAuthHeader: false,\n      headers: {\n        'spark-user-agent': null,\n      },\n      timeout: 5000,\n    })\n      .then((res) => {\n        this.logger.info('services: received user region info');\n\n        return res.body;\n      })\n      .catch((err) => {\n        this.logger.info('services: was not able to get user region info', err);\n        // resolve successfully even if request failed\n      });\n  },\n\n  /**\n   * User activation parameter transfer object for {@link sendUserActivation}.\n   * @typedef {object} SendUserActivationPTO\n   * @property {string} SendUserActivationPTO.email - The email of the user.\n   * @property {string} SendUserActivationPTO.reqId - The activation requester.\n   * @property {string} SendUserActivationPTO.token - The client auth token.\n   * @property {object} SendUserActivationPTO.activationOptions - Extra options to pass when sending the activation.\n   * @property {object} SendUserActivationPTO.preloginUserId - The prelogin user id to set when sending the activation.\n   */\n\n  /**\n   * Send a request to activate a user using a client token.\n   *\n   * @param {SendUserActivationPTO} - The Parameter transfer object.\n   * @returns {LicenseDTO} - The DTO returned from the **License** service.\n   */\n  sendUserActivation({email, reqId, token, activationOptions, preloginUserId}) {\n    this.logger.info('services: sending user activation request');\n    let countryCode;\n    let timezone;\n\n    // try to fetch client region info first\n    return (\n      this.fetchClientRegionInfo()\n        .then((clientRegionInfo) => {\n          if (clientRegionInfo) {\n            ({countryCode, timezone} = clientRegionInfo);\n          }\n\n          // Send the user activation request to the **License** service.\n          return this.request({\n            service: 'license',\n            resource: 'users/activations',\n            method: 'POST',\n            headers: {\n              accept: 'application/json',\n              authorization: token,\n              'x-prelogin-userid': preloginUserId,\n            },\n            body: {\n              email,\n              reqId,\n              countryCode,\n              timeZone: timezone,\n              ...activationOptions,\n            },\n            shouldRefreshAccessToken: false,\n          });\n        })\n        // On success, return the **License** user object.\n        .then(({body}) => body)\n        // On failure, reject with error from **License**.\n        .catch((error) => Promise.reject(error))\n    );\n  },\n\n  /**\n   * Updates a given service group i.e. preauth, signin, postauth with a new hostmap.\n   * @param {string} serviceGroup - preauth, signin, postauth\n   * @param {object} hostMap - The new hostmap to update the service group with.\n   * @returns {Promise<void>}\n   */\n  updateCatalog(serviceGroup, hostMap) {\n    const catalog = this._getCatalog();\n\n    const serviceHostMap = this._formatReceivedHostmap(hostMap);\n\n    return catalog.updateServiceUrls(serviceGroup, serviceHostMap);\n  },\n\n  /**\n   * simplified method to update the preauth catalog via email\n   *\n   * @param {object} query\n   * @param {string} query.email - A standard format email.\n   * @param {string} query.orgId - The user's OrgId.\n   * @param {boolean} forceRefresh - Boolean to bypass u2c cache control header\n   * @returns {Promise<void>}\n   */\n  collectPreauthCatalog(query, forceRefresh = false) {\n    if (!query) {\n      return this.updateServices({\n        from: 'limited',\n        query: {mode: 'DEFAULT_BY_PROXIMITY'},\n        forceRefresh,\n      });\n    }\n\n    return this.updateServices({from: 'limited', query, forceRefresh});\n  },\n\n  /**\n   * simplified method to update the signin catalog via email and token\n   * @param {object} param\n   * @param {string} param.email - must be a standard-format email\n   * @param {string} param.token - must be a client token\n   * @returns {Promise<void>}\n   */\n  collectSigninCatalog({email, token, forceRefresh} = {}) {\n    if (!email) {\n      return Promise.reject(new Error('`email` is required'));\n    }\n    if (!token) {\n      return Promise.reject(new Error('`token` is required'));\n    }\n\n    return this.updateServices({\n      from: 'signin',\n      query: {email},\n      token,\n      forceRefresh,\n    });\n  },\n\n  /**\n   * Updates credentials config to utilize u2c catalog\n   * urls.\n   * @returns {void}\n   */\n  updateCredentialsConfig() {\n    const {idbroker, identity} = this.list(true);\n\n    if (idbroker && identity) {\n      const {authorizationString, authorizeUrl} = this.webex.config.credentials;\n\n      // This must be set outside of the setConfig method used to assign the\n      // idbroker and identity url values.\n      this.webex.config.credentials.authorizeUrl = authorizationString\n        ? authorizeUrl\n        : `${idbroker.replace(trailingSlashes, '')}/idb/oauth2/v1/authorize`;\n\n      this.webex.setConfig({\n        credentials: {\n          idbroker: {\n            url: idbroker.replace(trailingSlashes, ''), // remove trailing slash\n          },\n          identity: {\n            url: identity.replace(trailingSlashes, ''), // remove trailing slash\n          },\n        },\n      });\n    }\n  },\n\n  /**\n   * Wait until the service catalog is available,\n   * or reject afte ra timeout of 60 seconds.\n   * @param {string} serviceGroup\n   * @param {number} [timeout] - in seconds\n   * @returns {Promise<void>}\n   */\n  waitForCatalog(serviceGroup, timeout) {\n    const catalog = this._getCatalog();\n    const {supertoken} = this.webex.credentials;\n\n    if (\n      serviceGroup === 'postauth' &&\n      supertoken &&\n      supertoken.access_token &&\n      !catalog.status.postauth.collecting &&\n      !catalog.status.postauth.ready\n    ) {\n      if (!catalog.status.preauth.ready) {\n        return this.initServiceCatalogs();\n      }\n\n      return this.updateServices();\n    }\n\n    return catalog.waitForCatalog(serviceGroup, timeout);\n  },\n\n  /**\n   * Service waiting parameter transfer object for {@link waitForService}.\n   *\n   * @typedef {object} WaitForServicePTO\n   * @property {string} [WaitForServicePTO.name] - The service name.\n   * @property {string} [WaitForServicePTO.url] - The service url.\n   * @property {string} [WaitForServicePTO.timeout] - wait duration in seconds.\n   */\n\n  /**\n   * Wait until the service has been ammended to any service catalog. This\n   * method prioritizes the service name over the service url when searching.\n   *\n   * @param {WaitForServicePTO} - The parameter transfer object.\n   * @returns {Promise<string>} - Resolves to the priority host of a service.\n   */\n  waitForService({name, timeout = 5, url}) {\n    const {services} = this.webex.config;\n\n    // Save memory by grabbing the catalog after there isn't a priortyURL\n    const catalog = this._getCatalog();\n\n    const fetchFromServiceUrl = services.servicesNotNeedValidation.find(\n      (service) => service === name\n    );\n\n    if (fetchFromServiceUrl) {\n      return Promise.resolve(this._serviceUrls[name]);\n    }\n\n    const priorityUrl = this.get(name, true);\n    const priorityUrlObj = this.getServiceFromUrl(url);\n\n    if (priorityUrl || priorityUrlObj) {\n      return Promise.resolve(priorityUrl || priorityUrlObj.priorityUrl);\n    }\n\n    if (catalog.isReady) {\n      if (url) {\n        return Promise.resolve(url);\n      }\n\n      this.webex.internal.metrics.submitClientMetrics(METRICS.JS_SDK_SERVICE_NOT_FOUND, {\n        fields: {service_name: name},\n      });\n\n      return Promise.reject(\n        new Error(`services: service '${name}' was not found in any of the catalogs`)\n      );\n    }\n\n    return new Promise((resolve, reject) => {\n      const groupsToCheck = ['preauth', 'signin', 'postauth'];\n      const checkCatalog = (catalogGroup) =>\n        catalog\n          .waitForCatalog(catalogGroup, timeout)\n          .then(() => {\n            const scopedPriorityUrl = this.get(name, true);\n            const scopedPrioriryUrlObj = this.getServiceFromUrl(url);\n\n            if (scopedPriorityUrl || scopedPrioriryUrlObj) {\n              resolve(scopedPriorityUrl || scopedPrioriryUrlObj.priorityUrl);\n            }\n          })\n          .catch(() => undefined);\n\n      Promise.all(groupsToCheck.map((group) => checkCatalog(group))).then(() => {\n        this.webex.internal.metrics.submitClientMetrics(METRICS.JS_SDK_SERVICE_NOT_FOUND, {\n          fields: {service_name: name},\n        });\n        reject(new Error(`services: service '${name}' was not found after waiting`));\n      });\n    });\n  },\n\n  /**\n   * Looks up the hostname in the host catalog\n   * and replaces it with the first host if it finds it\n   * @param {string} uri\n   * @returns {string} uri with the host replaced\n   */\n  replaceHostFromHostmap(uri) {\n    const url = new URL(uri);\n    const hostCatalog = this._hostCatalog;\n\n    if (!hostCatalog) {\n      return uri;\n    }\n\n    const host = hostCatalog[url.host];\n\n    if (host && host[0]) {\n      const newHost = host[0].host;\n\n      url.host = newHost;\n\n      return url.toString();\n    }\n\n    return uri;\n  },\n\n  /**\n   * @private\n   * Organize a received hostmap from a service\n   * catalog endpoint.\n   * @param {object} serviceHostmap\n   * @returns {object}\n   */\n  _formatReceivedHostmap(serviceHostmap) {\n    this._updateHostCatalog(serviceHostmap.hostCatalog);\n\n    const extractId = (entry) => entry.id.split(':')[3];\n\n    const formattedHostmap = [];\n\n    // for each of the services in the serviceLinks, find the matching host in the catalog\n    Object.keys(serviceHostmap.serviceLinks).forEach((serviceName) => {\n      const serviceUrl = serviceHostmap.serviceLinks[serviceName];\n\n      let host;\n      try {\n        host = new URL(serviceUrl).host;\n      } catch (e) {\n        return;\n      }\n\n      const matchingCatalogEntry = serviceHostmap.hostCatalog[host];\n\n      const formattedHost = {\n        name: serviceName,\n        defaultUrl: serviceUrl,\n        defaultHost: host,\n        hosts: [],\n      };\n\n      formattedHostmap.push(formattedHost);\n\n      // If the catalog does not have any hosts we will be unable to find the service ID\n      // so can't search for other hosts\n      if (!matchingCatalogEntry || !matchingCatalogEntry[0]) {\n        return;\n      }\n\n      const serviceId = extractId(matchingCatalogEntry[0]);\n\n      forEach(matchingCatalogEntry, (entry) => {\n        // The ids for all hosts within a hostCatalog entry should be the same\n        // but for safety, only add host entries that have the same id as the first one\n        if (extractId(entry) === serviceId) {\n          formattedHost.hosts.push({\n            ...entry,\n            homeCluster: true,\n          });\n        }\n      });\n\n      const otherHosts = [];\n\n      // find the services in the host catalog that have the same id\n      // and add them to the otherHosts\n      forEach(serviceHostmap.hostCatalog, (entry) => {\n        // exclude the matching catalog entry as we have already added that\n        if (entry === matchingCatalogEntry) {\n          return;\n        }\n\n        forEach(entry, (entryHost) => {\n          // only add hosts that have the correct id\n          if (extractId(entryHost) === serviceId) {\n            otherHosts.push({\n              ...entryHost,\n              homeCluster: false,\n            });\n          }\n        });\n      });\n\n      formattedHost.hosts.push(...otherHosts);\n    });\n\n    // update all the service urls in the host catalog\n\n    this._updateServiceUrls(serviceHostmap.serviceLinks);\n    this._updateHostCatalog(serviceHostmap.hostCatalog);\n\n    return formattedHostmap;\n  },\n\n  /**\n   * Get the clusterId associated with a URL string.\n   * @param {string} url\n   * @returns {string} - Cluster ID of url provided\n   */\n  getClusterId(url) {\n    const catalog = this._getCatalog();\n\n    return catalog.findClusterId(url);\n  },\n\n  /**\n   * Get a service value from a provided clusterId. This method will\n   * return an object containing both the name and url of a found service.\n   * @param {object} params\n   * @param {string} params.clusterId - clusterId of found service\n   * @param {boolean} [params.priorityHost] - returns priority host url if true\n   * @param {string} [params.serviceGroup] - specify service group\n   * @returns {object} service\n   * @returns {string} service.name\n   * @returns {string} service.url\n   */\n  getServiceFromClusterId(params) {\n    const catalog = this._getCatalog();\n\n    return catalog.findServiceFromClusterId(params);\n  },\n\n  /**\n   * @param {String} cluster the cluster containing the id\n   * @param {UUID} [id] the id of the conversation.\n   *  If empty, just return the base URL.\n   * @returns {String} url of the service\n   */\n  getServiceUrlFromClusterId({cluster = 'us'} = {}) {\n    let clusterId = cluster === 'us' ? DEFAULT_CLUSTER_IDENTIFIER : cluster;\n\n    // Determine if cluster has service name (non-US clusters from hydra do not)\n    if (clusterId.split(':').length < 4) {\n      // Add Service to cluster identifier\n      clusterId = `${cluster}:${CLUSTER_SERVICE}`;\n    }\n\n    const {url} = this.getServiceFromClusterId({clusterId}) || {};\n\n    if (!url) {\n      throw Error(`Could not find service for cluster [${cluster}]`);\n    }\n\n    return url;\n  },\n\n  /**\n   * Get a service object from a service url if the service url exists in the\n   * catalog.\n   *\n   * @param {string} url - The url to be validated.\n   * @returns {object} - Service object.\n   * @returns {object.name} - The name of the service found.\n   * @returns {object.priorityUrl} - The priority url of the found service.\n   * @returns {object.defaultUrl} - The default url of the found service.\n   */\n  getServiceFromUrl(url = '') {\n    const service = this._getCatalog().findServiceUrlFromUrl(url);\n\n    if (!service) {\n      return undefined;\n    }\n\n    return {\n      name: service.name,\n      priorityUrl: service.get(true),\n      defaultUrl: service.get(),\n    };\n  },\n\n  /**\n   * Verify that a provided url exists in the service\n   * catalog.\n   * @param {string} url\n   * @returns {boolean} - true if exists, false otherwise\n   */\n  isServiceUrl(url) {\n    const catalog = this._getCatalog();\n\n    return !!catalog.findServiceUrlFromUrl(url);\n  },\n\n  /**\n   * Determine if a provided url is in the catalog's allowed domains.\n   *\n   * @param {string} url - The url to match allowed domains against.\n   * @returns {boolean} - True if the url provided is allowed.\n   */\n  isAllowedDomainUrl(url) {\n    const catalog = this._getCatalog();\n\n    return !!catalog.findAllowedDomain(url);\n  },\n\n  /**\n   * Converts the host portion of the url from default host\n   * to a priority host\n   *\n   * @param {string} url a service url that contains a default host\n   * @returns {string} a service url that contains the top priority host.\n   * @throws if url isn't a service url\n   */\n  convertUrlToPriorityHostUrl(url = '') {\n    const data = this.getServiceFromUrl(url);\n\n    if (!data) {\n      throw Error(`No service associated with url: [${url}]`);\n    }\n\n    return url.replace(data.defaultUrl, data.priorityUrl);\n  },\n\n  /**\n   * @private\n   * Simplified method wrapper for sending a request to get\n   * an updated service hostmap.\n   * @param {object} [param]\n   * @param {string} [param.from] - This accepts `limited` or `signin`\n   * @param {object} [param.query] - This accepts `email`, `orgId` or `userId` key values\n   * @param {string} [param.query.email] - must be a standard-format email\n   * @param {string} [param.query.orgId] - must be an organization id\n   * @param {string} [param.query.userId] - must be a user id\n   * @param {string} [param.token] - used for signin catalog\n   * @returns {Promise<object>}\n   */\n  _fetchNewServiceHostmap({from, query, token, forceRefresh} = {}) {\n    const service = 'u2c';\n    const resource = from ? `/${from}/catalog` : '/catalog';\n    const qs = {...query, format: 'hostmap'};\n\n    if (forceRefresh) {\n      qs.timestamp = new Date().getTime();\n    }\n\n    const requestObject = {\n      method: 'GET',\n      service,\n      resource,\n      qs,\n    };\n\n    if (token) {\n      requestObject.headers = {authorization: token};\n    }\n\n    return this.webex.internal.newMetrics.callDiagnosticLatencies\n      .measureLatency(() => this.request(requestObject), 'internal.get.u2c.time')\n      .then(({body}) => this._formatReceivedHostmap(body));\n  },\n\n  /**\n   * Initialize the discovery services and the whitelisted services.\n   *\n   * @returns {void}\n   */\n  initConfig() {\n    // Get the catalog and destructure the services config.\n    const catalog = this._getCatalog();\n    const {services, fedramp} = this.webex.config;\n\n    // Validate that the services configuration exists.\n    if (services) {\n      if (fedramp) {\n        services.discovery = fedRampServices;\n      }\n      // Check for discovery services.\n      if (services.discovery) {\n        // Format the discovery configuration into an injectable array.\n        const formattedDiscoveryServices = Object.keys(services.discovery).map((key) => ({\n          name: key,\n          defaultUrl: services.discovery[key],\n        }));\n\n        // Inject formatted discovery services into services catalog.\n        catalog.updateServiceUrls('discovery', formattedDiscoveryServices);\n      }\n\n      if (services.override) {\n        // Format the override configuration into an injectable array.\n        const formattedOverrideServices = Object.keys(services.override).map((key) => ({\n          name: key,\n          defaultUrl: services.override[key],\n        }));\n\n        // Inject formatted override services into services catalog.\n        catalog.updateServiceUrls('override', formattedOverrideServices);\n      }\n\n      // if not fedramp, append on the commercialAllowedDomains\n      if (!fedramp) {\n        services.allowedDomains = union(services.allowedDomains, COMMERCIAL_ALLOWED_DOMAINS);\n      }\n\n      // Check for allowed host domains.\n      if (services.allowedDomains) {\n        // Store the allowed domains as a property of the catalog.\n        catalog.setAllowedDomains(services.allowedDomains);\n      }\n\n      // Set `validateDomains` property to match configuration\n      this.validateDomains = services.validateDomains;\n    }\n  },\n\n  /**\n   * Make the initial requests to collect the root catalogs.\n   *\n   * @returns {Promise<void, Error>} - Errors if the token is unavailable.\n   */\n  initServiceCatalogs() {\n    this.logger.info('services: initializing initial service catalogs');\n\n    // Destructure the credentials plugin.\n    const {credentials} = this.webex;\n\n    // Init a promise chain. Must be done as a Promise.resolve() to allow\n    // credentials#getOrgId() to properly throw.\n    return (\n      Promise.resolve()\n        // Get the user's OrgId.\n        .then(() => credentials.getOrgId())\n        // Begin collecting the preauth/limited catalog.\n        .then((orgId) => this.collectPreauthCatalog({orgId}))\n        .then(() => {\n          // Validate if the token is authorized.\n          if (credentials.canAuthorize) {\n            // Attempt to collect the postauth catalog.\n            return this.updateServices().catch(() => {\n              this.initFailed = true;\n              this.logger.warn('services: cannot retrieve postauth catalog');\n            });\n          }\n\n          // Return a resolved promise for consistent return value.\n          return Promise.resolve();\n        })\n    );\n  },\n\n  /**\n   * Initializer\n   *\n   * @instance\n   * @memberof Services\n   * @returns {Services}\n   */\n  initialize() {\n    const catalog = new ServiceCatalog();\n    const registry = new ServiceRegistry();\n    const state = new ServiceState();\n\n    this._catalogs.set(this.webex, catalog);\n    this.registries.set(this.webex, registry);\n    this.states.set(this.webex, state);\n\n    // Listen for configuration changes once.\n    this.listenToOnce(this.webex, 'change:config', () => {\n      this.initConfig();\n    });\n\n    // wait for webex instance to be ready before attempting\n    // to update the service catalogs\n    this.listenToOnce(this.webex, 'ready', () => {\n      const {supertoken} = this.webex.credentials;\n      // Validate if the supertoken exists.\n      if (supertoken && supertoken.access_token) {\n        this.initServiceCatalogs()\n          .then(() => {\n            catalog.isReady = true;\n          })\n          .catch((error) => {\n            this.initFailed = true;\n            this.logger.error(\n              `services: failed to init initial services when credentials available, ${error?.message}`\n            );\n          });\n      } else {\n        const {email} = this.webex.config;\n\n        this.collectPreauthCatalog(email ? {email} : undefined).catch((error) => {\n          this.initFailed = true;\n          this.logger.error(\n            `services: failed to init initial services when no credentials available, ${error?.message}`\n          );\n        });\n      }\n    });\n  },\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default Services;\n"],"mappings":"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"}