import { WithEventsDummyType } from 'event-mixin';
import { TypedEvent } from '../../typed-event';
import { Parent } from './parent';
interface ChildEvents {
    eventThree: TypedEvent<(value: string) => void>;
}
declare class _Child extends Parent {
    protected eventThree: TypedEvent<(value: string) => void>;
    fireEventThree(): void;
}
export declare const Child: {
    new (...args: any[]): {
        on<K extends "eventThree", E extends ChildEvents[K] extends infer T ? T extends ChildEvents[K] ? T extends TypedEvent<infer X extends (...args: any[]) => void> ? X : never : never : never>(eventName: K, handler: E): void;
        once<K_1 extends "eventThree", E_1 extends ChildEvents[K_1] extends infer T_1 ? T_1 extends ChildEvents[K_1] ? T_1 extends TypedEvent<infer X extends (...args: any[]) => void> ? X : never : never : never>(eventName: K_1, handler: E_1): void;
        off<K_2 extends "eventThree", E_2 extends ChildEvents[K_2] extends infer T_2 ? T_2 extends ChildEvents[K_2] ? T_2 extends TypedEvent<infer X extends (...args: any[]) => void> ? X : never : never : never>(eventName: K_2, handler: E_2): void;
    };
} & typeof _Child;
export type Child = _Child & WithEventsDummyType<ChildEvents>;
export {};
//# sourceMappingURL=child.d.ts.map