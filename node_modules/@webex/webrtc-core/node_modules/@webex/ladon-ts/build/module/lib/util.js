export var InterpolationMethod;
(function (InterpolationMethod) {
    InterpolationMethod["Nearest"] = "nearest";
})(InterpolationMethod || (InterpolationMethod = {}));
/**
 * Resizes an image from the source dimensions to target dimensions.
 *
 * @param {Uint8ClampedArray} imageData The source image data in Uint8ClampedArray format.
 * @param {number} srcWidth The width of the source image.
 * @param {number} srcHeight The height of the source image.
 * @param {number} targetWidth The width of the target image.
 * @param {number} targetHeight The height of the target image.
 *
 * @returns {Uint8ClampedArray} The target image data in Uint8ClampedArray format.
 *
 * @example
 * const targetData = resizeImage(sourceData, 800, 600, 400, 300);
 *
 * @note The function uses a "nearest neighbor" algorithm for resizing,
 * which is fast but might not provide the best quality for all images.
 */
export const resizeImage = (imageData, srcWidth, srcHeight, targetWidth, targetHeight) => {
    const targetData = new Uint8ClampedArray(targetWidth * targetHeight * 4);
    const xRatio = srcWidth / targetWidth;
    const yRatio = srcHeight / targetHeight;
    const scaledSrcWidth = srcWidth * 4;
    let offset = 0;
    for (let y = 0; y < targetHeight; y++) {
        const srcY = Math.floor(y * yRatio) * scaledSrcWidth;
        for (let x = 0; x < targetWidth; x++) {
            const srcOffset = srcY + Math.floor(x * xRatio) * 4;
            targetData[offset++] = imageData[srcOffset];
            targetData[offset++] = imageData[srcOffset + 1];
            targetData[offset++] = imageData[srcOffset + 2];
            targetData[offset++] = imageData[srcOffset + 3];
        }
    }
    return targetData;
};
/**
 * Upsamples an image using the bilinear interpolation method. The input image is expected to be in
 * Float32Array format. The output image is in Uint8ClampedArray format. The input image is expected
 * to be in the [0, 1] range. The output image is in the [0, 255] range.
 *
 * @param {Float32Array} input The input image data in Float32Array format.
 * @param {number} srcWidth The width of the source image.
 * @param {number} srcHeight The height of the source image.
 * @param {number} targetWidth The width of the target image.
 * @param {number} targetHeight The height of the target image.
 *
 * @returns {Uint8ClampedArray} The upsampled image data in Uint8ClampedArray format.
 *
 */
export function bilinearUpsample(input, srcWidth, srcHeight, targetWidth, targetHeight) {
    const output = new Uint8ClampedArray(targetWidth * targetHeight);
    // If the source and target dimensions are the same, just copy the input to the output.
    // The output is expected to be in the [0, 255] range
    if (srcWidth === targetWidth && srcHeight === targetHeight) {
        for (let i = 0; i < input.length; i++) {
            output[i] = Math.min(Math.max(input[i], 0), 255);
        }
        return output;
    }
    const xRatio = (srcWidth - 1) / (targetWidth - 1);
    const yRatio = (srcHeight - 1) / (targetHeight - 1);
    for (let i = 0; i < targetHeight; i++) {
        for (let j = 0; j < targetWidth; j++) {
            const x = xRatio * j;
            const y = yRatio * i;
            const xL = Math.floor(x);
            const yL = Math.floor(y);
            const xH = Math.min(Math.ceil(x), srcWidth - 1);
            const yH = Math.min(Math.ceil(y), srcHeight - 1);
            const xWeight = x - xL;
            const yWeight = y - yL;
            const a = input[yL * srcWidth + xL];
            const b = input[yL * srcWidth + xH];
            const c = input[yH * srcWidth + xL];
            const d = input[yH * srcWidth + xH];
            const value = a * (1 - xWeight) * (1 - yWeight) +
                b * xWeight * (1 - yWeight) +
                c * (1 - xWeight) * yWeight +
                d * xWeight * yWeight;
            output[i * targetWidth + j] = Math.min(Math.max(value, 0), 255);
        }
    }
    return output;
}
/**
 * Upsamples an image using the Lanczos3 interpolation method. The input image is expected to be in
 * Float32Array format. The output image is in Uint8ClampedArray format. The input image is expected
 * to be in the [0, 1] range. The output image is in the [0, 255] range.
 *
 * @param {Float32Array} input The input image data in Float32Array format.
 * @param {number} srcWidth The width of the source image.
 * @param {number} srcHeight The height of the source image.
 * @param {number} targetWidth The width of the target image.
 * @param {number} targetHeight The height of the target image.
 *
 * @returns {Uint8ClampedArray} The upsampled image data in Uint8ClampedArray format.
 */
export function lanczos3Upsample(input, srcWidth, srcHeight, targetWidth, targetHeight) {
    const output = new Uint8ClampedArray(targetWidth * targetHeight);
    const xRatio = srcWidth / targetWidth;
    const yRatio = srcHeight / targetHeight;
    const lanczos = (x, a) => {
        if (x === 0)
            return 1;
        if (x < 0)
            x = -x;
        if (x < a) {
            const piX = Math.PI * x;
            return (a * Math.sin(piX) * Math.sin(piX / a)) / (piX * piX);
        }
        return 0;
    };
    const a = 3; // Lanczos parameter
    for (let i = 0; i < targetHeight; i++) {
        for (let j = 0; j < targetWidth; j++) {
            const x = j * xRatio;
            const y = i * yRatio;
            const xL = Math.floor(x);
            const yL = Math.floor(y);
            let value = 0;
            let weightSum = 0;
            for (let ky = yL - a + 1; ky <= yL + a; ky++) {
                for (let kx = xL - a + 1; kx <= xL + a; kx++) {
                    if (kx >= 0 && kx < srcWidth && ky >= 0 && ky < srcHeight) {
                        const pixel = input[ky * srcWidth + kx];
                        const weight = lanczos(x - kx, a) * lanczos(y - ky, a);
                        value += pixel * weight;
                        weightSum += weight;
                    }
                }
            }
            output[i * targetWidth + j] = weightSum !== 0 ? Math.round(value / weightSum) : 0;
        }
    }
    return output;
}
export const toAbsoluteURI = (relativeURL, baseURL) => {
    // adapted from - https://github.com/axios/axios/blob/fe7d09bb08fa1c0e414956b7fc760c80459b0a43/lib/helpers/combineURLs.js
    if (!baseURL || relativeURL.startsWith('http')) {
        return new URL(relativeURL).href;
    }
    return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
};
export function compileShader(gl, shader_type, source) {
    var _a;
    const shader = gl.createShader(shader_type);
    if (!shader) {
        throw new Error('[ladon-ts] - error creating shader');
    }
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        const error = (_a = gl.getShaderInfoLog(shader)) !== null && _a !== void 0 ? _a : 'unknown error compiling shader.';
        throw new Error('[ladon-ts] - ' + error);
    }
    return shader;
}
export function linkProgram(gl, vertex_shader, fragment_shader) {
    var _a;
    const program = gl.createProgram();
    if (!program) {
        throw new Error('[ladon-ts] - error creating GPU program');
    }
    gl.attachShader(program, vertex_shader);
    gl.attachShader(program, fragment_shader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        const error = (_a = gl.getProgramInfoLog(program)) !== null && _a !== void 0 ? _a : 'unknown error linking program.';
        throw new Error('[ladon-ts] - ' + error);
    }
    return program;
}
//# sourceMappingURL=data:application/json;base64,