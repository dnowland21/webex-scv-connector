import { PipelineConfig } from '../config';
import { FrameData } from '../generator';
export declare abstract class WebGLRenderer {
    output_canvas: HTMLCanvasElement;
    readonly config: PipelineConfig;
    protected intermediate_canvas?: HTMLCanvasElement;
    protected output_canvas_2d?: CanvasRenderingContext2D;
    protected gl: WebGL2RenderingContext;
    protected image_texture: WebGLTexture;
    protected mask_texture: WebGLTexture;
    protected verts: Float32Array;
    protected vertex_shader_src: string;
    constructor(output_canvas: HTMLCanvasElement, config: PipelineConfig);
    protected getUVCalculation(): "vec2 st = -(gl_FragCoord.xy / u_resolution) + 1.0;" | "vec2 st = vec2((gl_FragCoord.x / u_resolution.x), -(gl_FragCoord.y / u_resolution.y) + 1.0);";
    protected setSharedUniforms(program: WebGLProgram): void;
    protected uploadVideoStream(input: FrameData): void;
    protected postDraw(): void;
}
