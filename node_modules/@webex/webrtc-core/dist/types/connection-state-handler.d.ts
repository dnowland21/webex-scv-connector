import { EventEmitter, EventMap } from './event-emitter';
export declare enum ConnectionState {
    New = "New",// connection attempt has not been started
    Closed = "Closed",// connection closed, there is no way to move out of this state
    Connected = "Connected",// both ICE and DTLS connections are established, media is flowing
    Connecting = "Connecting",// initial connection attempt in progress
    Disconnected = "Disconnected",// connection lost temporarily, the browser is trying to re-establish it automatically
    Failed = "Failed"
}
declare enum ConnectionStateEvents {
    PeerConnectionStateChanged = "PeerConnectionStateChanged",
    IceConnectionStateChanged = "IceConnectionStateChanged"
}
interface ConnectionStateEventHandlers extends EventMap {
    [ConnectionStateEvents.PeerConnectionStateChanged]: (state: RTCPeerConnectionState) => void;
    [ConnectionStateEvents.IceConnectionStateChanged]: (state: RTCIceConnectionState) => void;
}
type GetCurrentStatesCallback = () => {
    connectionState: RTCPeerConnectionState;
    iceState: RTCIceConnectionState;
};
/**
 * Listens on the connection's ICE and DTLS state changes and emits a single
 * event that summarizes all the internal states into a single overall connection state.
 */
export declare class ConnectionStateHandler extends EventEmitter<ConnectionStateEventHandlers> {
    static Events: typeof ConnectionStateEvents;
    private getCurrentStatesCallback;
    /**
     * Creates an instance of ConnectionStateHandler.
     *
     * @param getCurrentStatesCallback - Callback for getting the connection state information
     *                                   from the peer connection.
     */
    constructor(getCurrentStatesCallback: GetCurrentStatesCallback);
    /**
     * Handler for connection state change.
     */
    onPeerConnectionStateChange(): void;
    /**
     * Handler for ice connection state change.
     */
    onIceConnectionStateChange(): void;
    /**
     * Evaluates the overall connection state based on peer connection's
     * connectionState and iceConnectionState.
     *
     * @returns Current overall connection state.
     */
    private evaluateMediaConnectionState;
    /**
     * Gets current connection state.
     *
     * @returns Current connection state.
     */
    getPeerConnectionState(): RTCPeerConnectionState;
    /**
     * Gets current ice connection state.
     *
     * @returns Current ice connection state.
     */
    getIceConnectionState(): RTCIceConnectionState;
    /**
     * Gets current overall connection state.
     *
     * @returns Current overall connection state.
     */
    getConnectionState(): ConnectionState;
}
export {};
//# sourceMappingURL=connection-state-handler.d.ts.map