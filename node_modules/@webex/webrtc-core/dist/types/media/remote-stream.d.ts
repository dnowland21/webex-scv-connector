import { TypedEvent, WithEventsDummyType } from '@webex/ts-events';
import { Stream } from './stream';
export declare enum RemoteMediaState {
    Started = "started",
    Stopped = "stopped"
}
export declare enum RemoteStreamEventNames {
    MediaStateChange = "media-state-change"
}
interface RemoteStreamEvents {
    [RemoteStreamEventNames.MediaStateChange]: TypedEvent<(state: RemoteMediaState) => void>;
}
/**
 * A stream originating from a remote peer.
 */
declare class _RemoteStream extends Stream {
    [RemoteStreamEventNames.MediaStateChange]: TypedEvent<(state: RemoteMediaState) => void>;
    /**
     * Create a RemoteStream from the given values.
     *
     * @param stream - The initial output MediaStream for this Stream.
     */
    constructor(stream: MediaStream);
    /**
     * @inheritdoc
     */
    protected handleMediaStarted(): void;
    /**
     * @inheritdoc
     */
    protected handleMediaStopped(): void;
    /**
     * Helper function to add event handlers to a MediaStreamTrack. See
     * {@link Stream.addTrackHandlersForStreamEvents} for why this is useful.
     *
     * @param track - The MediaStreamTrack.
     */
    private addTrackHandlersForRemoteStreamEvents;
    /**
     * @inheritdoc
     */
    protected addTrackHandlers(track: MediaStreamTrack): void;
    /**
     * @inheritdoc
     */
    protected removeTrackHandlers(track: MediaStreamTrack): void;
    /**
     * Get whether the media on this stream has started or stopped.
     *
     * @returns The state of the media.
     */
    get mediaState(): RemoteMediaState;
    /**
     * @inheritdoc
     */
    getSettings(): MediaTrackSettings;
    /**
     * Replace the existing track on the output stream for a new track.
     *
     * @param newTrack - The track to add to the stream.
     */
    replaceTrack(newTrack: MediaStreamTrack): void;
    /**
     * @inheritdoc
     */
    stop(): void;
}
export declare const RemoteStream: (new (...args: any[]) => {
    on<K extends RemoteStreamEventNames.MediaStateChange, E extends RemoteStreamEvents[K] extends infer T ? T extends RemoteStreamEvents[K] ? T extends TypedEvent<infer X extends (...args: any[]) => void> ? X : never : never : never>(eventName: K, handler: E): void;
    once<K_1 extends RemoteStreamEventNames.MediaStateChange, E_1 extends RemoteStreamEvents[K_1] extends infer T ? T extends RemoteStreamEvents[K_1] ? T extends TypedEvent<infer X extends (...args: any[]) => void> ? X : never : never : never>(eventName: K_1, handler: E_1): void;
    off<K_2 extends RemoteStreamEventNames.MediaStateChange, E_2 extends RemoteStreamEvents[K_2] extends infer T ? T extends RemoteStreamEvents[K_2] ? T extends TypedEvent<infer X extends (...args: any[]) => void> ? X : never : never : never>(eventName: K_2, handler: E_2): void;
}) & typeof _RemoteStream;
export type RemoteStream = _RemoteStream & WithEventsDummyType<RemoteStreamEvents>;
export {};
//# sourceMappingURL=remote-stream.d.ts.map