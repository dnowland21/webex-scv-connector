export declare enum DeviceKind {
    AudioInput = "audioinput",
    AudioOutput = "audiooutput",
    VideoInput = "videoinput"
}
export interface CaptureController {
    setFocusBehavior(behavior: 'focus-capturing-application' | 'focus-captured-surface' | 'no-focus-change'): Promise<void>;
}
/**
 * Prompts the user for permission to use a media input which produces a MediaStream with tracks
 * containing the requested types of media.
 *
 * @param constraints - A MediaStreamConstraints object specifying the types of media to request,
 *     along with any requirements for each type.
 * @returns A Promise whose fulfillment handler receives a MediaStream object when the requested
 *     media has successfully been obtained.
 */
export declare function getUserMedia(constraints: MediaStreamConstraints): Promise<MediaStream>;
/**
 * Prompts the user for permission to use a user's display media and audio. If a video track is
 * absent from the constraints argument, one will still be provided. Includes experimental options
 * found in https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia#options.
 *
 * @param constraints - A MediaStreamConstraints object specifying the types of media to request,
 *     along with any requirements for each type, as well as experimental options.
 * @returns A Promise whose fulfillment handler receives a MediaStream object when the requested
 *     media has successfully been obtained.
 */
export declare function getDisplayMedia(constraints: MediaStreamConstraints & {
    controller?: CaptureController;
    selfBrowserSurface?: 'include' | 'exclude';
    surfaceSwitching?: 'include' | 'exclude';
    systemAudio?: 'include' | 'exclude';
    monitorTypeSurfaces?: 'include' | 'exclude';
}): Promise<MediaStream>;
/**
 * Requests a list of the available media input and output devices, such as microphones, cameras,
 * headsets, and so forth.
 *
 * @returns A Promise that receives an array of MediaDeviceInfo objects when the promise is
 *     fulfilled.
 */
export declare function enumerateDevices(): Promise<MediaDeviceInfo[]>;
/**
 * Adds the callback handler to be notified of a media device change (for example, a headset is
 * unplugged from the user's computer).
 *
 * @param handler - The callback function to execute.
 */
export declare function setOnDeviceChangeHandler(handler: () => void): void;
/**
 * Check to see if the user has granted the application permission to use their devices.
 *
 * @param deviceKinds - Array of DeviceKind items.
 * @returns True if device permissions exist, false if otherwise.
 */
export declare function checkDevicePermissions(deviceKinds: DeviceKind[]): Promise<boolean>;
/**
 * Ensures that the user has granted permissions to the microphone and camera.
 *
 * @param deviceKinds - Array of DeviceKind items.
 * @param callback - Function that will be executed while device permissions are granted. After this
 *    returns, permissions (for example device labels in Firefox) may not be available anymore.
 * @returns The callback's response.
 */
export declare function ensureDevicePermissions<T>(deviceKinds: DeviceKind[], callback: () => Promise<T>): Promise<T>;
//# sourceMappingURL=index.d.ts.map