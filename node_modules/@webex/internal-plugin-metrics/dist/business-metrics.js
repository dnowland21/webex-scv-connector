"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");
var _Object$keys = require("@babel/runtime-corejs2/core-js/object/keys");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors");
var _Object$defineProperties = require("@babel/runtime-corejs2/core-js/object/define-properties");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));
var _genericMetrics = _interopRequireDefault(require("./generic-metrics"));
function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * @description Util class to handle Business Metrics
 * @export
 * @class BusinessMetrics
 */
var BusinessMetrics = exports.default = /*#__PURE__*/function (_GenericMetrics) {
  (0, _inherits2.default)(BusinessMetrics, _GenericMetrics);
  var _super = _createSuper(BusinessMetrics);
  function BusinessMetrics() {
    (0, _classCallCheck2.default)(this, BusinessMetrics);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(BusinessMetrics, [{
    key: "buildEvent",
    value:
    /**
     * Build the metric event to submit.
     * @param {string} name of the metric
     * @param {EventPayload} payload user payload of the metric
     * @param {EventPayload} metadata to include outside of eventPayload.value
     * @returns {MetricEvent} The constructed metric event
     */
    function buildEvent(_ref) {
      var name = _ref.name,
        payload = _ref.payload,
        metadata = _ref.metadata;
      return {
        type: ['business'],
        eventPayload: _objectSpread(_objectSpread({
          key: name,
          client_timestamp: new Date().toISOString()
        }, metadata), {}, {
          value: payload
        })
      };
    }

    /**
     * Submit a business metric to our metrics endpoint.
     * routes to the correct table with the correct schema payload by table
     * https://confluence-eng-gpk2.cisco.com/conf/display/WAP/Business+metrics++-%3E+ROMA
     * @param {string} name of the metric, ignored if going to wbxapp_callend_metrics
     * @param {EventPayload} payload user payload of the metric
     * @param {Table} table optional - to submit the metric to and adapt the sent schema
     * @param {EventPayload} metadata optional - to include outside of eventPayload.value
     * @returns {Promise<any>}
     */
  }, {
    key: "submitBusinessEvent",
    value: function submitBusinessEvent(_ref2) {
      var name = _ref2.name,
        payload = _ref2.payload,
        table = _ref2.table,
        metadata = _ref2.metadata;
      if (!table) {
        table = 'default';
      }
      if (!metadata) {
        metadata = {};
      }
      if (!metadata.appType) {
        metadata.appType = 'Web Client';
      }
      switch (table) {
        case 'wbxapp_callend_metrics':
          {
            // https://confluence-eng-gpk2.cisco.com/conf/display/WAP/Table+wbxapp_callend_metrics
            var callEndEvent = this.buildEvent({
              name: 'callEnd',
              payload: payload,
              metadata: metadata
            });
            return this.submitEvent({
              kind: 'business-events:wbxapp_callend_metrics -> ',
              name: 'wbxapp_callend_metrics',
              event: callEndEvent
            });
          }
        case 'business_metrics':
          {
            // all event payload keys are converted into a hex string value
            // unfortunately, the pinot team does not allow changes to the schema of business_metrics
            // so we have to shim this layer specifically for this
            // https://confluence-eng-gpk2.cisco.com/conf/display/WAP/Table%3A+business_metrics
            var businessEvent = this.buildEvent({
              name: name,
              payload: _objectSpread(_objectSpread(_objectSpread({}, this.getContext()), this.getBrowserDetails()), payload),
              metadata: metadata
            });
            return this.submitEvent({
              kind: 'business-events:business_metrics -> ',
              name: name,
              event: businessEvent
            });
          }
        case 'business_ucf':
        case 'default':
        default:
          {
            // all event payload keys are converted into a hex string value
            // https://confluence-eng-gpk2.cisco.com/conf/display/WAP/Business+metrics++-%3E+ROMA
            var defaultEvent = this.buildEvent({
              name: name,
              payload: payload,
              metadata: _objectSpread({
                context: this.getContext(),
                browserDetails: this.getBrowserDetails()
              }, metadata)
            });
            return this.submitEvent({
              kind: 'business-events:default -> ',
              name: name,
              event: defaultEvent
            });
          }
      }
    }
  }]);
  return BusinessMetrics;
}(_genericMetrics.default);
//# sourceMappingURL=business-metrics.js.map
