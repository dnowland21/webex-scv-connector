{"version":3,"names":[],"sources":["metrics.types.ts"],"sourcesContent":["import {\n  ClientEvent as RawClientEvent,\n  Event as RawEvent,\n  MediaQualityEvent as RawMediaQualityEvent,\n} from '@webex/event-dictionary-ts';\n\nexport type Event = Omit<RawEvent, 'event'> & {event: RawClientEvent | RawMediaQualityEvent};\n\nexport type ClientEventError = NonNullable<RawClientEvent['errors']>[0];\n\nexport type EnvironmentType = NonNullable<RawEvent['origin']['environment']>;\n\nexport type NewEnvironmentType = NonNullable<RawEvent['origin']['newEnvironment']>;\n\nexport type ClientLaunchMethodType = NonNullable<\n  RawEvent['origin']['clientInfo']\n>['clientLaunchMethod'];\n\nexport type ClientUserNameInput = NonNullable<RawClientEvent['userNameInput']>;\n\nexport type ClientEmailInput = NonNullable<RawClientEvent['emailInput']>;\n\nexport type BrowserLaunchMethodType = NonNullable<\n  RawEvent['origin']['clientInfo']\n>['browserLaunchMethod'];\n\nexport type MetricEventProduct = 'webex' | 'wxcc_desktop' | 'wxcc_crm' | 'wxcc_sdk';\n\nexport type MetricEventAgent = 'user' | 'browser' | 'system' | 'sdk' | 'redux' | 'service' | 'api';\n\nexport type MetricEventVerb =\n  | 'abort'\n  | 'accept'\n  | 'activate'\n  | 'apply'\n  | 'answer'\n  | 'authorize'\n  | 'build'\n  | 'cancel'\n  | 'change'\n  | 'click'\n  | 'close'\n  | 'complete'\n  | 'connect'\n  | 'create'\n  | 'deactivate'\n  | 'decrypt'\n  | 'delete'\n  | 'deliver'\n  | 'destroy'\n  | 'disable'\n  | 'disconnect'\n  | 'dismiss'\n  | 'display'\n  | 'download'\n  | 'edit'\n  | 'enable'\n  | 'encrypt'\n  | 'end'\n  | 'expire'\n  | 'fail'\n  | 'fetch'\n  | 'fire'\n  | 'generate'\n  | 'get'\n  | 'hide'\n  | 'hover'\n  | 'ignore'\n  | 'initialize'\n  | 'initiate'\n  | 'invalidate'\n  | 'join'\n  | 'list'\n  | 'load'\n  | 'login'\n  | 'logout'\n  | 'notify'\n  | 'offer'\n  | 'open'\n  | 'press'\n  | 'receive'\n  | 'refer'\n  | 'refresh'\n  | 'register'\n  | 'release'\n  | 'reload'\n  | 'reject'\n  | 'request'\n  | 'reset'\n  | 'resize'\n  | 'respond'\n  | 'retry'\n  | 'revoke'\n  | 'save'\n  | 'search'\n  | 'select'\n  | 'send'\n  | 'set'\n  | 'sign'\n  | 'start'\n  | 'submit'\n  | 'switch'\n  | 'sync'\n  | 'toggle'\n  | 'transfer'\n  | 'unregister'\n  | 'update'\n  | 'upload'\n  | 'use'\n  | 'validate'\n  | 'view'\n  | 'visit'\n  | 'wait'\n  | 'warn'\n  | 'exit';\n\nexport type MetricEventJoinFlowVersion = 'Other' | 'NewFTE';\nexport type MetricEventMeetingJoinPhase = 'pre-join' | 'join' | 'in-meeting';\n\nexport type SubmitClientEventOptions = {\n  meetingId?: string;\n  mediaConnections?: any[];\n  rawError?: any;\n  correlationId?: string;\n  sessionCorrelationId?: string;\n  preLoginId?: string;\n  environment?: EnvironmentType;\n  newEnvironmentType?: NewEnvironmentType;\n  clientLaunchMethod?: ClientLaunchMethodType;\n  browserLaunchMethod?: BrowserLaunchMethodType;\n  webexConferenceIdStr?: string;\n  globalMeetingId?: string;\n  joinFlowVersion?: MetricEventJoinFlowVersion;\n  meetingJoinPhase?: MetricEventMeetingJoinPhase;\n  triggeredTime?: string;\n  emailInput?: ClientEmailInput;\n  userNameInput?: ClientUserNameInput;\n};\n\nexport type SubmitMQEOptions = {\n  meetingId: string;\n  mediaConnections?: any[];\n  networkType?: Event['origin']['networkType'];\n  webexConferenceIdStr?: string;\n  globalMeetingId?: string;\n};\n\nexport type InternalEvent = {\n  name:\n    | 'internal.client.meetinginfo.request'\n    | 'internal.client.meetinginfo.response'\n    | 'internal.register.device.request'\n    | 'internal.register.device.response'\n    | 'internal.reset.join.latencies'\n    | 'internal.client.meeting.click.joinbutton'\n    | 'internal.host.meeting.participant.admitted'\n    | 'internal.client.meeting.interstitial-window.showed'\n    | 'internal.client.interstitial-window.click.joinbutton'\n    | 'internal.client.add-media.turn-discovery.start'\n    | 'internal.client.add-media.turn-discovery.end';\n\n  payload?: never;\n  options?: never;\n};\n\nexport interface ClientEvent {\n  name: RawClientEvent['name'];\n  payload?: RawClientEvent;\n  options?: SubmitClientEventOptions;\n}\n\nexport interface DeviceContext {\n  app: {version: string};\n  device: {id: string};\n  locale: string;\n  os: {\n    name: string;\n    version: string;\n  };\n}\n\nexport type MetricType = 'behavioral' | 'operational' | 'business';\n\nexport type Table = 'wbxapp_callend_metrics' | 'business_metrics' | 'business_ucf' | 'default';\n\ntype InternalEventPayload = string | number | boolean;\nexport type EventPayload = Record<string, InternalEventPayload>;\nexport type BehavioralEventPayload = EventPayload; // for compatibilty, can be remove after wxcc-desktop did change their imports.\n\nexport interface BusinessEventPayload {\n  metricName: string;\n  timestamp: number;\n  context: DeviceContext;\n  browserDetails: EventPayload;\n  value: EventPayload;\n}\n\nexport interface BusinessEvent {\n  type: string[];\n  eventPayload: BusinessEventPayload;\n}\n\nexport interface TaggedEvent {\n  context: DeviceContext;\n  metricName: string;\n  tags: EventPayload;\n  timestamp: number;\n  type: [MetricType];\n}\n\nexport type BehavioralEvent = TaggedEvent;\nexport type OperationalEvent = TaggedEvent;\n\nexport interface FeatureEvent {\n  // TODO: not implemented\n  name: never;\n  payload?: never;\n  options?: never;\n}\n\nexport interface MediaQualityEvent {\n  name: RawMediaQualityEvent['name'];\n  payload?: RawMediaQualityEvent;\n  options: SubmitMQEOptions;\n}\n\nexport type RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends (infer U)[]\n    ? RecursivePartial<U>[]\n    : T[P] extends object\n    ? RecursivePartial<T[P]>\n    : T[P];\n};\n\nexport type MetricEventNames =\n  | InternalEvent['name']\n  | ClientEvent['name']\n  | BehavioralEvent['metricName']\n  | OperationalEvent['metricName']\n  | BusinessEvent['eventPayload']['metricName']\n  | FeatureEvent['name']\n  | MediaQualityEvent['name'];\n\nexport type ClientInfo = NonNullable<RawEvent['origin']['clientInfo']>;\nexport type ClientType = NonNullable<RawEvent['origin']['clientInfo']>['clientType'];\nexport type SubClientType = NonNullable<RawEvent['origin']['clientInfo']>['subClientType'];\nexport type NetworkType = NonNullable<RawEvent['origin']>['networkType'];\n\nexport type ClientSubServiceType = ClientEvent['payload']['webexSubServiceType'];\nexport type ClientEventPayload = RecursivePartial<ClientEvent['payload']>;\nexport type ClientEventLeaveReason = ClientEvent['payload']['leaveReason'];\nexport type ClientEventPayloadError = ClientEvent['payload']['errors'];\n\nexport type MediaQualityEventAudioSetupDelayPayload = NonNullable<\n  MediaQualityEvent['payload']\n>['audioSetupDelay'];\nexport type MediaQualityEventVideoSetupDelayPayload = NonNullable<\n  MediaQualityEvent['payload']\n>['videoSetupDelay'];\n\nexport type SubmitMQEPayload = RecursivePartial<MediaQualityEvent['payload']> & {\n  intervals: NonNullable<MediaQualityEvent['payload']>['intervals'];\n};\n\nexport type SubmitInternalEvent = (args: {\n  name: InternalEvent['name'];\n  payload?: RecursivePartial<InternalEvent['payload']>;\n  options?: any;\n}) => void;\n\nexport type SubmitBehavioralEvent = (args: {\n  product: MetricEventProduct;\n  agent: MetricEventAgent;\n  target: string;\n  verb: MetricEventVerb;\n  payload?: EventPayload;\n}) => void;\n\nexport type SubmitClientEvent = (args: {\n  name: ClientEvent['name'];\n  payload?: RecursivePartial<ClientEvent['payload']>;\n  options?: SubmitClientEventOptions;\n}) => Promise<any>;\n\nexport type SubmitOperationalEvent = (args: {\n  name: OperationalEvent['metricName'];\n  payload: EventPayload;\n}) => void;\n\nexport type SubmitBusinessEvent = (args: {\n  name: OperationalEvent['metricName'];\n  payload: EventPayload;\n  metadata?: EventPayload;\n  table?: Table;\n}) => void;\n\nexport type SubmitMQE = (args: {\n  name: MediaQualityEvent['name'];\n  payload: SubmitMQEPayload;\n  options: any;\n}) => void;\n\nexport type BuildClientEventFetchRequestOptions = (args: {\n  name: ClientEvent['name'];\n  payload?: RecursivePartial<ClientEvent['payload']>;\n  options?: SubmitClientEventOptions;\n}) => Promise<any>;\n\nexport type PreComputedLatencies =\n  | 'internal.client.pageJMT'\n  | 'internal.download.time'\n  | 'internal.get.cluster.time'\n  | 'internal.click.to.interstitial'\n  | 'internal.refresh.captcha.time'\n  | 'internal.exchange.ci.token.time'\n  | 'internal.get.u2c.time'\n  | 'internal.call.init.join.req'\n  | 'internal.other.app.api.time'\n  | 'internal.api.fetch.intelligence.models';\n\nexport interface IdType {\n  meetingId?: string;\n  callId?: string;\n}\n\nexport interface IMetricsAttributes {\n  type: string;\n  version: string;\n  userId: string;\n  correlationId: string;\n  connectionId: string;\n  data: any[];\n  meetingId?: string;\n  callId?: string;\n}\n\nexport interface DelayedClientEvent {\n  name: ClientEvent['name'];\n  payload?: RecursivePartial<ClientEvent['payload']>;\n  options?: SubmitClientEventOptions;\n}\n"],"mappings":""}