{"version":3,"names":["_common","require","_uuid","_interopRequireDefault","_lodash","_webexCore","_metrics","_callDiagnosticMetrics","_config","_callDiagnosticMetricsBatcher","_preloginMetricsBatcher","_config2","ownKeys","e","r","t","_Object$keys","_Object$getOwnPropertySymbols","o","filter","_Object$getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","Object","forEach","_defineProperty2","default","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","_Reflect$construct","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","_BrowserDetection","BrowserDetection","getOSVersion","getBrowserName","getBrowserVersion","CallDiagnosticMetrics","exports","_StatelessWebexPlugin","_inherits2","_super","_this","_classCallCheck2","_len","args","Array","_key","concat","_assertThisInitialized2","_weakMap","options","_promise","resolve","event","valid","preLoginId","finalEvent","eventPayload","type","preLoginMetricsBatcher","savePreLoginId","request","logger","webex","callDiagnosticEventsBatcher","CallDiagnosticEventsBatcher","parent","PreLoginMetricsBatcher","_createClass2","key","value","getCurLoginType","canAuthorize","credentials","isUnverifiedGuest","getIsConvergedArchitectureEnabled","_ref","meetingId","_meeting$meetingInfo","meeting","meetings","getBasicMeetingInformation","meetingInfo","enableConvergedArchitecture","undefined","getSubServiceType","webexScheduled","enableEvent","pmr","WEBEX_SUB_SERVICE_TYPES","PMR","SCHEDULED_MEETING","isConvergedWebinarWebcast","WEBCAST","WEBINAR","getOrigin","_this$webex$meetings$","_this$webex$meetings$2","_this$webex$meetings$3","_this$webex$meetings$4","_this$webex$meetings$5","_this$webex$meetings$6","defaultClientType","config","metrics","clientType","defaultSubClientType","subClientType","providedClientVersion","clientVersion","defaultSDKClientVersion","CLIENT_NAME","version","versionMetadata","extractVersionMetadata","hasLoggedBrowserSerial","log","CALL_DIAGNOSTIC_LOG_IDENTIFIER","_stringify","getBrowserSerial","_this$webex$meetings","_this$webex$meetings$7","_this$webex$meetings$8","_this$webex$meetings$9","_this$webex$meetings$10","_this$webex$meetings$11","origin","name","networkType","userAgent","userAgentToString","clientName","webexVersion","clientInfo","publicNetworkPrefix","anonymizeIPAddress","geoHintInfo","clientAddress","localNetworkPrefix","meetingCollection","get","statsAnalyzer","getLocalIpAddress","osVersion","os","getOSNameInternal","browser","browserVersion","environment","newEnvironment","clientLaunchMethod","browserLaunchMethod","Error","getIdentifiers","_meeting$locusInfo","_meeting$meetingInfo2","_meeting$meetingInfo3","_meeting$meetingInfo6","_meeting$meetingInfo8","mediaConnections","correlationId","webexConferenceIdStr","globalMeetingId","sessionCorrelationId","identifiers","device","_ref2","installationId","userId","deviceId","url","orgId","locusUrl","internal","services","machineId","locusInfo","fullState","locusId","split","pop","locusStartTime","lastActive","confIdStr","confID","_meeting$meetingInfo4","_meeting$meetingInfo5","_meeting$meetingInfo7","siteName","_meeting$meetingInfo9","webexSiteName","_mediaConnections$","_mediaConnections$2","mediaAgentAlias","mediaAgentGroupId","prepareDiagnosticEvent","eventData","_this$webex$meetings$12","triggeredTime","eventId","uuid","v4","originTime","triggered","Date","toISOString","sent","senderCountryCode","countryCode","clearEmptyKeysRecursively","submitFeatureEvent","submitMQE","_ref3","payload","console","warn","submitClientMetrics","CALL_DIAGNOSTIC_EVENT_FAILED_TO_SEND","fields","clientEventObject","canProceed","webClientDomain","window","location","hostname","intervals","callingServiceType","meetingJoinInfo","clientSignallingProtocol","sourceMetadata","applicationSoftwareType","applicationSoftwareVersion","mediaEngineSoftwareType","mediaEngineSoftwareVersion","startTime","merge","diagnosticEvent","validator","submitToCallDiagnostics","getErrorPayloadForClientErrorCode","_ref4","clientErrorCode","serviceErrorCode","serviceErrorName","rawErrorMessage","payloadOverrides","httpStatusCode","error","partialParsedError","CLIENT_ERROR_CODE_TO_ERROR_PAYLOAD","fatal","shownToUser","category","errorCode","errorData","errorName","clearErrorCache","eventErrorCache","generateClientEventErrorPayload","rawError","_rawError$error","_rawError$error$body","_rawError$body","_rawError$body2","_rawError$body3","_rawError$body3$reaso","cachedError","message","statusCode","isBrowserMediaErrorName","BROWSER_MEDIA_ERROR_NAME_TO_CLIENT_ERROR_CODES_MAP","isSdpOfferCreationError","_rawError$cause","causeType","cause","SDP_OFFER_CREATION_ERROR_MAP","GENERAL","body","code","reason","reasonCode","SERVICE_ERROR_CODES_TO_CLIENT_ERROR_CODES_MAP","isLocusServiceErrorCode","NEW_LOCUS_ERROR_CLIENT_CODE","isMeetingInfoServiceError","MEETING_INFO_LOOKUP_ERROR_CLIENT_CODE","isNetworkError","NETWORK_ERROR","isUnauthorizedError","AUTHENTICATION_FAILED_CODE","UNKNOWN_ERROR","set","createClientEventObjectInMeeting","_ref5","_this$webex$meetings2","_this$webex$meetings3","_this$webex$meetings4","_options$joinFlowVers","_meeting$callStateFor","errors","userType","getCurUserType","loginType","callStateForMetrics","isConvergedArchitectureEnabled","userNameInput","emailInput","webexSubServiceType","webClientPreload","joinFlowVersion","meetingJoinedTime","isoLocalClientMeetingJoinTime","meetingJoinPhase","createClientEventObjectPreMeeting","_ref6","_this$webex$meetings5","_this$webex$meetings6","_this$webex$meetings7","prepareClientEvent","_ref7","_this$generateClientE","_this$generateClientE2","_slicedToArray2","generatedError","cached","submitClientEvent","_ref8","delaySubmitEvent","delayedOptions","delayedClientEvents","submitToCallDiagnosticsPreLogin","submitDelayedClientEvents","overrides","_this2","promises","map","delayedSubmitClientEventParams","optionsWithOverrides","all","_buildClientEventFetchRequestOptions","_asyncToGenerator2","_regenerator","mark","_callee","_ref9","clientEvent","wrap","_callee$","_context","prev","next","prepareDiagnosticMetricItem","method","service","resource","headers","waitForServiceTimeout","authorization","abrupt","prepareFetchOptions","stop","buildClientEventFetchRequestOptions","_x","isServiceErrorExpected","clientErrorPayload","setDeviceInfo","StatelessWebexPlugin"],"sources":["call-diagnostic-metrics.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable valid-jsdoc */\nimport {BrowserDetection, getBrowserSerial} from '@webex/common';\nimport uuid from 'uuid';\nimport {merge} from 'lodash';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\nimport {getOSNameInternal} from '../metrics';\n\nimport {\n  anonymizeIPAddress,\n  clearEmptyKeysRecursively,\n  isLocusServiceErrorCode,\n  prepareDiagnosticMetricItem,\n  userAgentToString,\n  extractVersionMetadata,\n  isMeetingInfoServiceError,\n  isBrowserMediaErrorName,\n  isNetworkError,\n  isUnauthorizedError,\n  isSdpOfferCreationError,\n} from './call-diagnostic-metrics.util';\nimport {CLIENT_NAME} from '../config';\nimport {\n  Event,\n  ClientType,\n  SubClientType,\n  NetworkType,\n  EnvironmentType,\n  NewEnvironmentType,\n  ClientEvent,\n  SubmitClientEventOptions,\n  MediaQualityEvent,\n  SubmitMQEOptions,\n  SubmitMQEPayload,\n  ClientLaunchMethodType,\n  ClientEventError,\n  ClientEventPayload,\n  ClientInfo,\n  ClientEventPayloadError,\n  ClientSubServiceType,\n  BrowserLaunchMethodType,\n  DelayedClientEvent,\n} from '../metrics.types';\nimport CallDiagnosticEventsBatcher from './call-diagnostic-metrics-batcher';\nimport PreLoginMetricsBatcher from '../prelogin-metrics-batcher';\n\nimport {\n  CLIENT_ERROR_CODE_TO_ERROR_PAYLOAD,\n  CALL_DIAGNOSTIC_EVENT_FAILED_TO_SEND,\n  NEW_LOCUS_ERROR_CLIENT_CODE,\n  SERVICE_ERROR_CODES_TO_CLIENT_ERROR_CODES_MAP,\n  UNKNOWN_ERROR,\n  BROWSER_MEDIA_ERROR_NAME_TO_CLIENT_ERROR_CODES_MAP,\n  MEETING_INFO_LOOKUP_ERROR_CLIENT_CODE,\n  CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n  NETWORK_ERROR,\n  AUTHENTICATION_FAILED_CODE,\n  WEBEX_SUB_SERVICE_TYPES,\n  SDP_OFFER_CREATION_ERROR_MAP,\n} from './config';\n\nconst {getOSVersion, getBrowserName, getBrowserVersion} = BrowserDetection();\n\ntype GetOriginOptions = {\n  clientType: ClientType;\n  subClientType: SubClientType;\n  networkType?: NetworkType;\n  clientLaunchMethod?: ClientLaunchMethodType;\n  browserLaunchMethod?: BrowserLaunchMethodType;\n  environment?: EnvironmentType;\n  newEnvironment?: NewEnvironmentType;\n};\n\ntype GetIdentifiersOptions = {\n  meeting?: any;\n  mediaConnections?: any[];\n  correlationId?: string;\n  sessionCorrelationId?: string;\n  preLoginId?: string;\n  globalMeetingId?: string;\n  webexConferenceIdStr?: string;\n};\n\n/**\n * @description Util class to handle Call Analyzer Metrics\n * @export\n * @class CallDiagnosticMetrics\n */\nexport default class CallDiagnosticMetrics extends StatelessWebexPlugin {\n  // @ts-ignore\n  private callDiagnosticEventsBatcher: CallDiagnosticEventsBatcher;\n  // @ts-ignore\n  private preLoginMetricsBatcher: PreLoginMetricsBatcher;\n\n  private logger: any; // to avoid adding @ts-ignore everywhere\n  private hasLoggedBrowserSerial: boolean;\n  private device: any;\n  private delayedClientEvents: DelayedClientEvent[] = [];\n  private eventErrorCache: WeakMap<any, any> = new WeakMap();\n\n  // the default validator before piping an event to the batcher\n  // this function can be overridden by the user\n  public validator: (options: {\n    type: 'mqe' | 'ce';\n    event: Event;\n  }) => Promise<{event: Event; valid: boolean}> = (options: {type: 'mqe' | 'ce'; event: Event}) =>\n    Promise.resolve({event: options?.event, valid: true});\n\n  /**\n   * Constructor\n   * @param args\n   */\n  constructor(...args) {\n    super(...args);\n    // @ts-ignore\n    this.logger = this.webex.logger;\n    // @ts-ignore\n    this.callDiagnosticEventsBatcher = new CallDiagnosticEventsBatcher({}, {parent: this.webex});\n    // @ts-ignore\n    this.preLoginMetricsBatcher = new PreLoginMetricsBatcher({}, {parent: this.webex});\n  }\n\n  /**\n   * Returns the login type of the current user\n   * @returns one of 'login-ci','unverified-guest', null\n   */\n  getCurLoginType() {\n    // @ts-ignore\n    if (this.webex.canAuthorize) {\n      // @ts-ignore\n      return this.webex.credentials.isUnverifiedGuest ? 'unverified-guest' : 'login-ci';\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns if the meeting has converged architecture enabled\n   * @param options.meetingId\n   */\n  getIsConvergedArchitectureEnabled({meetingId}: {meetingId?: string}): boolean {\n    if (meetingId) {\n      // @ts-ignore\n      const meeting = this.webex.meetings.getBasicMeetingInformation(meetingId);\n\n      return meeting?.meetingInfo?.enableConvergedArchitecture;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Returns meeting's subServiceType\n   * @param meeting\n   * @returns\n   */\n  getSubServiceType(meeting?: any): ClientSubServiceType {\n    if (meeting) {\n      // @ts-ignore\n      const meetingInfo = meeting?.meetingInfo;\n      // if not Scheduled, not Webinar, pmr - then pmr\n      if (!meetingInfo?.webexScheduled && !meetingInfo?.enableEvent && meetingInfo?.pmr) {\n        return WEBEX_SUB_SERVICE_TYPES.PMR;\n      }\n      // if Scheduled, not Webinar, not pmr - then ScheduledMeeting\n      if (meetingInfo?.webexScheduled && !meetingInfo?.enableEvent && !meetingInfo?.pmr) {\n        return WEBEX_SUB_SERVICE_TYPES.SCHEDULED_MEETING;\n      }\n\n      // if ConvergedArchitecture enable and isConvergedWebinarWebcast -- then webcast\n      if (meetingInfo?.enableConvergedArchitecture && meetingInfo?.enableEvent) {\n        return meetingInfo?.isConvergedWebinarWebcast\n          ? WEBEX_SUB_SERVICE_TYPES.WEBCAST\n          : WEBEX_SUB_SERVICE_TYPES.WEBINAR;\n      }\n\n      // if Scheduled, enable event, not pmr - then Webinar\n      if (meetingInfo?.webexScheduled && meetingInfo?.enableEvent && !meetingInfo?.pmr) {\n        return WEBEX_SUB_SERVICE_TYPES.WEBINAR;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Get origin object for Call Diagnostic Event payload.\n   * @param options\n   * @param meetingId\n   * @returns\n   */\n  getOrigin(options: GetOriginOptions, meetingId?: string) {\n    const defaultClientType: ClientType =\n      // @ts-ignore\n      this.webex.meetings.config?.metrics?.clientType;\n    const defaultSubClientType: SubClientType =\n      // @ts-ignore\n      this.webex.meetings.config?.metrics?.subClientType;\n    // @ts-ignore\n    const providedClientVersion: string = this.webex.meetings.config?.metrics?.clientVersion;\n    // @ts-ignore\n    const defaultSDKClientVersion = `${CLIENT_NAME}/${this.webex.version}`;\n\n    let versionMetadata: Pick<ClientInfo, 'majorVersion' | 'minorVersion'> = {};\n\n    // sdk version split doesn't really make sense for now...\n    if (providedClientVersion) {\n      versionMetadata = extractVersionMetadata(providedClientVersion);\n    }\n\n    if (!this.hasLoggedBrowserSerial) {\n      this.logger.log(\n        CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n        `CallDiagnosticMetrics: @createClientEventObjectInMeeting => collected browser data`,\n        JSON.stringify(getBrowserSerial())\n      );\n\n      this.hasLoggedBrowserSerial = true;\n    }\n\n    if (\n      (defaultClientType && defaultSubClientType) ||\n      (options.clientType && options.subClientType)\n    ) {\n      const origin: Event['origin'] = {\n        name: 'endpoint',\n        networkType: options?.networkType || 'unknown',\n        userAgent: userAgentToString({\n          // @ts-ignore\n          clientName: this.webex.meetings?.config?.metrics?.clientName,\n          // @ts-ignore\n          webexVersion: this.webex.version,\n        }),\n        clientInfo: {\n          clientType: options?.clientType || defaultClientType,\n          clientVersion: providedClientVersion || defaultSDKClientVersion,\n          ...versionMetadata,\n          publicNetworkPrefix:\n            // @ts-ignore\n            anonymizeIPAddress(this.webex.meetings.geoHintInfo?.clientAddress) || undefined,\n          localNetworkPrefix:\n            anonymizeIPAddress(\n              // @ts-ignore\n              this.webex.meetings.meetingCollection\n                .get(meetingId)\n                ?.statsAnalyzer?.getLocalIpAddress()\n            ) || undefined,\n          osVersion: getOSVersion() || 'unknown',\n          subClientType: options?.subClientType || defaultSubClientType,\n          os: getOSNameInternal(),\n          browser: getBrowserName(),\n          browserVersion: getBrowserVersion(),\n        },\n      };\n\n      if (meetingId) {\n        // @ts-ignore\n        const meeting = this.webex.meetings.getBasicMeetingInformation(meetingId);\n        if (meeting?.environment) {\n          origin.environment = meeting.environment;\n        }\n      }\n\n      if (options?.environment) {\n        origin.environment = options.environment;\n      }\n\n      if (options?.newEnvironment) {\n        origin.newEnvironment = options.newEnvironment;\n      }\n\n      if (options?.clientLaunchMethod) {\n        origin.clientInfo.clientLaunchMethod = options.clientLaunchMethod;\n      }\n\n      if (options?.browserLaunchMethod) {\n        origin.clientInfo.browserLaunchMethod = options.browserLaunchMethod;\n      }\n\n      return origin;\n    }\n\n    throw new Error(\"ClientType and SubClientType can't be undefined\");\n  }\n\n  /**\n   * Gather identifier details for call diagnostic payload.\n   * @throws Error if initialization fails.\n   * @param options\n   */\n  getIdentifiers(options: GetIdentifiersOptions) {\n    const {\n      meeting,\n      mediaConnections,\n      correlationId,\n      webexConferenceIdStr,\n      globalMeetingId,\n      preLoginId,\n      sessionCorrelationId,\n    } = options;\n    const identifiers: Event['event']['identifiers'] = {\n      correlationId: 'unknown', // concerned with setting this to unknown. This will fail diagnostic events parsing because it's not a uuid pattern\n    };\n\n    if (meeting) {\n      identifiers.correlationId = meeting.correlationId;\n      if (meeting.sessionCorrelationId) {\n        identifiers.sessionCorrelationId = meeting.sessionCorrelationId;\n      }\n    }\n\n    if (sessionCorrelationId) {\n      identifiers.sessionCorrelationId = sessionCorrelationId;\n    }\n\n    if (sessionCorrelationId) {\n      identifiers.sessionCorrelationId = sessionCorrelationId;\n    }\n\n    if (correlationId) {\n      identifiers.correlationId = correlationId;\n    }\n\n    // TODO: should we use patterns.uuid to validate correlationId and session correlation id? they will fail the diagnostic events validation pipeline if improperly formatted\n\n    if (this.device) {\n      const {device} = this;\n      const {installationId} = device?.config || {};\n\n      identifiers.userId = device?.userId || preLoginId;\n      identifiers.deviceId = device?.url;\n      identifiers.orgId = device?.orgId;\n      // @ts-ignore\n      identifiers.locusUrl = this.webex.internal.services.get('locus');\n\n      if (installationId) {\n        identifiers.machineId = installationId;\n      }\n    }\n\n    if (meeting?.locusInfo?.fullState) {\n      identifiers.locusUrl = meeting.locusUrl;\n      identifiers.locusId = meeting.locusUrl && meeting.locusUrl.split('/').pop();\n      identifiers.locusStartTime =\n        meeting.locusInfo.fullState && meeting.locusInfo.fullState.lastActive;\n    }\n\n    if (meeting?.meetingInfo?.confIdStr || meeting?.meetingInfo?.confID) {\n      identifiers.webexConferenceIdStr = `${\n        meeting.meetingInfo?.confIdStr || meeting.meetingInfo?.confID\n      }`;\n    }\n\n    if (meeting?.meetingInfo?.meetingId) {\n      identifiers.globalMeetingId = meeting.meetingInfo?.meetingId;\n    }\n\n    if (meeting?.meetingInfo?.siteName) {\n      identifiers.webexSiteName = meeting.meetingInfo?.siteName;\n    }\n\n    if (mediaConnections) {\n      identifiers.mediaAgentAlias = mediaConnections?.[0]?.mediaAgentAlias;\n      identifiers.mediaAgentGroupId = mediaConnections?.[0]?.mediaAgentGroupId;\n    }\n\n    if (!identifiers?.webexConferenceIdStr && webexConferenceIdStr) {\n      identifiers.webexConferenceIdStr = `${webexConferenceIdStr}`;\n    }\n\n    if (!identifiers?.globalMeetingId && globalMeetingId) {\n      identifiers.globalMeetingId = globalMeetingId;\n    }\n\n    if (identifiers.correlationId === undefined) {\n      throw new Error('Identifiers initialization failed.');\n    }\n\n    return identifiers;\n  }\n\n  /**\n   * Create diagnostic event, which can hold client event, feature event or MQE event data.\n   * This just initiates the shared properties that are required for all the 3 event categories.\n   * @param eventData\n   * @param options\n   * @returns\n   */\n  prepareDiagnosticEvent(eventData: Event['event'], options: any) {\n    const {meetingId, triggeredTime} = options;\n    const origin = this.getOrigin(options, meetingId);\n\n    const event: Event = {\n      eventId: uuid.v4(),\n      version: 1,\n      origin,\n      originTime: {\n        triggered: triggeredTime || new Date().toISOString(),\n        // is overridden in prepareRequest batcher\n        sent: 'not_defined_yet',\n      },\n      // @ts-ignore\n      senderCountryCode: this.webex.meetings.geoHintInfo?.countryCode,\n      event: eventData,\n    };\n\n    // sanitize (remove empty properties, CA requires it)\n    // but we don't want to sanitize MQE as most of the times\n    // values will be 0, [] etc, and they are required.\n    if (eventData.name !== 'client.mediaquality.event') {\n      clearEmptyKeysRecursively(event);\n    }\n\n    return event;\n  }\n\n  /**\n   * TODO: NOT IMPLEMENTED\n   * Submit Feature Event\n   * @returns\n   */\n  public submitFeatureEvent() {\n    throw Error('Not implemented');\n  }\n\n  /**\n   * Submit Media Quality Event\n   * @param args - submit params\n   * @param arg.name - event key\n   * @param arg.payload - additional payload to be merge with the default payload\n   * @param arg.options - options\n   */\n  submitMQE({\n    name,\n    payload,\n    options,\n  }: {\n    name: MediaQualityEvent['name'];\n    payload: SubmitMQEPayload;\n    options: SubmitMQEOptions;\n  }) {\n    const {meetingId, mediaConnections, webexConferenceIdStr, globalMeetingId} = options;\n\n    // events that will most likely happen in join phase\n    if (meetingId) {\n      // @ts-ignore\n      const meeting = this.webex.meetings.getBasicMeetingInformation(meetingId);\n\n      if (!meeting) {\n        console.warn(\n          'Attempt to send MQE but no meeting was found...',\n          `event: ${name}, meetingId: ${meetingId}`\n        );\n        // @ts-ignore\n        this.webex.internal.metrics.submitClientMetrics(CALL_DIAGNOSTIC_EVENT_FAILED_TO_SEND, {\n          fields: {\n            meetingId,\n            name,\n          },\n        });\n\n        return;\n      }\n\n      // merge identifiers\n      const identifiers = this.getIdentifiers({\n        meeting,\n        mediaConnections: meeting.mediaConnections || mediaConnections,\n        webexConferenceIdStr,\n        globalMeetingId,\n      });\n\n      // create media quality event object\n      let clientEventObject: MediaQualityEvent['payload'] = {\n        name,\n        canProceed: true,\n        identifiers,\n        eventData: {\n          webClientDomain: window.location.hostname,\n        },\n        intervals: payload.intervals,\n        callingServiceType: 'LOCUS',\n        meetingJoinInfo: {\n          clientSignallingProtocol: 'WebRTC',\n        },\n        sourceMetadata: {\n          applicationSoftwareType: CLIENT_NAME,\n          // @ts-ignore\n          applicationSoftwareVersion: this.webex.version,\n          mediaEngineSoftwareType: getBrowserName() || 'browser',\n          mediaEngineSoftwareVersion: getOSVersion() || 'unknown',\n          startTime: new Date().toISOString(),\n        },\n      };\n\n      // merge any new properties, or override existing ones\n      clientEventObject = merge(clientEventObject, payload);\n\n      // append media quality event data to the call diagnostic event\n      const diagnosticEvent = this.prepareDiagnosticEvent(clientEventObject, options);\n      this.validator({type: 'mqe', event: diagnosticEvent});\n      this.submitToCallDiagnostics(diagnosticEvent);\n    } else {\n      throw new Error(\n        'Media quality events cant be sent outside the context of a meeting. Meeting id is required.'\n      );\n    }\n  }\n\n  /**\n   * Return Client Event payload by client error code\n   * @param arg - get error arg\n   * @param arg.clientErrorCode\n   * @param arg.serviceErrorCode\n   * @param arg.payloadOverrides\n   * @param arg.httpStatusCode\n   * @returns\n   */\n  public getErrorPayloadForClientErrorCode({\n    clientErrorCode,\n    serviceErrorCode,\n    serviceErrorName,\n    rawErrorMessage,\n    payloadOverrides,\n    httpStatusCode,\n  }: {\n    clientErrorCode: number;\n    serviceErrorCode: any;\n    serviceErrorName?: any;\n    rawErrorMessage?: string;\n    payloadOverrides?: any;\n    httpStatusCode?: number;\n  }): ClientEventError {\n    let error: ClientEventError;\n\n    if (clientErrorCode) {\n      const partialParsedError = CLIENT_ERROR_CODE_TO_ERROR_PAYLOAD[clientErrorCode];\n\n      if (partialParsedError) {\n        error = merge(\n          {fatal: true, shownToUser: false, name: 'other', category: 'other'}, // default values\n          {errorCode: clientErrorCode},\n          serviceErrorName ? {errorData: {errorName: serviceErrorName}} : {},\n          {serviceErrorCode},\n          {rawErrorMessage},\n          httpStatusCode === undefined ? {} : {httpStatusCode},\n          partialParsedError,\n          payloadOverrides || {}\n        );\n\n        return error;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Clear the error cache\n   */\n  clearErrorCache() {\n    this.eventErrorCache = new WeakMap();\n  }\n\n  /**\n   * Generate error payload for Client Event\n   * @param rawError\n   */\n  generateClientEventErrorPayload(rawError: any) {\n    const cachedError = this.eventErrorCache.get(rawError);\n\n    if (cachedError) {\n      return [cachedError, true];\n    }\n\n    const rawErrorMessage = rawError.message;\n    const httpStatusCode = rawError.statusCode;\n    let payload;\n\n    if (rawError.name) {\n      if (isBrowserMediaErrorName(rawError.name)) {\n        payload = this.getErrorPayloadForClientErrorCode({\n          serviceErrorCode: undefined,\n          clientErrorCode: BROWSER_MEDIA_ERROR_NAME_TO_CLIENT_ERROR_CODES_MAP[rawError.name],\n          serviceErrorName: rawError.name,\n          rawErrorMessage,\n          httpStatusCode,\n        });\n      }\n    }\n\n    if (isSdpOfferCreationError(rawError) && !payload) {\n      // error code is 30005, but that's not specific enough. we also need to check error.cause.type\n      const causeType = rawError.cause?.type;\n\n      payload = this.getErrorPayloadForClientErrorCode({\n        serviceErrorCode: undefined,\n        clientErrorCode:\n          SDP_OFFER_CREATION_ERROR_MAP[causeType] || SDP_OFFER_CREATION_ERROR_MAP.GENERAL,\n        serviceErrorName: rawError.name,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    const serviceErrorCode =\n      rawError?.error?.body?.errorCode ||\n      rawError?.body?.errorCode ||\n      rawError?.body?.code ||\n      rawError?.body?.reason?.reasonCode;\n\n    if (serviceErrorCode) {\n      const clientErrorCode = SERVICE_ERROR_CODES_TO_CLIENT_ERROR_CODES_MAP[serviceErrorCode];\n      if (clientErrorCode && !payload) {\n        payload = this.getErrorPayloadForClientErrorCode({\n          clientErrorCode,\n          serviceErrorCode,\n          rawErrorMessage,\n          httpStatusCode,\n        });\n      }\n\n      // by default, if it is locus error, return new locus err\n      if (isLocusServiceErrorCode(serviceErrorCode) && !payload) {\n        payload = this.getErrorPayloadForClientErrorCode({\n          clientErrorCode: NEW_LOCUS_ERROR_CLIENT_CODE,\n          serviceErrorCode,\n          rawErrorMessage,\n          httpStatusCode,\n        });\n      }\n    }\n\n    if (isMeetingInfoServiceError(rawError) && !payload) {\n      payload = this.getErrorPayloadForClientErrorCode({\n        clientErrorCode: MEETING_INFO_LOOKUP_ERROR_CLIENT_CODE,\n        serviceErrorCode,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    if (isNetworkError(rawError) && !payload) {\n      payload = this.getErrorPayloadForClientErrorCode({\n        clientErrorCode: NETWORK_ERROR,\n        serviceErrorCode,\n        payloadOverrides: rawError.payloadOverrides,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    if (isUnauthorizedError(rawError) && !payload) {\n      payload = this.getErrorPayloadForClientErrorCode({\n        clientErrorCode: AUTHENTICATION_FAILED_CODE,\n        serviceErrorCode,\n        payloadOverrides: rawError.payloadOverrides,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    if (!payload) {\n      // otherwise return unkown error but passing serviceErrorCode and serviceErrorName so that we know the issue\n      payload = this.getErrorPayloadForClientErrorCode({\n        clientErrorCode: UNKNOWN_ERROR,\n        serviceErrorCode: serviceErrorCode || UNKNOWN_ERROR,\n        serviceErrorName: rawError?.name,\n        payloadOverrides: rawError.payloadOverrides,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    // cache the payload for future use\n    this.eventErrorCache.set(rawError, payload);\n\n    return [payload, false];\n  }\n\n  /**\n   * Create client event object for in meeting events\n   * @param arg - create args\n   * @param arg.event - event key\n   * @param arg.options - options\n   * @returns object\n   */\n  private createClientEventObjectInMeeting({\n    name,\n    options,\n    errors,\n  }: {\n    name: ClientEvent['name'];\n    options?: SubmitClientEventOptions;\n    errors?: ClientEventPayloadError;\n  }) {\n    const {\n      meetingId,\n      mediaConnections,\n      globalMeetingId,\n      webexConferenceIdStr,\n      sessionCorrelationId,\n    } = options;\n\n    // @ts-ignore\n    const meeting = this.webex.meetings.getBasicMeetingInformation(meetingId);\n\n    if (!meeting) {\n      console.warn(\n        'Attempt to send client event but no meeting was found...',\n        `name: ${name}, meetingId: ${meetingId}`\n      );\n      // @ts-ignore\n      this.webex.internal.metrics.submitClientMetrics(CALL_DIAGNOSTIC_EVENT_FAILED_TO_SEND, {\n        fields: {\n          meetingId,\n          name,\n        },\n      });\n\n      return undefined;\n    }\n\n    // grab identifiers\n    const identifiers = this.getIdentifiers({\n      meeting,\n      mediaConnections: meeting?.mediaConnections || mediaConnections,\n      webexConferenceIdStr,\n      globalMeetingId,\n      sessionCorrelationId,\n    });\n\n    // create client event object\n    const clientEventObject: ClientEvent['payload'] = {\n      name,\n      canProceed: true,\n      identifiers,\n      errors,\n      eventData: {\n        webClientDomain: window.location.hostname,\n      },\n      userType: meeting.getCurUserType(),\n      loginType:\n        'loginType' in meeting.callStateForMetrics\n          ? meeting.callStateForMetrics.loginType\n          : this.getCurLoginType(),\n      isConvergedArchitectureEnabled: this.getIsConvergedArchitectureEnabled({\n        meetingId,\n      }),\n      ...(meeting.userNameInput && {userNameInput: meeting.userNameInput}),\n      ...(meeting.emailInput && {emailInput: meeting.emailInput}),\n      webexSubServiceType: this.getSubServiceType(meeting),\n      // @ts-ignore\n      webClientPreload: this.webex.meetings?.config?.metrics?.webClientPreload,\n    };\n\n    const joinFlowVersion = options.joinFlowVersion ?? meeting.callStateForMetrics?.joinFlowVersion;\n    if (joinFlowVersion) {\n      clientEventObject.joinFlowVersion = joinFlowVersion;\n    }\n    const meetingJoinedTime = meeting.isoLocalClientMeetingJoinTime;\n    if (meetingJoinedTime) {\n      clientEventObject.meetingJoinedTime = meetingJoinedTime;\n    }\n\n    if (options.meetingJoinPhase) {\n      clientEventObject.meetingJoinPhase = options.meetingJoinPhase;\n    }\n\n    return clientEventObject;\n  }\n\n  /**\n   * Create client event object for pre meeting events\n   * @param arg - create args\n   * @param arg.event - event key\n   * @param arg.options - payload\n   * @returns object\n   */\n  private createClientEventObjectPreMeeting({\n    name,\n    options,\n    errors,\n  }: {\n    name: ClientEvent['name'];\n    options?: SubmitClientEventOptions;\n    errors?: ClientEventPayloadError;\n  }) {\n    const {correlationId, globalMeetingId, webexConferenceIdStr, preLoginId, sessionCorrelationId} =\n      options;\n\n    // grab identifiers\n    const identifiers = this.getIdentifiers({\n      correlationId,\n      sessionCorrelationId,\n      preLoginId,\n      globalMeetingId,\n      webexConferenceIdStr,\n    });\n\n    // create client event object\n    const clientEventObject: ClientEvent['payload'] = {\n      name,\n      errors,\n      canProceed: true,\n      identifiers,\n      eventData: {\n        webClientDomain: window.location.hostname,\n      },\n      loginType: this.getCurLoginType(),\n      // @ts-ignore\n      webClientPreload: this.webex.meetings?.config?.metrics?.webClientPreload,\n    };\n\n    if (options.joinFlowVersion) {\n      clientEventObject.joinFlowVersion = options.joinFlowVersion;\n    }\n\n    if (options.meetingJoinPhase) {\n      clientEventObject.meetingJoinPhase = options.meetingJoinPhase;\n    }\n\n    if (options.userNameInput) {\n      clientEventObject.userNameInput = options.userNameInput;\n    }\n\n    if (options.emailInput) {\n      clientEventObject.emailInput = options.emailInput;\n    }\n\n    return clientEventObject;\n  }\n\n  /**\n   * Prepare Client Event CA event.\n   * @param arg - submit params\n   * @param arg.event - event key\n   * @param arg.payload - additional payload to be merged with default payload\n   * @param arg.options - payload\n   * @returns {any} options to be with fetch\n   * @throws\n   */\n  private prepareClientEvent({\n    name,\n    payload,\n    options,\n  }: {\n    name: ClientEvent['name'];\n    payload?: ClientEventPayload;\n    options?: SubmitClientEventOptions;\n  }) {\n    const {meetingId, correlationId, rawError} = options;\n    let clientEventObject: ClientEvent['payload'];\n\n    // check if we need to generate errors\n    const errors: ClientEventPayloadError = [];\n\n    if (rawError) {\n      const [generatedError, cached] = this.generateClientEventErrorPayload(rawError);\n      if (generatedError) {\n        errors.push(generatedError);\n      }\n      this.logger.log(\n        CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n        'CallDiagnosticMetrics: @prepareClientEvent. Generated errors:',\n        `generatedError (cached: ${cached}): ${JSON.stringify(generatedError)}`\n      );\n    }\n\n    // events that will most likely happen in join phase\n    if (meetingId) {\n      clientEventObject = this.createClientEventObjectInMeeting({name, options, errors});\n    } else if (correlationId) {\n      // any pre join events or events that are outside the meeting.\n      clientEventObject = this.createClientEventObjectPreMeeting({name, options, errors});\n    } else {\n      throw new Error('Not implemented');\n    }\n\n    // merge any new properties, or override existing ones\n    clientEventObject = merge(clientEventObject, payload);\n\n    // append client event data to the call diagnostic event\n    const diagnosticEvent = this.prepareDiagnosticEvent(clientEventObject, options);\n\n    return diagnosticEvent;\n  }\n\n  /**\n   * Submit Client Event CA event.\n   * @param arg - submit params\n   * @param arg.event - event key\n   * @param arg.payload - additional payload to be merged with default payload\n   * @param arg.options - payload\n   * @param arg.delaySubmitEvent - a boolean value indicating whether to delay the submission of client events.\n   * @throws\n   */\n  public submitClientEvent({\n    name,\n    payload,\n    options,\n    delaySubmitEvent,\n  }: {\n    name: ClientEvent['name'];\n    payload?: ClientEventPayload;\n    options?: SubmitClientEventOptions;\n    delaySubmitEvent?: boolean;\n  }) {\n    if (delaySubmitEvent) {\n      // Preserve the time when the event was triggered if delaying the submission to Call Diagnostics\n      const delayedOptions = {\n        ...options,\n        triggeredTime: new Date().toISOString(),\n      };\n\n      this.delayedClientEvents.push({\n        name,\n        payload,\n        options: delayedOptions,\n      });\n\n      return Promise.resolve();\n    }\n\n    this.logger.log(\n      CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n      'CallDiagnosticMetrics: @submitClientEvent. Submit Client Event CA event.',\n      `name: ${name}`\n    );\n    const diagnosticEvent = this.prepareClientEvent({name, payload, options});\n\n    if (options?.preLoginId) {\n      return this.submitToCallDiagnosticsPreLogin(diagnosticEvent, options?.preLoginId);\n    }\n\n    this.validator({type: 'ce', event: diagnosticEvent});\n\n    return this.submitToCallDiagnostics(diagnosticEvent);\n  }\n\n  /**\n   * Submit Delayed Client Event CA events. Clears delayedClientEvents array after submission.\n   */\n  public submitDelayedClientEvents(overrides?: Partial<DelayedClientEvent['options']>) {\n    this.logger.log(\n      CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n      'CallDiagnosticMetrics: @submitDelayedClientEvents. Submitting delayed client events.'\n    );\n\n    if (this.delayedClientEvents.length === 0) {\n      return Promise.resolve();\n    }\n\n    const promises = this.delayedClientEvents.map((delayedSubmitClientEventParams) => {\n      const {name, payload, options} = delayedSubmitClientEventParams;\n      const optionsWithOverrides: DelayedClientEvent['options'] = {...options, ...overrides};\n\n      return this.submitClientEvent({name, payload, options: optionsWithOverrides});\n    });\n\n    this.delayedClientEvents = [];\n\n    return Promise.all(promises);\n  }\n\n  /**\n   * Prepare the event and send the request to metrics-a service.\n   * @param event\n   * @returns promise\n   */\n  submitToCallDiagnostics(event: Event): Promise<any> {\n    // build metrics-a event type\n    const finalEvent = {\n      eventPayload: event,\n      type: ['diagnostic-event'],\n    };\n\n    return this.callDiagnosticEventsBatcher.request(finalEvent);\n  }\n\n  /**\n   * Prepare the event and send the request to metrics-a service, pre login.\n   * @param event\n   * @param preLoginId\n   * @returns\n   */\n  submitToCallDiagnosticsPreLogin = (event: Event, preLoginId?: string): Promise<any> => {\n    // build metrics-a event type\n    const finalEvent = {\n      eventPayload: event,\n      type: ['diagnostic-event'],\n    };\n    this.preLoginMetricsBatcher.savePreLoginId(preLoginId);\n\n    return this.preLoginMetricsBatcher.request(finalEvent);\n  };\n\n  /**\n   * Builds a request options object to later be passed to fetch().\n   * @param arg - submit params\n   * @param arg.event - event key\n   * @param arg.payload - additional payload to be merged with default payload\n   * @param arg.options - client event options\n   * @returns {Promise<any>}\n   * @throws\n   */\n  public async buildClientEventFetchRequestOptions({\n    name,\n    payload,\n    options,\n  }: {\n    name: ClientEvent['name'];\n    payload?: ClientEventPayload;\n    options?: SubmitClientEventOptions;\n  }): Promise<any> {\n    this.logger.log(\n      CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n      'CallDiagnosticMetrics: @buildClientEventFetchRequestOptions. Building request options object for fetch()...',\n      `name: ${name}`\n    );\n\n    const clientEvent = this.prepareClientEvent({name, payload, options});\n\n    // build metrics-a event type\n    // @ts-ignore\n    const diagnosticEvent = prepareDiagnosticMetricItem(this.webex, {\n      eventPayload: clientEvent,\n      type: ['diagnostic-event'],\n    });\n\n    const request = {\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: [diagnosticEvent],\n      },\n      headers: {},\n      // @ts-ignore\n      waitForServiceTimeout: this.webex.internal.metrics.config.waitForServiceTimeout,\n    };\n\n    if (options.preLoginId) {\n      request.headers = {\n        authorization: false,\n        'x-prelogin-userid': options.preLoginId,\n      };\n      request.resource = 'clientmetrics-prelogin';\n    }\n\n    // @ts-ignore\n    return this.webex.prepareFetchOptions(request);\n  }\n\n  /**\n   * Returns true if the specified serviceErrorCode maps to an expected error.\n   * @param {number} serviceErrorCode the service error code\n   * @returns {boolean}\n   */\n  public isServiceErrorExpected(serviceErrorCode: number): boolean {\n    const clientErrorCode = SERVICE_ERROR_CODES_TO_CLIENT_ERROR_CODES_MAP[serviceErrorCode];\n    const clientErrorPayload = CLIENT_ERROR_CODE_TO_ERROR_PAYLOAD[clientErrorCode];\n\n    return clientErrorPayload?.category === 'expected';\n  }\n\n  /**\n   * This method is used to set the device information by internal-plugin-device\n   * @param {device} object The webex.internal.device object\n   * @returns {undefined}\n   */\n  public setDeviceInfo(device: any): void {\n    // This was created to fix the circular dependency between internal-plugin-device and internal-plugin-metrics\n    this.logger.log('CallDiagnosticMetrics: @setDeviceInfo called', device);\n\n    this.device = device;\n  }\n}\n"],"mappings":"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"}