{"version":3,"names":["ContactType","exports","GroupType"],"sources":["types.ts"],"sourcesContent":["import {ISDKConnector} from '../SDKConnector/types';\nimport {Address, PhoneNumber, URIAddress} from '../common/types';\n\nexport enum ContactType {\n  CUSTOM = 'CUSTOM',\n  CLOUD = 'CLOUD',\n}\n\n/**\n * `Contact` object is used to represent a contact.\n */\nexport type Contact = {\n  /**\n   * This represents the complete address of the contact.\n   */\n  addressInfo?: Address;\n  /**\n   * This represents the URL of the avatar of the contact.\n   */\n  avatarURL?: string;\n  /**\n   * This represents the domain of the avatar of the contact.\n   */\n  avatarUrlDomain?: string;\n  /**\n   * This represents the company name of the contact.\n   */\n  companyName?: string;\n  /**\n   * Unique identifier of the contact.\n   */\n  contactId: string;\n  /**\n   * Indicates the type of the contact, can be `CLOUD` or `CUSTOM`.\n   */\n  contactType: ContactType;\n  /**\n   * Department of the contact in the company if it's a corporate contact.\n   */\n  department?: string;\n  /**\n   * This represents the display name of the contact.\n   */\n  displayName?: string;\n  /**\n   * This represents the array of different email addresses of the contact.\n   */\n  emails?: URIAddress[];\n  /**\n   * This is encrypted key url of the contact used for encryption.\n   */\n  encryptionKeyUrl: string;\n  /**\n   * This represents the first name of the contact.\n   */\n  firstName?: string;\n  /**\n   * Array of different groups and it's details available for the user\n   */\n  groups: string[];\n  /**\n   * The kms resource object url used to generate the encryption key.\n   */\n  kmsResourceObjectUrl?: string;\n  /**\n   * This represents the last name of the contact.\n   */\n  lastName?: string;\n  /**\n   * This represents the manager of the contact.\n   */\n  manager?: string;\n  /**\n   * Userd ID of the user who has the contact.\n   */\n  ownerId?: string;\n  /**\n   * This represents the array of different phone numbers of the contact.\n   */\n  phoneNumbers?: PhoneNumber[];\n  /**\n   * Primary contact method as set by the contact.\n   */\n  primaryContactMethod?: string;\n  /**\n   * This represents the schema of the contact.\n   */\n  schemas?: string;\n  /**\n   * This represents the array of different sip addresses of the contact.\n   */\n  sipAddresses?: URIAddress[];\n  /**\n   * This field indicates whether the contact was resolved successfully.\n   */\n  resolved: boolean;\n};\n\nexport enum GroupType {\n  NORMAL = 'NORMAL',\n  EXTERNAL = 'EXTERNAL',\n}\n\n/**\n * `ContactGroup` object is used to represent a contact group.\n */\nexport type ContactGroup = {\n  /**\n   * Name of the contact group.\n   */\n  displayName: string;\n  /**\n   * Encrypted key url used for encryption.\n   */\n  encryptionKeyUrl: string;\n  /**\n   * Unique identifier of the contact group.\n   */\n  groupId: string;\n  /**\n   * Type of the contact group, can be `NORMAL` or `EXTERNAL`.\n   */\n  groupType: GroupType;\n  /**\n   * String array containing details of the contacts in each group.\n   */\n  members?: string[];\n  /**\n   * User ID of the user who owns the contact group.\n   */\n  ownerId?: string;\n};\n\nexport type ContactList = {\n  contacts: Contact[];\n  groups: ContactGroup[];\n};\n\nexport type ContactResponse = {\n  statusCode: number;\n  data: {\n    contacts?: Contact[];\n    groups?: ContactGroup[];\n    contact?: Contact;\n    group?: ContactGroup;\n    error?: string;\n  };\n  message: string | null;\n};\n\n/**\n * Interface for Contacts Module.\n * This encompasses a set of APIs that enable the fetching, creation, and updating of contacts and groups.\n * These APIs return promises that resolve to a `ContactResponse` object, which contains a status code, data, and message.\n * The data field within this response object holds the contacts and groups object.\n *\n * Example - ContactResponse\n *\n * ```json\n * {\n *  statusCode: 200,\n *  data: {\n *    contacts: Contact[],\n *    groups: ContactGroup[],\n *  },\n *  message: null\n * }\n * ````\n */\nexport interface IContacts {\n  getSDKConnector: () => ISDKConnector;\n  /**\n   * This API is used to fetch the list of contacts and groups for a user.\n   *\n   * Example\n   * ```javascript\n   * const contactsResponse = await contactClient.getContacts();\n   * ```\n   *\n   * The `ContactsResponse` object contains a comprehensive list of both contacts and groups for the user.\n   * Each `Contact` object within this list is defined by the properties detailed in the {@link Contact}.\n   * Each `ContactGroup` adheres to the properties specified in the {@link ContactGroup}.\n   *\n   */\n  getContacts(): Promise<ContactResponse>;\n\n  /**\n   * This API is used to create a contact group with the given display name.\n   *\n   * Example\n   * ```javascript\n   * const contactGroup = await contactClient.createContactGroup(displayName, encryptionKeyUrl, groupType);\n   * ```\n   *\n   * The `ContactGroup` object for the given display name will be created and returned as a response with the properties of {@link ContactGroup}.\n   */\n  createContactGroup(\n    displayName: string,\n    encryptionKeyUrl?: string,\n    groupType?: GroupType\n  ): Promise<ContactResponse>;\n\n  /**\n   * This API is used to delete a contact group whose groupId is received.\n   *\n   * Example\n   * ```javascript\n   * const response = await contactClient.deleteContactGroup(groupId);\n   * ```\n   *\n   * The received response includes a status code and a message that reflect the success or failure of the API call\n   */\n  deleteContactGroup(groupId: string): Promise<ContactResponse>;\n\n  /**\n   * This API is responsible for creating a new contact.\n   *\n   * Example\n   * ```javascript\n   * const contact = await contactClient.createContact(contactInfo);\n   * ```\n   */\n  createContact(contactInfo: Contact): Promise<ContactResponse>;\n\n  /**\n   * This API is responsible for deleting an existing contact for the given contactId.\n   *\n   * Example\n   * ```javascript\n   * const response = await contactClient.deleteContact(contactId);\n   * ```\n   *\n   * The received response includes a status code and a message that reflect the success or failure of the API call\n   */\n  deleteContact(contactId: string): Promise<ContactResponse>;\n}\n\nexport type ContactIdContactInfo = {\n  [Key: string]: Contact;\n};\n"],"mappings":";;;;;;;IAGYA,WAAW,GAAAC,OAAA,CAAAD,WAAA,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAKvB;AACA;AACA;AAFA,IA0FYE,SAAS,GAAAD,OAAA,CAAAC,SAAA,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAKrB;AACA;AACA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}