{"version":3,"names":["_types","require","COMMON_EVENT_KEYS","exports","LINE_EVENT_KEYS","CALLING_CLIENT_EVENT_KEYS","CALL_EVENT_KEYS","SUPPLEMENTARY_SERVICES","MOBIUS_MIDCALL_STATE","Disposition","SessionType","MOBIUS_EVENT_KEYS","MEDIA_CONNECTION_EVENT_KEYS","CALL_STATE","WEBSOCKET_SCOPE","WEBSOCKET_KEYS"],"sources":["types.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */ // TODO: remove once we define the payloads\nimport {ILine} from '../api';\nimport {LINE_EVENTS} from '../CallingClient/line/types';\nimport type {ICall} from '../CallingClient/calling/types';\nimport {CallId, DisplayInformation} from '../common/types';\nimport {CallError, CallingClientError, LineError} from '../Errors';\n\n/** External Eventing Start */\nexport enum COMMON_EVENT_KEYS {\n  CB_VOICEMESSAGE_CONTENT_GET = 'call_back_voicemail_content_get',\n  CALL_HISTORY_USER_SESSION_INFO = 'callHistory:user_recent_sessions',\n  CALL_HISTORY_USER_VIEWED_SESSIONS = 'callHistory:user_viewed_sessions',\n  CALL_HISTORY_USER_SESSIONS_DELETED = 'callHistory:user_sessions_deleted',\n}\n\nexport enum LINE_EVENT_KEYS {\n  INCOMING_CALL = 'incoming_call',\n}\n\nexport enum CALLING_CLIENT_EVENT_KEYS {\n  ERROR = 'callingClient:error',\n  OUTGOING_CALL = 'callingClient:outgoing_call',\n  USER_SESSION_INFO = 'callingClient:user_recent_sessions',\n  ALL_CALLS_CLEARED = 'callingClient:all_calls_cleared',\n}\n\nexport enum CALL_EVENT_KEYS {\n  ALERTING = 'alerting',\n  CALL_ERROR = 'call_error',\n  CALLER_ID = 'caller_id',\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  ESTABLISHED = 'established',\n  HELD = 'held',\n  HOLD_ERROR = 'hold_error',\n  PROGRESS = 'progress',\n  REMOTE_MEDIA = 'remote_media',\n  RESUME_ERROR = 'resume_error',\n  RESUMED = 'resumed',\n  TRANSFER_ERROR = 'transfer_error',\n}\n\nexport enum SUPPLEMENTARY_SERVICES {\n  HOLD = 'hold',\n  RESUME = 'resume',\n  DIVERT = 'divert',\n  TRANSFER = 'transfer',\n  PARK = 'park',\n}\n\nexport enum MOBIUS_MIDCALL_STATE {\n  HELD = 'HELD',\n  CONNECTED = 'CONNECTED',\n}\n\nexport enum Disposition {\n  ANSWERED = 'Answered',\n  CANCELED = 'Canceled',\n  INITIATED = 'Initiated',\n  MISSED = 'MISSED',\n}\n\nexport type CallRecordLink = {\n  locusUrl?: string;\n  conversationUrl?: string;\n  callbackAddress: string;\n};\n\nexport type CallBackInfo = {\n  callbackAddress: string;\n  callbackType: string;\n};\n\nexport type LookUpInfo = {\n  lookupLink: string;\n  type: string;\n};\n\nexport type CallRecordSelf = {\n  id: string;\n  name?: string;\n  phoneNumber?: string;\n  cucmDN?: string;\n  ucmLineNumber?: number;\n};\n\nexport type CallRecordListOther = {\n  ownerId?: string;\n  id: string;\n  name?: string;\n  sipUrl?: string;\n  primaryDisplayString?: string;\n  secondaryDisplayString?: string;\n  isPrivate: boolean;\n  callbackAddress: string;\n  phoneNumber?: string;\n  contact?: string;\n  email?: string;\n};\n\nexport type RedirectionDetails = {\n  phoneNumber?: string;\n  sipUrl?: string;\n  name?: string;\n  reason: string;\n  userId?: string;\n  isPrivate: boolean;\n};\n\nexport enum SessionType {\n  SPARK = 'SPARK',\n  WEBEX_CALLING = 'WEBEXCALLING',\n}\n\nexport type UserSession = {\n  id: string;\n  sessionId: string;\n  disposition: Disposition;\n  startTime: string;\n  endTime: string;\n  url: string;\n  durationSeconds: number;\n  joinedDurationSeconds: number;\n  participantCount: number;\n  isDeleted: boolean;\n  isPMR: boolean;\n  correlationIds: string[];\n  links: CallRecordLink;\n  self: CallRecordSelf;\n  durationSecs: number;\n  other: CallRecordListOther;\n  sessionType: SessionType;\n  direction: string;\n  callingSpecifics?: {\n    redirectionDetails: RedirectionDetails;\n  };\n};\n\nexport type CallingParty = {\n  name?: string;\n  number?: string;\n  privacyEnabled?: boolean;\n  userId?: string;\n  address?: string;\n};\n\nexport type Item = {\n  id?: string;\n  duration?: number;\n  callingParty?: CallingParty;\n  urgent?: boolean;\n  confidential?: boolean;\n  read?: boolean;\n  created?: string;\n  messageId?: string;\n  time?: number;\n};\n\nexport enum MOBIUS_EVENT_KEYS {\n  SERVER_EVENT_INCLUSIVE = 'event:mobius',\n  CALL_SESSION_EVENT_INCLUSIVE = 'event:janus.user_recent_sessions',\n  CALL_SESSION_EVENT_LEGACY = 'event:janus.user_sessions',\n  CALL_SESSION_EVENT_VIEWED = 'event:janus.user_viewed_sessions',\n  CALL_SESSION_EVENT_DELETED = 'event:janus.user_sessions_deleted',\n}\n\nexport type CallSessionData = {\n  userSessions: {\n    userSessions: UserSession[];\n    statusCode: number;\n  };\n  eventType:\n    | MOBIUS_EVENT_KEYS.CALL_SESSION_EVENT_INCLUSIVE\n    | MOBIUS_EVENT_KEYS.CALL_SESSION_EVENT_LEGACY;\n};\n\nexport type CallSessionEvent = {\n  id: string;\n  data: CallSessionData;\n  timestamp: number;\n  trackingId: string;\n};\n\nexport enum MEDIA_CONNECTION_EVENT_KEYS {\n  ROAP_MESSAGE_TO_SEND = 'roap:messageToSend',\n  MEDIA_TYPE_AUDIO = 'audio',\n}\n\nexport type CallerIdDisplay = {\n  correlationId: string;\n  callerId: DisplayInformation;\n};\n\nexport type LineEventTypes = {\n  [LINE_EVENTS.CONNECTING]: () => void;\n  [LINE_EVENTS.ERROR]: (error: LineError) => void;\n  [LINE_EVENTS.RECONNECTED]: () => void;\n  [LINE_EVENTS.RECONNECTING]: () => void;\n  [LINE_EVENTS.REGISTERED]: (lineInfo: ILine) => void;\n  [LINE_EVENTS.UNREGISTERED]: () => void;\n  [LINE_EVENTS.INCOMING_CALL]: (callObj: ICall) => void;\n};\n\nexport type CallEventTypes = {\n  [CALL_EVENT_KEYS.ALERTING]: (callId: CallId) => void;\n  [CALL_EVENT_KEYS.CALL_ERROR]: (error: CallError) => void;\n  [CALL_EVENT_KEYS.CALLER_ID]: (display: CallerIdDisplay) => void;\n  [CALL_EVENT_KEYS.CONNECT]: (callId: CallId) => void;\n  [CALL_EVENT_KEYS.DISCONNECT]: (callId: CallId) => void;\n  [CALL_EVENT_KEYS.ESTABLISHED]: (callId: CallId) => void;\n  [CALL_EVENT_KEYS.HELD]: (callId: CallId) => void;\n  [CALL_EVENT_KEYS.HOLD_ERROR]: (error: CallError) => void;\n  [LINE_EVENT_KEYS.INCOMING_CALL]: (callObj: ICall) => void;\n  [CALL_EVENT_KEYS.PROGRESS]: (callId: CallId) => void;\n  [CALL_EVENT_KEYS.REMOTE_MEDIA]: (track: MediaStreamTrack) => void;\n  [CALL_EVENT_KEYS.RESUME_ERROR]: (error: CallError) => void;\n  [CALL_EVENT_KEYS.RESUMED]: (callId: CallId) => void;\n  [CALL_EVENT_KEYS.TRANSFER_ERROR]: (error: CallError) => void;\n  [CALLING_CLIENT_EVENT_KEYS.ALL_CALLS_CLEARED]: () => void;\n};\n\nexport type MessageId = {\n  messageId: string;\n};\n\nexport type VoicemailEventTypes = {\n  [COMMON_EVENT_KEYS.CB_VOICEMESSAGE_CONTENT_GET]: (messageId: MessageId) => void;\n};\n\nexport type CallingClientEventTypes = {\n  [CALLING_CLIENT_EVENT_KEYS.ERROR]: (error: CallingClientError) => void;\n  [CALLING_CLIENT_EVENT_KEYS.USER_SESSION_INFO]: (event: CallSessionEvent) => void;\n  [CALLING_CLIENT_EVENT_KEYS.OUTGOING_CALL]: (callId: string) => void;\n  [CALLING_CLIENT_EVENT_KEYS.ALL_CALLS_CLEARED]: () => void;\n};\n\nexport type CallHistoryEventTypes = {\n  [COMMON_EVENT_KEYS.CALL_HISTORY_USER_SESSION_INFO]: (event: CallSessionEvent) => void;\n  [COMMON_EVENT_KEYS.CALL_HISTORY_USER_VIEWED_SESSIONS]: (event: CallSessionViewedEvent) => void;\n  [COMMON_EVENT_KEYS.CALL_HISTORY_USER_SESSIONS_DELETED]: (event: CallSessionDeletedEvent) => void;\n};\n/* External Eventing End */\n\n/** Internal Eventing Start */\nenum CALL_STATE {\n  HELD = 'held',\n  REMOTE_HELD = 'remoteheld',\n  CONNECTED = 'connected',\n}\n\ntype eventType = string;\n\ntype callProgressData = {\n  alerting: boolean;\n  inbandROAP: boolean;\n};\n\nexport type CallerIdInfo = {\n  'x-broadworks-remote-party-info'?: string;\n  'p-asserted-identity'?: string;\n  from?: string;\n};\n\ntype callId = string;\ntype deviceId = string;\ntype correlationId = string;\ntype callUrl = string;\ntype causecode = number;\ntype cause = string;\n\ntype eventData = {\n  callerId: CallerIdInfo;\n  callState: CALL_STATE;\n};\n\ntype midCallServiceData = {\n  eventType: eventType;\n  eventData: eventData;\n};\n\ntype midCallService = Array<midCallServiceData>;\ninterface BaseMessage {\n  eventType: eventType;\n  correlationId: correlationId;\n  deviceId: deviceId;\n  callId: callId;\n  callUrl: callUrl;\n}\nexport interface CallSetupMessage extends BaseMessage {\n  callerId: CallerIdInfo;\n  trackingId: string;\n  alertType: string;\n}\ninterface CallProgressMessage extends BaseMessage {\n  callProgressData: callProgressData;\n  callerId: CallerIdInfo;\n}\n\nexport const WEBSOCKET_SCOPE = 'mobius';\n\nexport enum WEBSOCKET_KEYS {\n  CALL_PROGRESS = 'callprogress',\n  CALL_CONNECTED = 'callconnected',\n  CALL_DISCONNECTED = 'callconnected',\n  CALL_INFO = 'callinfo',\n  CALL = 'call',\n  ROAP = 'ROAP',\n}\n/** Internal Eventing End */\n\n/** State Machine Events */\n\nexport type CallEvent =\n  /* Received Events */\n  | {type: 'E_RECV_CALL_SETUP'; data?: unknown}\n  | {type: 'E_RECV_CALL_PROGRESS'; data?: unknown}\n  | {type: 'E_RECV_CALL_CONNECT'; data?: unknown}\n  | {type: 'E_RECV_CALL_DISCONNECT'; data?: unknown}\n\n  /* Sent Events */\n  | {type: 'E_SEND_CALL_SETUP'; data?: unknown}\n  | {type: 'E_SEND_CALL_ALERTING'; data?: unknown}\n  | {type: 'E_SEND_CALL_CONNECT'; data?: unknown}\n  | {type: 'E_SEND_CALL_DISCONNECT'; data?: unknown}\n\n  /* Common Events */\n  | {type: 'E_CALL_ESTABLISHED'; data?: unknown}\n  | {type: 'E_CALL_INFO'; data?: unknown}\n  | {type: 'E_UNKNOWN'; data?: unknown}\n  | {type: 'E_CALL_CLEARED'; data?: unknown}\n  | {type: 'E_CALL_HOLD'; data?: unknown}\n  | {type: 'E_CALL_RESUME'; data?: unknown};\n\n/* ROAP Events */\nexport type RoapEvent =\n  | {type: 'E_SEND_ROAP_OFFER'; data?: unknown}\n  | {type: 'E_SEND_ROAP_ANSWER'; data?: unknown}\n  | {type: 'E_RECV_ROAP_OFFER'; data?: unknown}\n  | {type: 'E_RECV_ROAP_ANSWER'; data?: unknown}\n  | {type: 'E_ROAP_ERROR'; data?: unknown}\n  | {type: 'E_ROAP_OK'; data?: unknown}\n  | {type: 'E_RECV_ROAP_OFFER_REQUEST'; data?: unknown} // ROAP request to explicitly ask Client to do OFFER\n  | {type: 'E_ROAP_TEARDOWN'; data?: unknown};\n\n// TODO: export RoapMessage type from the media SDK to use here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface RoapMessage {\n  seq: number;\n  messageType: 'OFFER' | 'ANSWER' | 'OK' | 'ERROR' | 'OFFER_REQUEST';\n  offererSessionId?: string;\n  answererSessionId?: string;\n  sdp?: string;\n  version?: string;\n  tieBreaker?: string;\n  errorType?: string;\n}\n\nexport type UserReadSessions = {\n  sessionId: string;\n};\n\nexport type CallSessionViewedData = {\n  userReadSessions: {\n    userReadSessions: UserReadSessions[];\n    statusCode: number;\n  };\n  eventType: MOBIUS_EVENT_KEYS.CALL_SESSION_EVENT_VIEWED;\n};\n\nexport type CallSessionViewedEvent = {\n  id: string;\n  data: CallSessionViewedData;\n  timestamp: number;\n  trackingId: string;\n};\n\nexport type CallSessionDeletedData = {\n  deletedSessions: string[];\n  eventType: MOBIUS_EVENT_KEYS.CALL_SESSION_EVENT_DELETED;\n};\n\nexport type CallSessionDeletedEvent = {\n  id: string;\n  data: CallSessionDeletedData;\n  timestamp: number;\n  trackingId: string;\n};\n\nexport type EndTimeSessionId = {\n  endTime: string;\n  sessionId: string;\n};\n\nexport type SanitizedEndTimeAndSessionId = {\n  endTime: number;\n  sessionId: string;\n};\n\nexport type UCMLine = {\n  dnorpattern: string;\n  index: number;\n  label: string | null;\n};\n\nexport type UCMDevice = {\n  name: string;\n  model: number;\n  lines: UCMLine[];\n};\n\nexport type UCMLinesApiResponse = {\n  devices: UCMDevice[];\n};\n"],"mappings":";;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AAFA;AAAuD;AAOvD;AAAA,IACYC,iBAAiB,GAAAC,OAAA,CAAAD,iBAAA,0BAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;AAAA,IAOjBE,eAAe,GAAAD,OAAA,CAAAC,eAAA,0BAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAAA,IAIfC,yBAAyB,GAAAF,OAAA,CAAAE,yBAAA,0BAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAA,OAAzBA,yBAAyB;AAAA;AAAA,IAOzBC,eAAe,GAAAH,OAAA,CAAAG,eAAA,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAAA,IAgBfC,sBAAsB,GAAAJ,OAAA,CAAAI,sBAAA,0BAAtBA,sBAAsB;EAAtBA,sBAAsB;EAAtBA,sBAAsB;EAAtBA,sBAAsB;EAAtBA,sBAAsB;EAAtBA,sBAAsB;EAAA,OAAtBA,sBAAsB;AAAA;AAAA,IAQtBC,oBAAoB,GAAAL,OAAA,CAAAK,oBAAA,0BAApBA,oBAAoB;EAApBA,oBAAoB;EAApBA,oBAAoB;EAAA,OAApBA,oBAAoB;AAAA;AAAA,IAKpBC,WAAW,GAAAN,OAAA,CAAAM,WAAA,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAAA,IAsDXC,WAAW,GAAAP,OAAA,CAAAO,WAAA,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAAA,IAiDXC,iBAAiB,GAAAR,OAAA,CAAAQ,iBAAA,0BAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;AAAA,IAyBjBC,2BAA2B,GAAAT,OAAA,CAAAS,2BAAA,0BAA3BA,2BAA2B;EAA3BA,2BAA2B;EAA3BA,2BAA2B;EAAA,OAA3BA,2BAA2B;AAAA;AA0DvC;AAEA;AAAA,IACKC,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA,EAAVA,UAAU;AAsDR,IAAMC,eAAe,GAAAX,OAAA,CAAAW,eAAA,GAAG,QAAQ;AAAC,IAE5BC,cAAc,GAAAZ,OAAA,CAAAY,cAAA,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAQ1B;AAEA;AAuBA;AAWA;AACA"}