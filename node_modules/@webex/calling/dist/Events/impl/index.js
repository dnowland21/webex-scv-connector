"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.Eventing = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _get3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));
var _events = _interopRequireDefault(require("events"));
var _Logger = _interopRequireDefault(require("../../Logger"));
var _types = require("../../Logger/types");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /* eslint-disable valid-jsdoc */ /* eslint-disable @typescript-eslint/no-shadow */ // eslint-disable-line import/no-extraneous-dependencies
/**
 *
 */
var Eventing = exports.Eventing = /*#__PURE__*/function (_ref) {
  (0, _inherits2.default)(Eventing, _ref);
  var _super = _createSuper(Eventing);
  function Eventing() {
    (0, _classCallCheck2.default)(this, Eventing);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Eventing, [{
    key: "emit",
    value:
    /**
     * @event
     *
     * @param event - Event that is going ot be emitted.
     * @param args - Parameters that are emitted with the event.
     */
    function emit(event) {
      var _get2;
      var timestamp = new Date().toUTCString();
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      _Logger.default.info("".concat(timestamp, " ").concat(_types.LOG_PREFIX.EVENT, ": ").concat(event.toString(), " - event emitted with parameters -> ").concat(args, " = "), {
        file: 'Events/impl/index.ts',
        method: 'emit'
      });
      return (_get2 = (0, _get3.default)((0, _getPrototypeOf2.default)(Eventing.prototype), "emit", this)).call.apply(_get2, [this, event].concat(args));
    }

    /**
     * .
     * @event
     *
     * @param event - Event to listen to.
     * @param listener - Callback for event.
     */
  }, {
    key: "on",
    value: function on(event, listener) {
      return (0, _get3.default)((0, _getPrototypeOf2.default)(Eventing.prototype), "on", this).call(this, event, listener);
    }

    /**
     * .
     * @event
     *
     * @param event - Event to remove listener on.
     * @param listener - Callback for event.
     */
  }, {
    key: "off",
    value: function off(event, listener) {
      return (0, _get3.default)((0, _getPrototypeOf2.default)(Eventing.prototype), "off", this).call(this, event, listener);
    }
  }]);
  return Eventing;
}(_events.default);
//# sourceMappingURL=index.js.map
