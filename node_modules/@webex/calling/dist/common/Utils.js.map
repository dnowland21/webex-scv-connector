{"version":3,"names":["platform","_interopRequireWildcard","require","_CallError","_types","_types2","_Logger","_interopRequireDefault","_CallingDeviceError","_constants","_constants2","_SDKConnector","_LineError","_getRequireWildcardCache","e","_WeakMap","r","t","__esModule","_typeof","default","has","get","n","__proto__","a","_Object$defineProperty","_Object$getOwnPropertyDescriptor","u","Object","prototype","hasOwnProperty","call","i","set","_createForOfIteratorHelper","o","allowArrayLike","it","_Symbol","_Symbol$iterator","_Array$isArray","_unsupportedIterableToArray","length","F","s","done","value","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_arrayLikeToArray","toString","slice","constructor","name","_Array$from","test","arr","len","arr2","Array","filterMobiusUris","mobiusServers","defaultMobiusUrl","_mobiusServers$primar","_mobiusServers$backup","logContext","file","UTILS_FILE","method","urisArrayPrimary","urisArrayBackup","primary","uris","log","info","_iterator","_step","uri","push","concat","URL_ENDPOINT","backup","_iterator2","_step2","primaryUris","backupUris","indexOf","updateCallErrorContext","errContext","type","message","correlationId","callError","errObj","context","setCallError","updateLineErrorContext","status","lineError","setError","updateErrorContext","clientError","emitFinalFailure","emitterCb","loggerContext","createLineError","ERROR_TYPE","DEFAULT","RegistrationStatus","INACTIVE","SERVICE_UNAVAILABLE","handleRegistrationErrors","_x","_x2","_x3","_x4","_handleRegistrationErrors","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","restoreRegCb","errorCode","finalError","errorBody","code","errorMessage","caller","_errorMessage","_errorMessage2","_errorMessage3","wrap","_callee$","_context","prev","Number","statusCode","warn","t0","ERROR_CODE","UNAUTHORIZED","INTERNAL_SERVER_ERROR","FORBIDDEN","DEVICE_NOT_FOUND","TOKEN_ERROR","abrupt","SERVER_ERROR","body","FORBIDDEN_ERROR","t1","DEVICE_ERROR_CODE","DEVICE_LIMIT_EXCEEDED","DEVICE_CREATION_DISABLED","DEVICE_CREATION_FAILED","NOT_FOUND","stop","handleCallingClientErrors","_x5","_x6","_x7","_handleCallingClientErrors","_callee2","_callee2$","_context2","createClientError","handleCallErrors","_x8","_x9","_x10","_x11","_x12","_x13","_x14","_handleCallErrors","_callee3","errorLayer","retryCb","retryInterval","_callee3$","_context3","createCallError","headers","CALL_ERROR_CODE","INVALID_STATUS_UPDATE","DEVICE_NOT_REGISTERED","CALL_NOT_FOUND","ERROR_PROCESSING","USER_BUSY","PARSING_ERROR","NOT_ACCEPTABLE","CALL_REJECTED","NOT_AVAILABLE","serviceErrorCodeHandler","_x15","_x16","_serviceErrorCodeHandler","_callee4","failureMessage","errorDetails","_errorDetails","_errorDetails2","_errorDetails3","_errorDetails4","_errorDetails5","_errorDetails6","_errorDetails7","_errorDetails8","_callee4$","_context4","BAD_REQUEST","REQUEST_TIMEOUT","NOT_IMPLEMENTED","data","error","parseMediaQualityStatistics","stats","navigator","userAgent","DUMMY_METRICS","id","inboundCodec","outboundCodec","localCandidates","candidatePairs","codecList","rxStat","txStat","vqPayload","jitterBufferDelay","jitterBufferEmittedCount","totalRoundTripTime","roundTripTimeMeasurements","selectedPair","bitRate","maxJitter","VoPktSizeMs","forEach","report","_keys","statName","TIMESTAMP","TYPE","MEDIA_ID","RTC_ICE_CANDIDATE_PAIR","LOCAL_CANDIDATE_ID","RTC_ICE_CANDIDATE","NETWORK_TYPE","INBOUND_CODEC_MATCH","OUTBOUND_CODEC_MATCH","RTC_CODEC","MIME_TYPE","REMOTE_INBOUND_RTP","TOTAL_ROUND_TRIP_TIME","ROUND_TRIP_TIME_MEASUREMENTS","INBOUND_RTP","CODEC_ID","PACKETS_RECEIVED","Pkt","BYTES_RECEIVED","Oct","PACKETS_DISCARDED","LatePkt","PACKETS_LOST","LostPkt","JITTER_BUFFER_DELAY","JITTER_BUFFER_EMITTED_COUNT","TRANSPORT","SELECTED_CANDIDATE_PAIR_ID","OUTBOUND_RTP","PACKETS_SENT","BYTES_SENT","TARGET_BIT_RATE","MEDIA_SOURCE","TOTAL_SAMPLES_DURATION","Dur","VoOneWayDelayMs","hwType","os","version","networkType","AvgJit","VoRxCodec","split","txVqPayload","VoTxCodec","rtpBitRate","byeStats","VQMetrics","RTP_RX_STAT","RTP_TX_STAT","_stringify","waitForMsecs","exports","msec","_promise","resolve","setTimeout","getCallingBackEnd","webex","entModels","internal","device","features","entitlement","models","callingBackend","callingBehavior","NATIVE_WEBEX_TEAMS_CALLING","VALUES","KEY","ENTITLEMENT_BASIC","ENTITLEMENT_STANDARD","CALLING_BACKEND","WXC","ENTITLEMENT_BROADWORKS_CONN","BWRKS","NATIVE_SIP_CALL_TO_UCM","UCM","INVALID","getXsiActionEndpoint","_x17","_x18","_x19","_getXsiActionEndpoint","_callee5","userIdResponse","response","xsiEndpoint","bwTokenResponse","_response","_xsiEndpoint","xsiUrl","errorInfo","_callee5$","_context5","request","services","_serviceUrls","hydra","XSI_ACTION_ENDPOINT_ORG_URL_PARAM","HTTP_METHODS","GET","sent","ITEMS","XSI_ACTION_ENDPOINT","wdm","DEVICES","SETTINGS","BW_XSI_URL","endsWith","BW_XSI_ENDPOINT_VERSION","BW_XSI_ENDPOINT_VERSION_WITH_SLASH","Error","getVgActionEndpoint","getSortedVoicemailList","voiceMessageList","sortOrder","SORT","DESC","sort","voiceMail","nextVoiceMail","TIME","PLACEHOLDER_KEY","ASC","scimQuery","_x20","_scimQuery","_callee6","filter","sdkConnector","isProd","webexHost","scimUrl","query","_callee6$","_context6","SDKConnector","getWebex","url","includes","WEBEX_API_PROD","WEBEX_API_BTS","IDENTITY_ENDPOINT_RESOURCE","SCIM_ENDPOINT_RESOURCE","orgId","SCIM_USER_FILTER","encodeURIComponent","_defineProperty2","CISCO_DEVICE_URL","SPARK_USER_AGENT","CALLING_USER_AGENT","resolveCallerIdDisplay","_x21","_resolveCallerIdDisplay","_callee7","_resolution","resolution","displayResult","res","_scimResource$phoneNu","_scimResource$phoneNu2","_scimResource$photos","scimResource","numberObj","photo","_callee7$","_context7","totalResults","Resources","displayName","phoneNumbers","find","num","toLowerCase","photos","avatarSrc","resolveCallerIdByName","_x22","_resolveCallerIdByName","_callee8","searchDirectory","_callee8$","_context8","people","list","then","results","items","Buffer","from","pop","numObj","avatar","resolveContact","_x23","_resolveContact","_callee9","callingPartyInfo","_callee9$","_context9","userExternalId","$","storeVoicemailList","vmEncodedList","sessionStorage","setItem","fetchVoicemailList","offset","offsetLimit","moreVoicemails","requiredVoicemailList","voicemailList","JSON","parse","getItem","messages","moreVMAvailable","inferIdFromUuid","decodeType","INFER_ID_CONSTANT","isValidServiceIndicator","indicator","_values","ServiceIndicator","some","v","isValidServiceDomain","serviceData","regexp","domain","CALLING","GUEST_CALLING","validateServiceData","allowedValues","formattedValues","join","replace","modifySdpForIPv4","sdp","ipv6CLineMatches","match","hasIPv6CLine","ipv4CandidateMatch","ipv4Address","ipv4CandidateAdded","full","foundation","componentId","transport","priority","connectionAddress","port","candidateType","newFoundation","_parseInt2","uploadLogs","_uploadLogs","_callee10","_webex","_args10","_callee10$","_context10","undefined","support","submitLogs"],"sources":["Utils.ts"],"sourcesContent":["/* eslint-disable no-fallthrough */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport * as platform from 'platform';\nimport ExtendedError from 'Errors/catalog/ExtendedError';\nimport {restoreRegistrationCallBack} from '../CallingClient/registration/types';\nimport {CallingClientErrorEmitterCallback} from '../CallingClient/types';\nimport {LogContext} from '../Logger/types';\nimport {\n  CallErrorEmitterCallBack,\n  CallRtpStats,\n  ReceiveStatistics,\n  RetryCallBack,\n  TransmitStatistics,\n  TransmitterVqPayload,\n  VoiceQualityMetrics,\n} from '../CallingClient/calling/types';\nimport {createCallError} from '../Errors/catalog/CallError';\nimport {\n  DEVICE_ERROR_CODE,\n  ErrorContext,\n  ERROR_CODE,\n  ErrorObject,\n  ERROR_TYPE,\n  CallErrorObject,\n  CALL_ERROR_CODE,\n  ERROR_LAYER,\n  LineErrorObject,\n} from '../Errors/types';\nimport {\n  CALLING_BACKEND,\n  CorrelationId,\n  DecodeType,\n  DisplayInformation,\n  HTTP_METHODS,\n  IDeviceInfo,\n  MobiusServers,\n  RegistrationStatus,\n  SCIMListResponse,\n  SORT,\n  ServiceData,\n  ServiceIndicator,\n  WebexRequestPayload,\n} from './types';\nimport log from '../Logger';\nimport {CallError, CallingClientError} from '../Errors';\nimport {createClientError} from '../Errors/catalog/CallingDeviceError';\n\nimport {\n  BYTES_RECEIVED,\n  BYTES_SENT,\n  CALLING_USER_AGENT,\n  CISCO_DEVICE_URL,\n  CODEC_ID,\n  DUMMY_METRICS,\n  INBOUND_CODEC_MATCH,\n  INBOUND_RTP,\n  JITTER_BUFFER_DELAY,\n  JITTER_BUFFER_EMITTED_COUNT,\n  LOCAL_CANDIDATE_ID,\n  MEDIA_ID,\n  MEDIA_SOURCE,\n  MIME_TYPE,\n  NETWORK_TYPE,\n  OUTBOUND_CODEC_MATCH,\n  OUTBOUND_RTP,\n  PACKETS_DISCARDED,\n  PACKETS_LOST,\n  PACKETS_RECEIVED,\n  PACKETS_SENT,\n  REMOTE_INBOUND_RTP,\n  ROUND_TRIP_TIME_MEASUREMENTS,\n  RTC_CODEC,\n  RTC_ICE_CANDIDATE,\n  RTC_ICE_CANDIDATE_PAIR,\n  RTP_RX_STAT,\n  RTP_TX_STAT,\n  SELECTED_CANDIDATE_PAIR_ID,\n  SPARK_USER_AGENT,\n  TARGET_BIT_RATE,\n  TIMESTAMP,\n  TOTAL_ROUND_TRIP_TIME,\n  TOTAL_SAMPLES_DURATION,\n  TRANSPORT,\n  TYPE,\n  URL_ENDPOINT,\n  UTILS_FILE,\n} from '../CallingClient/constants';\nimport {\n  DeleteCallHistoryRecordsResponse,\n  JanusResponseEvent,\n  UCMLinesResponse,\n  UpdateMissedCallsResponse,\n} from '../CallHistory/types';\nimport {\n  VoicemailResponseEvent,\n  MessageInfo,\n  CallingPartyInfo,\n  FilteredVoicemail,\n} from '../Voicemail/types';\nimport {\n  DEVICES,\n  ITEMS,\n  SETTINGS,\n  VALUES,\n  KEY,\n  TIME,\n  PLACEHOLDER_KEY,\n  XSI_ACTION_ENDPOINT_ORG_URL_PARAM,\n  XSI_ACTION_ENDPOINT,\n  INFER_ID_CONSTANT,\n  BW_XSI_URL,\n  ENTITLEMENT_BASIC,\n  ENTITLEMENT_BROADWORKS_CONN,\n  ENTITLEMENT_STANDARD,\n  NATIVE_WEBEX_TEAMS_CALLING,\n  NATIVE_SIP_CALL_TO_UCM,\n  BW_XSI_ENDPOINT_VERSION,\n  IDENTITY_ENDPOINT_RESOURCE,\n  SCIM_ENDPOINT_RESOURCE,\n  SCIM_USER_FILTER,\n  WEBEX_API_PROD,\n  WEBEX_API_BTS,\n  BW_XSI_ENDPOINT_VERSION_WITH_SLASH,\n} from './constants';\nimport {Model, WebexSDK} from '../SDKConnector/types';\nimport SDKConnector from '../SDKConnector';\nimport {CallSettingResponse} from '../CallSettings/types';\nimport {ContactResponse} from '../Contacts/types';\nimport {LineErrorEmitterCallback} from '../CallingClient/line/types';\nimport {LineError, createLineError} from '../Errors/catalog/LineError';\n\nexport function filterMobiusUris(mobiusServers: MobiusServers, defaultMobiusUrl: string) {\n  const logContext = {\n    file: UTILS_FILE,\n    method: filterMobiusUris.name,\n  };\n\n  const urisArrayPrimary = [];\n  const urisArrayBackup = [];\n\n  if (mobiusServers?.primary?.uris) {\n    log.info('Adding Primary uris', logContext);\n    for (const uri of mobiusServers.primary.uris) {\n      urisArrayPrimary.push(`${uri}${URL_ENDPOINT}`);\n    }\n  }\n\n  if (mobiusServers?.backup?.uris) {\n    log.info('Adding Backup uris', logContext);\n    for (const uri of mobiusServers.backup.uris) {\n      urisArrayBackup.push(`${uri}${URL_ENDPOINT}`);\n    }\n  }\n\n  /*\n   * If there are no entries in both primary and backup arrays then add the default\n   * uri in primary array, otherwise in backup.\n   */\n  log.info('Adding Default uri', logContext);\n  if (!urisArrayPrimary.length && !urisArrayBackup.length) {\n    urisArrayPrimary.push(`${defaultMobiusUrl}${URL_ENDPOINT}`);\n  } else {\n    urisArrayBackup.push(`${defaultMobiusUrl}${URL_ENDPOINT}`);\n  }\n\n  const primaryUris: string[] = [];\n  const backupUris: string[] = [];\n\n  /* Remove duplicates from primary by keeping the order intact */\n  for (let i = 0; i < urisArrayPrimary.length; i += 1) {\n    if (primaryUris.indexOf(urisArrayPrimary[i]) === -1) {\n      primaryUris.push(urisArrayPrimary[i]);\n    }\n  }\n\n  /* Remove duplicates from backup by keeping the order intact */\n  for (let i = 0; i < urisArrayBackup.length; i += 1) {\n    if (backupUris.indexOf(urisArrayBackup[i]) === -1) {\n      backupUris.push(urisArrayBackup[i]);\n    }\n  }\n\n  return {primary: primaryUris, backup: backupUris};\n}\n\n/**\n * Updates the error context for a particular calling client instance.\n *\n * @param errContext - Error Context as generated by the caller.\n * @param type - Error type based on status code.\n * @param message - Custom message for user.\n * @param correlationId - Unique identifier for a call.\n * @param callError - Call error instance.\n */\nfunction updateCallErrorContext(\n  errContext: ErrorContext,\n  type: ERROR_TYPE,\n  message: string,\n  correlationId: CorrelationId,\n  callError: CallError\n) {\n  const errObj = <CallErrorObject>{};\n\n  errObj.context = errContext;\n  errObj.type = type;\n  errObj.message = message;\n  errObj.correlationId = correlationId;\n  callError.setCallError(errObj);\n}\n\n/**\n * Updates the error context for a particular line instance.\n *\n * @param errContext - Error Context.\n * @param type - Error type based on status code.\n * @param message - Custom message for user.\n * @param status - Status of line.\n * @param lineError - Line error instance.\n */\nfunction updateLineErrorContext(\n  errContext: ErrorContext,\n  type: ERROR_TYPE,\n  message: string,\n  status: RegistrationStatus,\n  lineError: LineError\n) {\n  const errObj = <LineErrorObject>{};\n\n  errObj.context = errContext;\n  errObj.type = type;\n  errObj.message = message;\n  errObj.status = status;\n  lineError.setError(errObj);\n}\n\n/**\n * Updates the error context for a particular calling client instance.\n *\n * @param errContext - Error Context as generated by the caller.\n * @param type - Error type based on status code.\n * @param message - Custom message for user.\n * @param clientError - Client Error.\n */\nfunction updateErrorContext(\n  errContext: ErrorContext,\n  type: ERROR_TYPE,\n  message: string,\n  clientError: CallingClientError\n) {\n  const errObj = <ErrorObject>{};\n\n  errObj.context = errContext;\n  errObj.type = type;\n  errObj.message = message;\n  clientError.setError(errObj);\n}\n\n/**\n * Emits final failure to the client after it gives up\n * retrying registration and records error metric.\n *\n * @param line - Instance of line.\n * @param caller - Method which called this handler.\n * @param file - File name from where error got reported.\n */\nexport function emitFinalFailure(emitterCb: LineErrorEmitterCallback, loggerContext: LogContext) {\n  const clientError = createLineError('', {}, ERROR_TYPE.DEFAULT, RegistrationStatus.INACTIVE);\n\n  updateLineErrorContext(\n    loggerContext,\n    ERROR_TYPE.SERVICE_UNAVAILABLE,\n    'An unknown error occurred. Wait a moment and try again. Please contact the administrator if the problem persists.',\n    RegistrationStatus.INACTIVE,\n    clientError\n  );\n  emitterCb(clientError);\n}\n\n/**\n * Handle various Registration related Error flows here. Decide whether to emit event or retry.\n * @param err - Error body.\n * @param emitterCb - LineErrorEmitterCallback\n * @param loggerContext - Logging context that has method and file name\n * @param restoreRegCb - Callback which will try restoring resgistration in case of 403\n *\n * In emitterCb,\n * For non final error scenarios in registration flow,\n * send Unregistered event only without any error message\n * in order to have the web client update only the UI\n * state to disconnected and not show any error dialog\n * to the end user as in those scenarios a retry will\n * be scheduled to attempt registration again.\n *\n */\nexport async function handleRegistrationErrors(\n  err: WebexRequestPayload,\n  emitterCb: LineErrorEmitterCallback,\n  loggerContext: LogContext,\n  restoreRegCb?: restoreRegistrationCallBack\n): Promise<boolean> {\n  const lineError = createLineError('', {}, ERROR_TYPE.DEFAULT, RegistrationStatus.INACTIVE);\n\n  const errorCode = Number(err.statusCode);\n  let finalError = false;\n  log.warn(`Status code: -> ${errorCode}`, loggerContext);\n  switch (errorCode) {\n    case ERROR_CODE.UNAUTHORIZED: {\n      // Return it to the Caller\n      finalError = true;\n      log.warn(`401 Unauthorized`, loggerContext);\n\n      updateLineErrorContext(\n        loggerContext,\n        ERROR_TYPE.TOKEN_ERROR,\n        'User is unauthorized due to an expired token. Sign out, then sign back in.',\n        RegistrationStatus.INACTIVE,\n        lineError\n      );\n\n      emitterCb(lineError, finalError);\n      break;\n    }\n\n    case ERROR_CODE.INTERNAL_SERVER_ERROR: {\n      log.warn(`500 Internal Server Error`, loggerContext);\n      updateLineErrorContext(\n        loggerContext,\n        ERROR_TYPE.SERVER_ERROR,\n        'An unknown error occurred while placing the request. Wait a moment and try again.',\n        RegistrationStatus.INACTIVE,\n        lineError\n      );\n\n      emitterCb(lineError, finalError);\n      break;\n    }\n\n    case ERROR_CODE.SERVICE_UNAVAILABLE: {\n      log.warn(`503 Service Unavailable`, loggerContext);\n      updateLineErrorContext(\n        loggerContext,\n        ERROR_TYPE.SERVICE_UNAVAILABLE,\n        'An error occurred on the server while processing the request. Wait a moment and try again.',\n        RegistrationStatus.INACTIVE,\n        lineError\n      );\n\n      emitterCb(lineError, finalError);\n      break;\n    }\n    case ERROR_CODE.FORBIDDEN: {\n      log.warn(`403 Forbidden`, loggerContext);\n      const errorBody = <IDeviceInfo>err.body;\n\n      if (!errorBody) {\n        log.warn('Error response has no body, throwing default error', loggerContext);\n        updateLineErrorContext(\n          loggerContext,\n          ERROR_TYPE.FORBIDDEN_ERROR,\n          'An unauthorized action has been received. This action has been blocked. Please contact the administrator if this persists.',\n          RegistrationStatus.INACTIVE,\n          lineError\n        );\n\n        emitterCb(lineError, finalError);\n\n        return finalError;\n      }\n\n      const code = Number(errorBody.errorCode);\n      log.warn(`Error code found : ${code}`, loggerContext);\n      switch (code) {\n        case DEVICE_ERROR_CODE.DEVICE_LIMIT_EXCEEDED: {\n          const errorMessage = 'User device limit exceeded';\n          log.warn(errorMessage, loggerContext);\n          if (restoreRegCb) {\n            const caller = loggerContext.method || 'handleErrors';\n            await restoreRegCb(errorBody, caller);\n          }\n          break;\n        }\n        case DEVICE_ERROR_CODE.DEVICE_CREATION_DISABLED: {\n          const errorMessage =\n            'User is not configured for WebRTC calling. Please contact the administrator to resolve this issue.';\n          finalError = true;\n          updateLineErrorContext(\n            loggerContext,\n            ERROR_TYPE.FORBIDDEN_ERROR,\n            errorMessage,\n            RegistrationStatus.INACTIVE,\n            lineError\n          );\n          log.warn(errorMessage, loggerContext);\n          emitterCb(lineError, true);\n          break;\n        }\n        case DEVICE_ERROR_CODE.DEVICE_CREATION_FAILED: {\n          const errorMessage =\n            'An unknown error occurred while provisioning the device. Wait a moment and try again.';\n          updateLineErrorContext(\n            loggerContext,\n            ERROR_TYPE.FORBIDDEN_ERROR,\n            errorMessage,\n            RegistrationStatus.INACTIVE,\n            lineError\n          );\n          log.warn(errorMessage, loggerContext);\n          emitterCb(lineError, finalError);\n          break;\n        }\n        default: {\n          const errorMessage =\n            'An unknown error occurred. Wait a moment and try again. Please contact the administrator if the problem persists.';\n          updateLineErrorContext(\n            loggerContext,\n            ERROR_TYPE.FORBIDDEN_ERROR,\n            errorMessage,\n            RegistrationStatus.INACTIVE,\n            lineError\n          );\n          log.warn(errorMessage, loggerContext);\n          emitterCb(lineError, finalError);\n        }\n      }\n      break;\n    }\n    case ERROR_CODE.DEVICE_NOT_FOUND: {\n      finalError = true;\n      log.warn(`404 Device Not Found`, loggerContext);\n\n      updateLineErrorContext(\n        loggerContext,\n        ERROR_TYPE.NOT_FOUND,\n        'The client has unregistered. Please wait for the client to register before attempting the call. If error persists, sign out, sign back in and attempt the call.',\n        RegistrationStatus.INACTIVE,\n        lineError\n      );\n      emitterCb(lineError, finalError);\n      break;\n    }\n\n    default: {\n      updateLineErrorContext(\n        loggerContext,\n        ERROR_TYPE.DEFAULT,\n        'Unknown error',\n        RegistrationStatus.INACTIVE,\n        lineError\n      );\n      log.warn(`Unknown Error`, loggerContext);\n      emitterCb(lineError, finalError);\n    }\n  }\n\n  return finalError;\n}\n\n/**\n * Handle various Error flows related to calling client here. Decide whether to emit event or retry.\n * @param err - Error body.\n * @param emitterCb - CallingClientErrorEmitter\n * @param loggerContext - Logging context that has method and file name\n * @param restoreRegCb - Callback which will try restoring resgistration in case of 403\n */\nexport async function handleCallingClientErrors(\n  err: WebexRequestPayload,\n  emitterCb: CallingClientErrorEmitterCallback,\n  loggerContext: LogContext\n): Promise<boolean> {\n  const clientError = createClientError('', {}, ERROR_TYPE.DEFAULT, RegistrationStatus.INACTIVE);\n\n  const errorCode = Number(err.statusCode);\n  const finalError = false;\n  log.warn(`Status code: -> ${errorCode}`, loggerContext);\n  switch (errorCode) {\n    case ERROR_CODE.INTERNAL_SERVER_ERROR: {\n      log.warn(`500 Internal Server Error`, loggerContext);\n      updateErrorContext(\n        loggerContext,\n        ERROR_TYPE.SERVER_ERROR,\n        'An unknown error occurred while placing the request. Wait a moment and try again.',\n        clientError\n      );\n\n      emitterCb(clientError, finalError);\n      break;\n    }\n\n    default: {\n      updateErrorContext(loggerContext, ERROR_TYPE.DEFAULT, 'Unknown error', clientError);\n      log.warn(`Unknown Error`, loggerContext);\n      emitterCb(clientError, finalError);\n    }\n  }\n\n  return finalError;\n}\n\n/**\n * Handler for call related errors.\n *\n * @param emitterCb - Event emitter function.\n * @param errorType - Type of error experienced.\n * @param errorLayer - Call control or media layer.\n * @param retryCb - Failure retry function.\n * @param correlationId - CorrelationId of the call.\n * @param err - Error Response.\n * @param caller - Caller function.\n * @param file - File name.\n */\nexport async function handleCallErrors(\n  emitterCb: CallErrorEmitterCallBack,\n  errorLayer: ERROR_LAYER,\n  retryCb: RetryCallBack,\n  correlationId: CorrelationId,\n  err: WebexRequestPayload,\n  caller: string,\n  file: string\n) {\n  const loggerContext = {\n    file,\n    method: caller,\n  };\n  const callError = createCallError('', loggerContext, ERROR_TYPE.DEFAULT, '', errorLayer);\n\n  const errorCode = Number(err.statusCode);\n\n  log.warn(`Status code: ->${errorCode}`, loggerContext);\n\n  switch (errorCode) {\n    case ERROR_CODE.UNAUTHORIZED: {\n      log.warn(`401 Unauthorized`, loggerContext);\n\n      updateCallErrorContext(\n        loggerContext,\n        ERROR_TYPE.TOKEN_ERROR,\n        'User is unauthorized due to an expired token. Sign out, then sign back in.',\n        correlationId,\n        callError\n      );\n\n      emitterCb(callError);\n      break;\n    }\n\n    case ERROR_CODE.FORBIDDEN:\n    /* follow through as both 403 and 503 can have similar error codes */\n\n    case ERROR_CODE.SERVICE_UNAVAILABLE: {\n      const errorBody = <IDeviceInfo>err.body;\n\n      if (!errorBody) {\n        log.warn('Error response has no body, throwing default error', loggerContext);\n        updateCallErrorContext(\n          loggerContext,\n          err.statusCode === 403 ? ERROR_TYPE.FORBIDDEN_ERROR : ERROR_TYPE.SERVICE_UNAVAILABLE,\n          err.statusCode === 403\n            ? 'An unauthorized action has been received. This action has been blocked. Please contact the administrator if this persists.'\n            : 'An error occurred on the server while processing the request. Wait a moment and try again.',\n          correlationId,\n          callError\n        );\n        emitterCb(callError);\n\n        return;\n      }\n\n      /* Handle retry-after cases */\n\n      if (err.headers && 'retry-after' in err.headers && retryCb) {\n        const retryInterval = Number(err.headers['retry-after'] as unknown);\n\n        log.warn(`Retry Interval received: ${retryInterval}`, loggerContext);\n        retryCb(retryInterval);\n\n        return;\n      }\n\n      /* Handling various Error codes */\n      const code = Number(errorBody.errorCode);\n\n      let message!: string;\n\n      switch (code) {\n        case CALL_ERROR_CODE.INVALID_STATUS_UPDATE: {\n          message =\n            'An invalid status update has been received for the call. Wait a moment and try again.';\n          break;\n        }\n        case CALL_ERROR_CODE.DEVICE_NOT_REGISTERED: {\n          message =\n            'The client has unregistered. Please wait for the client to register before attempting the call. If error persists, sign out, sign back in and attempt the call.';\n          break;\n        }\n        case CALL_ERROR_CODE.CALL_NOT_FOUND: {\n          message = 'Call is not found on the server. Wait a moment and try again.';\n          break;\n        }\n        case CALL_ERROR_CODE.ERROR_PROCESSING: {\n          message =\n            'An error occurred while processing the call on the server. Wait a moment and try again.';\n          break;\n        }\n        case CALL_ERROR_CODE.USER_BUSY: {\n          message = 'Called user is busy.';\n          break;\n        }\n        case CALL_ERROR_CODE.PARSING_ERROR: {\n          message =\n            'An error occurred while parsing the provided information. Wait a moment and try again.';\n          break;\n        }\n        case CALL_ERROR_CODE.NOT_ACCEPTABLE: {\n          message =\n            'An error occurred on the server while accepting the call. Wait a moment and try again. Please contact the administrator if this persists.';\n          break;\n        }\n        case CALL_ERROR_CODE.CALL_REJECTED: {\n          message =\n            'Call rejected by the server. Wait a moment and try again. Please contact the administrator if this persists.';\n          break;\n        }\n        case CALL_ERROR_CODE.NOT_AVAILABLE: {\n          message =\n            'Calling services not available. Wait a moment and try again. Please contact the administrator if this persists.';\n          break;\n        }\n        default: {\n          message = 'An unknown error occurred. Wait a moment and try again.';\n        }\n      }\n\n      /* We just emit the errors to the app */\n\n      updateCallErrorContext(\n        loggerContext,\n        err.statusCode === 403 ? ERROR_TYPE.FORBIDDEN_ERROR : ERROR_TYPE.SERVICE_UNAVAILABLE,\n        message,\n        correlationId,\n        callError\n      );\n\n      emitterCb(callError);\n      break;\n    }\n\n    case ERROR_CODE.DEVICE_NOT_FOUND: {\n      log.warn(`404 Call Not Found`, loggerContext);\n\n      updateCallErrorContext(\n        loggerContext,\n        ERROR_TYPE.NOT_FOUND,\n        'Call is no longer active. Wait a moment and try again.',\n        correlationId,\n        callError\n      );\n\n      emitterCb(callError);\n      break;\n    }\n\n    case ERROR_CODE.INTERNAL_SERVER_ERROR: {\n      log.warn(`500 Internal Server Error`, loggerContext);\n\n      updateCallErrorContext(\n        loggerContext,\n        ERROR_TYPE.SERVER_ERROR,\n        'An unknown error occurred in the call. Wait a moment and try again.',\n        correlationId,\n        callError\n      );\n\n      emitterCb(callError);\n      break;\n    }\n\n    default: {\n      log.warn(`Unknown Error`, loggerContext);\n    }\n  }\n}\n\n/**\n *Function to return error details.\n *\n * @param errorCode - WebexRequestPayload // Error status code for failed cases.\n * @param err -.\n * @param loggerContext -.\n * @returns Error response (status code and error message).\n */\nexport async function serviceErrorCodeHandler(\n  err: WebexRequestPayload,\n  loggerContext: LogContext\n): Promise<\n  | JanusResponseEvent\n  | VoicemailResponseEvent\n  | CallSettingResponse\n  | ContactResponse\n  | UpdateMissedCallsResponse\n  | UCMLinesResponse\n  | DeleteCallHistoryRecordsResponse\n> {\n  const errorCode = Number(err.statusCode);\n  const failureMessage = 'FAILURE';\n\n  switch (errorCode) {\n    case ERROR_CODE.BAD_REQUEST: {\n      log.warn(`400 Bad request`, loggerContext);\n\n      const errorDetails = {\n        statusCode: 400,\n        data: {\n          error: '400 Bad request',\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n\n    case ERROR_CODE.UNAUTHORIZED: {\n      log.warn(`401 User is unauthorised, possible token expiry`, loggerContext);\n      const errorDetails = {\n        statusCode: 401,\n        data: {\n          error: 'User is unauthorised, possible token expiry',\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n\n    case ERROR_CODE.FORBIDDEN: {\n      log.warn(`403 User request is forbidden`, loggerContext);\n\n      const errorDetails = {\n        statusCode: 403,\n        data: {\n          error: 'User request is forbidden',\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n\n    case ERROR_CODE.DEVICE_NOT_FOUND: {\n      log.warn(`404 User info not found`, loggerContext);\n\n      const errorDetails = {\n        statusCode: 404,\n        data: {\n          error: 'User info not found',\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n\n    case ERROR_CODE.REQUEST_TIMEOUT: {\n      log.warn(`408 Request to the server timedout`, loggerContext);\n\n      const errorDetails = {\n        statusCode: 408,\n        data: {\n          error: 'Request to the server timedout',\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n    case ERROR_CODE.NOT_IMPLEMENTED: {\n      log.warn(`501 Not Implemented error occurred`, loggerContext);\n\n      const errorDetails = {\n        statusCode: 501,\n        data: {\n          error: 'Method is not implemented at the backend',\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n    case ERROR_CODE.INTERNAL_SERVER_ERROR: {\n      log.warn(`500 Internal server error occurred`, loggerContext);\n\n      const errorDetails = {\n        statusCode: 500,\n        data: {\n          error: 'Internal server error occurred',\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n\n    case ERROR_CODE.SERVICE_UNAVAILABLE: {\n      log.warn(`503 Unable to establish a connection with the server`, loggerContext);\n\n      const errorDetails = {\n        statusCode: 503,\n        data: {\n          error: 'Unable to establish a connection with the server',\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n\n    default: {\n      log.warn(`${errorCode || 422} Exception has occurred`, loggerContext);\n      const errorDetails = {\n        statusCode: errorCode || 422,\n        data: {\n          error: `${errorCode || 422} Exception has occurred`,\n        },\n        message: failureMessage,\n      };\n\n      return errorDetails;\n    }\n  }\n}\n\n/**\n * @param stats - RTC peer connection stats.\n * @returns CallRtpStats.\n */\nexport function parseMediaQualityStatistics(stats: RTCStatsReport): CallRtpStats {\n  if (!stats || navigator.userAgent.indexOf('Firefox') !== -1) {\n    log.info('RTCStatsReport is null, adding dummy stats', {\n      file: UTILS_FILE,\n      method: parseMediaQualityStatistics.name,\n    });\n\n    return DUMMY_METRICS as unknown as CallRtpStats;\n  }\n\n  try {\n    let type!: string;\n    let id!: string;\n    let inboundCodec!: string;\n    let outboundCodec!: string;\n\n    const localCandidates = {};\n    const candidatePairs = {};\n    const codecList = {};\n\n    const rxStat = {} as ReceiveStatistics;\n    const txStat = {} as TransmitStatistics;\n    const vqPayload = {} as VoiceQualityMetrics;\n\n    let jitterBufferDelay = 0;\n    let jitterBufferEmittedCount = 0;\n    let totalRoundTripTime = 0;\n    let roundTripTimeMeasurements = 0;\n    let selectedPair = '';\n    let bitRate = 0;\n\n    /* Set defaults */\n    vqPayload.maxJitter = 0;\n    vqPayload.VoPktSizeMs = 20;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    stats.forEach((report: any) => {\n      Object.keys(report).forEach((statName) => {\n        if (statName !== TIMESTAMP) {\n          if (!type || statName === TYPE) {\n            type = report[statName] as string;\n          } else if (!id || statName === MEDIA_ID) {\n            id = report[statName] as string;\n          } else if (id && id.indexOf(RTC_ICE_CANDIDATE_PAIR) !== -1) {\n            if (statName === LOCAL_CANDIDATE_ID) {\n              candidatePairs[id] = report[statName];\n            }\n          } else if (id && id.indexOf(RTC_ICE_CANDIDATE) !== -1) {\n            if (statName === NETWORK_TYPE) {\n              localCandidates[id] = report[statName];\n            }\n          } else if (\n            id &&\n            (id.indexOf(INBOUND_CODEC_MATCH) !== -1 ||\n              id.indexOf(OUTBOUND_CODEC_MATCH) !== -1 ||\n              id.indexOf(RTC_CODEC) !== -1)\n          ) {\n            if (statName === MIME_TYPE) {\n              codecList[id] = report[statName];\n            }\n          } else if (type && type === REMOTE_INBOUND_RTP) {\n            switch (statName) {\n              case TOTAL_ROUND_TRIP_TIME: {\n                totalRoundTripTime = report[statName];\n                break;\n              }\n              case ROUND_TRIP_TIME_MEASUREMENTS: {\n                roundTripTimeMeasurements = report[statName];\n                break;\n              }\n              default: {\n                // We don't care about the other stats\n              }\n            }\n          } else if (type && type === INBOUND_RTP) {\n            switch (statName) {\n              case CODEC_ID: {\n                inboundCodec = report[statName];\n                break;\n              }\n              case PACKETS_RECEIVED: {\n                rxStat.Pkt = report[statName];\n                break;\n              }\n              case BYTES_RECEIVED: {\n                rxStat.Oct = report[statName];\n                break;\n              }\n              case PACKETS_DISCARDED: {\n                rxStat.LatePkt = report[statName];\n                break;\n              }\n              case PACKETS_LOST: {\n                rxStat.LostPkt = report[statName];\n                break;\n              }\n              case JITTER_BUFFER_DELAY: {\n                jitterBufferDelay = report[statName];\n                break;\n              }\n              case JITTER_BUFFER_EMITTED_COUNT: {\n                jitterBufferEmittedCount = report[statName];\n                break;\n              }\n              default: {\n                // We don't care about the other stats\n              }\n            }\n          } else if (type && type === TRANSPORT) {\n            switch (statName) {\n              case SELECTED_CANDIDATE_PAIR_ID: {\n                selectedPair = report[statName];\n                break;\n              }\n              default: {\n                // We don't care about the other stats\n              }\n            }\n          } else if (type && type === OUTBOUND_RTP) {\n            switch (statName) {\n              case CODEC_ID: {\n                outboundCodec = report[statName];\n                break;\n              }\n              case PACKETS_SENT: {\n                txStat.Pkt = report[statName];\n                break;\n              }\n              case BYTES_SENT: {\n                txStat.Oct = report[statName];\n                break;\n              }\n              case TARGET_BIT_RATE: {\n                bitRate = report[statName];\n                break;\n              }\n              default: {\n                // We don't care about the other stats\n              }\n            }\n          } else if (type && type === MEDIA_SOURCE) {\n            switch (statName) {\n              case TOTAL_SAMPLES_DURATION: {\n                rxStat.Dur = report[statName];\n                txStat.Dur = report[statName];\n                break;\n              }\n              default: {\n                // We don't care about the other stats\n              }\n            }\n          }\n        }\n      });\n    });\n\n    /* One way Delay */\n    if (roundTripTimeMeasurements !== 0) {\n      vqPayload.VoOneWayDelayMs = totalRoundTripTime / (2 * roundTripTimeMeasurements);\n    } else {\n      vqPayload.VoOneWayDelayMs = 0;\n    }\n    /* Application type */\n    vqPayload.hwType = `${platform.os}/${platform.name}-${platform.version}`;\n\n    /* Network type */\n    vqPayload.networkType = localCandidates[candidatePairs[selectedPair]];\n\n    /* Average Jitter */\n    rxStat.AvgJit = jitterBufferDelay / jitterBufferEmittedCount;\n\n    /* Update codec */\n    // eslint-disable-next-line prefer-destructuring\n    vqPayload.VoRxCodec = codecList[inboundCodec].split('/')[1];\n\n    const txVqPayload = {} as TransmitterVqPayload;\n\n    // eslint-disable-next-line prefer-destructuring\n    txVqPayload.VoTxCodec = codecList[outboundCodec].split('/')[1];\n    txVqPayload.rtpBitRate = bitRate;\n\n    const byeStats = {};\n\n    rxStat.VQMetrics = vqPayload;\n    txStat.VQMetrics = txVqPayload;\n\n    byeStats[RTP_RX_STAT] = rxStat;\n    byeStats[RTP_TX_STAT] = txStat;\n\n    log.log(JSON.stringify(byeStats), {file: UTILS_FILE, method: parseMediaQualityStatistics.name});\n\n    return byeStats as CallRtpStats;\n  } catch (err: unknown) {\n    log.warn(`Caught error while parsing RTP stats, ${err}`, {\n      file: UTILS_FILE,\n      method: parseMediaQualityStatistics.name,\n    });\n\n    return DUMMY_METRICS as unknown as CallRtpStats;\n  }\n}\n\n/**\n * To simulate delays.\n *\n * @param msec - Amount of delay.\n * @returns - Promise.\n */\nexport const waitForMsecs = (msec: number) =>\n  new Promise((resolve) => {\n    setTimeout(resolve, msec);\n  });\n\n/**\n * Register calling backend.\n *\n * @param webex -.\n * @returns CallingBackEnd.\n */\nexport function getCallingBackEnd(webex: WebexSDK): CALLING_BACKEND {\n  const entModels: Model[] = webex.internal.device.features.entitlement.models;\n  let callingBackend;\n\n  if (webex.internal.device.callingBehavior === NATIVE_WEBEX_TEAMS_CALLING) {\n    for (let i = 0; i < entModels.length; i += 1) {\n      if (\n        entModels[i][VALUES][KEY] === ENTITLEMENT_BASIC ||\n        entModels[i][VALUES][KEY] === ENTITLEMENT_STANDARD\n      ) {\n        callingBackend = CALLING_BACKEND.WXC;\n        break;\n      } else if (entModels[i][VALUES][KEY] === ENTITLEMENT_BROADWORKS_CONN) {\n        callingBackend = CALLING_BACKEND.BWRKS;\n        break;\n      }\n    }\n  } else if (webex.internal.device.callingBehavior === NATIVE_SIP_CALL_TO_UCM) {\n    callingBackend = CALLING_BACKEND.UCM;\n  } else {\n    callingBackend = CALLING_BACKEND.INVALID;\n  }\n\n  return callingBackend as CALLING_BACKEND;\n}\n\n/**\n * Register XSI endpoint based on calling backend.\n *\n * @param webex -.\n * @param loggerContext -.\n * @param callingBackend -.\n * @returns Promise.\n */\nexport async function getXsiActionEndpoint(\n  webex: WebexSDK,\n  loggerContext: LogContext,\n  callingBackend: CALLING_BACKEND\n) {\n  try {\n    switch (callingBackend) {\n      case CALLING_BACKEND.WXC: {\n        const userIdResponse = <WebexRequestPayload>await webex.request({\n          uri: `${webex.internal.services._serviceUrls.hydra}/${XSI_ACTION_ENDPOINT_ORG_URL_PARAM}`,\n          method: HTTP_METHODS.GET,\n        });\n        const response = userIdResponse.body as WebexRequestPayload;\n\n        const xsiEndpoint = response[ITEMS][0][XSI_ACTION_ENDPOINT];\n\n        return xsiEndpoint;\n      }\n\n      case CALLING_BACKEND.BWRKS: {\n        const bwTokenResponse = <WebexRequestPayload>await webex.request({\n          uri: `${webex.internal.services._serviceUrls.wdm}/${DEVICES}`,\n          method: HTTP_METHODS.GET,\n        });\n        const response = bwTokenResponse.body as WebexRequestPayload;\n\n        let xsiEndpoint = response[DEVICES][0][SETTINGS][BW_XSI_URL];\n\n        const xsiUrl = response[DEVICES][0][SETTINGS][BW_XSI_URL];\n\n        // Check if it ends with specific version and slice accordingly\n        if (xsiUrl.endsWith(BW_XSI_ENDPOINT_VERSION)) {\n          xsiEndpoint = xsiUrl.slice(0, -5); // Remove 'v2.0'\n        } else if (xsiUrl.endsWith(BW_XSI_ENDPOINT_VERSION_WITH_SLASH)) {\n          xsiEndpoint = xsiUrl.slice(0, -6); // Remove 'v2.0/'\n        }\n\n        return xsiEndpoint;\n      }\n\n      default: {\n        throw new Error('Calling backend is not identified, exiting....');\n      }\n    }\n  } catch (err: unknown) {\n    const errorInfo = err as WebexRequestPayload;\n\n    serviceErrorCodeHandler(errorInfo, loggerContext);\n\n    return errorInfo;\n  }\n}\n\n/**\n * Get sorted VoicemailList based on sort order passed.\n *\n * @param webex - Webex object to get service urls.\n * @param callingBackend - CallingBackend will have info like UCM.\n * @returns VGEndpointUrl.\n */\nexport function getVgActionEndpoint(webex: WebexSDK, callingBackend: CALLING_BACKEND) {\n  try {\n    if (callingBackend && callingBackend === CALLING_BACKEND.UCM) {\n      return webex.internal.services._serviceUrls['ucmgmt-gateway'];\n    }\n    throw new Error('Calling backend is not identified, exiting....');\n  } catch (err: unknown) {\n    const errorInfo = err as unknown;\n\n    return errorInfo;\n  }\n}\n\n/**\n * Get sorted VoiceMailList based on sort order passed.\n *\n * @param voiceMessageList - List of voicemessage.\n * @param sortOrder - Type of sort either ascending or descending.\n * @returns Sorted voicemessageList .\n */\nexport function getSortedVoicemailList(\n  voiceMessageList: MessageInfo[],\n  sortOrder: SORT\n): MessageInfo[] {\n  /* istanbul ignore else */\n  if (sortOrder === SORT.DESC) {\n    voiceMessageList.sort(\n      (voiceMail, nextVoiceMail) =>\n        nextVoiceMail[TIME][PLACEHOLDER_KEY] - voiceMail[TIME][PLACEHOLDER_KEY]\n    );\n  } else if (sortOrder === SORT.ASC) {\n    voiceMessageList.sort(\n      (voiceMail, nextVoiceMail) =>\n        voiceMail[TIME][PLACEHOLDER_KEY] - nextVoiceMail[TIME][PLACEHOLDER_KEY]\n    );\n  }\n\n  return voiceMessageList;\n}\n\n/**\n *  Handler to perform a SCIM Query.\n *\n * @param filter - A filter for the query.\n * @returns - Promise.\n */\nexport async function scimQuery(filter: string) {\n  log.info(`Starting resolution for filter:- ${filter}`, {\n    file: UTILS_FILE,\n    method: 'scimQuery',\n  });\n  const sdkConnector = SDKConnector;\n  const webex = sdkConnector.getWebex();\n\n  const isProd = !webex.internal.device.url.includes('-int');\n  const webexHost = isProd ? WEBEX_API_PROD : WEBEX_API_BTS;\n\n  const scimUrl = `${webexHost}/${IDENTITY_ENDPOINT_RESOURCE}/${SCIM_ENDPOINT_RESOURCE}/${webex.internal.device.orgId}/${SCIM_USER_FILTER}`;\n  const query = scimUrl + encodeURIComponent(filter);\n\n  return <WebexRequestPayload>(<unknown>webex.request({\n    uri: query,\n    method: HTTP_METHODS.GET,\n    headers: {\n      [CISCO_DEVICE_URL]: webex.internal.device.url,\n      [SPARK_USER_AGENT]: CALLING_USER_AGENT,\n    },\n  }));\n}\n\n/**\n * Resolve Caller Id display information using SCIM query.\n *\n * @param filter - CI userId.\n */\nexport async function resolveCallerIdDisplay(filter: string) {\n  let resolution;\n  const displayResult = {} as DisplayInformation;\n\n  try {\n    const response = await scimQuery(filter);\n\n    resolution = response.body as SCIMListResponse;\n\n    log.info(`Number of records found for this user :- ${resolution.totalResults}`, {\n      file: UTILS_FILE,\n      method: 'resolveCallerIdDisplay',\n    });\n  } catch (err) {\n    const res = err as WebexRequestPayload;\n\n    log.warn(`Error response: - ${res.statusCode}`, {\n      file: UTILS_FILE,\n      method: 'resolveCallerIdDisplay',\n    });\n  }\n\n  if (resolution?.totalResults && resolution.totalResults > 0) {\n    /* Every user has single resource from what we have discussed. May need to revisit this later\n     * for shared-line use-cases.\n     */\n    const scimResource = resolution.Resources[0];\n\n    displayResult.name = scimResource.displayName;\n\n    /* Pick only the primary number  OR  2nd preference Work */\n    const numberObj =\n      scimResource.phoneNumbers?.find((num) => num.primary) ||\n      scimResource.phoneNumbers?.find((num) => num.type.toLowerCase() === 'work');\n\n    if (numberObj) {\n      displayResult.num = <string>numberObj.value;\n    } else if (scimResource.phoneNumbers && scimResource.phoneNumbers.length > 0) {\n      /* When no primary number exists OR PA-ID/From failed to populate, we take the first number */\n      log.info('Failure to resolve caller information. Setting number as caller ID', {\n        file: UTILS_FILE,\n        method: 'resolveCallerIdDisplay',\n      });\n      displayResult.num = scimResource.phoneNumbers[0].value;\n    }\n\n    /* For Webapp, we are only picking thumbnail photo */\n    const photo = scimResource.photos?.find((photo) => photo.type === 'thumbnail');\n\n    displayResult.avatarSrc = photo ? photo.value : 'unknown';\n\n    displayResult.id = scimResource.id;\n  }\n\n  return displayResult;\n}\n\n/**\n * Resolve contact info from display name, using people search API.\n *\n * @param name - Display name.\n */\nexport async function resolveCallerIdByName(name: string) {\n  const displayResult = {} as DisplayInformation;\n  const sdkConnector = SDKConnector;\n  const webex = sdkConnector.getWebex();\n  /**\n   * @param query - Display name.\n   */\n  const searchDirectory = (query: string) => {\n    return webex.people.list({\n      displayName: query,\n    });\n  };\n\n  await searchDirectory(name).then((results) => {\n    log.info(`DS Result: ${results}`, {\n      file: UTILS_FILE,\n      method: 'resolveCallerIdByName',\n    });\n    if (results && results.items && results.items.length > 0) {\n      const resolution = results.items[0];\n\n      displayResult.name = resolution.displayName;\n\n      /* id is like cisco spark://us/PEOPLE/b853bbd1-1136-4d25-938d-0c37541b1234\n       *  We need to extract UUID portion. */\n      const id = Buffer.from(resolution.id, 'base64').toString('binary');\n\n      displayResult.id = id.split('/').pop();\n\n      const numObj = resolution.phoneNumbers.find((num) => num.type === 'work');\n\n      if (numObj) {\n        displayResult.num = numObj.value;\n      } else if (resolution.phoneNumbers.length > 0) {\n        displayResult.num = resolution.phoneNumbers[0].value;\n      }\n      displayResult.avatarSrc = resolution.avatar;\n      log.info(\n        `Extracted details:- name: ${displayResult.name} , number: ${displayResult.num}, photo: ${displayResult.avatarSrc}, id: ${displayResult.id}`,\n        {\n          file: UTILS_FILE,\n          method: 'resolveCallerIdByName',\n        }\n      );\n    }\n  });\n\n  return displayResult;\n}\n\n/**\n * Resolve the contact information.\n *\n * @param callingPartyInfo - Calling Party Info.\n */\nexport async function resolveContact(\n  callingPartyInfo: CallingPartyInfo\n): Promise<DisplayInformation | null> {\n  if (callingPartyInfo.userExternalId && callingPartyInfo.userExternalId.$) {\n    /* SCIM Search */\n    return resolveCallerIdDisplay(`id eq \"${callingPartyInfo.userExternalId.$}\"`);\n  }\n  if (callingPartyInfo.name && callingPartyInfo.name.$) {\n    /* People Search */\n    return resolveCallerIdByName(callingPartyInfo.name.$);\n  }\n\n  return null;\n}\n\n/**\n * Store encrypted voicemailList in SessionStorage.\n *\n * @param context - Context for storage.\n * @param voiceMessageList - List of voicemessage.\n */\nexport function storeVoicemailList(context: string, voiceMessageList: MessageInfo[]) {\n  const vmEncodedList = Buffer.from(JSON.stringify(voiceMessageList), 'utf8').toString('base64');\n\n  sessionStorage.setItem(context, vmEncodedList.toString());\n}\n\n/**\n * Fetch decrypted voicemailList from SessionStorage.\n *\n * @param context - Context for the storage.\n * @param offset - Number of voicemail records to skip.\n * @param offsetLimit - Number of voicemail list to fetch from the offset.\n * @param loggerContext - File, method name object.\n * @returns - Array containing voicemails and flag to indicate availability of more voicemails.\n */\nexport function fetchVoicemailList(\n  context: string,\n  offset: number,\n  offsetLimit: number,\n  loggerContext: LogContext\n): FilteredVoicemail {\n  let moreVoicemails = false;\n  let requiredVoicemailList: MessageInfo[] = [];\n\n  try {\n    const voicemailList = JSON.parse(\n      Buffer.from(sessionStorage.getItem(context) as string, 'base64').toString('utf8')\n    );\n\n    log.info(`Length of voicemail list:  ${voicemailList.length}`, loggerContext);\n\n    if (voicemailList.length > offset + offsetLimit) {\n      moreVoicemails = true;\n    }\n\n    requiredVoicemailList = voicemailList.slice(offset, offset + offsetLimit);\n  } catch (err: unknown) {\n    log.warn(`Caught exception while fetching voicemail from storage. ${err}`, loggerContext);\n    const errorInfo = err as WebexRequestPayload;\n\n    serviceErrorCodeHandler(errorInfo, {});\n  }\n\n  return {messages: requiredVoicemailList, moreVMAvailable: moreVoicemails};\n}\n\n/**\n * Converts a uuid to a hydra id without a network dip.\n *\n * @param id - ID to be encoded to base64.\n * @param decodeType - DecodeType.\n * @returns - Encoded string value.\n */\nexport function inferIdFromUuid(id: string, decodeType: DecodeType): string {\n  return Buffer.from(`${INFER_ID_CONSTANT}/${decodeType}/${id}`, 'binary').toString('base64');\n}\n\n/**\n * Validates service indicator.\n *\n * @param indicator - Must match with one of the values in ServiceIndicator enum.\n * @returns True if validation is successful else false.\n */\nfunction isValidServiceIndicator(indicator: ServiceIndicator): boolean {\n  return Object.values(ServiceIndicator).some((v) => v === indicator);\n}\n\n/**\n * Validates domain field in input service data object.\n * Domain value must be in valid domain format for service\n * type contactcenter.\n * But for service type calling it's allowed to be empty or\n * undefined however if it's not empty/undefined for service\n * type calling then even that will be validated to see if it\n * is in valid domain format.\n *\n * @param serviceData - .\n * @returns True if validation is successful else false.\n */\nfunction isValidServiceDomain(serviceData: ServiceData): boolean {\n  const regexp = /^[a-z0-9]+([-.]{1}[a-z0-9]+)*\\.[a-z]{2,6}$/i;\n  const {domain} = serviceData;\n\n  if (!domain) {\n    return (\n      serviceData.indicator === ServiceIndicator.CALLING ||\n      serviceData.indicator === ServiceIndicator.GUEST_CALLING\n    );\n  }\n\n  return regexp.test(domain);\n}\n\n/**\n * Validates service data object(indicator & domain) and throws\n * exception with a message indicating the reason for validation\n * failure.\n *\n * @param serviceData - Input service data to be validated.\n */\nexport function validateServiceData(serviceData: ServiceData) {\n  const allowedValues = Object.values(ServiceIndicator);\n  const formattedValues = allowedValues.join(', ').replace(/,([^,]*)$/, ' and$1');\n\n  if (!isValidServiceIndicator(serviceData.indicator)) {\n    throw new Error(`Invalid service indicator, Allowed values are: ${formattedValues}`);\n  }\n\n  if (!isValidServiceDomain(serviceData)) {\n    throw new Error('Invalid service domain.');\n  }\n}\n\n/**\n * Modifies SDP to replace IPv6 \"c=\" lines with IPv4.And adds an IPv4 candidate if none exists.\n *\n * @param sdp - Session Description Protocol string.\n * @returns Modified SDP string.\n */\nexport function modifySdpForIPv4(sdp: string): string {\n  try {\n    // Normalize line endings to avoid issues\n    sdp = sdp.replace(/\\r\\n|\\r/g, '\\n');\n\n    // Ensure consistent spacing without removing intentional indentation\n    sdp = sdp.replace(/^[ \\t]+/gm, '');\n\n    // Check if at least one IPv6 \"c=\" line is present\n    const ipv6CLineMatches = sdp.match(/c=IN IP6 [\\da-f:.]+/gi) || [];\n    const hasIPv6CLine = ipv6CLineMatches.length > 0;\n\n    if (hasIPv6CLine) {\n      log.info('Modifying SDP for IPv4 compatibility', {\n        file: UTILS_FILE,\n        method: modifySdpForIPv4.name,\n      });\n\n      // Extract an existing IPv4 candidate's IP, if available\n      const ipv4CandidateMatch = sdp.match(/a=candidate:\\d+ \\d+ \\w+ \\d+ ([\\d.]+) \\d+ typ \\w+/);\n      const ipv4Address = ipv4CandidateMatch?.[1] || '192.1.1.1'; // Default fallback\n\n      // Replace all IPv6 \"c=\" lines with IPv4 using the extracted IP (or default)\n      sdp = sdp.replace(/c=IN IP6 [\\da-f:.]+/gi, `c=IN IP4 ${ipv4Address}`);\n\n      // Ensure newline separation between candidate lines\n      if (!ipv4CandidateMatch) {\n        let ipv4CandidateAdded = false;\n\n        sdp = sdp.replace(\n          /(a=candidate:(\\d+) (\\d+) (\\w+) (\\d+) ([\\da-f:.]+) (\\d+) typ (\\w+)[^\\n]*)/g,\n          (\n            match: string,\n            full: string,\n            foundation: string,\n            componentId: string,\n            transport: string, // Supports both UDP and TCP\n            priority: string,\n            connectionAddress: string,\n            port: string,\n            candidateType: string\n          ) => {\n            if (!ipv4CandidateAdded && connectionAddress.includes(':')) {\n              // Ensure it's IPv6 and only add once\n              ipv4CandidateAdded = true;\n              const newFoundation = (parseInt(foundation, 10) + 1).toString();\n\n              return (\n                `${full}\\n` +\n                `a=candidate:${newFoundation} ${componentId} ${transport} ${priority} ${ipv4Address} ${port} typ ${candidateType} generation 0 network-id 1 network-cost 10`\n              );\n            }\n\n            return match;\n          }\n        );\n      }\n    }\n\n    return sdp;\n  } catch (error) {\n    log.warn(`Error modifying SDP for IPv4 compatibility: ${error}`, {\n      file: UTILS_FILE,\n      method: modifySdpForIPv4.name,\n    });\n\n    return sdp; // Return original SDP in case of an error\n  }\n}\n\n/**\n * Uploads logs to backend.\n *\n * @param webex - Webex object to get service urls.\n * @param data - Data to be uploaded.\n */\nexport async function uploadLogs(data = {}) {\n  try {\n    const webex = SDKConnector.getWebex();\n    await webex.internal.support.submitLogs(data);\n  } catch (error) {\n    log.error(error as ExtendedError, {\n      file: UTILS_FILE,\n      method: 'uploadLogs',\n    });\n  }\n}\n"],"mappings":"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"}