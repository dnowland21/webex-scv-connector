"use strict";

var _typeof = require("@babel/runtime-corejs2/helpers/typeof");
var _WeakMap = require("@babel/runtime-corejs2/core-js/weak-map");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _types = require("../Logger/types");
var utils = _interopRequireWildcard(require("../common/Utils"));
var _constants = require("../common/constants");
var _testUtil = require("../common/testUtil");
var _types2 = require("../common/types");
var _UcmBackendConnector = require("./UcmBackendConnector");
var _constants2 = require("./constants");
function _getRequireWildcardCache(e) { if ("function" != typeof _WeakMap) return null; var r = new _WeakMap(), t = new _WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? _Object$getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? _Object$defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
describe('Call Settings Client Tests for UcmBackendConnector', function () {
  var webex = (0, _testUtil.getTestUtilsWebex)();
  var userId = '8a67806f-fc4d-446b-a131-31e71ea5b0e9';
  var orgId = '1704d30d-a131-4bc7-9449-948487643793';
  describe('Call Forward Always test', function () {
    var callSettingsClient;
    var callForwardPayload = {
      callForwarding: {
        always: [{
          dn: '8001',
          destination: '8004',
          destinationVoicemailEnabled: false,
          e164Number: '+14922999903'
        }, {
          dn: '8002',
          destinationVoicemailEnabled: true,
          e164Number: ''
        }, {
          dn: '8003',
          destinationVoicemailEnabled: false,
          e164Number: ''
        }, {
          dn: '8000',
          destination: '8007',
          destinationVoicemailEnabled: false,
          e164Number: '8006'
        }]
      }
    };
    var callForwardingUri = "".concat(_constants.WEBEX_API_CONFIG_INT_URL, "/").concat(_constants2.PEOPLE_ENDPOINT, "/").concat(userId, "/").concat(_constants2.CF_ENDPOINT.toLowerCase(), "?").concat(_constants2.ORG_ENDPOINT, "=").concat(orgId);
    beforeAll(function () {
      callSettingsClient = new _UcmBackendConnector.UcmBackendConnector(webex, {
        level: _types.LOGGER.INFO
      }, false);
    });
    beforeEach(function () {
      var responsePayload = {
        statusCode: 200,
        body: callForwardPayload
      };
      webex.request.mockResolvedValue(responsePayload);
    });
    it('Success: Get Call Forward Always setting when set to destination', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var response, callForwardSetting;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return callSettingsClient.getCallForwardAlwaysSetting('8001');
          case 2:
            response = _context.sent;
            callForwardSetting = response.data.callSetting;
            expect(response.statusCode).toEqual(200);
            expect(response.message).toEqual(_constants.SUCCESS_MESSAGE);
            expect(callForwardSetting.enabled).toEqual(true);
            expect(callForwardSetting.destination).toEqual('8004');
            expect(webex.request).toBeCalledOnceWith({
              method: _types2.HTTP_METHODS.GET,
              uri: callForwardingUri
            });
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    it('Success: Get Call Forward Always setting when set to voicemail', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
      var response, callForwardSetting;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return callSettingsClient.getCallForwardAlwaysSetting('8002');
          case 2:
            response = _context2.sent;
            callForwardSetting = response.data.callSetting;
            expect(response.statusCode).toEqual(200);
            expect(response.message).toEqual(_constants.SUCCESS_MESSAGE);
            expect(callForwardSetting.enabled).toEqual(true);
            expect(callForwardSetting.destination).toEqual('VOICEMAIL');
            expect(webex.request).toBeCalledOnceWith({
              method: _types2.HTTP_METHODS.GET,
              uri: callForwardingUri
            });
          case 9:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    })));
    it('Success: Get Call Forward Always setting when not set', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
      var response, callForwardSetting;
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return callSettingsClient.getCallForwardAlwaysSetting('8003');
          case 2:
            response = _context3.sent;
            callForwardSetting = response.data.callSetting;
            expect(response.statusCode).toEqual(200);
            expect(response.message).toEqual(_constants.SUCCESS_MESSAGE);
            expect(callForwardSetting.enabled).toEqual(false);
            expect(callForwardSetting.destination).toBeFalsy();
            expect(webex.request).toBeCalledOnceWith({
              method: _types2.HTTP_METHODS.GET,
              uri: callForwardingUri
            });
          case 9:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
    it('Success: Get Call Forward Always setting when directory num matching with e16number and set to destination', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
      var response, callForwardSetting;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return callSettingsClient.getCallForwardAlwaysSetting('8006');
          case 2:
            response = _context4.sent;
            callForwardSetting = response.data.callSetting;
            expect(response.statusCode).toEqual(200);
            expect(response.message).toEqual(_constants.SUCCESS_MESSAGE);
            expect(callForwardSetting.enabled).toEqual(true);
            expect(callForwardSetting.destination).toEqual('8007');
            expect(webex.request).toBeCalledOnceWith({
              method: _types2.HTTP_METHODS.GET,
              uri: callForwardingUri
            });
          case 9:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    })));
    it('Failure: Get Call Forward Always setting fails', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
      var responsePayload, serviceErrorCodeHandlerSpy, response;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            responsePayload = {
              statusCode: 503
            };
            webex.request.mockClear();
            webex.request.mockRejectedValue(responsePayload);
            serviceErrorCodeHandlerSpy = jest.spyOn(utils, 'serviceErrorCodeHandler');
            _context5.next = 6;
            return callSettingsClient.getCallForwardAlwaysSetting('8002');
          case 6:
            response = _context5.sent;
            expect(response.statusCode).toEqual(503);
            expect(response.message).toEqual(_constants.FAILURE_MESSAGE);
            expect(response.data.error).toEqual('Unable to establish a connection with the server');
            expect(webex.request).toBeCalledOnceWith({
              method: _types2.HTTP_METHODS.GET,
              uri: callForwardingUri
            });
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith(responsePayload, {
              file: _constants.UCM_CONNECTOR_FILE,
              method: callSettingsClient.getCallForwardAlwaysSetting.name
            });
          case 12:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    })));
    it('Failure: Get Call Forward Always setting fails - wrong directoryNumber', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
      var response;
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return callSettingsClient.getCallForwardAlwaysSetting('8005');
          case 2:
            response = _context6.sent;
            expect(response.statusCode).toEqual(404);
            expect(response.message).toEqual(_constants.FAILURE_MESSAGE);
            expect(response.data.error).toEqual('Directory Number is not assigned to the user');
            expect(webex.request).toBeCalledOnceWith({
              method: _types2.HTTP_METHODS.GET,
              uri: callForwardingUri
            });
          case 7:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    })));
    it('Failure: Get Call Forward Always setting fails when no directoryNumberProvided', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
      var response;
      return _regenerator.default.wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return callSettingsClient.getCallForwardAlwaysSetting();
          case 2:
            response = _context7.sent;
            expect(response.statusCode).toEqual(400);
            expect(response.message).toEqual(_constants.FAILURE_MESSAGE);
            expect(response.data.error).toEqual('Directory Number is mandatory for UCM backend');
            expect(webex.request).not.toBeCalled();
          case 7:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    })));
    describe('Unsupported methods return failure', function () {
      var unsupportedMethods = ['getCallWaitingSetting', 'getDoNotDisturbSetting', 'setDoNotDisturbSetting', 'getCallForwardSetting', 'setCallForwardSetting', 'getVoicemailSetting', 'setVoicemailSetting'];
      it.each(unsupportedMethods)('%s', /*#__PURE__*/function () {
        var _ref8 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(methodName) {
          var response;
          return _regenerator.default.wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return callSettingsClient[methodName]();
              case 2:
                response = _context8.sent;
                expect(response.statusCode).toEqual(501);
                expect(response.message).toEqual(_constants.FAILURE_MESSAGE);
                expect(response.data.error).toEqual('Method is not implemented at the backend');
                expect(webex.request).not.toBeCalled();
              case 7:
              case "end":
                return _context8.stop();
            }
          }, _callee8);
        }));
        return function (_x) {
          return _ref8.apply(this, arguments);
        };
      }());
    });
  });
});
//# sourceMappingURL=UcmBackendConnector.test.js.map
