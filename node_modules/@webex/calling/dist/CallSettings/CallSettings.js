"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.createCallSettingsClient = exports.CallSettings = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _constants = require("../common/constants");
var _Utils = require("../common/Utils");
var _SDKConnector = _interopRequireDefault(require("../SDKConnector"));
var _Logger = _interopRequireDefault(require("../Logger"));
var _types = require("../common/types");
var _WxCallBackendConnector = require("./WxCallBackendConnector");
var _constants2 = require("./constants");
var _UcmBackendConnector = require("./UcmBackendConnector");
/* eslint-disable valid-jsdoc */
/**
 * `CallSettings` module is designed to offer a range of APIs for retrieving and updating settings such as Call Waiting, Do Not Disturb (DND), Call Forwarding, Voicemail, and more.
 * These operations are tailored to work with various calling backends, providing flexibility and adaptability to different scenarios.
 * The selection of the appropriate calling backend occurs during the instantiation of the CallSettings Client and is determined by the user's entitlements.
 *
 * This code snippet demonstrates how to create an instance of `CallSettings` using webex and logger.
 *
 * Example
 * ```javascript
 * const callSettings = createCallSettingsClient(webex, logger);
 * ```
 */
var CallSettings = exports.CallSettings = /*#__PURE__*/function () {
  /**
   * @ignore
   */
  function CallSettings(webex, logger, useProdWebexApis) {
    (0, _classCallCheck2.default)(this, CallSettings);
    (0, _defineProperty2.default)(this, "sdkConnector", void 0);
    (0, _defineProperty2.default)(this, "webex", void 0);
    (0, _defineProperty2.default)(this, "callingBackend", void 0);
    (0, _defineProperty2.default)(this, "backendConnector", void 0);
    this.sdkConnector = _SDKConnector.default;
    if (!this.sdkConnector.getWebex()) {
      _SDKConnector.default.setWebex(webex);
    }
    _Logger.default.setLogger(logger.level, _constants2.CALL_SETTINGS_FILE);
    this.webex = this.sdkConnector.getWebex();
    this.initializeBackendConnector(logger, useProdWebexApis);
  }

  /**
   * Setup and initialize the Call Settings backend connector class object.
   */
  (0, _createClass2.default)(CallSettings, [{
    key: "initializeBackendConnector",
    value: function initializeBackendConnector(logger, useProdWebexApis) {
      this.callingBackend = (0, _Utils.getCallingBackEnd)(this.webex);
      _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with ").concat(this.callingBackend, " backend"), {
        file: _constants2.CALL_SETTINGS_FILE,
        method: _constants2.METHODS.INITIALIZE_BACKEND_CONNECTOR
      });
      switch (this.callingBackend) {
        case _types.CALLING_BACKEND.BWRKS:
        case _types.CALLING_BACKEND.WXC:
          this.backendConnector = new _WxCallBackendConnector.WxCallBackendConnector(this.webex, logger);
          break;
        case _types.CALLING_BACKEND.UCM:
          this.backendConnector = new _UcmBackendConnector.UcmBackendConnector(this.webex, logger, useProdWebexApis);
          break;
        default:
          throw new Error('Calling backend is not identified, exiting....');
      }
    }

    /**
     * Reads call waiting setting in Webex.
     */
  }, {
    key: "getCallWaitingSetting",
    value: (function () {
      var _getCallWaitingSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.CALL_SETTINGS_FILE,
                method: _constants2.METHODS.GET_CALL_WAITING_SETTING
              });
              return _context.abrupt("return", this.backendConnector.getCallWaitingSetting());
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getCallWaitingSetting() {
        return _getCallWaitingSetting.apply(this, arguments);
      }
      return getCallWaitingSetting;
    }()
    /**
     * Reads DND setting in Webex.
     */
    )
  }, {
    key: "getDoNotDisturbSetting",
    value: (function () {
      var _getDoNotDisturbSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.CALL_SETTINGS_FILE,
                method: _constants2.METHODS.GET_DO_NOT_DISTURB_SETTING
              });
              return _context2.abrupt("return", this.backendConnector.getDoNotDisturbSetting());
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getDoNotDisturbSetting() {
        return _getDoNotDisturbSetting.apply(this, arguments);
      }
      return getDoNotDisturbSetting;
    }()
    /**
     * Updates DND setting in Webex.
     * @param enabled - true to enable DND, false to disable DND.
     */
    )
  }, {
    key: "setDoNotDisturbSetting",
    value: (function () {
      var _setDoNotDisturbSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(enabled) {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.CALL_SETTINGS_FILE,
                method: _constants2.METHODS.SET_DO_NOT_DISTURB_SETTING
              });
              return _context3.abrupt("return", this.backendConnector.setDoNotDisturbSetting(enabled));
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function setDoNotDisturbSetting(_x) {
        return _setDoNotDisturbSetting.apply(this, arguments);
      }
      return setDoNotDisturbSetting;
    }()
    /**
     * Reads Call Forward setting in Webex.
     *
     */
    )
  }, {
    key: "getCallForwardSetting",
    value: (function () {
      var _getCallForwardSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.CALL_SETTINGS_FILE,
                method: _constants2.METHODS.GET_CALL_FORWARD_SETTING
              });
              return _context4.abrupt("return", this.backendConnector.getCallForwardSetting());
            case 2:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getCallForwardSetting() {
        return _getCallForwardSetting.apply(this, arguments);
      }
      return getCallForwardSetting;
    }()
    /**
     * Updates Call Forward setting in Webex.
     * @param callForwardingRequest - CallForwardSetting object.
     */
    )
  }, {
    key: "setCallForwardSetting",
    value: (function () {
      var _setCallForwardSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callForwardingRequest) {
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.CALL_SETTINGS_FILE,
                method: _constants2.METHODS.SET_CALL_FORWARD_SETTING
              });
              return _context5.abrupt("return", this.backendConnector.setCallForwardSetting(callForwardingRequest));
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setCallForwardSetting(_x2) {
        return _setCallForwardSetting.apply(this, arguments);
      }
      return setCallForwardSetting;
    }()
    /**
     * Reads Voicemail setting in Webex.
     */
    )
  }, {
    key: "getVoicemailSetting",
    value: (function () {
      var _getVoicemailSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.CALL_SETTINGS_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_SETTING
              });
              return _context6.abrupt("return", this.backendConnector.getVoicemailSetting());
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getVoicemailSetting() {
        return _getVoicemailSetting.apply(this, arguments);
      }
      return getVoicemailSetting;
    }()
    /**
     * Updates Voicemail setting in Webex.
     * @param voicemailRequest - VoicemailSetting object.
     */
    )
  }, {
    key: "setVoicemailSetting",
    value: (function () {
      var _setVoicemailSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(voicemailRequest) {
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.CALL_SETTINGS_FILE,
                method: _constants2.METHODS.SET_VOICEMAIL_SETTING
              });
              return _context7.abrupt("return", this.backendConnector.setVoicemailSetting(voicemailRequest));
            case 2:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function setVoicemailSetting(_x3) {
        return _setVoicemailSetting.apply(this, arguments);
      }
      return setVoicemailSetting;
    }()
    /**
     * Reads the Call Forwarding Always settings in Webex.
     * This will also check if CFA is set to Voicemail.
     * If CFA is set to destination, that will take precedence.
     * @param directoryNumber - Directory number of the user.
     */
    )
  }, {
    key: "getCallForwardAlwaysSetting",
    value: (function () {
      var _getCallForwardAlwaysSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(directoryNumber) {
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.CALL_SETTINGS_FILE,
                method: _constants2.METHODS.GET_CALL_FORWARD_ALWAYS_SETTING
              });
              return _context8.abrupt("return", this.backendConnector.getCallForwardAlwaysSetting(directoryNumber));
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getCallForwardAlwaysSetting(_x4) {
        return _getCallForwardAlwaysSetting.apply(this, arguments);
      }
      return getCallForwardAlwaysSetting;
    }())
  }]);
  return CallSettings;
}();
/**
 * Creates an instance of CallSettings Client.
 *
 * @param {WebexSDK} webex - An instance of the Webex SDK.
 * @param {LoggerInterface} logger - An instance implementing LoggerInterface used to set the log level for the module.
 */
var createCallSettingsClient = exports.createCallSettingsClient = function createCallSettingsClient(webex, logger, useProdWebexApis) {
  return new CallSettings(webex, logger, useProdWebexApis);
};
//# sourceMappingURL=CallSettings.js.map
