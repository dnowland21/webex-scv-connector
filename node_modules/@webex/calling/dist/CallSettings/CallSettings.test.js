"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _assign = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign"));
var _testUtil = require("../common/testUtil");
var _types = require("../Logger/types");
var _constants = require("../common/constants");
var _types2 = require("../common/types");
var _WxCallBackendConnector = require("./WxCallBackendConnector");
var _CallSettings = require("./CallSettings");
var _UcmBackendConnector = require("./UcmBackendConnector");
describe('CallSettings Client tests', function () {
  var webex = (0, _testUtil.getTestUtilsWebex)();
  describe('createCallSettingsClient tests', function () {
    /**
     * TestCase inputs
     * name: TestCase name
     * callingBehavior: Calling profile
     * entitlement: Entitlement
     * valid: expected result for vm client creation with given inputs.
     */
    var testData = [{
      name: 'verify valid ucm CallSettings client',
      callingBehavior: _constants.NATIVE_SIP_CALL_TO_UCM,
      entitlement: 'none',
      valid: true
    }, {
      name: 'verify valid wxc CallSettings client with basic entitlement',
      callingBehavior: _constants.NATIVE_WEBEX_TEAMS_CALLING,
      entitlement: _constants.ENTITLEMENT_BASIC,
      valid: true
    }, {
      name: 'verify valid wxc CallSettings client with standard entitlement',
      callingBehavior: _constants.NATIVE_WEBEX_TEAMS_CALLING,
      entitlement: _constants.ENTITLEMENT_STANDARD,
      valid: true
    }, {
      name: 'verify valid wxc CallSettings client with broadworks entitlement',
      callingBehavior: _constants.NATIVE_WEBEX_TEAMS_CALLING,
      entitlement: _constants.ENTITLEMENT_BROADWORKS_CONN,
      valid: true
    }, {
      name: 'verify invalid callingBehavior',
      callingBehavior: 'INVALID',
      entitlement: _constants.ENTITLEMENT_BASIC,
      valid: false
    }, {
      name: 'verify invalid entitlement for wxc CallSettings client',
      callingBehavior: _constants.NATIVE_WEBEX_TEAMS_CALLING,
      entitlement: 'invalid',
      valid: false
    }].map(function (stat) {
      return (0, _assign.default)(stat, {
        toString: function toString() {
          /* eslint-disable dot-notation */
          return this['name'];
        }
      });
    });
    it.each(testData)('%s', /*#__PURE__*/function () {
      var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(data) {
        var callSettingsClient;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              webex.internal.device.callingBehavior = data.callingBehavior;
              webex.internal.device.features.entitlement.models = [{
                _values: {
                  key: data.entitlement
                }
              }];
              if (!data.valid) {
                _context.next = 16;
                break;
              }
              callSettingsClient = (0, _CallSettings.createCallSettingsClient)(webex, {
                level: _types.LOGGER.INFO
              });
              expect(callSettingsClient).toBeTruthy();
              _context.t0 = data.callingBehavior;
              _context.next = _context.t0 === _constants.NATIVE_SIP_CALL_TO_UCM ? 8 : _context.t0 === _constants.NATIVE_WEBEX_TEAMS_CALLING ? 11 : 13;
              break;
            case 8:
              expect(callSettingsClient['callingBackend']).toStrictEqual(_types2.CALLING_BACKEND.UCM);
              expect(callSettingsClient['backendConnector']).toBeInstanceOf(_UcmBackendConnector.UcmBackendConnector);
              return _context.abrupt("break", 14);
            case 11:
              if (data.entitlement === _constants.ENTITLEMENT_BROADWORKS_CONN) {
                expect(callSettingsClient['callingBackend']).toStrictEqual(_types2.CALLING_BACKEND.BWRKS);
                expect(callSettingsClient['backendConnector']).toBeInstanceOf(_WxCallBackendConnector.WxCallBackendConnector);
              } else {
                /* entitlement basic and standard */
                expect(callSettingsClient['callingBackend']).toStrictEqual(_types2.CALLING_BACKEND.WXC);
                expect(callSettingsClient['backendConnector']).toBeInstanceOf(_WxCallBackendConnector.WxCallBackendConnector);
              }
              return _context.abrupt("break", 14);
            case 13:
              fail('Unknown calling backend type.');
            case 14:
              _context.next = 17;
              break;
            case 16:
              expect(function () {
                (0, _CallSettings.createCallSettingsClient)(webex, {
                  level: _types.LOGGER.INFO
                });
              }).toThrowError('Calling backend is not identified, exiting....');
            case 17:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
//# sourceMappingURL=CallSettings.test.js.map
