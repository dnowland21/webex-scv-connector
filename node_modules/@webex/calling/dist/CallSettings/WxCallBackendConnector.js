"use strict";

var _Object$keys = require("@babel/runtime-corejs2/core-js/object/keys");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors");
var _Object$defineProperties = require("@babel/runtime-corejs2/core-js/object/define-properties");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.WxCallBackendConnector = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _SDKConnector = _interopRequireDefault(require("../SDKConnector"));
var _Logger = _interopRequireDefault(require("../Logger"));
var _types = require("../common/types");
var _constants = require("../common/constants");
var _constants2 = require("./constants");
var _Utils = require("../common/Utils");
function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * This Connector class will implement child interface of ICallSettings and
 * has methods for the Webex Calling backend.
 */
var WxCallBackendConnector = exports.WxCallBackendConnector = /*#__PURE__*/function () {
  function WxCallBackendConnector(webex, logger) {
    (0, _classCallCheck2.default)(this, WxCallBackendConnector);
    (0, _defineProperty2.default)(this, "sdkConnector", void 0);
    (0, _defineProperty2.default)(this, "webex", void 0);
    (0, _defineProperty2.default)(this, "userId", void 0);
    (0, _defineProperty2.default)(this, "personId", void 0);
    (0, _defineProperty2.default)(this, "orgId", void 0);
    (0, _defineProperty2.default)(this, "xsiEndpoint", void 0);
    (0, _defineProperty2.default)(this, "hydraEndpoint", void 0);
    (0, _defineProperty2.default)(this, "VOICEMAIL", 'VOICEMAIL');
    this.sdkConnector = _SDKConnector.default;
    if (!this.sdkConnector.getWebex()) {
      _SDKConnector.default.setWebex(webex);
    }
    this.webex = this.sdkConnector.getWebex();
    /* eslint no-underscore-dangle: 0 */
    this.hydraEndpoint = this.webex.internal.services._serviceUrls.hydra;
    _Logger.default.setLogger(logger.level, _constants.WEBEX_CALLING_CONNECTOR_FILE);
    this.userId = this.webex.internal.device.userId;
    this.personId = (0, _Utils.inferIdFromUuid)(this.webex.internal.device.userId, _types.DecodeType.PEOPLE);
    this.orgId = (0, _Utils.inferIdFromUuid)(this.webex.internal.device.orgId, _types.DecodeType.ORGANIZATION);
  }

  /**
   * Reads call waiting setting at the backend.
   */
  (0, _createClass2.default)(WxCallBackendConnector, [{
    key: "getCallWaitingSetting",
    value: (function () {
      var _getCallWaitingSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var loggerContext, callWaitingUrl, response, xmlData, parser, xmlDOM, callWaitingDetails, status, toggleSetting, responseDetails, errorInfo, errorStatus;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              loggerContext = {
                file: _constants2.CALL_SETTINGS_FILE,
                method: 'getCallWaitingSetting'
              };
              _context.prev = 1;
              if (this.xsiEndpoint) {
                _context.next = 7;
                break;
              }
              _context.next = 5;
              return (0, _Utils.getXsiActionEndpoint)(this.webex, loggerContext, _types.CALLING_BACKEND.WXC);
            case 5:
              this.xsiEndpoint = _context.sent;
              _Logger.default.info("xsiEndpoint: ".concat(this.xsiEndpoint), loggerContext);
            case 7:
              callWaitingUrl = "".concat(this.xsiEndpoint, "/").concat(_constants2.XSI_VERSION, "/").concat(_constants2.USER_ENDPOINT, "/").concat(this.userId, "/").concat(_constants.SERVICES_ENDPOINT, "/").concat(_constants2.CALL_WAITING_ENDPOINT);
              _context.t0 = fetch;
              _context.t1 = "".concat(callWaitingUrl);
              _context.t2 = _types.HTTP_METHODS.GET;
              _context.next = 13;
              return this.webex.credentials.getUserToken();
            case 13:
              _context.t3 = _context.sent;
              _context.t4 = {
                Authorization: _context.t3
              };
              _context.t5 = {
                method: _context.t2,
                headers: _context.t4
              };
              _context.next = 18;
              return (0, _context.t0)(_context.t1, _context.t5);
            case 18:
              response = _context.sent;
              if (response.ok) {
                _context.next = 21;
                break;
              }
              throw new Error("".concat(response.status));
            case 21:
              _context.next = 23;
              return response.text();
            case 23:
              xmlData = _context.sent;
              parser = new DOMParser();
              xmlDOM = parser.parseFromString(xmlData, _constants.XML_TYPE);
              callWaitingDetails = xmlDOM.getElementsByTagName('active');
              status = callWaitingDetails[0].childNodes[0].textContent;
              toggleSetting = {
                enabled: status === 'true'
              };
              responseDetails = {
                statusCode: 200,
                data: {
                  callSetting: toggleSetting
                },
                message: _constants.SUCCESS_MESSAGE
              };
              return _context.abrupt("return", responseDetails);
            case 33:
              _context.prev = 33;
              _context.t6 = _context["catch"](1);
              errorInfo = {
                statusCode: _context.t6 instanceof Error ? Number(_context.t6.message) : ''
              };
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context.abrupt("return", errorStatus);
            case 38:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 33]]);
      }));
      function getCallWaitingSetting() {
        return _getCallWaitingSetting.apply(this, arguments);
      }
      return getCallWaitingSetting;
    }()
    /**
     * Reads DND setting at the backend.
     */
    )
  }, {
    key: "getDoNotDisturbSetting",
    value: (function () {
      var _getDoNotDisturbSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var loggerContext, resp, dndSettingResponse, responseDetails, errorInfo, errorStatus;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              loggerContext = {
                file: _constants2.CALL_SETTINGS_FILE,
                method: 'getDoNotDisturbSetting'
              };
              _context2.prev = 1;
              _context2.next = 4;
              return this.webex.request({
                uri: "".concat(this.hydraEndpoint, "/").concat(_constants2.PEOPLE_ENDPOINT, "/").concat(this.personId, "/").concat(_constants2.DND_ENDPOINT, "?").concat(_constants2.ORG_ENDPOINT, "=").concat(this.orgId),
                method: _types.HTTP_METHODS.GET
              });
            case 4:
              resp = _context2.sent;
              dndSettingResponse = resp.body;
              responseDetails = {
                statusCode: Number(resp[_constants.STATUS_CODE]),
                data: {
                  callSetting: dndSettingResponse
                },
                message: _constants.SUCCESS_MESSAGE
              };
              return _context2.abrupt("return", responseDetails);
            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](1);
              errorInfo = _context2.t0;
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context2.abrupt("return", errorStatus);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[1, 10]]);
      }));
      function getDoNotDisturbSetting() {
        return _getDoNotDisturbSetting.apply(this, arguments);
      }
      return getDoNotDisturbSetting;
    }()
    /**
     * Updates DND setting at the backend.
     */
    )
  }, {
    key: "setDoNotDisturbSetting",
    value: (function () {
      var _setDoNotDisturbSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(enabled) {
        var loggerContext, dndRequestBody, resp, responseDetails, errorInfo, errorStatus;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              loggerContext = {
                file: _constants2.CALL_SETTINGS_FILE,
                method: 'setDoNotDisturbSetting'
              };
              _context3.prev = 1;
              dndRequestBody = {
                enabled: enabled,
                ringSplashEnabled: false
              };
              _context3.next = 5;
              return this.webex.request({
                uri: "".concat(this.hydraEndpoint, "/").concat(_constants2.PEOPLE_ENDPOINT, "/").concat(this.personId, "/").concat(_constants2.DND_ENDPOINT, "?").concat(_constants2.ORG_ENDPOINT, "=").concat(this.orgId),
                method: _types.HTTP_METHODS.PUT,
                body: dndRequestBody
              });
            case 5:
              resp = _context3.sent;
              responseDetails = {
                statusCode: Number(resp[_constants.STATUS_CODE]),
                data: {
                  callSetting: dndRequestBody
                },
                message: _constants.SUCCESS_MESSAGE
              };
              return _context3.abrupt("return", responseDetails);
            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3["catch"](1);
              errorInfo = _context3.t0;
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context3.abrupt("return", errorStatus);
            case 15:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[1, 10]]);
      }));
      function setDoNotDisturbSetting(_x) {
        return _setDoNotDisturbSetting.apply(this, arguments);
      }
      return setDoNotDisturbSetting;
    }()
    /**
     * Reads Call Forward setting at the backend.
     */
    )
  }, {
    key: "getCallForwardSetting",
    value: (function () {
      var _getCallForwardSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        var loggerContext, resp, cfResponse, responseDetails, errorInfo, errorStatus;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              loggerContext = {
                file: _constants2.CALL_SETTINGS_FILE,
                method: 'getCallForwardingSetting'
              };
              _context4.prev = 1;
              _context4.next = 4;
              return this.webex.request({
                uri: "".concat(this.hydraEndpoint, "/").concat(_constants2.PEOPLE_ENDPOINT, "/").concat(this.personId, "/").concat(_constants2.CF_ENDPOINT, "?").concat(_constants2.ORG_ENDPOINT, "=").concat(this.orgId),
                method: _types.HTTP_METHODS.GET
              });
            case 4:
              resp = _context4.sent;
              cfResponse = resp.body;
              responseDetails = {
                statusCode: Number(resp[_constants.STATUS_CODE]),
                data: {
                  callSetting: cfResponse
                },
                message: _constants.SUCCESS_MESSAGE
              };
              return _context4.abrupt("return", responseDetails);
            case 10:
              _context4.prev = 10;
              _context4.t0 = _context4["catch"](1);
              errorInfo = _context4.t0;
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context4.abrupt("return", errorStatus);
            case 15:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[1, 10]]);
      }));
      function getCallForwardSetting() {
        return _getCallForwardSetting.apply(this, arguments);
      }
      return getCallForwardSetting;
    }()
    /**
     * Updates Call Forward setting at the backend.
     */
    )
  }, {
    key: "setCallForwardSetting",
    value: (function () {
      var _setCallForwardSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callForwardingRequest) {
        var loggerContext, resp, responseDetails, errorInfo, errorStatus;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              loggerContext = {
                file: _constants2.CALL_SETTINGS_FILE,
                method: 'setCallForwardingSetting'
              };
              _context5.prev = 1;
              _context5.next = 4;
              return this.webex.request({
                uri: "".concat(this.hydraEndpoint, "/").concat(_constants2.PEOPLE_ENDPOINT, "/").concat(this.personId, "/").concat(_constants2.CF_ENDPOINT, "?").concat(_constants2.ORG_ENDPOINT, "=").concat(this.orgId),
                method: _types.HTTP_METHODS.PUT,
                body: callForwardingRequest
              });
            case 4:
              resp = _context5.sent;
              responseDetails = {
                statusCode: Number(resp[_constants.STATUS_CODE]),
                data: {
                  callSetting: callForwardingRequest
                },
                message: _constants.SUCCESS_MESSAGE
              };
              return _context5.abrupt("return", responseDetails);
            case 9:
              _context5.prev = 9;
              _context5.t0 = _context5["catch"](1);
              errorInfo = _context5.t0;
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context5.abrupt("return", errorStatus);
            case 14:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this, [[1, 9]]);
      }));
      function setCallForwardSetting(_x2) {
        return _setCallForwardSetting.apply(this, arguments);
      }
      return setCallForwardSetting;
    }()
    /**
     * Reads Voicemail setting at the backend.
     */
    )
  }, {
    key: "getVoicemailSetting",
    value: (function () {
      var _getVoicemailSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
        var loggerContext, resp, vmResponse, responseDetails, errorInfo, errorStatus;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              loggerContext = {
                file: _constants2.CALL_SETTINGS_FILE,
                method: 'getVoicemailSetting'
              };
              _context6.prev = 1;
              _context6.next = 4;
              return this.webex.request({
                uri: "".concat(this.hydraEndpoint, "/").concat(_constants2.PEOPLE_ENDPOINT, "/").concat(this.personId, "/").concat(_constants2.VM_ENDPOINT, "?").concat(_constants2.ORG_ENDPOINT, "=").concat(this.orgId),
                method: _types.HTTP_METHODS.GET
              });
            case 4:
              resp = _context6.sent;
              vmResponse = resp.body;
              responseDetails = {
                statusCode: Number(resp[_constants.STATUS_CODE]),
                data: {
                  callSetting: vmResponse
                },
                message: _constants.SUCCESS_MESSAGE
              };
              return _context6.abrupt("return", responseDetails);
            case 10:
              _context6.prev = 10;
              _context6.t0 = _context6["catch"](1);
              errorInfo = _context6.t0;
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context6.abrupt("return", errorStatus);
            case 15:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this, [[1, 10]]);
      }));
      function getVoicemailSetting() {
        return _getVoicemailSetting.apply(this, arguments);
      }
      return getVoicemailSetting;
    }()
    /**
     * Updates Voicemail setting at the backend.
     */
    )
  }, {
    key: "setVoicemailSetting",
    value: (function () {
      var _setVoicemailSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(voicemailRequest) {
        var loggerContext, resp, responseDetails, errorInfo, errorStatus;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              loggerContext = {
                file: _constants2.CALL_SETTINGS_FILE,
                method: 'setVoicemailSetting'
              };
              _context7.prev = 1;
              _context7.next = 4;
              return this.webex.request({
                uri: "".concat(this.hydraEndpoint, "/").concat(_constants2.PEOPLE_ENDPOINT, "/").concat(this.personId, "/").concat(_constants2.VM_ENDPOINT, "?").concat(_constants2.ORG_ENDPOINT, "=").concat(this.orgId),
                method: _types.HTTP_METHODS.PUT,
                body: voicemailRequest
              });
            case 4:
              resp = _context7.sent;
              responseDetails = {
                statusCode: Number(resp[_constants.STATUS_CODE]),
                data: {
                  callSetting: voicemailRequest
                },
                message: _constants.SUCCESS_MESSAGE
              };
              return _context7.abrupt("return", responseDetails);
            case 9:
              _context7.prev = 9;
              _context7.t0 = _context7["catch"](1);
              errorInfo = _context7.t0;
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context7.abrupt("return", errorStatus);
            case 14:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this, [[1, 9]]);
      }));
      function setVoicemailSetting(_x3) {
        return _setVoicemailSetting.apply(this, arguments);
      }
      return setVoicemailSetting;
    }()
    /**
     * Reads the Call Forwarding Always settings at the backend.
     * This will also check if CFA is set to Voicemail.
     * If CFA is set to destination, that will take precedence.
     */
    )
  }, {
    key: "getCallForwardAlwaysSetting",
    value: (function () {
      var _getCallForwardAlwaysSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
        var loggerContext, cfResponse, cfa, response, vmResponse, vm, _response, _response2;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              loggerContext = {
                file: _constants.WEBEX_CALLING_CONNECTOR_FILE,
                method: this.getCallForwardAlwaysSetting.name
              };
              _context8.next = 3;
              return this.getCallForwardSetting();
            case 3:
              cfResponse = _context8.sent;
              if (!(cfResponse.statusCode === 200)) {
                _context8.next = 24;
                break;
              }
              cfa = cfResponse.data.callSetting.callForwarding.always;
              /** CFA is set to destination */
              if (!cfa.enabled) {
                _context8.next = 11;
                break;
              }
              if (!cfa.destination) {
                _context8.next = 10;
                break;
              }
              response = _objectSpread(_objectSpread({}, cfResponse), {}, {
                data: {
                  callSetting: cfa
                }
              });
              return _context8.abrupt("return", response);
            case 10:
              _Logger.default.warn("CFA is enabled, but destination is not set", loggerContext);
            case 11:
              _context8.next = 13;
              return this.getVoicemailSetting();
            case 13:
              vmResponse = _context8.sent;
              if (!(vmResponse.statusCode === 200)) {
                _context8.next = 21;
                break;
              }
              vm = vmResponse.data.callSetting;
              /** CFA is enabled to voicemail */
              if (!(vm.enabled && vm.sendAllCalls.enabled)) {
                _context8.next = 19;
                break;
              }
              _response = _objectSpread(_objectSpread({}, cfResponse), {}, {
                data: {
                  callSetting: _objectSpread(_objectSpread({}, cfa), {}, {
                    enabled: true,
                    destination: this.VOICEMAIL
                  })
                }
              });
              return _context8.abrupt("return", _response);
            case 19:
              /** No CFA is set */
              _response2 = _objectSpread(_objectSpread({}, cfResponse), {}, {
                data: {
                  callSetting: _objectSpread(_objectSpread({}, cfa), {}, {
                    enabled: false,
                    destination: undefined
                  })
                }
              });
              return _context8.abrupt("return", _response2);
            case 21:
              _Logger.default.warn("Unable to retrieve voicemail settings.", loggerContext);
              vmResponse.data.error = 'Unable to retrieve voicemail settings.';
              return _context8.abrupt("return", vmResponse);
            case 24:
              return _context8.abrupt("return", cfResponse);
            case 25:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getCallForwardAlwaysSetting() {
        return _getCallForwardAlwaysSetting.apply(this, arguments);
      }
      return getCallForwardAlwaysSetting;
    }())
  }]);
  return WxCallBackendConnector;
}();
//# sourceMappingURL=WxCallBackendConnector.js.map
