{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import {LOGGER} from '../Logger/types';\n\nexport interface LoggerInterface {\n  level: LOGGER;\n}\n\nexport type ToggleSetting = {\n  enabled: boolean;\n  ringSplashEnabled?: boolean;\n};\n\n/**\n * `CallForwardAlwaysSetting` object used for Call forwarding APIs in case of always forwarding.\n */\nexport type CallForwardAlwaysSetting = {\n  /**\n   * This indicates if the call forward always is enabled or disabled.\n   */\n  enabled: boolean;\n  /**\n   * If this property is set to true, a brief tone will be played on the user's line when a call has been forwarded.\n   */\n  ringReminderEnabled?: boolean;\n  /**\n   * This property signifies whether incoming calls are directed to the voicemail of the destination number,\n   * provided that the destination is an internal phone number with an enabled voicemail service.\n   */\n  destinationVoicemailEnabled?: boolean;\n  /**\n   * Specify the destination number to which the call is forwarded when the call goes unanswered.\n   * Destination is a phone number or a voicemail.\n   */\n  destination?: string;\n};\n\n/**\n * `CallForwardSetting` object used within the callSetting object for Call forwarding APIs\n */\nexport type CallForwardSetting = {\n  callForwarding: {\n    /**\n     * Object to configure properties to enable/disable call forward to a destination of your choice for all the incoming calls.\n     */\n    always: CallForwardAlwaysSetting;\n    /**\n     * Object to configure properties to enable/disable call forwarding to a destination of your choice when the user's line is busy.\n     */\n    busy: {\n      /**\n       * This indicates if the call forward is enabled or disabled when the user's line is busy.\n       */\n      enabled: boolean;\n      /**\n       * This property signifies whether incoming calls are directed to the voicemail of the destination number when the user's line is busy,\n       * provided that the destination is an internal phone number with an enabled voicemail service.\n       */\n      destinationVoicemailEnabled?: boolean;\n      /**\n       * Specify the destination number to which the call is forwarded in case of an unanswered call, if this feature is enabled.\n       * The destination can be either a phone number or a voicemail service.\n       */\n      destination?: string;\n    };\n    /**\n     * Object to configure properties to enable/disable call forward to a destination of your choice in case the call goes unanswered.\n     */\n    noAnswer: {\n      /**\n       * This indicates if the call forward is enabled or disabled when the call goes unanswered.\n       */\n      enabled: boolean;\n      /**\n       * This property indicates number of rings before the call is forwarded to the destination number if unanswered.\n       */\n      numberOfRings?: number;\n      /**\n       * System-wide maximum number of rings allowed to specify under numberOfRings property.\n       */\n      systemMaxNumberOfRings?: number;\n      /**\n       * This property signifies whether incoming calls are directed to the voicemail of the destination number when the call goes unanswered,\n       * provided that the destination is an internal phone number with an enabled voicemail service.\n       */\n      destinationVoicemailEnabled?: boolean;\n      /**\n       * If noAnswer is enabled, incoming calls are routed to the specified destination number in the event that the call remains unanswered.\n       * This destination can be either a phone number or a voicemail.\n       */\n      destination?: string;\n    };\n  };\n  /**\n   * Object to configure properties to enable/disable call forward to a destination of your choice when the user's line is not connected to the network.\n   */\n  businessContinuity: {\n    /**\n     * This indicates if the call forward is enabled or disabled when the user's line is not connected to the network.\n     */\n    enabled: boolean;\n    /**\n     * This property signifies whether incoming calls are directed to the voicemail of the destination number in case the user's line is not connected to the network,\n     * provided that the destination is an internal phone number with an enabled voicemail service.\n     */\n    destinationVoicemailEnabled?: boolean;\n    /**\n     * Once the \"businessContinuity\" feature is enabled, calls will be redirected to the specified destination number in case the user's line is not connected to the network.\n     * The designated destination can either be a phone number or a voicemail service.\n     */\n    destination?: string;\n  };\n};\n\n/**\n * `VoicemailSetting` object used within the callSetting object for Voicemail APIs\n */\nexport type VoicemailSetting = {\n  /**\n   * Boolean property to indicate if the voicemail is enabled/disabled for the user.\n   */\n  enabled: boolean;\n  /**\n   * Object to configure properties for enabling/disabling the forwarding of all the incoming calls to voicemail.\n   * Please note that this setting can only be adjusted when voicemail is enabled.\n   */\n  sendAllCalls: {\n    /**\n     * This indicates if the voicemail is enabled/disabled for all the incoming calls.\n     */\n    enabled: boolean;\n  };\n  /**\n   * Object to configure properties for enabling/disabling the forwarding of busy calls to voicemail.\n   * Please note that this setting can only be adjusted when voicemail is enabled.\n   */\n  sendBusyCalls: {\n    /**\n     * This indicates if the voicemail is enabled/disabled for the calls when the user's line is busy.\n     */\n    enabled: boolean;\n    /**\n     * Type of voicemail greeting to be played when the user's line is busy, 'default' or 'custom' is specified here.\n     */\n    greeting?: string;\n    /**\n     * This indicates if the custom voicemail greeting is uploaded or not.\n     */\n    greetingUploaded?: boolean;\n  };\n  /**\n   * Object to configure properties for enabling/disabling the forwarding of unanswered calls to voicemail.\n   * Please note that this setting can only be adjusted when voicemail is enabled.\n   */\n  sendUnansweredCalls: {\n    /**\n     * This indicates if the voicemail is enabled/disabled for the calls when the call goes unanswered.\n     */\n    enabled: boolean;\n    /**\n     * Type of voicemail greeting to be played when the call goes unanswered, 'default' or 'custom' is specified here.\n     */\n    greeting?: string;\n    /**\n     * This indicates if the custom voicemail greeting is uploaded or not.\n     */\n    greetingUploaded?: boolean;\n    /**\n     * This property indicates number of rings before the call goes to voicemail if unanswered.\n     */\n    numberOfRings: number;\n    /**\n     * System-wide maximum number of rings allowed to specify under numberOfRings property.\n     */\n    systemMaxNumberOfRings?: number;\n  };\n  /**\n   * Settings for sending notifications when there are any new voicemails.\n   */\n  notifications: {\n    /**\n     * Boolean property to indicate if sending notifications for any new voicemails is enabled/disabled.\n     */\n    enabled: boolean;\n    /**\n     * Notifications are sent to the email address specifed here when there are any new voicemails.\n     */\n    destination?: string;\n  };\n  /**\n   * Settings for voicemail caller to transfer to a different number by pressing zero (0).\n   */\n  transferToNumber?: {\n    /**\n     * Boolean property to indicate if voicemail caller transfer to a destination is enabled/disabled if they press zero (0).\n     */\n    enabled: boolean;\n    /**\n     * \tThe number voicemail caller will be transferred to when they press zero (0).\n     */\n    destination: string;\n  };\n  /**\n   * Settings for sending a copy of new voicemail message audio via email.\n   */\n  emailCopyOfMessage: {\n    /**\n     * Boolean property to enable sending the copy of the new voicemail message audio will be sent to the designated email address.\n     */\n    enabled: boolean;\n    /**\n     * Email address to which the new voicemail audio will be sent\n     */\n    emailId?: string;\n  };\n  /**\n   * Object to configure the storage for new voicemails\n   */\n  messageStorage: {\n    /**\n     * Property to indicate on the line that there are new voicemails in the mailbox if enabled.\n     */\n    mwiEnabled: boolean;\n    /**\n     * Designates which type of voicemail message storage to use, 'internal' or 'external' is specified here.\n     */\n    storageType: string;\n    /**\n     * External email address to which the new voicemail audio will be sent.\n     */\n    externalEmail?: string;\n  };\n  /**\n   * \tSettings for sending fax messages for new voicemails.\n   */\n  faxMessage?: {\n    /**\n     * Boolean property to enable sending fax messages to the designated number for new voicemails.\n     */\n    enabled: boolean;\n    /**\n     * Designated phone number is specified here where fax messages will be sent to if enabled for new voicemails.\n     */\n    phoneNumber?: string;\n    /**\n     * Designated optional extension is specified here where fax messages will be sent to if enabled for new voicemails.\n     */\n    extension?: string;\n  };\n  /**\n   *\n   */\n  voiceMessageForwardingEnabled?: boolean;\n};\n\nexport type CallSettingResponse = {\n  statusCode: number;\n  data: {\n    callSetting?: ToggleSetting | CallForwardSetting | VoicemailSetting | CallForwardAlwaysSetting;\n    error?: string;\n  };\n  message: string | null;\n};\n\n/**\n * Interface for Call Settings Module.\n * This encompasses set of APIs that allows to retrieve and update the settings like CallWaiting, DND, CallForward, Voicemail and more.\n\n * These APIs return promises that resolve to a `CallSettingResponse` object, which contains a status code, data, and message.\n * The data field within this response object holds the `callSetting` object, which can take on different types depending on the specific API called.\n *\n * @example\n * ```json\n * {\n *  statusCode: 200,\n *    data: {\n *      callSetting: ToggleSetting | CallForwardSetting | VoicemailSetting | CallForwardAlwaysSetting\n *    },\n *  message: 'SUCCESS'| 'FAILURE' | null\n * }\n * ```\n */\nexport interface ICallSettings {\n  /**\n   * This API is used to fetch the call waiting setting.\n   *\n   * @example\n   * ```javascript\n   * const callWaitingResponse = await callSettings.getCallWaitingSetting();\n   * ```\n   *\n   * The callWaitingResponse object will have callSetting object with the properties as mentioned in `ToggleSetting`.\n   *\n   * @example\n   * ToggleSetting:\n   * ```json\n   * {\n   *  statusCode: 200,\n   *    data: {\n   *      callSetting: {\n   *        enabled: true,\n   *        ringSplashEnabled: true\n   *      },\n   *    },\n   *  message: null\n   * }\n   * ```\n   */\n  getCallWaitingSetting(): Promise<CallSettingResponse>;\n\n  /**\n   * This API is used to fetch the do not disturb(DND) status.\n   *\n   * @example\n   * ```javascript\n   * const dndResponse = await callSettings.getDoNotDisturbSetting();\n   * ```\n   *\n   * The dndResponse object will have callSetting object with the properties as mentioned in `ToggleSetting`.\n   *\n   * Example - ToggleSetting\n   * ```json\n   * {\n   *  statusCode: 200,\n   *    data: {\n   *      callSetting: {\n   *        enabled: true,\n   *        ringSplashEnabled: true\n   *      },\n   *    },\n   *  message: null\n   * }\n   * ```\n   */\n  getDoNotDisturbSetting(): Promise<CallSettingResponse>;\n\n  /**\n   * This API is used to set DND to true or false based on parameter received.\n   *\n   * @example\n   * ```javascript\n   * const dndResponse = await callSettings.setDoNotDisturbSetting(true|false);\n   * ```\n   */\n  setDoNotDisturbSetting(flag: boolean): Promise<CallSettingResponse>;\n\n  /**\n   * This API is used to fetch the call forward setting.\n   *\n   *  @example\n   * ```javascript\n   * const callForwardResponse = await callSettings.getCallForwardSetting();\n   * ```\n   *\n   * The `callForwardResponse` object will have callSetting object with the properties as mentioned in {@link CallForwardSetting}.\n   */\n  getCallForwardSetting(): Promise<CallSettingResponse>;\n\n  /**\n   * This API is used to set the call forward setting.\n   * ```javascript\n   * const callForwardResponse = await callSettings.setCallForwardSetting(callForwardSetting);\n   * ```\n   *\n   * The `callForwardSetting` object will be populated with the properties as mentioned in {@link CallForwardSetting} and passed as a parameter to the API.\n   */\n  setCallForwardSetting(request: CallForwardSetting): Promise<CallSettingResponse>;\n\n  /**\n   * This API is used to fetch the voicemail.\n   *  @example\n   * ```javascript\n   * const voicemailResponse = await callSettings.getVoicemailSetting();\n   * ```\n   *\n   * The `voicemailResponse` object will have callSetting object with the properties as mentioned in {@link VoicemailSetting}.\n   */\n  getVoicemailSetting(): Promise<CallSettingResponse>;\n\n  /**\n   * This API is used to set voicemail.\n   *\n   * @example\n   * ```javascript\n   * const voicemailResponse = await callSettings.setVoicemailSetting();\n   * ```\n   *\n   * The `voicemailSetting` object will be populated with the properties as mentioned in {@link VoicemailSetting} and passed as a parameter to the API.\n   */\n  setVoicemailSetting(request: VoicemailSetting): Promise<CallSettingResponse>;\n\n  /**\n   * This API is used to fetch the call forward settings including the Voicemail.\n   *\n   * @param directoryNumber - Directory number for which the call forward always setting is to be fetched.\n   * This parameter is only required for Cloud Connected Unified Communications(CCUC): https://www.cisco.com/c/en/us/products/unified-communications/webex-cloud-connected-uc/index.html backend.\n   *\n   * @example\n   * ```javascript\n   * const callForwardAlwaysResponse = await callSettings.setVoicemailSetting();\n   * ```\n   *\n   * The `callForwardAlwaysResponse` object will have callSetting object with the properties as mentioned in {@link CallForwardAlwaysSetting}.\n   */\n  getCallForwardAlwaysSetting(directoryNumber?: string): Promise<CallSettingResponse>;\n}\n\nexport type IWxCallBackendConnector = ICallSettings;\nexport type IUcmBackendConnector = ICallSettings;\n\nexport type CallForwardingAlwaysSettingsUCM = {\n  dn: string;\n  destination?: string;\n  destinationVoicemailEnabled: boolean;\n  e164Number: string;\n};\n\nexport type CallForwardingSettingsUCM = {\n  callForwarding: {\n    always: CallForwardingAlwaysSettingsUCM[];\n  };\n};\n"],"mappings":""}