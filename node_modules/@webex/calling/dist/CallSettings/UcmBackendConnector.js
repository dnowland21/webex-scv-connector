"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.UcmBackendConnector = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _Logger = _interopRequireDefault(require("../Logger"));
var _SDKConnector = _interopRequireDefault(require("../SDKConnector"));
var _Utils = require("../common/Utils");
var _constants = require("../common/constants");
var _types = require("../common/types");
var _constants2 = require("./constants");
/**
 * This Connector class will implement child interface of ICallSettings and
 * has methods for the CCUC with UCM backend.
 */
var UcmBackendConnector = exports.UcmBackendConnector = /*#__PURE__*/function () {
  /**
   * @param useProdWebexApis - default value is true
   */
  function UcmBackendConnector(webex, logger) {
    var useProdWebexApis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    (0, _classCallCheck2.default)(this, UcmBackendConnector);
    (0, _defineProperty2.default)(this, "sdkConnector", void 0);
    (0, _defineProperty2.default)(this, "webex", void 0);
    (0, _defineProperty2.default)(this, "userId", void 0);
    (0, _defineProperty2.default)(this, "orgId", void 0);
    (0, _defineProperty2.default)(this, "useProdWebexApis", void 0);
    this.sdkConnector = _SDKConnector.default;
    if (!this.sdkConnector.getWebex()) {
      _SDKConnector.default.setWebex(webex);
    }
    this.webex = this.sdkConnector.getWebex();
    _Logger.default.setLogger(logger.level, _constants.UCM_CONNECTOR_FILE);
    this.userId = this.webex.internal.device.userId;
    this.orgId = this.webex.internal.device.orgId;
    this.useProdWebexApis = useProdWebexApis;
  }

  /**
   * Reads call waiting setting at the backend.
   */
  (0, _createClass2.default)(UcmBackendConnector, [{
    key: "getCallWaitingSetting",
    value: function getCallWaitingSetting() {
      return this.getMethodNotSupportedResponse();
    }

    /**
     * Reads DND setting at the backend.
     */
  }, {
    key: "getDoNotDisturbSetting",
    value: function getDoNotDisturbSetting() {
      return this.getMethodNotSupportedResponse();
    }

    /**
     * Updates DND setting at the backend.
     */
  }, {
    key: "setDoNotDisturbSetting",
    value: function setDoNotDisturbSetting() {
      return this.getMethodNotSupportedResponse();
    }

    /**
     * Reads Call Forward setting at the backend.
     */
  }, {
    key: "getCallForwardSetting",
    value: function getCallForwardSetting() {
      return this.getMethodNotSupportedResponse();
    }

    /**
     * Updates Call Forward setting at the backend.
     */
  }, {
    key: "setCallForwardSetting",
    value: function setCallForwardSetting() {
      return this.getMethodNotSupportedResponse();
    }

    /**
     * Reads Voicemail setting at the backend.
     */
  }, {
    key: "getVoicemailSetting",
    value: function getVoicemailSetting() {
      return this.getMethodNotSupportedResponse();
    }

    /**
     * Updates Voicemail setting at the backend.
     */
  }, {
    key: "setVoicemailSetting",
    value: function setVoicemailSetting() {
      return this.getMethodNotSupportedResponse();
    }

    /**
     * Returns a default error response for unsupported methods.
     */
  }, {
    key: "getMethodNotSupportedResponse",
    value: function getMethodNotSupportedResponse() {
      var response = (0, _Utils.serviceErrorCodeHandler)({
        statusCode: 501
      }, {
        file: _constants.UCM_CONNECTOR_FILE,
        method: this.getMethodNotSupportedResponse.name
      });
      return _promise.default.resolve(response);
    }

    /**
     * Reads the Call Forwarding Always settings at the backend.
     * This will also check if CFA is set to Voicemail.
     * If CFA is set to destination, that will take precedence.
     * For UCM backend, relevant fields in the response are `enabled` & `destination`.
     *
     * @param directoryNumber - Directory number for which CFA needs to returned.
     */
  }, {
    key: "getCallForwardAlwaysSetting",
    value: (function () {
      var _getCallForwardAlwaysSetting = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(directoryNumber) {
        var loggerContext, webexApisUrl, resp, _ref, callForwarding, cfa, _response, _response2, response, errorInfo, errorStatus;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              loggerContext = {
                file: _constants.UCM_CONNECTOR_FILE,
                method: this.getCallForwardAlwaysSetting.name
              };
              webexApisUrl = this.useProdWebexApis ? _constants.WEBEX_API_CONFIG_PROD_URL : _constants.WEBEX_API_CONFIG_INT_URL;
              _context.prev = 2;
              if (!directoryNumber) {
                _context.next = 14;
                break;
              }
              _context.next = 6;
              return this.webex.request({
                uri: "".concat(webexApisUrl, "/").concat(_constants2.PEOPLE_ENDPOINT, "/").concat(this.userId, "/").concat(_constants2.CF_ENDPOINT.toLowerCase(), "?").concat(_constants2.ORG_ENDPOINT, "=").concat(this.orgId),
                method: _types.HTTP_METHODS.GET
              });
            case 6:
              resp = _context.sent;
              _ref = resp.body, callForwarding = _ref.callForwarding;
              cfa = callForwarding.always.find(function (item) {
                return item.dn.endsWith(directoryNumber) || item.e164Number.endsWith(directoryNumber);
              });
              if (!cfa) {
                _context.next = 12;
                break;
              }
              _response = {
                statusCode: Number(resp[_constants.STATUS_CODE]),
                message: _constants.SUCCESS_MESSAGE,
                data: {
                  callSetting: {
                    enabled: cfa.destinationVoicemailEnabled || !!cfa.destination,
                    destination: cfa.destinationVoicemailEnabled ? _constants.VOICEMAIL : cfa.destination
                  }
                }
              };
              return _context.abrupt("return", _response);
            case 12:
              _response2 = {
                statusCode: 404,
                message: _constants.FAILURE_MESSAGE,
                data: {
                  error: 'Directory Number is not assigned to the user'
                }
              };
              return _context.abrupt("return", _response2);
            case 14:
              response = {
                statusCode: 400,
                message: _constants.FAILURE_MESSAGE,
                data: {
                  error: 'Directory Number is mandatory for UCM backend'
                }
              };
              return _context.abrupt("return", response);
            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](2);
              errorInfo = _context.t0;
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context.abrupt("return", errorStatus);
            case 23:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[2, 18]]);
      }));
      function getCallForwardAlwaysSetting(_x) {
        return _getCallForwardAlwaysSetting.apply(this, arguments);
      }
      return getCallForwardAlwaysSetting;
    }())
  }]);
  return UcmBackendConnector;
}();
//# sourceMappingURL=UcmBackendConnector.js.map
