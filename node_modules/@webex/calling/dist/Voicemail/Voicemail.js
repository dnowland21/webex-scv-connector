"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.createVoicemailClient = exports.Voicemail = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _constants = require("../common/constants");
var _SDKConnector = _interopRequireDefault(require("../SDKConnector"));
var _types = require("../common/types");
var _Logger = _interopRequireDefault(require("../Logger"));
var _Utils = require("../common/Utils");
var _WxCallBackendConnector = require("./WxCallBackendConnector");
var _BroadworksBackendConnector = require("./BroadworksBackendConnector");
var _impl = require("../Events/impl");
var _UcmBackendConnector = require("./UcmBackendConnector");
var _types2 = require("../Metrics/types");
var _Metrics = require("../Metrics");
var _constants2 = require("./constants");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /* eslint-disable dot-notation */ /* eslint-disable no-underscore-dangle */ /* eslint-disable valid-jsdoc */
/**
 * The `Voicemail` module is designed to simplify voicemail-related operations by offering a set of APIs.
 *
 * The following code snippet demonstrates how to create an instance of `Voicemail` using a `webex` instance and a logger:
 *
 * Example:
 * ```javascript
 * const voicemailInstance = createVoicemailClient(webex, logger);
 * ```
 */
var Voicemail = exports.Voicemail = /*#__PURE__*/function (_Eventing) {
  (0, _inherits2.default)(Voicemail, _Eventing);
  var _super = _createSuper(Voicemail);
  /**
   * @ignore
   */
  function Voicemail(webex, public logger) {
    var _this;
    (0, _classCallCheck2.default)(this, Voicemail);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sdkConnector", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "webex", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "callingBackend", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "backendConnector", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "metricManager", void 0);
    _this.sdkConnector = _SDKConnector.default;
    if (!_this.sdkConnector.getWebex()) {
      _SDKConnector.default.setWebex(webex);
    }
    _this.webex = _this.sdkConnector.getWebex();
    _this.metricManager = (0, _Metrics.getMetricManager)(_this.webex, undefined);
    _this.callingBackend = (0, _Utils.getCallingBackEnd)(_this.webex);
    _this.initializeBackendConnector();
    _Logger.default.setLogger(logger.level, _constants2.VOICEMAIL_FILE);
    return _this;
  }

  /**
   * Voicemail connector initialization.
   *
   */
  (0, _createClass2.default)(Voicemail, [{
    key: "init",
    value: (function () {
      var _init = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var response, extendedError;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.INIT
              });
              response = this.backendConnector.init();
              _Logger.default.log('Voicemail connector initialized successfully', {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.INIT
              });
              return _context.abrupt("return", response);
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              extendedError = new Error("Failed to initialize voicemail: ".concat(_context.t0));
              _Logger.default.error(extendedError, {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.INIT
              });
              _context.next = 13;
              return (0, _Utils.uploadLogs)();
            case 13:
              throw _context.t0;
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[0, 7]]);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
    /**
     * Setup and initialize the voicemail backend connector class object.
     */
    )
  }, {
    key: "initializeBackendConnector",
    value: function initializeBackendConnector() {
      _Logger.default.info(_constants.METHOD_START_MESSAGE, {
        file: _constants2.VOICEMAIL_FILE,
        method: _constants2.METHODS.INITIALIZE_BACKEND_CONNECTOR
      });
      switch (this.callingBackend) {
        case _types.CALLING_BACKEND.WXC:
          {
            this.backendConnector = new _WxCallBackendConnector.WxCallBackendConnector(this.webex, this.logger);
            break;
          }
        case _types.CALLING_BACKEND.BWRKS:
          {
            this.backendConnector = new _BroadworksBackendConnector.BroadworksBackendConnector(this.webex, this.logger);
            break;
          }
        case _types.CALLING_BACKEND.UCM:
          {
            this.backendConnector = new _UcmBackendConnector.UcmBackendConnector(this.webex, this.logger);
            break;
          }
        default:
          {
            throw new Error('Calling backend is not identified, exiting....');
          }
      }
    }

    /**
     * @param response - VoicemailResponseEvent to be used in submitting metric.
     * @param metricAction - Action for the metric being submitted.
     * @param messageId - Message identifier of the voicemail message.
     */
  }, {
    key: "submitMetric",
    value: function submitMetric(response, metricAction, messageId) {
      var statusCode = response.statusCode,
        errorMessage = response.data.error;
      if (statusCode >= 200 && statusCode < 300) {
        this.metricManager.submitVoicemailMetric(_types2.METRIC_EVENT.VOICEMAIL, metricAction, _types2.METRIC_TYPE.BEHAVIORAL, messageId);
      } else {
        this.metricManager.submitVoicemailMetric(_types2.METRIC_EVENT.VOICEMAIL_ERROR, metricAction, _types2.METRIC_TYPE.BEHAVIORAL, messageId, errorMessage, statusCode);
      }
    }

    /**
     * Retrieves a list of voicemails with optional pagination and sorting options.
     *
     * @param offset - Number of records to skip.
     * @param offsetLimit - The limit on the number of voicemails to retrieve from the offset.
     * @param sort - Sort voicemail list (ASC | DESC).
     * @param refresh - Set to `true` to force a refresh of voicemail data from backend (optional).
     */
  }, {
    key: "getVoicemailList",
    value: (function () {
      var _getVoicemailList = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(offset, offsetLimit, sort, refresh) {
        var response, extendedError;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with: offset=").concat(offset, ", limit=").concat(offsetLimit, ", sort=").concat(sort, ", refresh=").concat(refresh), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_LIST
              });
              _context2.next = 4;
              return this.backendConnector.getVoicemailList(offset, offsetLimit, sort, refresh);
            case 4:
              response = _context2.sent;
              this.submitMetric(response, _types2.VOICEMAIL_ACTION.GET_VOICEMAILS);
              _Logger.default.log("Successfully retrieved voicemail list: statusCode=".concat(response.statusCode), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_LIST
              });
              return _context2.abrupt("return", response);
            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](0);
              extendedError = new Error("Failed to get voicemail list: ".concat(_context2.t0));
              _Logger.default.error(extendedError, {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_LIST
              });
              _context2.next = 16;
              return (0, _Utils.uploadLogs)();
            case 16:
              throw _context2.t0;
            case 17:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[0, 10]]);
      }));
      function getVoicemailList(_x, _x2, _x3, _x4) {
        return _getVoicemailList.apply(this, arguments);
      }
      return getVoicemailList;
    }()
    /**
     * Retrieves the content of a voicemail message based on its messageId.
     *
     * @param messageId - The identifier of the voicemail message.
     */
    )
  }, {
    key: "getVoicemailContent",
    value: (function () {
      var _getVoicemailContent = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(messageId) {
        var response;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with: messageId=").concat(messageId), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_CONTENT
              });
              _context3.next = 3;
              return this.backendConnector.getVoicemailContent(messageId);
            case 3:
              response = _context3.sent;
              this.submitMetric(response, _types2.VOICEMAIL_ACTION.GET_VOICEMAIL_CONTENT, messageId);
              _Logger.default.log("Successfully retrieved voicemail content for messageId=".concat(messageId, ", statusCode=").concat(response.statusCode), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_CONTENT
              });
              return _context3.abrupt("return", response);
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getVoicemailContent(_x5) {
        return _getVoicemailContent.apply(this, arguments);
      }
      return getVoicemailContent;
    }()
    /**
     * Retrieves a quantitative summary of voicemails for a user.
     *
     */
    )
  }, {
    key: "getVoicemailSummary",
    value: (function () {
      var _getVoicemailSummary = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        var response;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _Logger.default.info(_constants.METHOD_START_MESSAGE, {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_SUMMARY
              });
              _context4.next = 3;
              return this.backendConnector.getVoicemailSummary();
            case 3:
              response = _context4.sent;
              /* istanbul ignore else */
              if (response !== null) {
                this.submitMetric(response, _types2.VOICEMAIL_ACTION.GET_VOICEMAIL_SUMMARY);
                _Logger.default.log("Successfully retrieved voicemail summary: statusCode=".concat(response.statusCode), {
                  file: _constants2.VOICEMAIL_FILE,
                  method: _constants2.METHODS.GET_VOICEMAIL_SUMMARY
                });
              }
              return _context4.abrupt("return", response);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getVoicemailSummary() {
        return _getVoicemailSummary.apply(this, arguments);
      }
      return getVoicemailSummary;
    }()
    /**
     * Fetch voicemail read message status for the messageId.
     *
     * @param messageId -string result from the voicemail list.
     */
    )
  }, {
    key: "voicemailMarkAsRead",
    value: (function () {
      var _voicemailMarkAsRead = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(messageId) {
        var response;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with: messageId=").concat(messageId), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.VOICEMAIL_MARK_AS_READ
              });
              _context5.next = 3;
              return this.backendConnector.voicemailMarkAsRead(messageId);
            case 3:
              response = _context5.sent;
              this.submitMetric(response, _types2.VOICEMAIL_ACTION.MARK_READ, messageId);
              _Logger.default.log("Successfully marked voicemail as read: messageId=".concat(messageId, ", statusCode=").concat(response.statusCode), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.VOICEMAIL_MARK_AS_READ
              });
              return _context5.abrupt("return", response);
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function voicemailMarkAsRead(_x6) {
        return _voicemailMarkAsRead.apply(this, arguments);
      }
      return voicemailMarkAsRead;
    }()
    /**
     * Fetch voicemail unread status for the messageId.
     *
     * @param messageId -string result from the voicemail list.
     */
    )
  }, {
    key: "voicemailMarkAsUnread",
    value: (function () {
      var _voicemailMarkAsUnread = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(messageId) {
        var response;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with: messageId=").concat(messageId), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.VOICEMAIL_MARK_AS_UNREAD
              });
              _context6.next = 3;
              return this.backendConnector.voicemailMarkAsUnread(messageId);
            case 3:
              response = _context6.sent;
              this.submitMetric(response, _types2.VOICEMAIL_ACTION.MARK_UNREAD, messageId);
              _Logger.default.log("Successfully marked voicemail as unread: messageId=".concat(messageId, ", statusCode=").concat(response.statusCode), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.VOICEMAIL_MARK_AS_UNREAD
              });
              return _context6.abrupt("return", response);
            case 7:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function voicemailMarkAsUnread(_x7) {
        return _voicemailMarkAsUnread.apply(this, arguments);
      }
      return voicemailMarkAsUnread;
    }()
    /**
     * Fetch voicemail delete status for the messageId.
     *
     * @param messageId -string result from the voicemail list.
     */
    )
  }, {
    key: "deleteVoicemail",
    value: (function () {
      var _deleteVoicemail = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(messageId) {
        var response;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with: messageId=").concat(messageId), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.DELETE_VOICEMAIL
              });
              _context7.next = 3;
              return this.backendConnector.deleteVoicemail(messageId);
            case 3:
              response = _context7.sent;
              this.submitMetric(response, _types2.VOICEMAIL_ACTION.DELETE, messageId);
              _Logger.default.log("Successfully deleted voicemail: messageId=".concat(messageId, ", statusCode=").concat(response.statusCode), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.DELETE_VOICEMAIL
              });
              return _context7.abrupt("return", response);
            case 7:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function deleteVoicemail(_x8) {
        return _deleteVoicemail.apply(this, arguments);
      }
      return deleteVoicemail;
    }()
    /**
     * Fetch the voicemail transcripts for the messageId.
     *
     * @param messageId - MessageId for which we need the transcript.
     */
    )
  }, {
    key: "getVMTranscript",
    value: (function () {
      var _getVMTranscript = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(messageId) {
        var response;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with: messageId=").concat(messageId), {
                file: _constants2.VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VM_TRANSCRIPT
              });
              _context8.next = 3;
              return this.backendConnector.getVMTranscript(messageId);
            case 3:
              response = _context8.sent;
              if (response !== null) {
                this.submitMetric(response, _types2.VOICEMAIL_ACTION.TRANSCRIPT, messageId);
                _Logger.default.log("Successfully retrieved voicemail transcript: messageId=".concat(messageId, ", statusCode=").concat(response.statusCode), {
                  file: _constants2.VOICEMAIL_FILE,
                  method: _constants2.METHODS.GET_VM_TRANSCRIPT
                });
              }
              return _context8.abrupt("return", response);
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getVMTranscript(_x9) {
        return _getVMTranscript.apply(this, arguments);
      }
      return getVMTranscript;
    }()
    /**
     * Resolve the Contact from userId or display name.
     *
     * @param callingPartyInfo - Calling Party Info.
     */
    )
  }, {
    key: "resolveContact",
    value: function resolveContact(callingPartyInfo) {
      _Logger.default.info(_constants.METHOD_START_MESSAGE, {
        file: _constants2.VOICEMAIL_FILE,
        method: _constants2.METHODS.RESOLVE_CONTACT
      });
      var response = this.backendConnector.resolveContact(callingPartyInfo);
      _Logger.default.log('Contact resolution completed successfully', {
        file: _constants2.VOICEMAIL_FILE,
        method: _constants2.METHODS.RESOLVE_CONTACT
      });
      return response;
    }

    /**
     * SDK connector function.
     * @ignore
     */
  }, {
    key: "getSDKConnector",
    value: function getSDKConnector() {
      return this.sdkConnector;
    }
  }]);
  return Voicemail;
}(_impl.Eventing);
/**
 * @param webex - webex instance
 * @param logger - logger instance
 */
var createVoicemailClient = exports.createVoicemailClient = function createVoicemailClient(webex, logger) {
  return new Voicemail(webex, logger);
};
//# sourceMappingURL=Voicemail.js.map
