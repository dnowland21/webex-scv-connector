{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import {ISDKConnector} from '../SDKConnector/types';\nimport {LOGGER} from '../Logger/types';\nimport {WebexRequestPayload, SORT, DisplayInformation} from '../common/types';\n\nexport interface LoggerInterface {\n  level: LOGGER;\n}\n\nexport type BroadworksTokenType = {\n  token: {\n    bearer: string;\n  };\n};\n\nexport type ResponseString$ = {\n  $: string;\n};\n\nexport type ResponseNumber$ = {\n  $: number;\n};\n\nexport type CallingPartyInfo = {\n  name: ResponseString$;\n  userId?: ResponseString$;\n  address: ResponseString$;\n  userExternalId?: ResponseString$;\n};\n\nexport type SummaryInfo = {\n  newMessages: number;\n  oldMessages: number;\n  newUrgentMessages: number;\n  oldUrgentMessages: number;\n};\n\nexport type MessageInfo = {\n  duration: ResponseString$;\n  callingPartyInfo: CallingPartyInfo;\n  time: ResponseNumber$;\n  messageId: ResponseString$;\n  read: ResponseString$ | object;\n};\n\nexport type FilteredVoicemail = {\n  messages: MessageInfo[];\n  moreVMAvailable: boolean;\n};\n\nexport type VoicemailList = {\n  VoiceMessagingMessages: {\n    messageInfoList: {\n      messageInfo: MessageInfo[];\n    };\n  };\n};\n\nexport type VoicemailResponseEvent = {\n  statusCode: number;\n  data: {\n    voicemailList?: MessageInfo[];\n    voicemailContent?: {\n      type: string | null;\n      content: string | null;\n    };\n    voicemailSummary?: SummaryInfo;\n    voicemailTranscript?: string | null;\n    error?: string;\n  };\n  message: string | null;\n};\n\n/**\n * Interface for the Voicemail Module.\n * This interface provides a set of APIs for retrieving and updating voicemail, including operations such as retrieving voicemail lists, messages count summary, marking as read/unread, and accessing voicemail transcripts.\n *\n * These APIs return promises that resolve to a `VoicemailResponseEvent` object, which includes a status code, data, and message.\n * The data field within this response object may contain various objects, with different types depending on the specific API used.\n *\n * @example\n * A successful response will be structured as follows:\n * ```json\n * {\n *    statusCode: 200,\n *    data: {\n *      voicemailTranscript: \"Example\"\n *    },\n *    message: 'SUCCESS'\n * }\n * ```\n\n * A failure response will be structured as follows:\n * ```json\n * {\n *    statusCode: 503,\n *    data: {\n *        error: \"Failure reason\"\n *    },\n *    message: 'FAILURE'\n * }\n * ```\n */\nexport interface IVoicemail {\n  /**\n   * Retrieves the SDK connector associated with the Calling SDK.\n   * @ignore\n   */\n  getSDKConnector(): ISDKConnector;\n\n  /**\n   * Initializes the voicemail service and returns a voicemail response event.\n   *\n   */\n  init(): VoicemailResponseEvent | Promise<VoicemailResponseEvent>;\n\n  /**\n   * Retrieves a list of voicemails with optional pagination and sorting options.\n   * Received data can be accessed through `data.voicemailList`\n   *\n   * @param offset - The offset for pagination. Number of records to skip.\n   * @param offsetLimit - The limit on the number of voicemails to retrieve from the offset.\n   * @param sort - Sort voicemail list (eg. ASC | DESC).\n   * @param refresh - Set to `true` to force a refresh of voicemail data from backend (optional).\n   *\n   * @example\n   * ```typescript\n   * const voicemailResponse = await voicemailInstance.getVoicemailList(0, 10, SORT.ASC);\n   * ```\n   * The `voicemailResponse` object will have `voicemailList` object as properties in data attribute.\n   *\n   * ```json\n   * {\n   *    statusCode: 200,\n   *    data: {\n   *        voicemailList: [messages]\n   *    }\n   * }\n   * ```\n   */\n  getVoicemailList(\n    offset: number,\n    offsetLimit: number,\n    sort: SORT,\n    refresh?: boolean\n  ): Promise<VoicemailResponseEvent>;\n\n  /**\n   * Retrieves the content of a voicemail message based on its messageId.\n   * Received data can be accessed through `data.voicemailContent`\n   *\n   * @param messageId - The identifier of the voicemail message.\n   * @example\n   * ```typescript\n   * const messageId = 'Y2lzY29zcGFyazovL3VzL01FU1NBR0UvNTc3OTQ2NjItNDA5OS00NDQ3LWI';\n   * const voicemailResponse = await voicemailInstance.getVoicemailContent(messageId);\n   * ```\n   * The `voicemailResponse` object will have `voicemailContent` object as properties in data attribute.\n   *\n   * ```json\n   * {\n   *    statusCode: 200,\n   *    data: {\n   *        voicemailContent: {\n   *          type: 'message',\n   *          content: 'something'\n   *        }\n   *    }\n   * }\n   * ```\n   */\n  getVoicemailContent(messageId: string): Promise<VoicemailResponseEvent>;\n\n  /**\n   * Retrieves a quantitative summary of voicemails for a user.\n   * Received data can be accessed through `data.voicemailSummary`\n   *\n   * @example\n   * ```\n   * const voicemailResponse = await voicemailInstance.getVoicemailSummary();\n   * ```\n   * The `voicemailResponse` object will have `voicemailSummary` object as properties in data attribute.\n   *\n   * ```json\n   * {\n   *    statusCode: 200,\n   *    data: {\n   *        voicemailSummary: {\n   *          newMessages: 1,\n   *          oldMessage: 7,\n   *          newUrgentMessages: 0,\n   *          oldUrgentMessages: 0\n   *        }\n   *    }\n   * }\n   * ```\n   */\n  getVoicemailSummary(): Promise<VoicemailResponseEvent | null>;\n\n  /**\n   * Marks a voicemail message as read based on its message identifier.\n   * Note: Response will have a `statusCode` and `message`. But `data` attribute is not returned in the response unless it is\n   * an error response in that case   `data` will have `error` attribute.\n   *\n   * @param messageId - The identifier of the voicemail message to mark as read.\n   * ```typescript\n   * const messageId = 'Y2lzY29zcGFyazovL3VzL01FU1NBR0UvNTc3OTQ2NjItNDA5OS00NDQ3LWI';\n   * const voicemailResponse = await voicemailInstance.voicemailMarkAsRead(messageId);\n   * ```\n   * The `voicemailResponse` object will be populated as below:\n   *\n   * ```json\n   * {\n   *    statusCode: 200,\n   *    message: \"SUCCESS\"\n   * }\n   * ```\n   * The `voicemailResponse` object will be populated as below in case of error response:\n   *\n   * ```json\n   * {\n   *    statusCode: 404,\n   *    message: \"FAILURE\"\n   *    data: {\n   *      error: \"Failure reason\"\n   *    }\n   * }\n   */\n  voicemailMarkAsRead(messageId: string): Promise<VoicemailResponseEvent>;\n\n  /**\n   * Marks a voicemail message as unread based on its message identifier.\n   * Note: Response will have a `statusCode` and `message`. But `data` attribute is not returned in the response unless it is\n   * an error response in that case   `data` will have `error` attribute.\n   *\n   * @param messageId - The identifier of the voicemail message to mark as unread.\n   * @example\n   * ```typescript\n   * const messageId = 'Y2lzY29zcGFyazovL3VzL01FU1NBR0UvNTc3OTQ2NjItNDA5OS00NDQ3LWI';\n   * const voicemailResponse = await voicemailInstance.voicemailMarkAsUnread(messageId);\n   * ```\n   * The `voicemailResponse` object will be populated as below:\n   *\n   * ```json\n   * {\n   *    statusCode: 200,\n   *    message: \"SUCCESS\"\n   * }\n   * ```\n   */\n  voicemailMarkAsUnread(messageId: string): Promise<VoicemailResponseEvent>;\n\n  /**\n   * Deletes a voicemail message based on its message identifier.\n   * Note: Response will have a `statusCode` and `message`. But `data` attribute is not returned in the response unless it is\n   * an error response in that case   `data` will have `error` attribute.\n   *\n   * @param messageId - The identifier of the voicemail message to delete.\n   * @example\n   * ```typescript\n   * const messageId = 'Y2lzY29zcGFyazovL3VzL01FU1NBR0UvNTc3OTQ2NjItNDA5OS00NDQ3LWI';\n   * const voicemailResponse = await voicemailInstance.deleteVoicemail(messageId);\n   * ```\n   * The `voicemailResponse` object will be populated as below:\n   *\n   * ```json\n   * {\n   *    statusCode: 200,\n   *    message: \"SUCCESS\"\n   * }\n   * ```\n   */\n  deleteVoicemail(messageId: string): Promise<VoicemailResponseEvent>;\n\n  /**\n   * Retrieves the transcript of a voicemail message based on its message identifier.\n   * Received data can be accessed through `data.voicemailTranscript`\n   *\n   * @param messageId - The identifier of the voicemail message.\n   *\n   * @example\n   * ```typescript\n   * const messageId = 'Y2lzY29zcGFyazovL3VzL01FU1NBR0UvNTc3OTQ2NjItNDA5OS00NDQ3LWI';\n   * const voicemailResponse = await voicemailInstance.getVMTranscript(messageId);\n   * ```\n   * The `voicemailResponse` object will have `voicemailTranscript` object as properties in data attribute.\n   *\n   * ```json\n   * {\n   *    statusCode: 200,\n   *    data: {\n   *        voicemailTranscript: 'Here is your transcript.'\n   *    }\n   * }\n   * ```\n   */\n  getVMTranscript(messageId: string): Promise<VoicemailResponseEvent | null>;\n\n  /**\n   * Resolves contact information based on calling party information.\n   *\n   * @param callingPartyInfo - The calling party information for contact resolution.\n   *\n   * @example\n   * ```typescript\n   * const callingPartyInfo = { userId: \"Y2lzY29zcGFyazovL3VzL1BFT1BMRS8wZmVh\" };\n   * const contactInfo = await voicemailInstance.resolveContact(callingPartyInfo);\n   * ```\n   */\n  resolveContact(callingPartyInfo: CallingPartyInfo): Promise<DisplayInformation | null>;\n}\n\nexport interface IWxCallBackendConnector extends IVoicemail {\n  xsiEndpoint: WebexRequestPayload;\n  userId: string;\n}\n\nexport interface IBroadworksCallBackendConnector extends IVoicemail {\n  xsiEndpoint: WebexRequestPayload;\n  userId: string;\n  bwtoken: string;\n  xsiAccessToken: string;\n}\n\nexport interface IUcmBackendConnector extends IVoicemail {\n  userId: string;\n}\n\nexport type From = {\n  DisplayName: string;\n  SmtpAddress: string;\n  DtmfAccessId: string;\n};\n\nexport type CallerId = {\n  CallerNumber: string;\n  CallerName: string;\n};\n\nexport type UcmVmMessageInfo = {\n  Subject: string;\n  Read: string;\n  Dispatch: string;\n  Secure: string;\n  Priority: string;\n  Sensitivity: string;\n  URI: string;\n  MsgId: string;\n  From: From;\n  CallerId: CallerId;\n  ArrivalTime: string;\n  Size: string;\n  Duration: string;\n  IMAPUid: string;\n  FromSub: string;\n  MsgType: string;\n};\n\nexport type UcmVMContentResponse = {\n  data?: string;\n};\n\nexport type UcmVMResponse = {\n  '@total': string;\n  Message: UcmVmMessageInfo;\n};\n\nexport type MessageId = {\n  messageId: string;\n  eventType: string;\n  status: string;\n};\n\nexport type VoicemailEvent = {\n  data: MessageId;\n  filterMessage: boolean;\n  id: string;\n  sequenceNumber: number;\n  timestamp: number;\n  trackingId: string;\n};\n"],"mappings":""}