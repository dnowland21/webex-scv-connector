"use strict";

var _typeof = require("@babel/runtime-corejs2/helpers/typeof");
var _WeakMap = require("@babel/runtime-corejs2/core-js/weak-map");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));
var _types = require("../Logger/types");
var _testUtil = require("../common/testUtil");
var _types2 = require("../common/types");
var _BroadworksBackendConnector = require("./BroadworksBackendConnector");
var _voicemailFixture = require("./voicemailFixture");
var _constants = require("./constants");
var utils = _interopRequireWildcard(require("../common/Utils"));
var _constants2 = require("../common/constants");
var _Logger = _interopRequireDefault(require("../Logger"));
function _getRequireWildcardCache(e) { if ("function" != typeof _WeakMap) return null; var r = new _WeakMap(), t = new _WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? _Object$getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? _Object$defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/* eslint-disable dot-notation */

jest.spyOn(utils, 'uploadLogs').mockResolvedValue(undefined);
var webex = (0, _testUtil.getTestUtilsWebex)();
describe('Voicemail Broadworks Backend Connector Test case', function () {
  var broadworksBackendConnector;
  var getSortedVoicemailListSpy;
  var storeVoicemailListSpy;
  var fetchVoicemailListSpy;
  var infoSpy;
  var logSpy;
  var errorSpy;
  var messageId = _voicemailFixture.mockVoicemailBody.body.items[0].messageId;
  beforeAll(function () {
    webex.internal.device.features.entitlement.models = [{
      _values: {
        key: 'broadworks-connector'
      }
    }];
    broadworksBackendConnector = new _BroadworksBackendConnector.BroadworksBackendConnector(webex, {
      level: _types.LOGGER.INFO
    });
    broadworksBackendConnector.getSDKConnector();
    fetchVoicemailListSpy = jest.spyOn(utils, 'fetchVoicemailList');
    infoSpy = jest.spyOn(_Logger.default, 'info');
    logSpy = jest.spyOn(_Logger.default, 'log');
    errorSpy = jest.spyOn(_Logger.default, 'error');
  });
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Voicemail failure test cases', function () {
    var serviceErrorCodeHandlerSpy;
    beforeEach(function () {
      serviceErrorCodeHandlerSpy = jest.spyOn(utils, 'serviceErrorCodeHandler');
      global.fetch = jest.fn(function () {
        return _promise.default.resolve({
          status: _constants2.UNPROCESSABLE_CONTENT_CODE,
          ok: false
        });
      });
    });
    afterEach(function () {
      jest.clearAllMocks();
    });
    it('verify exception case for the mark read case when messageid is invalid', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var response;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return broadworksBackendConnector.voicemailMarkAsRead('dummy');
          case 2:
            response = _context.sent;
            expect(response.message).toBe(_constants2.FAILURE_MESSAGE);
            expect(response.statusCode).toBe(_constants2.UNPROCESSABLE_CONTENT_CODE);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: _constants2.UNPROCESSABLE_CONTENT_CODE
            }, {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsRead'
            });
            expect(infoSpy).toHaveBeenCalledWith('invoking with messageId: dummy', {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsRead'
            });
            expect(errorSpy).toHaveBeenCalled();
          case 8:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    it('verify failure case for the mark read case when response is not ok', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
      var response;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return broadworksBackendConnector.voicemailMarkAsRead('dummy');
          case 2:
            response = _context2.sent;
            expect(response.message).toBe(_constants2.FAILURE_MESSAGE);
            expect(response.statusCode).toBe(_constants2.UNPROCESSABLE_CONTENT_CODE);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: _constants2.UNPROCESSABLE_CONTENT_CODE
            }, {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsRead'
            });
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    })));
    it('verify failure case for the mark as unread case when response is not ok', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
      var response;
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return broadworksBackendConnector.voicemailMarkAsUnread('dummy');
          case 2:
            response = _context3.sent;
            expect(response.message).toBe(_constants2.FAILURE_MESSAGE);
            expect(response.statusCode).toBe(_constants2.UNPROCESSABLE_CONTENT_CODE);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: _constants2.UNPROCESSABLE_CONTENT_CODE
            }, {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsUnread'
            });
            expect(infoSpy).toHaveBeenCalledWith('invoking with messageId: dummy', {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsUnread'
            });
            expect(errorSpy).toHaveBeenCalled();
          case 8:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
    it('verify failure case for the delete voicemail case when response is not ok', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
      var response;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return broadworksBackendConnector.deleteVoicemail('dummy');
          case 2:
            response = _context4.sent;
            expect(response.message).toBe(_constants2.FAILURE_MESSAGE);
            expect(response.statusCode).toBe(_constants2.UNPROCESSABLE_CONTENT_CODE);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: _constants2.UNPROCESSABLE_CONTENT_CODE
            }, {
              file: 'BroadworksBackendConnector',
              method: 'deleteVoicemail'
            });
            expect(infoSpy).toHaveBeenCalledWith('invoking with messageId: dummy', {
              file: 'BroadworksBackendConnector',
              method: 'deleteVoicemail'
            });
            expect(errorSpy).toHaveBeenCalled();
          case 8:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    })));
    it('verify failure case for the delete voicemail case when api response fails', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
      var response;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            global.fetch.mockRejectedValueOnce('server is busy');
            _context5.next = 3;
            return broadworksBackendConnector.deleteVoicemail(messageId.$);
          case 3:
            response = _context5.sent;
            expect(response).toStrictEqual(_voicemailFixture.responseDetails422);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: ''
            }, {
              file: 'BroadworksBackendConnector',
              method: 'deleteVoicemail'
            });
          case 6:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    })));
    it('verify failure case for the voicemail content case when response is not ok', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
      var response;
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return broadworksBackendConnector.getVoicemailContent('dummy');
          case 2:
            response = _context6.sent;
            expect(response.message).toBe(_constants2.FAILURE_MESSAGE);
            expect(response.statusCode).toBe(_constants2.UNPROCESSABLE_CONTENT_CODE);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: _constants2.UNPROCESSABLE_CONTENT_CODE
            }, {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailContent'
            });
            expect(infoSpy).toHaveBeenCalledWith('invoking with messageId: dummy', {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailContent'
            });
            expect(errorSpy).toHaveBeenCalled();
          case 8:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    })));
    it('verify failed case when token is empty', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
      var failurePayload, voiceMailPayload, response;
      return _regenerator.default.wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            failurePayload = {
              message: _constants2.FAILURE_MESSAGE,
              status: 401
            };
            voiceMailPayload = failurePayload;
            broadworksBackendConnector['bwtoken'] = '';
            webex.request.mockRejectedValue(voiceMailPayload);
            _context7.next = 6;
            return broadworksBackendConnector.init();
          case 6:
            response = _context7.sent;
            expect(response.message).toBe(_constants2.FAILURE_MESSAGE);
            expect(response.statusCode).toBe(401);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: 401
            }, {
              file: 'BroadworksBackendConnector',
              method: 'getUserId'
            });
          case 10:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    })));
    it('verify failed case when token is invalid', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
      var failurePayload, voiceMailPayload, response;
      return _regenerator.default.wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            failurePayload = {
              message: _constants2.FAILURE_MESSAGE,
              status: 401
            };
            voiceMailPayload = failurePayload;
            broadworksBackendConnector['bwtoken'] = 'dummy';
            webex.request.mockRejectedValue(voiceMailPayload);
            _context8.next = 6;
            return broadworksBackendConnector.init();
          case 6:
            response = _context8.sent;
            expect(response.message).toBe(_constants2.FAILURE_MESSAGE);
            expect(response.statusCode).toBe(401);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: 401
            }, {
              file: 'BroadworksBackendConnector',
              method: 'getUserId'
            });
          case 10:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    })));
    it('verify no response case when token have invalid userid', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {
      var response;
      return _regenerator.default.wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            broadworksBackendConnector['bwtoken'] = 'bwtoken.eyJhbGciOiJIUzI1NiJ9';
            _context9.next = 3;
            return broadworksBackendConnector.init();
          case 3:
            response = _context9.sent;
            expect(response).toBeUndefined();
          case 5:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    })));
    it('verify no change in xsi url received without ep version', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {
      var voiceMailPayload;
      return _regenerator.default.wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            voiceMailPayload = JSON.parse((0, _stringify.default)(_voicemailFixture.mockBWRKSData));
            voiceMailPayload.body.devices[0].settings.broadworksXsiActionsUrl = voiceMailPayload.body.devices[0].settings.broadworksXsiActionsUrl.slice(0, -5);
            webex.request.mockResolvedValueOnce(_voicemailFixture.broadworksTokenType);
            webex.request.mockResolvedValueOnce(voiceMailPayload);
            broadworksBackendConnector.xsiEndpoint = {};
            _context10.next = 7;
            return broadworksBackendConnector.init();
          case 7:
            expect(broadworksBackendConnector.xsiEndpoint).toStrictEqual(voiceMailPayload.body.devices[0].settings.broadworksXsiActionsUrl);
          case 8:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    })));
    it('verify failure case for voicemail list fetch', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {
      var response;
      return _regenerator.default.wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return broadworksBackendConnector.getVoicemailList(0, 20, _types2.SORT.DESC, true);
          case 2:
            response = _context11.sent;
            expect(response).toStrictEqual(_voicemailFixture.responseDetails422);
            expect(serviceErrorCodeHandlerSpy).toBeCalledOnceWith({
              statusCode: _constants2.UNPROCESSABLE_CONTENT_CODE
            }, {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
            expect(infoSpy).toHaveBeenCalledWith('invoking with offset: 0, offsetLimit: 20, sort type: DESC', {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
            expect(errorSpy).toHaveBeenCalled();
          case 7:
          case "end":
            return _context11.stop();
        }
      }, _callee11);
    })));
    it('verify failure case for voicemail list fetch when api request fails', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {
      var response;
      return _regenerator.default.wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            global.fetch.mockRejectedValueOnce('server is busy');
            _context12.next = 3;
            return broadworksBackendConnector.getVoicemailList(0, 20, _types2.SORT.DESC, true);
          case 3:
            response = _context12.sent;
            expect(response).toStrictEqual(_voicemailFixture.responseDetails422);
            expect(fetchVoicemailListSpy).not.toBeCalled();
          case 6:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    })));
  });
  describe('Voicemail success tests for Broadworks', function () {
    beforeEach(function () {
      getSortedVoicemailListSpy = jest.spyOn(utils, 'getSortedVoicemailList');
      storeVoicemailListSpy = jest.spyOn(utils, 'storeVoicemailList');
    });
    afterEach(function () {
      jest.clearAllMocks();
    });
    var success = 'SUCCESS';
    var CONTEXT = 'context';
    beforeEach( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee13() {
      var voiceMailTokenPayload, voiceMailPayload;
      return _regenerator.default.wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            global.fetch = jest.fn(function () {
              return _promise.default.resolve({
                status: 200,
                ok: true,
                json: function json() {
                  return _promise.default.resolve(_voicemailFixture.getVoicemailListJsonBWRKS);
                }
              });
            });
            broadworksBackendConnector['bwtoken'] = _voicemailFixture.bwToken;
            broadworksBackendConnector['context'] = CONTEXT;
            voiceMailTokenPayload = _voicemailFixture.broadworksTokenType;
            webex.request.mockResolvedValueOnce(voiceMailTokenPayload);
            voiceMailPayload = _voicemailFixture.mockBWRKSData;
            webex.request.mockResolvedValueOnce(voiceMailPayload);
            broadworksBackendConnector['xsiVoiceMessageURI'] = _voicemailFixture.broadworksUserInfoUrl;
            broadworksBackendConnector.init();
          case 9:
          case "end":
            return _context13.stop();
        }
      }, _callee13);
    })));
    it('verify successful voicemail listing in descending order with offset 0 and limit 20', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee14() {
      var response, voicemailResponseInfo, responseDetails;
      return _regenerator.default.wrap(function _callee14$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            logSpy.mockClear();
            _context14.next = 3;
            return broadworksBackendConnector.getVoicemailList(0, 20, _types2.SORT.DESC, true);
          case 3:
            response = _context14.sent;
            voicemailResponseInfo = {
              voicemailList: _voicemailFixture.getDescVoicemailListJsonBWRKS.VoiceMessagingMessages.messageInfoList.messageInfo
            };
            responseDetails = {
              statusCode: _constants.NO_VOICEMAIL_STATUS_CODE,
              data: voicemailResponseInfo,
              message: _constants.NO_VOICEMAIL_MSG
            };
            expect(response).toStrictEqual(responseDetails);
            expect(response.message).toBe(_constants.NO_VOICEMAIL_MSG);
            expect(global.fetch).toBeCalledOnceWith("".concat(_voicemailFixture.broadworksUserInfoUrl).concat(_constants.JSON_FORMAT), {
              headers: {
                Authorization: "bearer ".concat(_voicemailFixture.bwToken)
              },
              method: 'GET'
            });
            expect(getSortedVoicemailListSpy).toBeCalledOnceWith(voicemailResponseInfo.voicemailList, 'DESC');
            expect(storeVoicemailListSpy).toBeCalledOnceWith(CONTEXT, voicemailResponseInfo.voicemailList);
            expect(fetchVoicemailListSpy).toBeCalledOnceWith(CONTEXT, 0, 20, {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
            expect(infoSpy).toHaveBeenCalledWith('invoking with offset: 0, offsetLimit: 20, sort type: DESC', {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
            expect(logSpy).toHaveBeenCalledWith('Successfully fetched voicemail list with 5 messages', {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
          case 14:
          case "end":
            return _context14.stop();
        }
      }, _callee14);
    })));
    it('verify successful voicemail listing in ascending order with offset 0 and limit 20', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee15() {
      var response, voicemailResponseInfo, responseDetails;
      return _regenerator.default.wrap(function _callee15$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return broadworksBackendConnector.getVoicemailList(0, 20, _types2.SORT.ASC, true);
          case 2:
            response = _context15.sent;
            voicemailResponseInfo = {
              voicemailList: _voicemailFixture.getAscVoicemailListJsonBWRKS.VoiceMessagingMessages.messageInfoList.messageInfo
            };
            responseDetails = {
              statusCode: _constants.NO_VOICEMAIL_STATUS_CODE,
              data: voicemailResponseInfo,
              message: _constants.NO_VOICEMAIL_MSG
            };
            expect(response).toStrictEqual(responseDetails);
            expect(response.message).toBe(_constants.NO_VOICEMAIL_MSG);
            expect(global.fetch).toBeCalledTimes(1);
            expect(global.fetch).toBeCalledWith("".concat(_voicemailFixture.broadworksUserInfoUrl).concat(_constants.JSON_FORMAT), {
              headers: {
                Authorization: "bearer ".concat(_voicemailFixture.bwToken)
              },
              method: 'GET'
            });
            expect(getSortedVoicemailListSpy).toBeCalledOnceWith(voicemailResponseInfo.voicemailList, 'ASC');
            expect(storeVoicemailListSpy).toBeCalledOnceWith(CONTEXT, voicemailResponseInfo.voicemailList);
            expect(fetchVoicemailListSpy).toBeCalledOnceWith(CONTEXT, 0, 20, {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
          case 12:
          case "end":
            return _context15.stop();
        }
      }, _callee15);
    })));
    it('verify successful voicemail listing in descending order with offset 0 and limit 1 and invalid sort parameter', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee16() {
      var response, voicemailResponseInfo, responseDetails;
      return _regenerator.default.wrap(function _callee16$(_context16) {
        while (1) switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return broadworksBackendConnector.getVoicemailList(0, 1, 'abcd', true);
          case 2:
            response = _context16.sent;
            voicemailResponseInfo = {
              voicemailList: _voicemailFixture.getDescVoicemailListJsonBWRKS.VoiceMessagingMessages.messageInfoList.messageInfo.slice(0, 1)
            };
            responseDetails = {
              statusCode: 200,
              data: voicemailResponseInfo,
              message: success
            };
            expect(response).toStrictEqual(responseDetails);
            expect(response.message).toBe(success);
            expect(global.fetch).toBeCalledTimes(1);
            expect(global.fetch).toBeCalledWith("".concat(_voicemailFixture.broadworksUserInfoUrl).concat(_constants.JSON_FORMAT), {
              headers: {
                Authorization: "bearer ".concat(_voicemailFixture.bwToken)
              },
              method: 'GET'
            });
            expect(getSortedVoicemailListSpy).toBeCalledOnceWith(_voicemailFixture.getDescVoicemailListJsonBWRKS.VoiceMessagingMessages.messageInfoList.messageInfo, 'DESC');
            expect(storeVoicemailListSpy).toBeCalledOnceWith(CONTEXT, _voicemailFixture.getDescVoicemailListJsonBWRKS.VoiceMessagingMessages.messageInfoList.messageInfo);
            expect(fetchVoicemailListSpy).toBeCalledOnceWith(CONTEXT, 0, 1, {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
          case 12:
          case "end":
            return _context16.stop();
        }
      }, _callee16);
    })));
    it('verify successful voicemail listing in ascending order with offset 0 and limit 3 without refresh', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee17() {
      var vmEncodedList, response, voicemailResponseInfo, responseDetails;
      return _regenerator.default.wrap(function _callee17$(_context17) {
        while (1) switch (_context17.prev = _context17.next) {
          case 0:
            vmEncodedList = Buffer.from((0, _stringify.default)(_voicemailFixture.getAscVoicemailListJsonBWRKS.VoiceMessagingMessages.messageInfoList.messageInfo), 'utf8').toString('base64');
            sessionStorage.setItem(CONTEXT, vmEncodedList.toString());
            _context17.next = 4;
            return broadworksBackendConnector.getVoicemailList(0, 3, _types2.SORT.ASC, false);
          case 4:
            response = _context17.sent;
            voicemailResponseInfo = {
              voicemailList: _voicemailFixture.getAscVoicemailListJsonBWRKS.VoiceMessagingMessages.messageInfoList.messageInfo.slice(0, 3)
            };
            responseDetails = {
              statusCode: 200,
              data: voicemailResponseInfo,
              message: success
            };
            expect(response).toStrictEqual(responseDetails);
            expect(response.message).toBe(success);
            expect(global.fetch).not.toBeCalled();
            expect(getSortedVoicemailListSpy).not.toBeCalled();
            expect(storeVoicemailListSpy).not.toBeCalled();
            expect(fetchVoicemailListSpy).toBeCalledOnceWith(CONTEXT, 0, 3, {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
            sessionStorage.removeItem(CONTEXT);
          case 14:
          case "end":
            return _context17.stop();
        }
      }, _callee17);
    })));
    it('verify empty voicemail listing data', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee18() {
      var response, voicemailResponseInfo, responseDetails;
      return _regenerator.default.wrap(function _callee18$(_context18) {
        while (1) switch (_context18.prev = _context18.next) {
          case 0:
            global.fetch.mockReturnValueOnce({
              status: 200,
              ok: true,
              json: function json() {
                return _promise.default.resolve(_voicemailFixture.getEmptyVoicemailListJsonBWRKS);
              }
            });
            _context18.next = 3;
            return broadworksBackendConnector.getVoicemailList(0, 20, _types2.SORT.DESC, true);
          case 3:
            response = _context18.sent;
            voicemailResponseInfo = {
              voicemailList: []
            };
            responseDetails = {
              statusCode: _constants.NO_VOICEMAIL_STATUS_CODE,
              data: voicemailResponseInfo,
              message: _constants.NO_VOICEMAIL_MSG
            };
            expect(response).toStrictEqual(responseDetails);
            expect(response.message).toBe(_constants.NO_VOICEMAIL_MSG);
            expect(global.fetch).toBeCalledOnceWith("".concat(_voicemailFixture.broadworksUserInfoUrl).concat(_constants.JSON_FORMAT), {
              headers: {
                Authorization: "bearer ".concat(_voicemailFixture.bwToken)
              },
              method: 'GET'
            });
            expect(fetchVoicemailListSpy).toBeCalledOnceWith(CONTEXT, 0, 20, {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
          case 10:
          case "end":
            return _context18.stop();
        }
      }, _callee18);
    })));
    it('verify empty voicemail listing data when response data is in invalid format', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee19() {
      var response, voicemailResponseInfo, responseDetails;
      return _regenerator.default.wrap(function _callee19$(_context19) {
        while (1) switch (_context19.prev = _context19.next) {
          case 0:
            global.fetch.mockReturnValueOnce({
              status: 200,
              ok: true,
              json: function json() {
                return _promise.default.resolve(_voicemailFixture.getInvalidVoicemailListJsonBWRKS);
              }
            });
            _context19.next = 3;
            return broadworksBackendConnector.getVoicemailList(0, 20, _types2.SORT.DESC, true);
          case 3:
            response = _context19.sent;
            voicemailResponseInfo = {
              voicemailList: [{}]
            };
            responseDetails = {
              statusCode: _constants.NO_VOICEMAIL_STATUS_CODE,
              data: voicemailResponseInfo,
              message: _constants.NO_VOICEMAIL_MSG
            };
            expect(response).toStrictEqual(responseDetails);
            expect(response.message).toBe(_constants.NO_VOICEMAIL_MSG);
            expect(global.fetch).toBeCalledOnceWith("".concat(_voicemailFixture.broadworksUserInfoUrl).concat(_constants.JSON_FORMAT), {
              headers: {
                Authorization: "bearer ".concat(_voicemailFixture.bwToken)
              },
              method: 'GET'
            });
            expect(fetchVoicemailListSpy).toBeCalledOnceWith(CONTEXT, 0, 20, {
              file: 'BroadworksBackendConnector',
              method: 'getVoicemailList'
            });
          case 10:
          case "end":
            return _context19.stop();
        }
      }, _callee19);
    })));
    it('verify successful voicemailMarkAsRead', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee20() {
      var responseDetails, response;
      return _regenerator.default.wrap(function _callee20$(_context20) {
        while (1) switch (_context20.prev = _context20.next) {
          case 0:
            responseDetails = {
              data: {},
              statusCode: 200
            };
            _context20.next = 3;
            return broadworksBackendConnector.voicemailMarkAsRead(messageId.$);
          case 3:
            response = _context20.sent;
            expect(response.message).toBe(success);
            expect(response.data).toStrictEqual(responseDetails.data);
            expect(global.fetch).toBeCalledTimes(1);
            expect(global.fetch).toBeCalledWith("".concat(_voicemailFixture.broadworksUserInfoUrl, "/").concat(_voicemailFixture.broadworksUserMessageId, "/").concat(_constants.MARK_AS_READ), {
              headers: {
                Authorization: "bearer ".concat(_voicemailFixture.bwToken)
              },
              method: 'PUT'
            });
            expect(infoSpy).toHaveBeenCalledWith("".concat(_constants2.METHOD_START_MESSAGE, " with messageId: ").concat(messageId.$), {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsRead'
            });
            expect(logSpy).toHaveBeenCalledWith("Successfully marked voicemail with ID ".concat(messageId.$, " as read"), {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsRead'
            });
          case 10:
          case "end":
            return _context20.stop();
        }
      }, _callee20);
    })));
    it('verify successful voicemailMarkAsUnread', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee21() {
      var responseDetails, response;
      return _regenerator.default.wrap(function _callee21$(_context21) {
        while (1) switch (_context21.prev = _context21.next) {
          case 0:
            responseDetails = {
              statusCode: 200,
              data: {}
            };
            _context21.next = 3;
            return broadworksBackendConnector.voicemailMarkAsUnread(messageId.$);
          case 3:
            response = _context21.sent;
            expect(response.data).toStrictEqual(responseDetails.data);
            expect(response.message).toBe(success);
            expect(global.fetch).toBeCalledTimes(1);
            expect(global.fetch).toBeCalledWith("".concat(_voicemailFixture.broadworksUserInfoUrl, "/").concat(_voicemailFixture.broadworksUserMessageId, "/").concat(_constants.MARK_AS_UNREAD), {
              headers: {
                Authorization: "bearer ".concat(_voicemailFixture.bwToken)
              },
              method: 'PUT'
            });
            expect(infoSpy).toHaveBeenCalledWith("".concat(_constants2.METHOD_START_MESSAGE, " with messageId: ").concat(messageId.$), {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsUnread'
            });
            expect(logSpy).toHaveBeenCalledWith("Successfully marked voicemail with ID ".concat(messageId.$, " as unread"), {
              file: 'BroadworksBackendConnector',
              method: 'voicemailMarkAsUnread'
            });
          case 10:
          case "end":
            return _context21.stop();
        }
      }, _callee21);
    })));
    it('verify successful deleteVoicemail', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee22() {
      var response;
      return _regenerator.default.wrap(function _callee22$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return broadworksBackendConnector.deleteVoicemail(messageId.$);
          case 2:
            response = _context22.sent;
            expect(response.data).toStrictEqual({});
            expect(response.message).toBe(success);
            expect(global.fetch).toBeCalledTimes(1);
            expect(global.fetch).toBeCalledWith("".concat(_voicemailFixture.broadworksUserInfoUrl, "/").concat(_voicemailFixture.broadworksUserMessageId), {
              headers: {
                Authorization: "bearer ".concat(_voicemailFixture.bwToken)
              },
              method: 'DELETE'
            });
            expect(infoSpy).toHaveBeenCalledWith("".concat(_constants2.METHOD_START_MESSAGE, " with messageId: ").concat(messageId.$), {
              file: 'BroadworksBackendConnector',
              method: 'deleteVoicemail'
            });
            expect(logSpy).toHaveBeenCalledWith("Successfully deleted voicemail with ID ".concat(messageId.$), {
              file: 'BroadworksBackendConnector',
              method: 'deleteVoicemail'
            });
          case 9:
          case "end":
            return _context22.stop();
        }
      }, _callee22);
    })));
    it('verify successfully fetching voicemail transcript for the provided messageId', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee23() {
      var transcriptId, response;
      return _regenerator.default.wrap(function _callee23$(_context23) {
        while (1) switch (_context23.prev = _context23.next) {
          case 0:
            transcriptId = '98099432-9d81-4224-bd04-00def73cd262';
            _context23.next = 3;
            return broadworksBackendConnector.getVMTranscript(transcriptId);
          case 3:
            response = _context23.sent;
            expect(response).toBeNull();
            expect(infoSpy).toHaveBeenCalledWith("".concat(_constants2.METHOD_START_MESSAGE, " with messageId: ").concat(transcriptId), {
              file: 'BroadworksBackendConnector',
              method: 'getVMTranscript'
            });
          case 6:
          case "end":
            return _context23.stop();
        }
      }, _callee23);
    })));
    it('verify resolution of contact to null', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee24() {
      var response;
      return _regenerator.default.wrap(function _callee24$(_context24) {
        while (1) switch (_context24.prev = _context24.next) {
          case 0:
            // Clear all mocks before calling the method to test
            jest.clearAllMocks();
            _context24.next = 3;
            return broadworksBackendConnector.resolveContact(_voicemailFixture.resolveContactArgs);
          case 3:
            response = _context24.sent;
            expect(response).toBeNull();
            expect(infoSpy).toHaveBeenCalledWith("".concat(_constants2.METHOD_START_MESSAGE, " with Calling Party Info: ").concat(_voicemailFixture.resolveContactArgs), {
              file: 'BroadworksBackendConnector',
              method: 'resolveContact'
            });
          case 6:
          case "end":
            return _context24.stop();
        }
      }, _callee24);
    })));
    it('verify fetching voicemail summary data to be null', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee25() {
      var response;
      return _regenerator.default.wrap(function _callee25$(_context25) {
        while (1) switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return broadworksBackendConnector.getVoicemailSummary();
          case 2:
            response = _context25.sent;
            expect(response).toBeNull();
          case 4:
          case "end":
            return _context25.stop();
        }
      }, _callee25);
    })));
  });
});
//# sourceMappingURL=BroadworksBackendConnector.test.js.map
