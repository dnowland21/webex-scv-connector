"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.BroadworksBackendConnector = void 0;
var _values = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/typeof"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _types = require("../Errors/types");
var _SDKConnector = _interopRequireDefault(require("../SDKConnector"));
var _constants = require("../common/constants");
var _Utils = require("../common/Utils");
var _types2 = require("../common/types");
var _Logger = _interopRequireDefault(require("../Logger"));
var _constants2 = require("./constants");
/* eslint-disable valid-jsdoc */
/* eslint-disable no-underscore-dangle */
/**
 *
 */
var BroadworksBackendConnector = exports.BroadworksBackendConnector = /*#__PURE__*/function () {
  /**
   * @param webex -.
   * @param logger -.
   */
  function BroadworksBackendConnector(webex, logger) {
    (0, _classCallCheck2.default)(this, BroadworksBackendConnector);
    (0, _defineProperty2.default)(this, "bwtoken", void 0);
    (0, _defineProperty2.default)(this, "userId", void 0);
    (0, _defineProperty2.default)(this, "xsiAccessToken", void 0);
    (0, _defineProperty2.default)(this, "xsiEndpoint", void 0);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "sdkConnector", void 0);
    (0, _defineProperty2.default)(this, "webex", void 0);
    (0, _defineProperty2.default)(this, "xsiVoiceMessageURI", void 0);
    this.sdkConnector = _SDKConnector.default;
    /* istanbul ignore else */
    if (!this.sdkConnector.getWebex()) {
      _SDKConnector.default.setWebex(webex);
    }
    this.webex = this.sdkConnector.getWebex();
    this.context = Math.random().toString(_constants2.RADIX_RAND).substring(_constants2.PREFIX);
    _Logger.default.setLogger(logger.level, _constants2.BROADWORKS_VOICEMAIL_FILE);
  }

  /**
   * Initializing Broadworks voicemail connector.
   *
   * @returns Response.
   */
  (0, _createClass2.default)(BroadworksBackendConnector, [{
    key: "init",
    value: function init() {
      var loggerContext = {
        file: _constants2.BROADWORKS_VOICEMAIL_FILE,
        method: _constants2.METHODS.INIT
      };
      _Logger.default.info(_constants.METHOD_START_MESSAGE, loggerContext);
      var response = this.setXsiVoiceMessageURI();
      _Logger.default.log('Successfully initialized Broadworks voicemail connector', loggerContext);
      return response;
    }

    /**
     * SDK connector function.
     *
     * @returns SdkConnector.
     */
  }, {
    key: "getSDKConnector",
    value: function getSDKConnector() {
      return this.sdkConnector;
    }

    /**
     * Decoding the userId from the broadworks token.
     */
  }, {
    key: "getUserId",
    value: (function () {
      var _getUserId = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var loggerContext, decodedString, error, errorInfo, extendedError;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_USER_ID
              };
              _Logger.default.info(_constants.METHOD_START_MESSAGE, loggerContext);
              _context.prev = 2;
              _context.next = 5;
              return this.getBwToken();
            case 5:
              if (!(this.bwtoken && this.bwtoken.split('.').length > 1)) {
                _context.next = 9;
                break;
              }
              decodedString = Buffer.from(this.bwtoken.split('.')[1], _constants.BASE64).toString(_constants.BINARY);
              this.userId = JSON.parse(decodedString).sub;
              return _context.abrupt("return", this.userId);
            case 9:
              error = _types.ERROR_CODE.UNAUTHORIZED;
              /* If the token is not valid, throw 401 and stop the execution */
              throw new Error("".concat(error));
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](2);
              /* Catch the 401 error from try block, return the error object to user */
              errorInfo = {
                statusCode: _context.t0 instanceof Error ? Number(_context.t0.message) : ''
              };
              extendedError = new Error("Failed to get userId: ".concat(_context.t0));
              _Logger.default.error(extendedError, loggerContext);
              _context.next = 20;
              return (0, _Utils.uploadLogs)();
            case 20:
              return _context.abrupt("return", (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext));
            case 21:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[2, 13]]);
      }));
      function getUserId() {
        return _getUserId.apply(this, arguments);
      }
      return getUserId;
    }()
    /**
     * Fetch the Broadworks token.
     */
    )
  }, {
    key: "getBwToken",
    value: (function () {
      var _getBwToken = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var loggerContext, bwTokenResponse, response, extendedError;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_BW_TOKEN
              };
              _Logger.default.info(_constants.METHOD_START_MESSAGE, loggerContext);
              _context2.prev = 2;
              _context2.next = 5;
              return this.webex.request({
                uri: "".concat(this.webex.internal.services._serviceUrls.broadworksIdpProxy).concat(_constants2.BW_TOKEN_FETCH_ENDPOINT),
                method: _types2.HTTP_METHODS.GET
              });
            case 5:
              bwTokenResponse = _context2.sent;
              response = bwTokenResponse.body;
              this.bwtoken = response[_constants.TOKEN][_constants.BEARER];
              _Logger.default.log('Successfully fetched Broadworks token', loggerContext);
              _context2.next = 17;
              break;
            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](2);
              extendedError = new Error("Broadworks token exception: ".concat(_context2.t0));
              _Logger.default.error(extendedError, {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_BW_TOKEN
              });
              _context2.next = 17;
              return (0, _Utils.uploadLogs)();
            case 17:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[2, 11]]);
      }));
      function getBwToken() {
        return _getBwToken.apply(this, arguments);
      }
      return getBwToken;
    }()
    /**
     * Register XSI URL.
     */
    )
  }, {
    key: "setXsiVoiceMessageURI",
    value: (function () {
      var _setXsiVoiceMessageURI = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        var loggerContext, userIdResponse;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.SET_XSI_VOICE_MESSAGE_URI
              };
              _Logger.default.info(_constants.METHOD_START_MESSAGE, loggerContext);
              _context3.next = 4;
              return this.getUserId();
            case 4:
              userIdResponse = _context3.sent;
              _context3.next = 7;
              return (0, _Utils.getXsiActionEndpoint)(this.webex, loggerContext, _types2.CALLING_BACKEND.BWRKS);
            case 7:
              this.xsiEndpoint = _context3.sent;
              this.xsiAccessToken = "".concat(_constants.BEARER, " ").concat(this.bwtoken);
              _Logger.default.info("XsiEndpoint is ".concat(this.xsiEndpoint), loggerContext);

              /* istanbul ignore else */
              if (userIdResponse && (0, _typeof2.default)(userIdResponse) !== _constants.OBJECT) {
                this.xsiVoiceMessageURI = "".concat(this.xsiEndpoint, "/").concat(_constants.BW_XSI_ENDPOINT_VERSION, "/").concat(_constants.USER, "/").concat(userIdResponse, "/").concat(_constants2.VOICE_MESSAGING_MESSAGES);
                userIdResponse = {
                  statusCode: _constants.SUCCESS_STATUS_CODE,
                  data: {},
                  message: _constants.SUCCESS_MESSAGE
                };
              }
              _Logger.default.log('Successfully set XSI voice message URI', loggerContext);
              return _context3.abrupt("return", userIdResponse);
            case 13:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function setXsiVoiceMessageURI() {
        return _setXsiVoiceMessageURI.apply(this, arguments);
      }
      return setXsiVoiceMessageURI;
    }()
    /**
     * Fetch voicemail list for Broadworks user.
     *
     * @param sort - Sort voicemail list (ASC | DESC). TODO: Once we start implementing sorting.
     * @param offset - Number of records to skip.
     * @param offsetLimit - Number of voicemail list to fetch from the offset.
     * @param refresh - Refresh the list of voicemails from backend.
     * @returns Promise.
     */
    )
  }, {
    key: "getVoicemailList",
    value: (function () {
      var _getVoicemailList = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(offset, offsetLimit, sort, refresh) {
        var loggerContext, urlXsi, messageinfo, sortParam, _voicemailListRespons, _voicemailListRespons2, _voicemailListRespons3, response, voicemailListResponse, _voicemailListRespons4, _voicemailListRespons5, _voicemailListRespons6, _voicemailListRespons7, errorInfo, extendedError, errorStatus, _fetchVoicemailList, messages, moreVMAvailable, responseDetails;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_LIST
              };
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with offset: ").concat(offset, ", offsetLimit: ").concat(offsetLimit, ", sort type: ").concat(sort), loggerContext);
              urlXsi = "".concat(this.xsiVoiceMessageURI).concat(_constants2.JSON_FORMAT);
              sortParam = (0, _values.default)(_types2.SORT).includes(sort) ? sort : _types2.SORT.DEFAULT;
              /* istanbul ignore else */
              if (!refresh) {
                _context4.next = 27;
                break;
              }
              _context4.prev = 5;
              _context4.next = 8;
              return fetch("".concat(urlXsi), {
                method: _types2.HTTP_METHODS.GET,
                headers: {
                  Authorization: this.xsiAccessToken
                }
              });
            case 8:
              response = _context4.sent;
              if (response.ok) {
                _context4.next = 11;
                break;
              }
              throw new Error("".concat(response.status));
            case 11:
              _context4.next = 13;
              return response.json();
            case 13:
              voicemailListResponse = _context4.sent;
              if ((0, _keys.default)(voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : (_voicemailListRespons = voicemailListResponse.VoiceMessagingMessages) === null || _voicemailListRespons === void 0 ? void 0 : _voicemailListRespons.messageInfoList).length === 0) {
                messageinfo = [];
              } else if (!(0, _isArray.default)(voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : (_voicemailListRespons2 = voicemailListResponse.VoiceMessagingMessages) === null || _voicemailListRespons2 === void 0 ? void 0 : (_voicemailListRespons3 = _voicemailListRespons2.messageInfoList) === null || _voicemailListRespons3 === void 0 ? void 0 : _voicemailListRespons3.messageInfo)) {
                messageinfo = Array(voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : (_voicemailListRespons4 = voicemailListResponse.VoiceMessagingMessages) === null || _voicemailListRespons4 === void 0 ? void 0 : (_voicemailListRespons5 = _voicemailListRespons4.messageInfoList) === null || _voicemailListRespons5 === void 0 ? void 0 : _voicemailListRespons5.messageInfo);
              } else {
                messageinfo = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : (_voicemailListRespons6 = voicemailListResponse.VoiceMessagingMessages) === null || _voicemailListRespons6 === void 0 ? void 0 : (_voicemailListRespons7 = _voicemailListRespons6.messageInfoList) === null || _voicemailListRespons7 === void 0 ? void 0 : _voicemailListRespons7.messageInfo;
                messageinfo = (0, _Utils.getSortedVoicemailList)(messageinfo, sortParam);
              }
              (0, _Utils.storeVoicemailList)(this.context, messageinfo);
              _context4.next = 27;
              break;
            case 18:
              _context4.prev = 18;
              _context4.t0 = _context4["catch"](5);
              /* Catch the exception error code from try block, return the error object to user */
              errorInfo = {
                statusCode: _context4.t0 instanceof Error ? Number(_context4.t0.message) : ''
              };
              extendedError = new Error("Failed to get voicemail list: ".concat(_context4.t0));
              _Logger.default.error(extendedError, loggerContext);
              _context4.next = 25;
              return (0, _Utils.uploadLogs)();
            case 25:
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context4.abrupt("return", errorStatus);
            case 27:
              _fetchVoicemailList = (0, _Utils.fetchVoicemailList)(this.context, offset, offsetLimit, loggerContext), messages = _fetchVoicemailList.messages, moreVMAvailable = _fetchVoicemailList.moreVMAvailable;
              _Logger.default.log("Successfully fetched voicemail list with ".concat(messages.length, " messages"), loggerContext);
              responseDetails = {
                statusCode: moreVMAvailable ? _constants.SUCCESS_STATUS_CODE : _constants2.NO_VOICEMAIL_STATUS_CODE,
                data: {
                  voicemailList: messages
                },
                message: moreVMAvailable ? _constants.SUCCESS_MESSAGE : _constants2.NO_VOICEMAIL_MSG
              };
              return _context4.abrupt("return", responseDetails);
            case 31:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[5, 18]]);
      }));
      function getVoicemailList(_x, _x2, _x3, _x4) {
        return _getVoicemailList.apply(this, arguments);
      }
      return getVoicemailList;
    }()
    /**
     * Fetch the voicemail contents for the messageId.
     *
     * @param messageId - String result from the voicemail list.
     * @returns Promise.
     */
    )
  }, {
    key: "getVoicemailContent",
    value: (function () {
      var _getVoicemailContent = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(messageId) {
        var loggerContext, _mediaDetails$childNo, _mediaDetails$childNo2, voicemailContentUrl, response, xmlData, parser, xmlDOM, mediaDetails, mediaType, mediaContent, responseDetails, errorInfo, extendedError, errorStatus;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VOICEMAIL_CONTENT
              };
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with messageId: ").concat(messageId), loggerContext);
              _context5.prev = 2;
              voicemailContentUrl = "".concat(this.xsiEndpoint).concat(messageId);
              _context5.next = 6;
              return fetch("".concat(voicemailContentUrl), {
                method: 'GET',
                headers: {
                  Authorization: this.xsiAccessToken
                }
              });
            case 6:
              response = _context5.sent;
              if (response.ok) {
                _context5.next = 9;
                break;
              }
              throw new Error("".concat(response.status));
            case 9:
              _context5.next = 11;
              return response.text();
            case 11:
              xmlData = _context5.sent;
              parser = new DOMParser();
              xmlDOM = parser.parseFromString(xmlData, _constants.XML_TYPE);
              mediaDetails = xmlDOM.getElementsByTagName(_constants2.MESSAGE_MEDIA_CONTENT)[0];
              mediaType = (_mediaDetails$childNo = mediaDetails.childNodes[1]) === null || _mediaDetails$childNo === void 0 ? void 0 : _mediaDetails$childNo.textContent;
              mediaContent = (_mediaDetails$childNo2 = mediaDetails.childNodes[2]) === null || _mediaDetails$childNo2 === void 0 ? void 0 : _mediaDetails$childNo2.textContent;
              _Logger.default.info("Media type is ".concat(mediaType), loggerContext);
              _Logger.default.log("Successfully fetched voicemail content for message ID: ".concat(messageId), loggerContext);
              responseDetails = {
                statusCode: response === null || response === void 0 ? void 0 : response.status,
                data: {
                  voicemailContent: {
                    type: mediaType,
                    content: mediaContent
                  }
                },
                message: _constants.SUCCESS_MESSAGE
              };
              return _context5.abrupt("return", responseDetails);
            case 23:
              _context5.prev = 23;
              _context5.t0 = _context5["catch"](2);
              /* Catch the exception error code from try block, return the error object to user */
              errorInfo = {
                statusCode: _context5.t0 instanceof Error ? Number(_context5.t0.message) : ''
              };
              extendedError = new Error("Failed to get voicemail content: ".concat(_context5.t0));
              _Logger.default.error(extendedError, loggerContext);
              _context5.next = 30;
              return (0, _Utils.uploadLogs)();
            case 30:
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context5.abrupt("return", errorStatus);
            case 32:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this, [[2, 23]]);
      }));
      function getVoicemailContent(_x5) {
        return _getVoicemailContent.apply(this, arguments);
      }
      return getVoicemailContent;
    }()
    /**
     * Fetches a quantitative summary of voicemails for a user.
     * Not implemented for this connector.
     */
    )
  }, {
    key: "getVoicemailSummary",
    value: (function () {
      var _getVoicemailSummary = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", _promise.default.resolve(null));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function getVoicemailSummary() {
        return _getVoicemailSummary.apply(this, arguments);
      }
      return getVoicemailSummary;
    }()
    /**
     * Fetch voicemail read message status for the messageId.
     *
     * @param messageId -string result from the voicemail list.
     * @returns Promise.
     */
    )
  }, {
    key: "voicemailMarkAsRead",
    value: (function () {
      var _voicemailMarkAsRead = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(messageId) {
        var loggerContext, voicemailContentUrl, response, responseDetails, errorInfo, extendedError, errorStatus;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.VOICEMAIL_MARK_AS_READ
              };
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with messageId: ").concat(messageId), loggerContext);
              _context7.prev = 2;
              voicemailContentUrl = "".concat(this.xsiEndpoint).concat(messageId, "/").concat(_constants2.MARK_AS_READ);
              _context7.next = 6;
              return fetch(voicemailContentUrl, {
                method: _types2.HTTP_METHODS.PUT,
                headers: {
                  Authorization: this.xsiAccessToken
                }
              });
            case 6:
              response = _context7.sent;
              if (response.ok) {
                _context7.next = 9;
                break;
              }
              throw new Error("".concat(response.status));
            case 9:
              _Logger.default.log("Successfully marked voicemail with ID ".concat(messageId, " as read"), loggerContext);
              responseDetails = {
                statusCode: response.status,
                data: {},
                message: _constants.SUCCESS_MESSAGE
              };
              return _context7.abrupt("return", responseDetails);
            case 14:
              _context7.prev = 14;
              _context7.t0 = _context7["catch"](2);
              /* Catch the exception error code from try block, return the error object to user */
              errorInfo = {
                statusCode: _context7.t0 instanceof Error ? Number(_context7.t0.message) : ''
              };
              extendedError = new Error("Failed to mark voicemail as read: ".concat(_context7.t0));
              _Logger.default.error(extendedError, loggerContext);
              _context7.next = 21;
              return (0, _Utils.uploadLogs)();
            case 21:
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context7.abrupt("return", errorStatus);
            case 23:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this, [[2, 14]]);
      }));
      function voicemailMarkAsRead(_x6) {
        return _voicemailMarkAsRead.apply(this, arguments);
      }
      return voicemailMarkAsRead;
    }()
    /**
     * Fetch voicemail unread message status for the messageId.
     *
     * @param messageId -string result from the voicemail list.
     * @returns Promise.
     */
    )
  }, {
    key: "voicemailMarkAsUnread",
    value: (function () {
      var _voicemailMarkAsUnread = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(messageId) {
        var loggerContext, voicemailContentUrl, response, responseDetails, errorInfo, extendedError, errorStatus;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.VOICEMAIL_MARK_AS_UNREAD
              };
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with messageId: ").concat(messageId), loggerContext);
              _context8.prev = 2;
              voicemailContentUrl = "".concat(this.xsiEndpoint).concat(messageId, "/").concat(_constants2.MARK_AS_UNREAD);
              _context8.next = 6;
              return fetch(voicemailContentUrl, {
                method: _types2.HTTP_METHODS.PUT,
                headers: {
                  Authorization: this.xsiAccessToken
                }
              });
            case 6:
              response = _context8.sent;
              if (response.ok) {
                _context8.next = 9;
                break;
              }
              throw new Error("".concat(response.status));
            case 9:
              _Logger.default.log("Successfully marked voicemail with ID ".concat(messageId, " as unread"), loggerContext);
              responseDetails = {
                statusCode: response.status,
                data: {},
                message: _constants.SUCCESS_MESSAGE
              };
              return _context8.abrupt("return", responseDetails);
            case 14:
              _context8.prev = 14;
              _context8.t0 = _context8["catch"](2);
              /* Catch the exception error code from try block, return the error object to user */
              errorInfo = {
                statusCode: _context8.t0 instanceof Error ? Number(_context8.t0.message) : ''
              };
              extendedError = new Error("Failed to mark voicemail as unread: ".concat(_context8.t0));
              _Logger.default.error(extendedError, loggerContext);
              _context8.next = 21;
              return (0, _Utils.uploadLogs)();
            case 21:
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context8.abrupt("return", errorStatus);
            case 23:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this, [[2, 14]]);
      }));
      function voicemailMarkAsUnread(_x7) {
        return _voicemailMarkAsUnread.apply(this, arguments);
      }
      return voicemailMarkAsUnread;
    }()
    /**
     * Fetch voicemail delete status for the messageId.
     *
     * @param messageId -string result from the voicemail list.
     * @returns Promise.
     */
    )
  }, {
    key: "deleteVoicemail",
    value: (function () {
      var _deleteVoicemail = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9(messageId) {
        var loggerContext, voicemailContentUrl, response, responseDetails, errorInfo, extendedError, errorStatus;
        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.DELETE_VOICEMAIL
              };
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with messageId: ").concat(messageId), loggerContext);
              _context9.prev = 2;
              voicemailContentUrl = "".concat(this.xsiEndpoint).concat(messageId);
              _context9.next = 6;
              return fetch(voicemailContentUrl, {
                method: _types2.HTTP_METHODS.DELETE,
                headers: {
                  Authorization: this.xsiAccessToken
                }
              });
            case 6:
              response = _context9.sent;
              if (response.ok) {
                _context9.next = 9;
                break;
              }
              throw new Error("".concat(response.status));
            case 9:
              _Logger.default.log("Successfully deleted voicemail with ID ".concat(messageId), loggerContext);
              responseDetails = {
                statusCode: response.status,
                data: {},
                message: _constants.SUCCESS_MESSAGE
              };
              return _context9.abrupt("return", responseDetails);
            case 14:
              _context9.prev = 14;
              _context9.t0 = _context9["catch"](2);
              /* Catch the exception error code from try block, return the error object to user */
              errorInfo = {
                statusCode: _context9.t0 instanceof Error ? Number(_context9.t0.message) : ''
              };
              extendedError = new Error("Failed to delete voicemail: ".concat(_context9.t0));
              _Logger.default.error(extendedError, loggerContext);
              _context9.next = 21;
              return (0, _Utils.uploadLogs)();
            case 21:
              errorStatus = (0, _Utils.serviceErrorCodeHandler)(errorInfo, loggerContext);
              return _context9.abrupt("return", errorStatus);
            case 23:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this, [[2, 14]]);
      }));
      function deleteVoicemail(_x8) {
        return _deleteVoicemail.apply(this, arguments);
      }
      return deleteVoicemail;
    }()
    /**
     * Fetch voicemail transcript for the messageId.
     *
     * @param messageId - MessageId to fetch voicemail transcript.
     * @returns Promise.
     */
    )
  }, {
    key: "getVMTranscript",
    value: (function () {
      var _getVMTranscript = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10(messageId) {
        var loggerContext;
        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              loggerContext = {
                file: _constants2.BROADWORKS_VOICEMAIL_FILE,
                method: _constants2.METHODS.GET_VM_TRANSCRIPT
              };
              _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with messageId: ").concat(messageId), loggerContext);
              return _context10.abrupt("return", _promise.default.resolve(null));
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function getVMTranscript(_x9) {
        return _getVMTranscript.apply(this, arguments);
      }
      return getVMTranscript;
    }()
    /**
     * Resolve the Contact from userId or display name.
     * Not implemented for this connector.
     *
     * @param callingPartyInfo - Calling Party Info.
     */
    )
  }, {
    key: "resolveContact",
    value: function resolveContact(callingPartyInfo) {
      _Logger.default.info("".concat(_constants.METHOD_START_MESSAGE, " with Calling Party Info: ").concat(callingPartyInfo), {
        file: _constants2.BROADWORKS_VOICEMAIL_FILE,
        method: _constants2.METHODS.RESOLVE_CONTACT
      });
      return _promise.default.resolve(null);
    }
  }]);
  return BroadworksBackendConnector;
}();
//# sourceMappingURL=BroadworksBackendConnector.js.map
