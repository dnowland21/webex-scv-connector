"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _freeze = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/freeze"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _utils = require("./utils");
/* eslint-disable valid-jsdoc */

/* eslint-disable class-methods-use-this */

var instance;
var webex;

/**
 *
 */
var SDKConnector = /*#__PURE__*/function () {
  function SDKConnector() {
    (0, _classCallCheck2.default)(this, SDKConnector);
  }
  (0, _createClass2.default)(SDKConnector, [{
    key: "setWebex",
    value:
    /**
     * @param webexInstance - TODO.
     */
    function setWebex(webexInstance) {
      if (instance) {
        throw new Error('You cannot set the SDKConnector instance more than once'); // TODO: format log messages and customize Error Object
      }

      var _validateWebex = (0, _utils.validateWebex)(webexInstance),
        error = _validateWebex.error,
        success = _validateWebex.success;
      if (error) {
        throw error;
      } else if (success) {
        webex = webexInstance; // TODO: Object.freeze to prevent changes? That might break the reference chain though
      } else {
        throw new Error('An unknown error occurred setting up the webex instance.');
      }

      /* eslint-disable @typescript-eslint/no-this-alias */
      instance = this;
    }

    /**
     *
     */
  }, {
    key: "get",
    value: function get() {
      return instance;
    }

    /**
     *
     */
  }, {
    key: "getWebex",
    value: function getWebex() {
      return webex;
    }

    /**
     * @param request - TODO.
     */
  }, {
    key: "request",
    value: function request(_request) {
      return instance.getWebex().request(_request);
    }

    /**
     * @param event - TODO.
     * @param cb - TODO.
     */
  }, {
    key: "registerListener",
    value: function registerListener(event, cb) {
      instance.getWebex().internal.mercury.on(event, function (data) {
        cb(data);
      });
    }

    /**
     * @param event - TODO.
     */
  }, {
    key: "unregisterListener",
    value: function unregisterListener(event) {
      instance.getWebex().internal.mercury.off(event);
    }
  }]);
  return SDKConnector;
}();
var _default = exports.default = (0, _freeze.default)(new SDKConnector()); // TODO: remove freeze?
//# sourceMappingURL=index.js.map
