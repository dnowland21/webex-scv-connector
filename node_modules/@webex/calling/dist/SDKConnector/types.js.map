{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import {KmsKey, KmsResourceObject, PeopleListResponse, WebexRequestPayload} from '../common/types';\n/* eslint-disable no-shadow */\n\ntype Listener = (e: string, data?: unknown) => void;\ntype ListenerOff = (e: string) => void;\n\nexport type ServiceHost = {\n  host: string;\n  ttl: number;\n  priority: number;\n  id: string;\n  homeCluster?: boolean;\n};\n\nexport type Model = {\n  _values: {\n    key: string;\n  };\n};\n\nexport type ServiceCatalog = {\n  serviceGroups: {\n    // cSpell:disable\n    postauth: [\n      {\n        _values: {\n          name: string;\n          hosts: ServiceHost[];\n        };\n      }\n    ];\n    /* cSpell:enable */\n  };\n};\n\nexport type ClientRegionInfo = {\n  attribution: string;\n  clientAddress: string;\n  clientRegion: string;\n  countryCode: string;\n  disclaimer: string;\n  regionCode: string;\n  timezone: string;\n};\n\nexport type Logger = {\n  log: (payload: string) => void;\n  error: (payload: string) => void;\n  warn: (payload: string) => void;\n  info: (payload: string) => void;\n  trace: (payload: string) => void;\n  debug: (payload: string) => void;\n};\n\n// TODO: is there a way to import bindings from the Webex JS SDK without having to redefine expected methods and structure?\n// This defines the shape for the webex SDK, if a typing doesn't exist, it should be added here\nexport interface WebexSDK {\n  // top level primitives/funcs\n  version: string;\n  canAuthorize: boolean;\n  credentials: {\n    getUserToken: () => Promise<string>;\n  };\n  ready: boolean;\n  request: <T>(payload: WebexRequestPayload) => Promise<T>;\n  // internal plugins\n  internal: {\n    mercury: {\n      on: Listener;\n      off: ListenerOff;\n      connected: boolean;\n      connecting: boolean;\n    };\n    calendar: unknown;\n    device: {\n      url: string;\n      userId: string;\n      orgId: string;\n      version: string;\n      callingBehavior: string;\n      features: {\n        entitlement: {\n          models: Model[];\n        };\n      };\n    };\n    encryption: {\n      decryptText: (encryptionKeyUrl: string, encryptedData?: string) => Promise<string>;\n      encryptText: (encryptionKeyUrl: string, text?: string) => Promise<string>;\n      kms: {\n        createUnboundKeys: (arg0: {count?: number}) => Promise<KmsKey[]>;\n        createResource: (arg0: {keyUris: string[]}) => Promise<KmsResourceObject>;\n        bindKey: (arg0: {kroUri: string; keyUri: string}) => Promise<KmsKey>;\n      };\n    };\n    presence: unknown;\n    support: {\n      submitLogs: (info: object) => Promise<void>;\n    };\n    services: {\n      _hostCatalog: Record<string, ServiceHost[]>;\n      _serviceUrls: {\n        mobius: string;\n        identity: string;\n        janus: string;\n        wdm: string;\n        broadworksIdpProxy: string;\n        hydra: string;\n        mercuryApi: string;\n        'ucmgmt-gateway': string;\n        contactsService: string;\n      };\n      fetchClientRegionInfo: () => Promise<ClientRegionInfo>;\n    };\n    metrics: {\n      submitClientMetrics: (name: string, data: unknown) => void;\n    };\n  };\n  // public plugins\n  logger: Logger;\n  messages: unknown;\n  memberships: unknown;\n  people: {\n    list: (arg: object) => Promise<PeopleListResponse>;\n  };\n  rooms: unknown;\n  teams: unknown;\n}\n\nexport interface ISDKConnector {\n  setWebex: (webexInstance: WebexSDK) => void;\n  getWebex: () => WebexSDK;\n  get: () => ISDKConnector;\n  registerListener: <T>(event: string, cb: (data?: T) => unknown) => void;\n  unregisterListener: (event: string) => void;\n}\n"],"mappings":""}