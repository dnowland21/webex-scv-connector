{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import {Eventing} from '../Events/impl';\nimport {\n  CallHistoryEventTypes,\n  EndTimeSessionId,\n  UserSession,\n  UCMLinesApiResponse,\n} from '../Events/types';\nimport {LOGGER} from '../Logger/types';\nimport {SORT, SORT_BY} from '../common/types';\n\nexport interface LoggerInterface {\n  level: LOGGER;\n}\n\nexport type JanusResponseEvent = {\n  statusCode: number;\n  data: {\n    userSessions?: UserSession[];\n    error?: string;\n  };\n  message: string | null;\n};\n\nexport type UpdateMissedCallsResponse = {\n  statusCode: number;\n  data: {\n    readStatusMessage?: string;\n    error?: string;\n  };\n  message: string | null;\n};\n\nexport type UCMLinesResponse = {\n  statusCode: number;\n  data: {\n    lines?: UCMLinesApiResponse;\n    error?: string;\n  };\n  message: string | null;\n};\n\nexport type DeleteCallHistoryRecordsResponse = {\n  statusCode: number;\n  data: {\n    deleteStatusMessage?: string;\n    error?: string;\n  };\n  message: string | null;\n};\n\n/**\n * Interface for CallHistory Client.\n * This encompasses a set of APIs designed to facilitate the retrieval of recent Call History Record.\n */\nexport interface ICallHistory extends Eventing<CallHistoryEventTypes> {\n  /**\n   * This API `getCallHistoryData` is utilized to request and retrieve Call History Records based on specified parameters.\n   * It accepts the following input parameters:\n   *\n   * @param days - Number of days to fetch the call history data.\n   * @param limit - Number of records to be fetched.\n   * @param sort - Sort the records in ascending or descending order.\n   * @param sortBy - Sort the records by start time or end time.\n   *\n   * @example\n   * ```javascript\n   * const callHistoryResponse = await callHistory.getCallHistoryData(days, limit, sort, sortBy);\n   * ```\n   */\n  getCallHistoryData(\n    days: number,\n    limit: number,\n    sort: SORT,\n    sortBy: SORT_BY\n  ): Promise<JanusResponseEvent>;\n  /**\n   * This API `updateMissedCalls` is utilized to update the read state of user missed calls based on the specified parameters.\n   * It accepts the following input parameters:\n   *\n   * @param endTimeSessionIds - An array of objects representing the endTime and sessionId of missed call history records.\n   *\n   * @example\n   * ```javascript\n   * const updateMissedCallHistoryResponse = await callHistory.updateMissedCalls(endTimeSessionIds);\n   * ```\n   */\n  updateMissedCalls(endTimeSessionIds: EndTimeSessionId[]): Promise<UpdateMissedCallsResponse>;\n\n  /**\n   * This API `deleteCallHistoryRecords` is utilized to delete the call history records based on the specified parameters.\n   * It accepts the following input parameters:\n   *\n   * @param deleteSessionIds - An array of objects representing the endTime and sessionId of the call history records.\n   *\n   * @example\n   * ```javascript\n   * const deleteCallHistoryRecordsResponse = await callHistory.deleteCallHistoryRecords(deleteSessionIds);\n   * ```\n   */\n  deleteCallHistoryRecords(\n    deleteSessionIds: EndTimeSessionId[]\n  ): Promise<DeleteCallHistoryRecordsResponse>;\n}\n"],"mappings":""}