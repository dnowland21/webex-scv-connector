"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
var _types = require("./types");
var _ = _interopRequireDefault(require("."));
describe('Coverage tests for logger', function () {
  var logLevel;
  var logSpy = jest.spyOn(console, 'log');
  var infoSpy = jest.spyOn(console, 'info');
  var traceSpy = jest.spyOn(console, 'trace');
  var warnSpy = jest.spyOn(console, 'warn');
  var errorSpy = jest.spyOn(console, 'error');
  var dummyWebexLogger = {
    log: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
    debug: jest.fn(),
    trace: jest.fn()
  };
  beforeEach(function () {
    logLevel = _types.LOGGER.ERROR;
  });
  afterEach(function () {
    logSpy.mockClear();
    traceSpy.mockClear();
    warnSpy.mockClear();
    errorSpy.mockClear();
    infoSpy.mockClear();
  });
  var fakePrint = 'Example log statement';
  var dummyContext = {
    file: 'logger.test.ts',
    method: 'dummy'
  };
  it('Set the log level to error  and verify that all levels are not executed except error', function () {
    _.default.info(fakePrint, dummyContext);
    expect(infoSpy).not.toHaveBeenCalledTimes(1);
    _.default.log(fakePrint, dummyContext);
    expect(logSpy).not.toHaveBeenCalledTimes(1);
    _.default.warn(fakePrint, dummyContext);
    expect(warnSpy).not.toHaveBeenCalledTimes(1);
    _.default.trace(fakePrint, dummyContext);
    expect(traceSpy).not.toHaveBeenCalledTimes(1);
    _.default.error(new Error(fakePrint), dummyContext);
    expect(errorSpy).toHaveBeenCalledTimes(1);
  });
  it('Set the logger and verify the level', function () {
    expect(logLevel).toStrictEqual(_types.LOGGER.ERROR);
    _.default.setLogger(_types.LOGGER.TRACE);
    expect(_.default.getLogLevel()).toStrictEqual(_types.LOGGER.TRACE);
  });
  it('Set the log level to  Info and verify levels below info are executed or not', function () {
    _.default.setLogger(_types.LOGGER.INFO);
    _.default.info(fakePrint, dummyContext);
    expect(infoSpy).toHaveBeenCalledTimes(2);
    _.default.log(fakePrint, dummyContext);
    expect(logSpy).toHaveBeenCalledTimes(1);
    _.default.warn(fakePrint, dummyContext);
    expect(warnSpy).toHaveBeenCalledTimes(1);
    _.default.trace(fakePrint, dummyContext);
    expect(traceSpy).not.toHaveBeenCalledTimes(1);
  });
  it('Set the log level to Trace  and verify that all levels are executed', function () {
    _.default.setLogger(_types.LOGGER.TRACE);
    _.default.info(fakePrint, dummyContext);
    expect(infoSpy).toHaveBeenCalledTimes(2); // one during initialization and one with the statement

    _.default.log(fakePrint, dummyContext);
    expect(logSpy).toHaveBeenCalledTimes(1); // +1 because both info and log internally use console.log

    _.default.warn(fakePrint, dummyContext);
    expect(warnSpy).toHaveBeenCalledTimes(1);
    _.default.trace(fakePrint, dummyContext);
    expect(traceSpy).toHaveBeenCalledTimes(1);
  });
  it('Set webexLogger and check console log is not called', function () {
    var webexLoggerInfoSpy = jest.spyOn(dummyWebexLogger, 'info');
    _.default.setLogger(_types.LOGGER.INFO);
    logSpy.mockClear();
    _.default.setWebexLogger(dummyWebexLogger);
    _.default.info(fakePrint, dummyContext);
    expect(logSpy).not.toHaveBeenCalled();
    expect(webexLoggerInfoSpy).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=index.test.js.map
