"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _constants = require("../CallingClient/constants");
var _types = require("./types");
/* eslint-disable valid-jsdoc */

/*
 * These are the order of log levels :-
 *  error - 1
 *  warn -  2
 *  log -   3
 *  info -  4
 *  trace - 5
 *
 *  Where log level n denotes that level 1 -> level n will be logged.
 */

var currentLogLevel = _types.LOGGING_LEVEL.error;
var webexLogger = console; // Default to console logger

/**
 * A wrapper around console which prints to stderr or stdout
 * based on the level defined.
 *
 * @param message - Log Message to print.
 * @param level -  Log level.
 */
var writeToLogger = function writeToLogger(message, level) {
  switch (level) {
    case _types.LOGGER.INFO:
      webexLogger.info(message);
      break;
    case _types.LOGGER.LOG:
      {
        webexLogger.log(message);
        break;
      }
    case _types.LOGGER.WARN:
      {
        webexLogger.warn(message);
        break;
      }
    case _types.LOGGER.ERROR:
      {
        webexLogger.error(message);
        break;
      }
    case _types.LOGGER.TRACE:
      {
        webexLogger.trace(message);
        break;
      }
    default:
      {
        // Since this is internal , we shouldn't reach here
      }
  }
};

/**
 * Format the Log message  as 'timestamp Calling SDK - [level]: file:example.ts - method:methodName - Actual log message'.
 *
 * @param  context - File and method.
 * @param level - Log level.
 * @returns - Formatted string.
 */
var format = function format(context, level) {
  var timestamp = new Date().toUTCString();
  return "".concat(_constants.REPO_NAME, ": ").concat(timestamp, ": ").concat(level, ": ").concat(_types.LOG_PREFIX.FILE, ":").concat(context.file, " - ").concat(_types.LOG_PREFIX.METHOD, ":").concat(context.method);
};

/**
 * Used by the Calling Client to initialize the logger module
 * with a certain level.
 *
 * @param level - Log Level.
 */
var setLogger = function setLogger(level, module) {
  switch (level) {
    case _types.LOGGER.WARN:
      {
        currentLogLevel = _types.LOGGING_LEVEL.warn;
        break;
      }
    case _types.LOGGER.LOG:
      {
        currentLogLevel = _types.LOGGING_LEVEL.log;
        break;
      }
    case _types.LOGGER.INFO:
      {
        currentLogLevel = _types.LOGGING_LEVEL.info;
        break;
      }
    case _types.LOGGER.TRACE:
      {
        currentLogLevel = _types.LOGGING_LEVEL.trace;
        break;
      }
    default:
      {
        currentLogLevel = _types.LOGGING_LEVEL.error;
      }
  }
  var message = "Logger initialized for module: ".concat(module, " with level: ").concat(currentLogLevel);
  writeToLogger("".concat(format({
    file: 'logger.ts',
    method: 'setLogger'
  }, ''), "  - ").concat(_types.LOG_PREFIX.MESSAGE, ":").concat(message), _types.LOGGER.INFO);
};

/**
 * To retrieve the current log level.
 *
 * @returns - Log level.
 */
var getLogLevel = function getLogLevel() {
  var level;
  switch (currentLogLevel) {
    case _types.LOGGING_LEVEL.warn:
      {
        level = _types.LOGGER.WARN;
        break;
      }
    case _types.LOGGING_LEVEL.log:
      {
        level = _types.LOGGER.LOG;
        break;
      }
    case _types.LOGGING_LEVEL.info:
      {
        level = _types.LOGGER.INFO;
        break;
      }
    case _types.LOGGING_LEVEL.trace:
      {
        level = _types.LOGGER.TRACE;
        break;
      }
    default:
      {
        level = _types.LOGGER.ERROR;
      }
  }
  return level;
};

/**
 * Can be used to print only useful information.
 *
 * @param message - Caller emitted string.
 * @param context - File and method which called.
 */
var logMessage = function logMessage(message, context) {
  if (currentLogLevel >= _types.LOGGING_LEVEL.log) {
    writeToLogger("".concat(format(context, '[LOG]'), " - ").concat(_types.LOG_PREFIX.MESSAGE, ":").concat(message), _types.LOGGER.LOG);
  }
};

/**
 * Can be used to print informational messages.
 *
 * @param message - Caller emitted string.
 * @param context - File and method which called.
 */
var logInfo = function logInfo(message, context) {
  if (currentLogLevel >= _types.LOGGING_LEVEL.info) {
    writeToLogger("".concat(format(context, '[INFO]'), " - ").concat(_types.LOG_PREFIX.MESSAGE, ":").concat(message), _types.LOGGER.INFO);
  }
};

/**
 * Can be used to print warning messages.
 *
 * @param message - Caller emitted string.
 * @param context - File and method which called.
 */
var logWarn = function logWarn(message, context) {
  if (currentLogLevel >= _types.LOGGING_LEVEL.warn) {
    writeToLogger("".concat(format(context, '[WARN]'), " - ").concat(_types.LOG_PREFIX.MESSAGE, ":").concat(message), _types.LOGGER.WARN);
  }
};

/**
 * Can be used to print the stack trace of the entire call path.
 *
 * @param message - Caller emitted string.
 * @param context - File and method which called.
 */
var logTrace = function logTrace(message, context) {
  if (currentLogLevel >= _types.LOGGING_LEVEL.trace) {
    writeToLogger("".concat(format(context, '[TRACE]'), " - ").concat(_types.LOG_PREFIX.MESSAGE, ":").concat(message), _types.LOGGER.TRACE);
  }
};

/**
 * Can be used to print only errors.
 *
 * @param error - Error string .
 * @param context - File and method which called.
 */
var logError = function logError(error, context) {
  if (currentLogLevel >= _types.LOGGING_LEVEL.error) {
    writeToLogger("".concat(format(context, '[ERROR]'), " - !").concat(_types.LOG_PREFIX.ERROR, "!").concat(_types.LOG_PREFIX.MESSAGE, ":").concat(error.message), _types.LOGGER.ERROR);
  }
};
var setWebexLogger = function setWebexLogger(logger) {
  if (logger) {
    // if logger is not passed, defaults to console
    webexLogger = logger;
  }
};
var _default = exports.default = {
  log: logMessage,
  error: logError,
  info: logInfo,
  warn: logWarn,
  trace: logTrace,
  setLogger: setLogger,
  getLogLevel: getLogLevel,
  setWebexLogger: setWebexLogger
};
//# sourceMappingURL=index.js.map
