{"version":3,"names":["_constants","require","_types","currentLogLevel","LOGGING_LEVEL","error","webexLogger","console","writeToLogger","message","level","LOGGER","INFO","info","LOG","log","WARN","warn","ERROR","TRACE","trace","format","context","timestamp","Date","toUTCString","concat","REPO_NAME","LOG_PREFIX","FILE","file","METHOD","method","setLogger","module","MESSAGE","getLogLevel","logMessage","logInfo","logWarn","logTrace","logError","setWebexLogger","logger","_default","exports","default"],"sources":["index.ts"],"sourcesContent":["/* eslint-disable valid-jsdoc */\nimport {Logger} from '../SDKConnector/types';\nimport {REPO_NAME} from '../CallingClient/constants';\nimport {IMetaContext} from '../common/types';\nimport ExtendedError from '../Errors/catalog/ExtendedError';\nimport {LOGGING_LEVEL, LogContext, LOGGER, LOG_PREFIX} from './types';\n\n/*\n * These are the order of log levels :-\n *  error - 1\n *  warn -  2\n *  log -   3\n *  info -  4\n *  trace - 5\n *\n *  Where log level n denotes that level 1 -> level n will be logged.\n */\n\nlet currentLogLevel = LOGGING_LEVEL.error;\n\nlet webexLogger: Logger = console; // Default to console logger\n\n/**\n * A wrapper around console which prints to stderr or stdout\n * based on the level defined.\n *\n * @param message - Log Message to print.\n * @param level -  Log level.\n */\nconst writeToLogger = (message: string, level: LOGGER) => {\n  switch (level) {\n    case LOGGER.INFO:\n      webexLogger.info(message);\n      break;\n    case LOGGER.LOG: {\n      webexLogger.log(message);\n      break;\n    }\n    case LOGGER.WARN: {\n      webexLogger.warn(message);\n      break;\n    }\n    case LOGGER.ERROR: {\n      webexLogger.error(message);\n      break;\n    }\n    case LOGGER.TRACE: {\n      webexLogger.trace(message);\n      break;\n    }\n    default: {\n      // Since this is internal , we shouldn't reach here\n    }\n  }\n};\n\n/**\n * Format the Log message  as 'timestamp Calling SDK - [level]: file:example.ts - method:methodName - Actual log message'.\n *\n * @param  context - File and method.\n * @param level - Log level.\n * @returns - Formatted string.\n */\nconst format = (context: IMetaContext, level: string): string => {\n  const timestamp = new Date().toUTCString();\n\n  return `${REPO_NAME}: ${timestamp}: ${level}: ${LOG_PREFIX.FILE}:${context.file} - ${LOG_PREFIX.METHOD}:${context.method}`;\n};\n\n/**\n * Used by the Calling Client to initialize the logger module\n * with a certain level.\n *\n * @param level - Log Level.\n */\nconst setLogger = (level: string, module: string) => {\n  switch (level) {\n    case LOGGER.WARN: {\n      currentLogLevel = LOGGING_LEVEL.warn;\n      break;\n    }\n    case LOGGER.LOG: {\n      currentLogLevel = LOGGING_LEVEL.log;\n      break;\n    }\n    case LOGGER.INFO: {\n      currentLogLevel = LOGGING_LEVEL.info;\n      break;\n    }\n    case LOGGER.TRACE: {\n      currentLogLevel = LOGGING_LEVEL.trace;\n      break;\n    }\n    default: {\n      currentLogLevel = LOGGING_LEVEL.error;\n    }\n  }\n\n  const message = `Logger initialized for module: ${module} with level: ${currentLogLevel}`;\n\n  writeToLogger(\n    `${format({file: 'logger.ts', method: 'setLogger'}, '')}  - ${LOG_PREFIX.MESSAGE}:${message}`,\n    LOGGER.INFO\n  );\n};\n\n/**\n * To retrieve the current log level.\n *\n * @returns - Log level.\n */\nconst getLogLevel = (): LOGGER => {\n  let level;\n\n  switch (currentLogLevel) {\n    case LOGGING_LEVEL.warn: {\n      level = LOGGER.WARN;\n      break;\n    }\n    case LOGGING_LEVEL.log: {\n      level = LOGGER.LOG;\n      break;\n    }\n    case LOGGING_LEVEL.info: {\n      level = LOGGER.INFO;\n      break;\n    }\n    case LOGGING_LEVEL.trace: {\n      level = LOGGER.TRACE;\n      break;\n    }\n    default: {\n      level = LOGGER.ERROR;\n    }\n  }\n\n  return level;\n};\n\n/**\n * Can be used to print only useful information.\n *\n * @param message - Caller emitted string.\n * @param context - File and method which called.\n */\nconst logMessage = (message: string, context: LogContext) => {\n  if (currentLogLevel >= LOGGING_LEVEL.log) {\n    writeToLogger(`${format(context, '[LOG]')} - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.LOG);\n  }\n};\n\n/**\n * Can be used to print informational messages.\n *\n * @param message - Caller emitted string.\n * @param context - File and method which called.\n */\nconst logInfo = (message: string, context: LogContext) => {\n  if (currentLogLevel >= LOGGING_LEVEL.info) {\n    writeToLogger(`${format(context, '[INFO]')} - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.INFO);\n  }\n};\n\n/**\n * Can be used to print warning messages.\n *\n * @param message - Caller emitted string.\n * @param context - File and method which called.\n */\nconst logWarn = (message: string, context: LogContext) => {\n  if (currentLogLevel >= LOGGING_LEVEL.warn) {\n    writeToLogger(`${format(context, '[WARN]')} - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.WARN);\n  }\n};\n\n/**\n * Can be used to print the stack trace of the entire call path.\n *\n * @param message - Caller emitted string.\n * @param context - File and method which called.\n */\nconst logTrace = (message: string, context: LogContext) => {\n  if (currentLogLevel >= LOGGING_LEVEL.trace) {\n    writeToLogger(`${format(context, '[TRACE]')} - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.TRACE);\n  }\n};\n\n/**\n * Can be used to print only errors.\n *\n * @param error - Error string .\n * @param context - File and method which called.\n */\nconst logError = (error: ExtendedError, context: LogContext) => {\n  if (currentLogLevel >= LOGGING_LEVEL.error) {\n    writeToLogger(\n      `${format(context, '[ERROR]')} - !${LOG_PREFIX.ERROR}!${LOG_PREFIX.MESSAGE}:${error.message}`,\n      LOGGER.ERROR\n    );\n  }\n};\n\nconst setWebexLogger = (logger: Logger) => {\n  if (logger) {\n    // if logger is not passed, defaults to console\n    webexLogger = logger;\n  }\n};\n\nexport default {\n  log: logMessage,\n  error: logError,\n  info: logInfo,\n  warn: logWarn,\n  trace: logTrace,\n  setLogger,\n  getLogLevel,\n  setWebexLogger,\n};\n"],"mappings":"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"}