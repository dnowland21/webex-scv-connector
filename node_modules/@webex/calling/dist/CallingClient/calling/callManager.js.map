{"version":3,"names":["_constants","require","_constants2","_types","_impl","_SDKConnector","_interopRequireDefault","_types2","_types3","_call3","_Logger","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","_Reflect$construct","arguments","apply","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","callManager","CallManager","exports","_Eventing","_inherits2","_super","webex","indicator","_this","_classCallCheck2","_defineProperty2","_assertThisInitialized2","direction","deviceId","lineId","destination","log","info","concat","METHOD_START_MESSAGE","file","CALL_MANAGER_FILE","method","METHODS","CREATE_CALL","newCall","createCall","activeMobiusUrl","correlationId","callCollection","activeCalls","_keys","getActiveCalls","length","getCorrelationId","emit","CALLING_CLIENT_EVENT_KEYS","ALL_CALLS_CLEARED","serviceIndicator","sdkConnector","SDKConnector","getWebex","setWebex","lineDict","listenForWsEvents","_createClass2","key","value","updateActiveMobius","url","UPDATE_ACTIVE_MOBIUS","_this2","registerListener","_ref","_asyncToGenerator2","_regenerator","mark","_callee","event","wrap","_callee$","_context","prev","next","dequeueWsEvents","stop","_x","REGISTER_SESSIONS_LISTENER","_this3","DEQUEUE_WS_EVENTS","mobiusEvent","_mobiusEvent$data","data","callId","eventType","MobiusEventType","CALL_SETUP","midCallService","forEach","midCallEvent","getCall","handleMidCallEvent","newId","find","id","getCallId","getLineId","CallDirection","INBOUND","setCallId","broadworksCorrelationInfo","setBroadworksCorrelationInfo","callerId","startCallerIdResolution","LINE_EVENT_KEYS","INCOMING_CALL","sendCallStateMachineEvt","type","CALL_PROGRESS","CALL_MEDIA","activeCall","_mobiusEvent$data$mes","_mobiusEvent$data$mes2","_mobiusEvent$data$mes3","_mobiusEvent$data$mes4","_mobiusEvent$data$mes5","message","sdp","messageType","seq","version","mediaState","MediaState","OFFER","sendMediaStateMachineEvt","ANSWER","OFFER_REQUEST","OK","mediaOk","received","ERROR","CALL_CONNECTED","CALL_DISCONNECTED","updateLine","line","UPDATE_LINE","Eventing","getCallManager"],"sources":["callManager.ts"],"sourcesContent":["/* eslint-disable dot-notation */\n/* eslint-disable valid-jsdoc */\nimport {METHOD_START_MESSAGE} from '../../common/constants';\nimport {CALL_MANAGER_FILE, METHODS} from '../constants';\nimport {CALLING_CLIENT_EVENT_KEYS, CallEventTypes, LINE_EVENT_KEYS} from '../../Events/types';\nimport {Eventing} from '../../Events/impl';\nimport SDKConnector from '../../SDKConnector';\nimport {ISDKConnector, WebexSDK} from '../../SDKConnector/types';\nimport {CallDetails, CallDirection, CorrelationId, ServiceIndicator} from '../../common/types';\nimport {\n  ICall,\n  ICallManager,\n  MediaState,\n  MidCallEvent,\n  MobiusCallEvent,\n  MobiusEventType,\n} from './types';\nimport {createCall} from './call';\nimport log from '../../Logger';\nimport {ILine} from '../line/types';\n\nlet callManager: ICallManager;\n\n/**\n *\n */\nexport class CallManager extends Eventing<CallEventTypes> implements ICallManager {\n  private sdkConnector: ISDKConnector;\n\n  private webex: WebexSDK;\n\n  private callCollection: Record<CorrelationId, ICall>;\n\n  private activeMobiusUrl!: string;\n\n  private serviceIndicator: ServiceIndicator;\n\n  private lineDict: Record<string, ILine>;\n\n  /**\n   * @param webex -.\n   * @param indicator - Service Indicator.\n   */\n  constructor(webex: WebexSDK, indicator: ServiceIndicator) {\n    super();\n    this.sdkConnector = SDKConnector;\n    this.serviceIndicator = indicator;\n    if (!this.sdkConnector.getWebex()) {\n      SDKConnector.setWebex(webex);\n    }\n    this.lineDict = {};\n    this.webex = this.sdkConnector.getWebex();\n    this.callCollection = {};\n    this.activeMobiusUrl = '';\n    this.listenForWsEvents();\n  }\n\n  /**\n   * @param direction -.\n   * @param deviceId -.\n   * @param destination -.\n   */\n  public createCall = (\n    direction: CallDirection,\n    deviceId: string,\n    lineId: string,\n    destination?: CallDetails\n  ): ICall => {\n    log.info(`${METHOD_START_MESSAGE} with ${direction}, ${deviceId} and ${lineId}`, {\n      file: CALL_MANAGER_FILE,\n      method: METHODS.CREATE_CALL,\n    });\n    log.log('Creating call object', {});\n    const newCall = createCall(\n      this.activeMobiusUrl,\n      this.webex,\n      direction,\n      deviceId,\n      lineId,\n      (correlationId: CorrelationId) => {\n        delete this.callCollection[correlationId];\n        const activeCalls = Object.keys(this.getActiveCalls()).length;\n\n        log.info(\n          `DELETE:: Deleted corelationId: ${newCall.getCorrelationId()} from CallManager, Number of call records :- ${activeCalls}`,\n          {}\n        );\n        if (activeCalls === 0) {\n          /* Notify CallingClient when all calls are cleared. */\n          this.emit(CALLING_CLIENT_EVENT_KEYS.ALL_CALLS_CLEARED);\n          log.log('All calls have been cleared', {\n            file: CALL_MANAGER_FILE,\n            method: METHODS.CREATE_CALL,\n          });\n        }\n      },\n      this.serviceIndicator,\n      destination\n    );\n\n    this.callCollection[newCall.getCorrelationId()] = newCall;\n    log.log(`New call created with correlationId: ${newCall.getCorrelationId()}`, {});\n    log.info(\n      `ADD:: Added corelationId: ${newCall.getCorrelationId()} to CallManager , Number of call records now:- ${\n        Object.keys(this.getActiveCalls()).length\n      }`,\n      {}\n    );\n\n    return newCall;\n  };\n\n  /**\n   * Update Active Mobius Url.\n   *\n   * @param url - Mobius Url.\n   */\n  public updateActiveMobius(url: string) {\n    this.activeMobiusUrl = url;\n    log.log(`Successfully updated active Mobius URL to: ${url}`, {\n      file: CALL_MANAGER_FILE,\n      method: METHODS.UPDATE_ACTIVE_MOBIUS,\n    });\n  }\n\n  /**\n   * A listener for Mobius events.\n   */\n  private listenForWsEvents() {\n    this.sdkConnector.registerListener('event:mobius', async (event) => {\n      this.dequeueWsEvents(event);\n    });\n    log.info('Successfully registered listener for Mobius events', {\n      file: CALL_MANAGER_FILE,\n      method: METHODS.REGISTER_SESSIONS_LISTENER,\n    });\n  }\n\n  /**\n   * This a Queue where Mobius Events are reported by the underlying Mercury\n   * Connection. We handle the events in the order they are posted here. New call\n   * Objects are generated from here.\n   *\n   * @param event - Mobius Events.\n   */\n  private dequeueWsEvents(event: unknown) {\n    log.info(`${METHOD_START_MESSAGE} with event ${event}`, {\n      file: CALL_MANAGER_FILE,\n      method: METHODS.DEQUEUE_WS_EVENTS,\n    });\n    const mobiusEvent = event as MobiusCallEvent;\n    const {callId, correlationId} = mobiusEvent.data;\n\n    switch (mobiusEvent.data.eventType) {\n      case MobiusEventType.CALL_SETUP: {\n        log.log(`Received call Setup message for call: ${callId}`, {\n          file: CALL_MANAGER_FILE,\n          method: METHODS.DEQUEUE_WS_EVENTS,\n        });\n        /* Check whether MidCall or not */\n        if (mobiusEvent.data.midCallService) {\n          mobiusEvent.data.midCallService.forEach((midCallEvent: MidCallEvent) => {\n            const call = this.getCall(correlationId);\n\n            if (call) {\n              call.handleMidCallEvent(midCallEvent);\n            } else {\n              log.info(\n                `Dropping midcall event of type: ${midCallEvent.eventType} as it doesn't match with any existing call`,\n                {\n                  file: CALL_MANAGER_FILE,\n                  method: METHODS.DEQUEUE_WS_EVENTS,\n                }\n              );\n            }\n          });\n\n          return;\n        }\n        /* Check if the Call.Media was processed before Call.Setup.\n         * In that case , the Call Object is already created while processing\n         * Media message.\n         */\n\n        const newId = (Object.keys(this.callCollection) as Array<string>).find(\n          (id) => this.callCollection[id].getCallId() === callId\n        );\n        let newCall: ICall;\n\n        if (!newId) {\n          /*  This means it's a new call ...\n           *  Create an incoming call object and add to our records\n           */\n          const lineId = this.getLineId(mobiusEvent.data.deviceId);\n          newCall = this.createCall(\n            CallDirection.INBOUND,\n            mobiusEvent.data.deviceId,\n            lineId,\n            {} as CallDetails\n          );\n          log.log(\n            `New incoming call created with correlationId from Call Setup message: ${newCall.getCorrelationId()}`,\n            {\n              file: CALL_MANAGER_FILE,\n              method: METHODS.DEQUEUE_WS_EVENTS,\n            }\n          );\n          newCall.setCallId(callId);\n          if (mobiusEvent.data.broadworksCorrelationInfo) {\n            log.info(\n              `Found broadworksCorrelationInfo: ${mobiusEvent.data.broadworksCorrelationInfo}`,\n              {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              }\n            );\n            newCall.setBroadworksCorrelationInfo(mobiusEvent.data.broadworksCorrelationInfo);\n          }\n        } else {\n          log.info(\n            `Found the call Object with a matching callId: ${callId} from our records with correlationId: ${newId}`,\n            {\n              file: CALL_MANAGER_FILE,\n              method: METHODS.DEQUEUE_WS_EVENTS,\n            }\n          );\n          newCall = this.getCall(newId);\n        }\n\n        if (mobiusEvent.data.callerId) {\n          log.info('Processing Caller-Id data', {\n            file: CALL_MANAGER_FILE,\n            method: METHODS.DEQUEUE_WS_EVENTS,\n          });\n          newCall.startCallerIdResolution(mobiusEvent.data.callerId);\n        }\n        /* Signal Line */\n\n        this.emit(LINE_EVENT_KEYS.INCOMING_CALL, newCall);\n\n        newCall.sendCallStateMachineEvt({type: 'E_RECV_CALL_SETUP', data: mobiusEvent.data});\n\n        break;\n      }\n      case MobiusEventType.CALL_PROGRESS: {\n        log.log(`Received call progress mobiusEvent for call: ${correlationId}`, {\n          file: CALL_MANAGER_FILE,\n          method: METHODS.DEQUEUE_WS_EVENTS,\n        });\n        const call = this.getCall(correlationId);\n\n        call.sendCallStateMachineEvt({type: 'E_RECV_CALL_PROGRESS', data: mobiusEvent.data});\n        break;\n      }\n      case MobiusEventType.CALL_MEDIA: {\n        log.log(`Received call media mobiusEvent for call: ${correlationId}`, {\n          file: CALL_MANAGER_FILE,\n          method: METHODS.DEQUEUE_WS_EVENTS,\n        });\n\n        let activeCall: ICall;\n\n        if (correlationId) {\n          /* The Call.Media message had correlation id (Except the first message) */\n          activeCall = this.getCall(correlationId);\n        } else {\n          /* This is possibly the first Media message for the call.\n           * We should scan our record to see if we can find a call with\n           * this callId.\n           */\n\n          const newId = (Object.keys(this.callCollection) as Array<string>).find(\n            (id) => this.callCollection[id].getCallId() === callId\n          );\n\n          if (newId) {\n            /* Call.Media arrived after Call.Setup but the correlationId was Null. */\n\n            log.info(\n              `Found the call Object with a matching callId: ${callId} from our records with correlationId: ${newId}`,\n              {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              }\n            );\n            activeCall = this.getCall(newId);\n          } else {\n            /* If Call.Media arrived before Call.Setup , we create the Call Object here */\n\n            const lineId = this.getLineId(mobiusEvent.data.deviceId);\n            activeCall = this.createCall(\n              CallDirection.INBOUND,\n              mobiusEvent.data.deviceId,\n              lineId,\n              {} as CallDetails\n            );\n            log.log(\n              `New incoming call created with correlationId from ROAP Message: ${activeCall.getCorrelationId()}`,\n              {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              }\n            );\n            activeCall.setCallId(callId);\n          }\n        }\n\n        if (activeCall) {\n          /* Only Handle if the call is present */\n\n          log.info(`SDP from mobius ${mobiusEvent.data.message?.sdp}`, {\n            file: CALL_MANAGER_FILE,\n            method: METHODS.DEQUEUE_WS_EVENTS,\n          });\n          log.log(\n            `ROAP message from mobius with type:  ${mobiusEvent.data.message?.messageType}, seq: ${mobiusEvent.data.message?.seq} , version: ${mobiusEvent.data.message?.version}`,\n            {\n              file: CALL_MANAGER_FILE,\n              method: METHODS.DEQUEUE_WS_EVENTS,\n            }\n          );\n          const mediaState = mobiusEvent.data.message?.messageType;\n\n          switch (mediaState) {\n            case MediaState.OFFER: {\n              log.log('Received OFFER', {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              });\n              activeCall.sendMediaStateMachineEvt({\n                type: 'E_RECV_ROAP_OFFER',\n                data: mobiusEvent.data.message,\n              });\n              break;\n            }\n            case MediaState.ANSWER: {\n              log.log('Received ANSWER', {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              });\n              activeCall.sendMediaStateMachineEvt({\n                type: 'E_RECV_ROAP_ANSWER',\n                data: mobiusEvent.data.message,\n              });\n              break;\n            }\n            case MediaState.OFFER_REQUEST: {\n              log.log('Received OFFER_REQUEST', {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              });\n              activeCall.sendMediaStateMachineEvt({\n                type: 'E_RECV_ROAP_OFFER_REQUEST',\n                data: mobiusEvent.data.message,\n              });\n              break;\n            }\n            case MediaState.OK: {\n              log.log('Received OK', {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              });\n              const mediaOk = {\n                received: true,\n                message: mobiusEvent.data.message,\n              };\n\n              activeCall.sendMediaStateMachineEvt({\n                type: 'E_ROAP_OK',\n                data: mediaOk,\n              });\n              break;\n            }\n            case MediaState.ERROR: {\n              log.log('Received Error...', {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              });\n              break;\n            }\n            default: {\n              log.log(`Unknown Media mobiusEvent: ${mediaState} `, {\n                file: CALL_MANAGER_FILE,\n                method: METHODS.DEQUEUE_WS_EVENTS,\n              });\n            }\n          }\n        } else {\n          log.info(`CorrelationId: ${correlationId} doesn't exist , discarding..`, {\n            file: CALL_MANAGER_FILE,\n            method: METHODS.DEQUEUE_WS_EVENTS,\n          });\n          // TODO: Maybe add a queue  for these mobiusEvents per callID and handle them once the call is setup ?\n        }\n        break;\n      }\n      case MobiusEventType.CALL_CONNECTED: {\n        log.log(`Received call connect for call: ${correlationId}`, {\n          file: CALL_MANAGER_FILE,\n          method: METHODS.DEQUEUE_WS_EVENTS,\n        });\n        const call = this.getCall(correlationId);\n\n        call.sendCallStateMachineEvt({type: 'E_RECV_CALL_CONNECT', data: mobiusEvent.data});\n\n        break;\n      }\n      case MobiusEventType.CALL_DISCONNECTED: {\n        log.log(`Received call disconnect for call: ${correlationId}`, {\n          file: CALL_MANAGER_FILE,\n          method: METHODS.DEQUEUE_WS_EVENTS,\n        });\n        const call = this.getCall(correlationId);\n\n        if (call) {\n          call.sendCallStateMachineEvt({type: 'E_RECV_CALL_DISCONNECT'});\n        }\n        break;\n      }\n      default: {\n        log.log(`Unknown Call Event mobiusEvent: ${mobiusEvent.data.eventType}`, {\n          file: CALL_MANAGER_FILE,\n          method: METHODS.DEQUEUE_WS_EVENTS,\n        });\n      }\n    }\n  }\n\n  /**\n   * @param correlationId -.\n   */\n  public getCall = (correlationId: CorrelationId): ICall => {\n    return this.callCollection[correlationId];\n  };\n\n  /**\n   *\n   */\n  public getActiveCalls = (): Record<string, ICall> => {\n    return this.callCollection;\n  };\n\n  /**\n   * Adds line instance to lineDict\n   */\n  public updateLine(deviceId: string, line: ILine) {\n    this.lineDict[deviceId] = line;\n    log.log(`Successfully updated line for deviceId: ${deviceId}`, {\n      file: CALL_MANAGER_FILE,\n      method: METHODS.UPDATE_LINE,\n    });\n  }\n\n  /**\n   * Retrieves line id\n   */\n  private getLineId(deviceId: string) {\n    return this.lineDict[deviceId].lineId;\n  }\n}\n\n/**\n * @param webex -.\n * @param indicator - Service Indicator.\n */\nexport const getCallManager = (webex: WebexSDK, indicator: ServiceIndicator): ICallManager => {\n  if (!callManager) {\n    callManager = new CallManager(webex, indicator);\n  }\n\n  return callManager;\n};\n"],"mappings":"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"}