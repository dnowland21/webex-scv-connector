{"version":3,"names":["_constants","require","_types","_impl","_SDKConnector","_interopRequireDefault","_types2","_types3","_call3","_Logger","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","_Reflect$construct","arguments","apply","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","callManager","CallManager","exports","_Eventing","_inherits2","_super","webex","indicator","_this","_classCallCheck2","_defineProperty2","_assertThisInitialized2","direction","deviceId","lineId","destination","log","newCall","createCall","activeMobiusUrl","correlationId","callCollection","activeCalls","_keys","getActiveCalls","length","info","concat","getCorrelationId","emit","CALLING_CLIENT_EVENT_KEYS","ALL_CALLS_CLEARED","serviceIndicator","sdkConnector","SDKConnector","getWebex","setWebex","lineDict","listenForWsEvents","_createClass2","key","value","updateActiveMobius","url","_this2","registerListener","_ref","_asyncToGenerator2","_regenerator","mark","_callee","event","wrap","_callee$","_context","prev","next","dequeueWsEvents","stop","_x","_this3","mobiusEvent","_mobiusEvent$data","data","callId","eventType","MobiusEventType","CALL_SETUP","file","CALL_MANAGER_FILE","method","midCallService","forEach","midCallEvent","getCall","handleMidCallEvent","newId","find","id","getCallId","getLineId","CallDirection","INBOUND","setCallId","broadworksCorrelationInfo","setBroadworksCorrelationInfo","callerId","startCallerIdResolution","LINE_EVENT_KEYS","INCOMING_CALL","sendCallStateMachineEvt","type","CALL_PROGRESS","CALL_MEDIA","activeCall","_mobiusEvent$data$mes","_mobiusEvent$data$mes2","_mobiusEvent$data$mes3","_mobiusEvent$data$mes4","_mobiusEvent$data$mes5","message","sdp","messageType","seq","version","mediaState","MediaState","OFFER","sendMediaStateMachineEvt","ANSWER","OFFER_REQUEST","OK","mediaOk","received","ERROR","CALL_CONNECTED","CALL_DISCONNECTED","updateLine","line","Eventing","getCallManager"],"sources":["callManager.ts"],"sourcesContent":["/* eslint-disable dot-notation */\n/* eslint-disable valid-jsdoc */\nimport {CALL_MANAGER_FILE} from '../constants';\nimport {CALLING_CLIENT_EVENT_KEYS, CallEventTypes, LINE_EVENT_KEYS} from '../../Events/types';\nimport {Eventing} from '../../Events/impl';\nimport SDKConnector from '../../SDKConnector';\nimport {ISDKConnector, WebexSDK} from '../../SDKConnector/types';\nimport {CallDetails, CallDirection, CorrelationId, ServiceIndicator} from '../../common/types';\nimport {\n  ICall,\n  ICallManager,\n  MediaState,\n  MidCallEvent,\n  MobiusCallEvent,\n  MobiusEventType,\n} from './types';\nimport {createCall} from './call';\nimport log from '../../Logger';\nimport {ILine} from '../line/types';\n\nlet callManager: ICallManager;\n\n/**\n *\n */\nexport class CallManager extends Eventing<CallEventTypes> implements ICallManager {\n  private sdkConnector: ISDKConnector;\n\n  private webex: WebexSDK;\n\n  private callCollection: Record<CorrelationId, ICall>;\n\n  private activeMobiusUrl!: string;\n\n  private serviceIndicator: ServiceIndicator;\n\n  private lineDict: Record<string, ILine>;\n\n  /**\n   * @param webex -.\n   * @param indicator - Service Indicator.\n   */\n  constructor(webex: WebexSDK, indicator: ServiceIndicator) {\n    super();\n    this.sdkConnector = SDKConnector;\n    this.serviceIndicator = indicator;\n    if (!this.sdkConnector.getWebex()) {\n      SDKConnector.setWebex(webex);\n    }\n    this.lineDict = {};\n    this.webex = this.sdkConnector.getWebex();\n    this.callCollection = {};\n    this.activeMobiusUrl = '';\n    this.listenForWsEvents();\n  }\n\n  /**\n   * @param direction -.\n   * @param deviceId -.\n   * @param destination -.\n   */\n  public createCall = (\n    direction: CallDirection,\n    deviceId: string,\n    lineId: string,\n    destination?: CallDetails\n  ): ICall => {\n    log.log('Creating call object', {});\n    const newCall = createCall(\n      this.activeMobiusUrl,\n      this.webex,\n      direction,\n      deviceId,\n      lineId,\n      (correlationId: CorrelationId) => {\n        delete this.callCollection[correlationId];\n        const activeCalls = Object.keys(this.getActiveCalls()).length;\n\n        log.info(\n          `DELETE:: Deleted corelationId: ${newCall.getCorrelationId()} from CallManager, Number of call records :- ${activeCalls}`,\n          {}\n        );\n        if (activeCalls === 0) {\n          /* Notify CallingClient when all calls are cleared. */\n          this.emit(CALLING_CLIENT_EVENT_KEYS.ALL_CALLS_CLEARED);\n        }\n      },\n      this.serviceIndicator,\n      destination\n    );\n\n    this.callCollection[newCall.getCorrelationId()] = newCall;\n    log.log(`New call created with correlationId: ${newCall.getCorrelationId()}`, {});\n    log.info(\n      `ADD:: Added corelationId: ${newCall.getCorrelationId()} to CallManager , Number of call records now:- ${\n        Object.keys(this.getActiveCalls()).length\n      }`,\n      {}\n    );\n\n    return newCall;\n  };\n\n  /**\n   * Update Active Mobius Url.\n   *\n   * @param url - Mobius Url.\n   */\n  public updateActiveMobius(url: string) {\n    this.activeMobiusUrl = url;\n  }\n\n  /**\n   * A listener for Mobius events.\n   */\n  private listenForWsEvents() {\n    this.sdkConnector.registerListener('event:mobius', async (event) => {\n      this.dequeueWsEvents(event);\n    });\n  }\n\n  /**\n   * This a Queue where Mobius Events are reported by the underlying Mercury\n   * Connection. We handle the events in the order they are posted here. New call\n   * Objects are generated from here.\n   *\n   * @param event - Mobius Events.\n   */\n  private dequeueWsEvents(event: unknown) {\n    const mobiusEvent = event as MobiusCallEvent;\n    const {callId, correlationId} = mobiusEvent.data;\n\n    switch (mobiusEvent.data.eventType) {\n      case MobiusEventType.CALL_SETUP: {\n        log.log(`Received call Setup message for call: ${callId}`, {\n          file: CALL_MANAGER_FILE,\n          method: 'dequeueWsEvents',\n        });\n        /* Check whether MidCall or not */\n        if (mobiusEvent.data.midCallService) {\n          mobiusEvent.data.midCallService.forEach((midCallEvent: MidCallEvent) => {\n            const call = this.getCall(correlationId);\n\n            if (call) {\n              call.handleMidCallEvent(midCallEvent);\n            } else {\n              log.log(\n                `Dropping midcall event of type: ${midCallEvent.eventType} as it doesn't match with any existing call`,\n                {\n                  file: CALL_MANAGER_FILE,\n                  method: 'dequeueWsEvents',\n                }\n              );\n            }\n          });\n\n          return;\n        }\n        /* Check if the Call.Media was processed before Call.Setup.\n         * In that case , the Call Object is already created while processing\n         * Media message.\n         */\n\n        const newId = (Object.keys(this.callCollection) as Array<string>).find(\n          (id) => this.callCollection[id].getCallId() === callId\n        );\n        let newCall: ICall;\n\n        if (!newId) {\n          /*  This means it's a new call ...\n           *  Create an incoming call object and add to our records\n           */\n          const lineId = this.getLineId(mobiusEvent.data.deviceId);\n          newCall = this.createCall(\n            CallDirection.INBOUND,\n            mobiusEvent.data.deviceId,\n            lineId,\n            {} as CallDetails\n          );\n          log.log(\n            `New incoming call created with correlationId from Call Setup message: ${newCall.getCorrelationId()}`,\n            {\n              file: CALL_MANAGER_FILE,\n              method: 'dequeueWsEvents',\n            }\n          );\n          newCall.setCallId(callId);\n          if (mobiusEvent.data.broadworksCorrelationInfo) {\n            log.log(\n              `Found broadworksCorrelationInfo: ${mobiusEvent.data.broadworksCorrelationInfo}`,\n              {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              }\n            );\n            newCall.setBroadworksCorrelationInfo(mobiusEvent.data.broadworksCorrelationInfo);\n          }\n        } else {\n          log.info(\n            `Found the call Object with a matching callId: ${callId} from our records with correlationId: ${newId}`,\n            {\n              file: CALL_MANAGER_FILE,\n              method: 'dequeueWsEvents',\n            }\n          );\n          newCall = this.getCall(newId);\n        }\n\n        if (mobiusEvent.data.callerId) {\n          log.info('Processing Caller-Id data', {\n            file: CALL_MANAGER_FILE,\n            method: 'dequeueWsEvents',\n          });\n          newCall.startCallerIdResolution(mobiusEvent.data.callerId);\n        }\n        /* Signal Line */\n\n        this.emit(LINE_EVENT_KEYS.INCOMING_CALL, newCall);\n\n        newCall.sendCallStateMachineEvt({type: 'E_RECV_CALL_SETUP', data: mobiusEvent.data});\n\n        break;\n      }\n      case MobiusEventType.CALL_PROGRESS: {\n        log.log(`Received call progress mobiusEvent for call: ${correlationId}`, {\n          file: CALL_MANAGER_FILE,\n          method: 'dequeueWsEvents',\n        });\n        const call = this.getCall(correlationId);\n\n        call.sendCallStateMachineEvt({type: 'E_RECV_CALL_PROGRESS', data: mobiusEvent.data});\n        break;\n      }\n      case MobiusEventType.CALL_MEDIA: {\n        log.log(`Received call media mobiusEvent for call: ${correlationId}`, {\n          file: CALL_MANAGER_FILE,\n          method: 'dequeueWsEvents',\n        });\n\n        let activeCall: ICall;\n\n        if (correlationId) {\n          /* The Call.Media message had correlation id (Except the first message) */\n          activeCall = this.getCall(correlationId);\n        } else {\n          /* This is possibly the first Media message for the call.\n           * We should scan our record to see if we can find a call with\n           * this callId.\n           */\n\n          const newId = (Object.keys(this.callCollection) as Array<string>).find(\n            (id) => this.callCollection[id].getCallId() === callId\n          );\n\n          if (newId) {\n            /* Call.Media arrived after Call.Setup but the correlationId was Null. */\n\n            log.info(\n              `Found the call Object with a matching callId: ${callId} from our records with correlationId: ${newId}`,\n              {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              }\n            );\n            activeCall = this.getCall(newId);\n          } else {\n            /* If Call.Media arrived before Call.Setup , we create the Call Object here */\n\n            const lineId = this.getLineId(mobiusEvent.data.deviceId);\n            activeCall = this.createCall(\n              CallDirection.INBOUND,\n              mobiusEvent.data.deviceId,\n              lineId,\n              {} as CallDetails\n            );\n            log.log(\n              `New incoming call created with correlationId from ROAP Message: ${activeCall.getCorrelationId()}`,\n              {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              }\n            );\n            activeCall.setCallId(callId);\n          }\n        }\n\n        if (activeCall) {\n          /* Only Handle if the call is present */\n\n          log.info(`SDP from mobius ${mobiusEvent.data.message?.sdp}`, {\n            file: CALL_MANAGER_FILE,\n            method: 'dequeueWsEvents',\n          });\n          log.log(\n            `ROAP message from mobius with type:  ${mobiusEvent.data.message?.messageType}, seq: ${mobiusEvent.data.message?.seq} , version: ${mobiusEvent.data.message?.version}`,\n            {\n              file: CALL_MANAGER_FILE,\n              method: 'dequeueWsEvents',\n            }\n          );\n          const mediaState = mobiusEvent.data.message?.messageType;\n\n          switch (mediaState) {\n            case MediaState.OFFER: {\n              log.log('Received OFFER', {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              });\n              activeCall.sendMediaStateMachineEvt({\n                type: 'E_RECV_ROAP_OFFER',\n                data: mobiusEvent.data.message,\n              });\n              break;\n            }\n            case MediaState.ANSWER: {\n              log.log('Received ANSWER', {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              });\n              activeCall.sendMediaStateMachineEvt({\n                type: 'E_RECV_ROAP_ANSWER',\n                data: mobiusEvent.data.message,\n              });\n              break;\n            }\n            case MediaState.OFFER_REQUEST: {\n              log.log('Received OFFER_REQUEST', {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              });\n              activeCall.sendMediaStateMachineEvt({\n                type: 'E_RECV_ROAP_OFFER_REQUEST',\n                data: mobiusEvent.data.message,\n              });\n              break;\n            }\n            case MediaState.OK: {\n              log.log('Received OK', {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              });\n              const mediaOk = {\n                received: true,\n                message: mobiusEvent.data.message,\n              };\n\n              activeCall.sendMediaStateMachineEvt({\n                type: 'E_ROAP_OK',\n                data: mediaOk,\n              });\n              break;\n            }\n            case MediaState.ERROR: {\n              log.log('Received Error...', {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              });\n              break;\n            }\n            default: {\n              log.log(`Unknown Media mobiusEvent: ${mediaState} `, {\n                file: CALL_MANAGER_FILE,\n                method: 'dequeueWsEvents',\n              });\n            }\n          }\n        } else {\n          log.log(`CorrelationId: ${correlationId} doesn't exist , discarding..`, {\n            file: CALL_MANAGER_FILE,\n            method: 'dequeueWsEvents',\n          });\n          // TODO: Maybe add a queue  for these mobiusEvents per callID and handle them once the call is setup ?\n        }\n        break;\n      }\n      case MobiusEventType.CALL_CONNECTED: {\n        log.log(`Received call connect for call: ${correlationId}`, {\n          file: CALL_MANAGER_FILE,\n          method: 'dequeueWsEvents',\n        });\n        const call = this.getCall(correlationId);\n\n        call.sendCallStateMachineEvt({type: 'E_RECV_CALL_CONNECT', data: mobiusEvent.data});\n\n        break;\n      }\n      case MobiusEventType.CALL_DISCONNECTED: {\n        log.log(`Received call disconnect for call: ${correlationId}`, {\n          file: CALL_MANAGER_FILE,\n          method: 'dequeueWsEvents',\n        });\n        const call = this.getCall(correlationId);\n\n        if (call) {\n          call.sendCallStateMachineEvt({type: 'E_RECV_CALL_DISCONNECT'});\n        }\n        break;\n      }\n      default: {\n        log.log(`Unknown Call Event mobiusEvent: ${mobiusEvent.data.eventType}`, {\n          file: CALL_MANAGER_FILE,\n          method: 'dequeueWsEvents',\n        });\n      }\n    }\n  }\n\n  /**\n   * @param correlationId -.\n   */\n  public getCall = (correlationId: CorrelationId): ICall => {\n    return this.callCollection[correlationId];\n  };\n\n  /**\n   *\n   */\n  public getActiveCalls = (): Record<string, ICall> => {\n    return this.callCollection;\n  };\n\n  /**\n   * Adds line instance to lineDict\n   */\n  public updateLine(deviceId: string, line: ILine) {\n    this.lineDict[deviceId] = line;\n  }\n\n  /**\n   * Retrieves line id\n   */\n  private getLineId(deviceId: string) {\n    return this.lineDict[deviceId].lineId;\n  }\n}\n\n/**\n * @param webex -.\n * @param indicator - Service Indicator.\n */\nexport const getCallManager = (webex: WebexSDK, indicator: ServiceIndicator): ICallManager => {\n  if (!callManager) {\n    callManager = new CallManager(webex, indicator);\n  }\n\n  return callManager;\n};\n"],"mappings":"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"}