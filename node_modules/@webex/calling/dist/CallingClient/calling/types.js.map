{"version":3,"names":["MobiusEventType","exports","MediaState","DisconnectCode","DisconnectCause","MidCallEventType","RoapScenario","MobiusCallState","TransferType","MUTE_TYPE"],"sources":["types.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {LocalMicrophoneStream} from '@webex/internal-media-core';\nimport {CallError} from '../../Errors/catalog/CallError';\nimport {\n  CallDetails,\n  CallDirection,\n  CallId,\n  CorrelationId,\n  DisplayInformation,\n} from '../../common/types';\nimport {Eventing} from '../../Events/impl';\nimport {CallerIdInfo, CallEvent, CallEventTypes, RoapEvent, RoapMessage} from '../../Events/types';\nimport {ILine} from '../line/types';\n\nexport enum MobiusEventType {\n  CALL_SETUP = 'mobius.call',\n  CALL_PROGRESS = 'mobius.callprogress',\n  CALL_CONNECTED = 'mobius.callconnected',\n  CALL_MEDIA = 'mobius.media',\n  CALL_DISCONNECTED = 'mobius.calldisconnected',\n}\n\nexport enum MediaState {\n  OFFER = 'OFFER',\n  ANSWER = 'ANSWER',\n  OFFER_REQUEST = 'OFFER_REQUEST',\n  OK = 'OK',\n  ERROR = 'ERROR',\n}\n\nexport enum DisconnectCode {\n  BUSY = 115,\n  NORMAL = 0,\n  MEDIA_INACTIVITY = 131,\n}\n\nexport enum DisconnectCause {\n  BUSY = 'User Busy.',\n  NORMAL = 'Normal Disconnect.',\n  MEDIA_INACTIVITY = 'Media Inactivity.',\n}\n\n/* Work in Progress */\nexport enum MidCallEventType {\n  CALL_INFO = 'callInfo',\n  CALL_STATE = 'callState',\n}\n\nexport type MidCallCallerId = {\n  callerId: CallerIdInfo;\n};\nexport type DisconnectReason = {\n  code: DisconnectCode;\n  cause: DisconnectCause;\n};\n\nexport enum RoapScenario {\n  ANSWER = 'ANSWER',\n  OK = 'OK',\n  OFFER = 'OFFER',\n  ERROR = 'ERROR',\n  OFFER_RESPONSE = 'OFFER_RESPONSE',\n}\n\nexport enum MobiusCallState {\n  PROCEEDING = 'sig_proceeding',\n  PROGRESS = 'sig_progress',\n  ALERTING = 'sig_alerting',\n  CONNECTED = 'sig_connected',\n}\n\nexport type MobiusCallResponse = {\n  statusCode: number;\n  body: {\n    device: {\n      deviceId: string;\n      correlationId: string;\n    };\n    callId: CallId;\n    callData?: {\n      callState: MobiusCallState;\n    };\n  };\n};\n\nexport type MidCallEvent = {\n  eventType: string;\n  eventData: unknown;\n};\n\nexport type SupplementaryServiceState = {\n  callState: string;\n};\n\nexport type MobiusCallData = {\n  callProgressData?: {\n    alerting: boolean;\n    inbandMedia: boolean;\n  };\n  message?: RoapMessage;\n  callerId: {\n    from: string;\n  };\n  midCallService?: Array<MidCallEvent>;\n  callId: CallId;\n  callUrl: string;\n  deviceId: string;\n  correlationId: string;\n  eventType: MobiusEventType;\n  broadworksCorrelationInfo?: string;\n};\n\nexport type MobiusCallEvent = {\n  id: string;\n  data: MobiusCallData;\n  timestamp: number;\n  trackingId: string;\n};\n\nexport type PatchResponse = {\n  statusCode: number;\n  body: {\n    device: {\n      deviceId: string;\n      correlationId: string;\n    };\n    callId: CallId;\n  };\n};\n\nexport type SSResponse = {\n  statusCode: number;\n  body: {\n    device: {\n      deviceId: string;\n      correlationId: string;\n    };\n    callId: CallId;\n  };\n};\n\nexport type DivertContext = {\n  destination: string;\n  toVoicemail: boolean;\n};\n\nexport type TransferContext = {\n  transferorCallId: CallId;\n  destination?: string;\n  transferToCallId?: CallId;\n};\n\nexport enum TransferType {\n  BLIND = 'BLIND',\n  CONSULT = 'CONSULT',\n}\n\nexport enum MUTE_TYPE {\n  USER = 'user_mute',\n  SYSTEM = 'system_mute',\n}\n\nexport type ParkContext = {\n  isGroupPark: boolean;\n  destination: string;\n};\n\nexport type MediaContext = {\n  previousState: string; // To be used for midcall and error handling.\n};\n\nexport type VoiceQualityMetrics = {\n  VoRxCodec: string;\n  VoPktSizeMs: number;\n  maxJitter: number;\n  VoOneWayDelayMs: number;\n  networkType: string;\n  hwType: string;\n};\n\nexport type TransmitterVqPayload = {\n  VoTxCodec: string;\n  rtpBitRate: number;\n};\n\nexport type ReceiveStatistics = {\n  Dur: number;\n  Pkt: number;\n  Oct: number;\n  LatePkt: number;\n  LostPkt: number;\n  AvgJit: number;\n  VQMetrics: VoiceQualityMetrics;\n};\n\nexport type TransmitStatistics = {\n  Dur: number;\n  Pkt: number;\n  Oct: number;\n  VQMetrics: TransmitterVqPayload;\n};\n\nexport type CallRtpStats = {\n  'rtp-rxstat': ReceiveStatistics;\n  'rtp-txstat': TransmitStatistics;\n};\n\n/**\n * Represents an interface for managing call-related operations.\n */\nexport interface ICall extends Eventing<CallEventTypes> {\n  /**\n   * Fetches the identifier of the line associated with this call.\n   *\n   */\n  lineId: string;\n\n  /**\n   * Fetches the unique call identifier.\n   *\n   */\n  getCallId(): string;\n\n  /**\n   * Fetches the correlation identifier for this call.\n   *\n   */\n  getCorrelationId(): string;\n\n  /**\n   * Fetches the direction of the call (e.g., inbound or outbound).\n   *\n   */\n  getDirection(): CallDirection;\n\n  /**\n   * Sets the call identifier.\n   *\n   * @param callId - The new call identifier.\n   */\n  setCallId(callId: CallId): void;\n\n  /**\n   * Sends a call state machine event.\n   *\n   * @param event - The call event to send.\n   * @ignore\n   */\n  sendCallStateMachineEvt(event: CallEvent): void;\n\n  /**\n   * Sends a media state machine event.\n   *\n   * @param event - The Roap event to send.\n   * @ignore\n   */\n  sendMediaStateMachineEvt(event: RoapEvent): void;\n\n  /**\n   * Fetches the reason for disconnecting the call.\n   *\n   */\n  getDisconnectReason(): DisconnectReason;\n\n  /**\n   * Disconnects the call.\n   */\n  end(): void;\n\n  /**\n   * Checks if the call is muted.\n   *\n   */\n  isMuted(): boolean;\n\n  /**\n   * Checks if the call is connected.\n   *\n   */\n  isConnected(): boolean;\n\n  /**\n   * Checks if the call is on hold.\n   *\n   */\n  isHeld(): boolean;\n\n  /**\n   * Performs a hold or resume action on the call.\n   */\n  doHoldResume(): void;\n\n  /**\n   * Mutes or unmutes the call's local audio stream.\n   *\n   * @param localAudioStream - The local audio stream to mute or unmute.\n   * @param muteType - Identifies if mute was triggered by system or user.\n   */\n  mute(localAudioStream: LocalMicrophoneStream, muteType?: MUTE_TYPE): void;\n\n  /**\n   * Fetches the caller information associated with the call.\n   *\n   */\n  getCallerInfo(): DisplayInformation;\n\n  /**\n   * Initiates caller ID resolution for the call.\n   * callerInfo data can be retrieved later by calling {@link getCallerInfo} method.\n   * @param callerInfo - The caller ID information to resolve.\n   */\n  startCallerIdResolution(callerInfo: CallerIdInfo): void;\n\n  /**\n   * Handles a mid-call event.\n   * @param event - The mid-call event to handle.\n   * @ignore\n   */\n  handleMidCallEvent(event: MidCallEvent): void;\n\n  /**\n   * Dials the call using the provided local audio stream.\n   *\n   * @param localAudioStream - The local audio stream for the call.\n   * @example\n   * ```\n   * const localAudioStream  = await Calling.createMicrophoneStream({audio: true});\n   * call.dial(localAudioStream);\n   * ```\n   */\n  dial(localAudioStream: LocalMicrophoneStream): void;\n\n  /**\n   * Sends a DTMF digit during the call.\n   *\n   * @param tone - The DTMF tone to send.\n   * @example\n   * ```\n   * call.sendDigit('1');\n   * ```\n   */\n  sendDigit(tone: string): void;\n\n  /**\n   * Answers the call using the provided local audio stream.\n   *\n   * @param localAudioStream - The local audio stream for the call.\n   *\n   * @example\n   * ```\n   * const localAudioStream  = await Calling.createMicrophoneStream({audio: true});\n   * call.answer(localAudioStream);\n   * ```\n   */\n  answer(localAudioStream: LocalMicrophoneStream): void;\n\n  /**\n   * Completes a call transfer.\n   *\n   * @param transferType - The type of transfer to perform. Eg. BLIND or CONSULT.\n   * @param transferCallId - The call identifier for the transfer incase of Consult transfer (optional).\n   * @param transferTarget - The target for the transfer incase of Blind transfer(optional).\n   * @example\n   * ```\n   * // blind transfer\n   * call.completeTransfer('BLIND', undefined, '5998');\n   *\n   * // consult transfer\n   * call.completeTransfer('CONSULT', secondCall.getCallId(), undefined);\n   * ```\n   */\n  completeTransfer(\n    transferType: TransferType,\n    transferCallId?: CallId,\n    transferTarget?: string\n  ): void;\n\n  /**\n   * Change the audio stream of the call.\n   *\n   * @param newAudioStream - The new audio stream to be used in the call.\n   */\n  updateMedia(newAudioStream: LocalMicrophoneStream): void;\n\n  /**\n   * Fetches the information related to the call's Broadworks correlationId.\n   *\n   */\n  getBroadworksCorrelationInfo(): string | undefined;\n\n  /**\n   * Sets the Broadworks correlation information for the call.\n   *\n   * @param broadworksCorrelationInfo - The Broadworks correlation information.\n   */\n  setBroadworksCorrelationInfo(broadworksCorrelationInfo: string): void;\n\n  /**\n   * Fetches the RTP (Real-time Transport Protocol) statistics for the call.\n   *\n   */\n  getCallRtpStats(): Promise<CallRtpStats>;\n}\n\nexport type DeleteRecordCallBack = (callId: CallId) => void;\nexport type CallEmitterCallBack = (callerInfo: DisplayInformation) => void;\nexport type CallErrorEmitterCallBack = (error: CallError) => void;\nexport type RetryCallBack = (interval: number) => void;\n\n/**\n * Represents an interface for managing calls within a call manager.\n */\nexport interface ICallManager extends Eventing<CallEventTypes> {\n  /**\n   * Creates a call with the specified details.\n   *\n   * @param destination - The call details including destination information.\n   * @param direction - The direction of the call (e.g., incoming or outgoing).\n   * @param deviceId - The unique identifier of the device associated with the call.\n   * @param lineId - The identifier of the line to which the call belongs.\n   */\n  createCall(\n    direction: CallDirection,\n    deviceId: string,\n    lineId: string,\n    destination?: CallDetails\n  ): ICall;\n\n  /**\n   * Retrieves a call based on its unique call identifier.\n   *\n   * @param correlationId - The unique identifier for the call at client\n   */\n  getCall(correlationId: CorrelationId): ICall;\n\n  /**\n   * Updates the active Mobius server URL.\n   *\n   * @param url - The new Mobius server URL to set.\n   */\n  updateActiveMobius(url: string): void;\n\n  /**\n   * Retrieves a dictionary of active calls, where each key is a call identifier\n   * and the corresponding value is the call object.\n   *\n   */\n  getActiveCalls(): Record<string, ICall>;\n\n  /**\n   * Updates a line associated with a specific device.\n   *\n   * @param deviceId - The unique identifier of the device.\n   * @param line - The updated line object as {@link ILine}.\n   */\n  updateLine(deviceId: string, line: ILine): void;\n}\n"],"mappings":";;;;;;;AAAA;AAAA,IAcYA,eAAe,GAAAC,OAAA,CAAAD,eAAA,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAAA,IAQfE,UAAU,GAAAD,OAAA,CAAAC,UAAA,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAAA,IAQVC,cAAc,GAAAF,OAAA,CAAAE,cAAA,0BAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAAA,IAMdC,eAAe,GAAAH,OAAA,CAAAG,eAAA,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAM3B;AAAA,IACYC,gBAAgB,GAAAJ,OAAA,CAAAI,gBAAA,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;AAAA,IAahBC,YAAY,GAAAL,OAAA,CAAAK,YAAA,0BAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;AAAA,IAQZC,eAAe,GAAAN,OAAA,CAAAM,eAAA,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAAA,IAwFfC,YAAY,GAAAP,OAAA,CAAAO,YAAA,0BAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;AAAA,IAKZC,SAAS,GAAAR,OAAA,CAAAQ,SAAA,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAkDrB;AACA;AACA;AAwMA;AACA;AACA"}