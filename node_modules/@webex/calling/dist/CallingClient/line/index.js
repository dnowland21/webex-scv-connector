"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _weakMap = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/weak-map"));
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _classPrivateFieldGet2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classPrivateFieldGet"));
var _classPrivateFieldSet2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classPrivateFieldSet"));
var _uuid = require("uuid");
var _types = require("../../common/types");
var _types2 = require("./types");
var _constants = require("../constants");
var _Logger = _interopRequireDefault(require("../../Logger"));
var _registration = require("../registration");
var _impl = require("../../Events/impl");
var _LineError = require("../../Errors/catalog/LineError");
var _common = require("../../common");
var _SDKConnector = _interopRequireDefault(require("../../SDKConnector"));
var _types3 = require("../../Events/types");
var _callManager = require("../calling/callManager");
var _types4 = require("../../Errors/types");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
var _webex = /*#__PURE__*/new _weakMap.default();
var _mutex = /*#__PURE__*/new _weakMap.default();
var _sdkConnector = /*#__PURE__*/new _weakMap.default();
var _primaryMobiusUris = /*#__PURE__*/new _weakMap.default();
var _backupMobiusUris = /*#__PURE__*/new _weakMap.default();
var Line = exports.default = /*#__PURE__*/function (_Eventing) {
  (0, _inherits2.default)(Line, _Eventing);
  var _super = _createSuper(Line);
  function Line(userId, clientDeviceUri, mutex, primaryMobiusUris, backupMobiusUris, logLevel, serviceDataConfig, jwe, phoneNumber, extension, voicemail) {
    var _this;
    (0, _classCallCheck2.default)(this, Line);
    _this = _super.call(this);
    _classPrivateFieldInitSpec((0, _assertThisInitialized2.default)(_this), _webex, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec((0, _assertThisInitialized2.default)(_this), _mutex, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec((0, _assertThisInitialized2.default)(_this), _sdkConnector, {
      writable: true,
      value: void 0
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "registration", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "userId", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clientDeviceUri", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lineId", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mobiusDeviceId", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mobiusUri", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "phoneNumber", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "extension", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sipAddresses", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "voicemail", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastSeen", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "keepaliveInterval", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "callKeepaliveInterval", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rehomingIntervalMin", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rehomingIntervalMax", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "voicePortalNumber", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "voicePortalExtension", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "callManager", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "serviceData", void 0);
    _classPrivateFieldInitSpec((0, _assertThisInitialized2.default)(_this), _primaryMobiusUris, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec((0, _assertThisInitialized2.default)(_this), _backupMobiusUris, {
      writable: true,
      value: void 0
    });
    /**
     * Line events emitter
     */
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lineEmitter", function (event, deviceInfo, lineError) {
      switch (event) {
        case _types2.LINE_EVENTS.REGISTERED:
          if (deviceInfo) {
            _this.normalizeLine(deviceInfo);
            _this.emit(event, (0, _assertThisInitialized2.default)(_this));
          }
          break;
        case _types2.LINE_EVENTS.UNREGISTERED:
        case _types2.LINE_EVENTS.RECONNECTED:
        case _types2.LINE_EVENTS.RECONNECTING:
          _this.emit(event);
          break;
        case _types2.LINE_EVENTS.ERROR:
          if (lineError) {
            _this.emit(event, lineError);
          }
          break;
        default:
          break;
      }
    });
    /**
     * Gets registration status
     */
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getStatus", function () {
      return _this.registration.getStatus();
    });
    /**
     * Gets device id
     */
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDeviceId", function () {
      var _this$registration$ge;
      return (_this$registration$ge = _this.registration.getDeviceInfo().device) === null || _this$registration$ge === void 0 ? void 0 : _this$registration$ge.deviceId;
    });
    /**
     * Initiates a call to the specified destination.
     * @param dest - The call details including destination information.
     */
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "makeCall", function (dest) {
      var call;
      if (dest) {
        var match = dest.address.match(_constants.VALID_PHONE_REGEX);
        if (match && match[0].length === dest.address.length) {
          var _this$registration$ge2;
          var sanitizedNumber = dest.address.replace(/[^[*+]\d#]/gi, '').replace(/\s+/gi, '').replace(/-/gi, '');
          var formattedDest = {
            type: dest.type,
            address: "tel:".concat(sanitizedNumber)
          };
          call = _this.callManager.createCall(_types.CallDirection.OUTBOUND, (_this$registration$ge2 = _this.registration.getDeviceInfo().device) === null || _this$registration$ge2 === void 0 ? void 0 : _this$registration$ge2.deviceId, _this.lineId, formattedDest);
          _Logger.default.log("New call created, callId: ".concat(call.getCallId()), {});
        } else {
          _Logger.default.warn('Invalid phone number detected', {});
          var err = new _LineError.LineError('An invalid phone number was detected. Check the number and try again.', {}, _types4.ERROR_TYPE.CALL_ERROR, _types.RegistrationStatus.ACTIVE);
          _this.emit(_types2.LINE_EVENTS.ERROR, err);
        }
        return call;
      }
      if (_this.serviceData.indicator === _types.ServiceIndicator.GUEST_CALLING) {
        var _this$registration$ge3;
        call = _this.callManager.createCall(_types.CallDirection.OUTBOUND, (_this$registration$ge3 = _this.registration.getDeviceInfo().device) === null || _this$registration$ge3 === void 0 ? void 0 : _this$registration$ge3.deviceId, _this.lineId);
        _Logger.default.log("New guest call created, callId: ".concat(call.getCallId()), {});
        return call;
      }
      return undefined;
    });
    /**
     * @param callId -.
     * @param correlationId -.
     */
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCall", function (correlationId) {
      return _this.callManager.getCall(correlationId);
    });
    _this.lineId = (0, _uuid.v4)();
    _this.userId = userId;
    _this.clientDeviceUri = clientDeviceUri;
    _this.phoneNumber = phoneNumber;
    _this.extension = extension;
    _this.voicemail = voicemail;
    (0, _classPrivateFieldSet2.default)((0, _assertThisInitialized2.default)(_this), _sdkConnector, _SDKConnector.default);
    (0, _classPrivateFieldSet2.default)((0, _assertThisInitialized2.default)(_this), _webex, (0, _classPrivateFieldGet2.default)((0, _assertThisInitialized2.default)(_this), _sdkConnector).getWebex());
    (0, _classPrivateFieldSet2.default)((0, _assertThisInitialized2.default)(_this), _mutex, mutex);
    (0, _classPrivateFieldSet2.default)((0, _assertThisInitialized2.default)(_this), _primaryMobiusUris, primaryMobiusUris);
    (0, _classPrivateFieldSet2.default)((0, _assertThisInitialized2.default)(_this), _backupMobiusUris, backupMobiusUris);
    _this.serviceData = serviceDataConfig !== null && serviceDataConfig !== void 0 && serviceDataConfig.indicator ? serviceDataConfig : {
      indicator: _types.ServiceIndicator.CALLING,
      domain: ''
    };
    (0, _common.validateServiceData)(_this.serviceData);
    _this.registration = (0, _registration.createRegistration)((0, _classPrivateFieldGet2.default)((0, _assertThisInitialized2.default)(_this), _webex), _this.serviceData, (0, _classPrivateFieldGet2.default)((0, _assertThisInitialized2.default)(_this), _mutex), _this.lineEmitter, logLevel, jwe);
    _Logger.default.setLogger(logLevel, _constants.LINE_FILE);
    _this.callManager = (0, _callManager.getCallManager)((0, _classPrivateFieldGet2.default)((0, _assertThisInitialized2.default)(_this), _webex), _this.serviceData.indicator);
    _this.incomingCallListener();
    return _this;
  }

  /**
   * Wrapper to for device registration.
   */
  (0, _createClass2.default)(Line, [{
    key: "register",
    value: (function () {
      var _register = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _this2 = this;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (0, _classPrivateFieldGet2.default)(this, _mutex).runExclusive( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      _this2.emit(_types2.LINE_EVENTS.CONNECTING);
                      _this2.registration.setMobiusServers((0, _classPrivateFieldGet2.default)(_this2, _primaryMobiusUris), (0, _classPrivateFieldGet2.default)(_this2, _backupMobiusUris));
                      _context.next = 4;
                      return _this2.registration.triggerRegistration();
                    case 4:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              })));
            case 2:
              if (this.mobiusDeviceId) {
                this.callManager.updateLine(this.mobiusDeviceId, this);
              }
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function register() {
        return _register.apply(this, arguments);
      }
      return register;
    }()
    /**
     * Wrapper to for device  deregister.
     */
    )
  }, {
    key: "deregister",
    value: (function () {
      var _deregister = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.registration.deregister();
            case 2:
              this.registration.setStatus(_types.RegistrationStatus.IDLE);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function deregister() {
        return _deregister.apply(this, arguments);
      }
      return deregister;
    }()
    /**
     * To normalize line class with Mobius response
     */
    )
  }, {
    key: "normalizeLine",
    value: function normalizeLine(deviceInfo) {
      var _device$addresses;
      var device = deviceInfo.device,
        keepaliveInterval = deviceInfo.keepaliveInterval,
        callKeepaliveInterval = deviceInfo.callKeepaliveInterval,
        rehomingIntervalMin = deviceInfo.rehomingIntervalMin,
        rehomingIntervalMax = deviceInfo.rehomingIntervalMax,
        voicePortalNumber = deviceInfo.voicePortalNumber,
        voicePortalExtension = deviceInfo.voicePortalExtension;
      this.mobiusDeviceId = device === null || device === void 0 ? void 0 : device.deviceId;
      this.mobiusUri = device === null || device === void 0 ? void 0 : device.uri;
      this.lastSeen = device === null || device === void 0 ? void 0 : device.lastSeen;
      this.sipAddresses = (_device$addresses = device === null || device === void 0 ? void 0 : device.addresses) !== null && _device$addresses !== void 0 ? _device$addresses : [];
      this.keepaliveInterval = keepaliveInterval;
      this.callKeepaliveInterval = callKeepaliveInterval;
      this.rehomingIntervalMin = rehomingIntervalMin;
      this.rehomingIntervalMax = rehomingIntervalMax;
      this.voicePortalNumber = voicePortalNumber;
      this.voicePortalExtension = voicePortalExtension;
    }
  }, {
    key: "getLoggingLevel",
    value:
    /**
     * To get the current log Level.
     */
    function getLoggingLevel() {
      return _Logger.default.getLogLevel();
    }

    /**
     *  To get active url of Mobius.
     */
  }, {
    key: "getActiveMobiusUrl",
    value: function getActiveMobiusUrl() {
      return this.registration.getActiveMobiusUrl();
    }
  }, {
    key: "incomingCallListener",
    value:
    /**
     * An Incoming Call listener.
     */
    function incomingCallListener() {
      var _this3 = this;
      var logContext = {
        file: _constants.LINE_FILE,
        method: this.incomingCallListener.name
      };
      _Logger.default.log('Listening for incoming calls... ', logContext);
      this.callManager.on(_types3.LINE_EVENT_KEYS.INCOMING_CALL, function (callObj) {
        _this3.emit(_types2.LINE_EVENTS.INCOMING_CALL, callObj);
      });
    }
  }]);
  return Line;
}(_impl.Eventing);
//# sourceMappingURL=index.js.map
