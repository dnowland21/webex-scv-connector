{"version":3,"names":["LINE_EVENTS","exports"],"sources":["types.ts"],"sourcesContent":["import {LineEventTypes} from '../../Events/types';\nimport {Eventing} from '../../Events/impl';\nimport {IRegistration} from '../registration/types';\nimport {LineError} from '../../Errors/catalog/LineError';\nimport {\n  CallDetails,\n  CorrelationId,\n  IDeviceInfo,\n  MobiusDeviceId,\n  RegistrationStatus,\n} from '../../common/types';\nimport {ICall} from '../calling/types';\n\nexport enum LINE_EVENTS {\n  CONNECTING = 'connecting',\n  ERROR = 'error',\n  RECONNECTED = 'reconnected',\n  RECONNECTING = 'reconnecting',\n  REGISTERED = 'registered',\n  UNREGISTERED = 'unregistered',\n  INCOMING_CALL = 'line:incoming_call',\n}\n\n/**\n * Represents an interface for managing a telephony line.\n */\nexport interface ILine extends Eventing<LineEventTypes> {\n  /**\n   * The unique identifier of the user associated with the line.\n   */\n  userId: string;\n\n  /**\n   * The URI of the client device associated with the line.\n   */\n  clientDeviceUri: string;\n\n  /**\n   * The unique identifier of the line.\n   */\n  lineId: string;\n\n  /**\n   * The optional Mobius device identifier associated with the line.\n   */\n  mobiusDeviceId?: string;\n\n  /**\n   * The phone number associated with the line.\n   */\n  phoneNumber?: string;\n\n  /**\n   * The extension number associated with the line.\n   */\n  extension?: string;\n\n  /**\n   * An array of SIP addresses associated with the line.\n   */\n  sipAddresses?: string[];\n\n  /**\n   * The voicemail number associated with the line.\n   */\n  voicemail?: string;\n\n  /**\n   * The timestamp when the line was last seen.\n   */\n  lastSeen?: string;\n\n  /**\n   * The interval for sending keep-alive messages for the line.\n   */\n  keepaliveInterval?: number;\n\n  /**\n   * The interval for sending call keep-alive messages for the line.\n   */\n  callKeepaliveInterval?: number;\n\n  /**\n   * The minimum rehoming interval for the line.\n   */\n  rehomingIntervalMin?: number;\n\n  /**\n   * The maximum rehoming interval for the line.\n   */\n  rehomingIntervalMax?: number;\n\n  /**\n   * The voice portal number associated with the line.\n   */\n  voicePortalNumber?: number;\n\n  /**\n   * The voice portal extension associated with the line.\n   */\n  voicePortalExtension?: number;\n\n  /**\n   * The registration information for the line as {@link IRegistration}.\n   */\n  registration: IRegistration;\n\n  /**\n   * Registers the line.\n   */\n  register(): void;\n\n  /**\n   * Deregisters the line.\n   */\n  deregister(): void;\n\n  /**\n   * Retrieves the active Mobius server URL associated with the line.\n   *\n   */\n  getActiveMobiusUrl(): string;\n\n  /**\n   * Retrieves the registration status of the line as {@link MobiusStatus}.\n   *\n   */\n  getStatus(): RegistrationStatus;\n\n  /**\n   * Retrieves the device identifier associated with the line as {@link MobiusDeviceId},\n   * or `undefined` if no device is associated.\n   *\n   */\n  getDeviceId(): MobiusDeviceId | undefined;\n\n  /**\n   * Emits line-related events.\n   *\n   * @param event - The line event to emit.\n   * @param deviceInfo - Additional device information (optional).\n   * @param lineError - Information about line-related errors (optional).\n   *\n   * @example\n   * ```typescript\n   * line.lineEmitter(LINE_EVENTS.UNREGISTERED);\n   * ```\n   * @ignore\n   */\n  lineEmitter: (event: LINE_EVENTS, deviceInfo?: IDeviceInfo, lineError?: LineError) => void;\n\n  /**\n   * Initiates a call to the specified destination.\n   *\n   * @param dest - The call details including destination information.\n   *\n   * @example\n   * ```typescript\n   * const callDetails : CallDetails = {type: 'uri', address: 'example@webex.com'};\n   * const callObj: ICall = line.makeCall(callDetails);\n   * ```\n   */\n  makeCall(dest?: CallDetails): ICall | undefined;\n\n  /**\n   * Retrieves a call object based on the provided correlation identifier.\n   *\n   * @param correlationId - The correlation identifier of the call.\n   * @example\n   * ```typescript\n   * const callObj: ICall = line.getCall(correlationId);\n   * ```\n   */\n  getCall(correlationId: CorrelationId): ICall;\n}\n\nexport type LineEmitterCallback = (\n  event: LINE_EVENTS,\n  deviceInfo?: IDeviceInfo,\n  clientError?: LineError\n) => void;\n\nexport type LineErrorEmitterCallback = (err: LineError, finalError?: boolean) => void;\n"],"mappings":";;;;;;;IAaYA,WAAW,GAAAC,OAAA,CAAAD,WAAA,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAUvB;AACA;AACA"}