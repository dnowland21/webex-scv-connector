{"version":3,"names":["_asyncMutex","require","_testUtil","_registerFixtures","_common","_types","_types2","_","_interopRequireDefault","utils","_interopRequireWildcard","_SDKConnector","_constants","_types3","regUtils","_getRequireWildcardCache","e","_WeakMap","r","t","__esModule","_typeof","default","has","get","n","__proto__","a","_Object$defineProperty","_Object$getOwnPropertyDescriptor","u","Object","prototype","hasOwnProperty","call","i","set","ownKeys","_Object$keys","_Object$getOwnPropertySymbols","o","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","_Object$getOwnPropertyDescriptors","_Object$defineProperties","describe","mutex","Mutex","webex","getTestUtilsWebex","SDKConnector","setWebex","defaultServiceData","indicator","ServiceIndicator","CALLING","domain","createRegistrationSpy","jest","spyOn","mobiusUris","filterMobiusUris","getMobiusDiscoveryResponse","URL","primaryMobiusUris","fn","primary","backupMobiusUris","backup","userId","internal","device","clientDeviceUri","url","mockJwe","guestServiceData","GUEST_CALLING","guestName","handleErrorSpy","clearAllMocks","line","mockRegistrationBody","getMockDeviceInfo","discoveryBody","primaryUrl","concat","uris","registrationPayload","statusCode","body","beforeEach","Line","LOGGER","INFO","afterEach","clearAllTimers","useRealTimers","removeAllListeners","it","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","useFakeTimers","request","mockReturnValue","expect","toBeCalledOnceWith","any","anything","undefined","getStatus","toEqual","RegistrationStatus","IDLE","register","getMockRequestTemplate","serviceData","uri","method","not","toBeCalled","ACTIVE","getActiveMobiusUrl","getLoggingLevel","getDeviceId","deviceId","mockClear","advanceTimersByTime","_promise","resolve","stop","_callee2","guestLine","_callee2$","_context2","jwe","_callee3","_callee3$","_context3","LINE_EVENTS","ERROR","mockRejectedValue","on","error","message","toBe","waitForMsecs","INACTIVE","file","REGISTRATION_FILE","_callee4","_callee4$","_context4","mockReturnValueOnce","deregister","createCallSpy","callManager","makeCall","address","type","CallType","URI","CallDirection","OUTBOUND","lineId","toBeTruthy","getCall","getCorrelationId","direction","toStrictEqual","end","destination","done","toBeUndefined","assertions","toBeCalledWith","String"],"sources":["line.test.ts"],"sourcesContent":["import {Mutex} from 'async-mutex';\nimport {\n  getMobiusDiscoveryResponse,\n  getMockDeviceInfo,\n  getMockRequestTemplate,\n  getTestUtilsWebex,\n} from '../../common/testUtil';\nimport {URL} from '../registration/registerFixtures';\nimport {filterMobiusUris} from '../../common';\nimport {\n  CallDirection,\n  CallType,\n  MobiusServers,\n  RegistrationStatus,\n  ServiceIndicator,\n  WebexRequestPayload,\n} from '../../common/types';\nimport {LINE_EVENTS} from './types';\nimport Line from '.';\nimport * as utils from '../../common/Utils';\nimport SDKConnector from '../../SDKConnector';\nimport {REGISTRATION_FILE} from '../constants';\nimport {LOGGER} from '../../Logger/types';\nimport * as regUtils from '../registration/register';\n\ndescribe('Line Tests', () => {\n  const mutex = new Mutex();\n  const webex = getTestUtilsWebex();\n  SDKConnector.setWebex(webex);\n\n  const defaultServiceData = {indicator: ServiceIndicator.CALLING, domain: ''};\n  const createRegistrationSpy = jest.spyOn(regUtils, 'createRegistration');\n\n  const mobiusUris = filterMobiusUris(getMobiusDiscoveryResponse(), URL);\n  const primaryMobiusUris = jest.fn(() => mobiusUris.primary);\n  const backupMobiusUris = jest.fn(() => mobiusUris.backup);\n  const userId = webex.internal.device.userId;\n  const clientDeviceUri = webex.internal.device.url;\n  const mockJwe = 'mockJwe';\n  const guestServiceData = {\n    indicator: ServiceIndicator.GUEST_CALLING,\n    domain: '',\n    guestName: 'testUser',\n  };\n\n  const handleErrorSpy = jest.spyOn(utils, 'handleRegistrationErrors');\n\n  jest.clearAllMocks();\n\n  describe('Line Registration tests', () => {\n    let line;\n    const mockRegistrationBody = getMockDeviceInfo();\n\n    const discoveryBody: MobiusServers = getMobiusDiscoveryResponse();\n    const primaryUrl = `${discoveryBody.primary.uris[0]}/calling/web/`;\n\n    const registrationPayload = <WebexRequestPayload>(<unknown>{\n      statusCode: 200,\n      body: mockRegistrationBody,\n    });\n\n    beforeEach(() => {\n      line = new Line(\n        userId,\n        clientDeviceUri,\n        mutex,\n        primaryMobiusUris(),\n        backupMobiusUris(),\n        LOGGER.INFO\n      );\n    });\n\n    afterEach(() => {\n      jest.clearAllTimers();\n      jest.clearAllMocks();\n      jest.useRealTimers();\n      line.removeAllListeners();\n    });\n\n    it('verify successful Registration cases and keepalive', async () => {\n      jest.useFakeTimers();\n      webex.request.mockReturnValue(registrationPayload);\n\n      expect(createRegistrationSpy).toBeCalledOnceWith(\n        webex,\n        defaultServiceData,\n        expect.any(Mutex),\n        expect.anything(),\n        LOGGER.INFO,\n        undefined\n      );\n      expect(line.getStatus()).toEqual(RegistrationStatus.IDLE);\n      await line.register();\n\n      expect(webex.request).toBeCalledOnceWith({\n        ...getMockRequestTemplate(),\n        body: {\n          userId,\n          clientDeviceUri,\n          serviceData: defaultServiceData,\n        },\n        uri: `${primaryUrl}device`,\n        method: 'POST',\n      });\n      expect(handleErrorSpy).not.toBeCalled();\n\n      expect(line.getStatus()).toEqual(RegistrationStatus.ACTIVE);\n      expect(line.getActiveMobiusUrl()).toEqual(primaryUrl);\n      expect(line.getLoggingLevel()).toEqual(LOGGER.INFO);\n      expect(line.getDeviceId()).toEqual(mockRegistrationBody.device.deviceId);\n\n      webex.request.mockClear();\n\n      jest.advanceTimersByTime(30 * 1000);\n      await Promise.resolve();\n\n      expect(webex.request).toBeCalledOnceWith({\n        ...getMockRequestTemplate(),\n        uri: `${mockRegistrationBody.device.uri}/status`,\n        method: 'POST',\n      });\n      jest.useRealTimers();\n    });\n\n    it('verify successful Registration cases and keepalive for a guest user', async () => {\n      createRegistrationSpy.mockClear();\n      const guestLine = new Line(\n        userId,\n        clientDeviceUri,\n        mutex,\n        primaryMobiusUris(),\n        backupMobiusUris(),\n        LOGGER.INFO,\n        guestServiceData,\n        mockJwe\n      );\n      jest.useFakeTimers();\n      webex.request.mockReturnValue(registrationPayload);\n\n      expect(createRegistrationSpy).toBeCalledOnceWith(\n        webex,\n        guestServiceData,\n        expect.any(Mutex),\n        expect.anything(),\n        LOGGER.INFO,\n        mockJwe\n      );\n      expect(guestLine.getStatus()).toEqual(RegistrationStatus.IDLE);\n      await guestLine.register();\n\n      expect(webex.request).toBeCalledOnceWith({\n        ...getMockRequestTemplate(),\n        body: {\n          userId,\n          clientDeviceUri,\n          serviceData: {...guestServiceData, jwe: mockJwe},\n        },\n        uri: `${primaryUrl}device`,\n        method: 'POST',\n      });\n      expect(handleErrorSpy).not.toBeCalled();\n\n      expect(guestLine.getStatus()).toEqual(RegistrationStatus.ACTIVE);\n      expect(guestLine.getActiveMobiusUrl()).toEqual(primaryUrl);\n      expect(guestLine.getLoggingLevel()).toEqual(LOGGER.INFO);\n      expect(guestLine.getDeviceId()).toEqual(mockRegistrationBody.device.deviceId);\n\n      webex.request.mockClear();\n\n      jest.advanceTimersByTime(30 * 1000);\n      await Promise.resolve();\n\n      expect(webex.request).toBeCalledOnceWith({\n        ...getMockRequestTemplate(),\n        uri: `${mockRegistrationBody.device.uri}/status`,\n        method: 'POST',\n      });\n      jest.useRealTimers();\n    });\n\n    it('verify failure Registration cases all requests fail ', async () => {\n      line.removeAllListeners(LINE_EVENTS.ERROR);\n\n      webex.request.mockRejectedValue({\n        statusCode: 401,\n      });\n\n      line.on(LINE_EVENTS.ERROR, (error) => {\n        expect(error.message).toBe(\n          'User is unauthorized due to an expired token. Sign out, then sign back in.'\n        );\n      });\n\n      expect(line.getStatus()).toBe(RegistrationStatus.IDLE);\n      line.register();\n      await utils.waitForMsecs(20);\n\n      expect(line.getStatus()).toBe(RegistrationStatus.INACTIVE);\n      expect(handleErrorSpy).toBeCalledOnceWith(\n        expect.anything(),\n        expect.anything(),\n        {\n          file: REGISTRATION_FILE,\n          method: 'attemptRegistrationWithServers',\n        },\n        expect.anything()\n      );\n    });\n\n    it('verify successful de-registration cases', async () => {\n      webex.request.mockReturnValueOnce(registrationPayload);\n\n      expect(line.getStatus()).toEqual(RegistrationStatus.IDLE);\n      await line.register();\n      expect(line.getStatus()).toEqual(RegistrationStatus.ACTIVE);\n\n      await line.deregister();\n      expect(line.getStatus()).toEqual(RegistrationStatus.IDLE);\n    });\n  });\n\n  describe('Line calling tests', () => {\n    let line;\n\n    beforeEach(() => {\n      line = new Line(\n        userId,\n        clientDeviceUri,\n        mutex,\n        primaryMobiusUris(),\n        backupMobiusUris(),\n        LOGGER.INFO\n      );\n    });\n\n    afterEach(() => {\n      jest.clearAllTimers();\n      jest.clearAllMocks();\n      jest.useRealTimers();\n      line.removeAllListeners();\n    });\n    it('Return a successful call object while making call', () => {\n      const createCallSpy = jest.spyOn(line.callManager, 'createCall');\n      const call = line.makeCall({address: '5003', type: CallType.URI});\n\n      expect(createCallSpy).toBeCalledOnceWith(CallDirection.OUTBOUND, undefined, line.lineId, {\n        address: 'tel:5003',\n        type: 'uri',\n      });\n      expect(call).toBeTruthy();\n      expect(line.getCall(call ? call.getCorrelationId() : '')).toBe(call);\n      expect(call ? call.direction : undefined).toStrictEqual(CallDirection.OUTBOUND);\n      call?.end();\n    });\n\n    it('Return a successful call object while making call to FAC codes', () => {\n      const createCallSpy = jest.spyOn(line.callManager, 'createCall');\n      const call = line.makeCall({address: '*25', type: CallType.URI});\n\n      expect(createCallSpy).toBeCalledOnceWith(CallDirection.OUTBOUND, undefined, line.lineId, {\n        address: 'tel:*25',\n        type: 'uri',\n      });\n      expect(call).toBeTruthy();\n      expect(call ? call.direction : undefined).toStrictEqual(CallDirection.OUTBOUND);\n      call?.end();\n    });\n\n    it('Remove spaces from dialled number while making call', () => {\n      const createCallSpy = jest.spyOn(line.callManager, 'createCall');\n      const call = line.makeCall({address: '+91 123 456 7890', type: CallType.URI});\n\n      expect(createCallSpy).toBeCalledOnceWith(CallDirection.OUTBOUND, undefined, line.lineId, {\n        address: 'tel:+911234567890',\n        type: 'uri',\n      });\n      expect(call).toBeTruthy();\n      expect(call ? call.direction : undefined).toStrictEqual(CallDirection.OUTBOUND);\n      expect(call ? call.destination.address : undefined).toStrictEqual('tel:+911234567890');\n      call?.end();\n    });\n\n    it('Remove hyphen from dialled number while making call', () => {\n      const createCallSpy = jest.spyOn(line.callManager, 'createCall');\n      const call = line.makeCall({address: '123-456-7890', type: CallType.URI});\n\n      expect(createCallSpy).toBeCalledOnceWith(CallDirection.OUTBOUND, undefined, line.lineId, {\n        address: 'tel:1234567890',\n        type: 'uri',\n      });\n      expect(call).toBeTruthy();\n      expect(call ? call.direction : undefined).toStrictEqual(CallDirection.OUTBOUND);\n      expect(call ? call.destination.address : undefined).toStrictEqual('tel:1234567890');\n      call?.end();\n    });\n\n    it('attempt to create call with incorrect number format 1', (done) => {\n      // There may be other listeners , which may create race\n      line.removeAllListeners(LINE_EVENTS.ERROR);\n      const createCallSpy = jest.spyOn(line.callManager, 'createCall');\n\n      line.on(LINE_EVENTS.ERROR, (error) => {\n        expect(error.message).toBe(\n          'An invalid phone number was detected. Check the number and try again.'\n        );\n        done();\n      });\n      try {\n        const call = line.makeCall({address: 'select#$@^^', type: CallType.URI});\n\n        expect(call).toBeUndefined();\n        expect(createCallSpy).not.toBeCalledOnceWith({});\n      } catch (error) {\n        done(error);\n      }\n    });\n\n    it('attempt to create call with incorrect number format 2', (done) => {\n      expect.assertions(4);\n      const createCallSpy = jest.spyOn(line.callManager, 'createCall');\n\n      line.on(LINE_EVENTS.ERROR, (error) => {\n        expect(error.message).toBe(\n          'An invalid phone number was detected. Check the number and try again.'\n        );\n        done();\n      });\n\n      try {\n        const call = line.makeCall({address: '+1@8883332505', type: CallType.URI});\n\n        expect(call).toBeUndefined();\n        expect(createCallSpy).not.toBeCalledOnceWith({});\n      } catch (error) {\n        done(error);\n      }\n    });\n\n    it('attempt to create call with guest calling service indicator', () => {\n      expect.assertions(2);\n      const createCallSpy = jest.spyOn(line.callManager, 'createCall');\n\n      // Mocking the serviceData to have GUEST_CALLING indicator\n      line = new Line(\n        userId,\n        clientDeviceUri,\n        mutex,\n        primaryMobiusUris(),\n        backupMobiusUris(),\n        LOGGER.INFO,\n        {indicator: ServiceIndicator.GUEST_CALLING}\n      );\n      const call = line.makeCall();\n\n      expect(call).toBeTruthy();\n      expect(createCallSpy).toBeCalledWith(CallDirection.OUTBOUND, undefined, expect.any(String));\n    });\n  });\n});\n"],"mappings":"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"}