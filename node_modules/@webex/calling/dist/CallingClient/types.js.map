{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import * as Media from '@webex/internal-media-core';\nimport {LOGGER} from '../Logger/types';\nimport {ISDKConnector} from '../SDKConnector/types';\nimport {Eventing} from '../Events/impl';\nimport {CallingClientEventTypes} from '../Events/types';\nimport {ServiceData} from '../common/types';\nimport {ICall} from './calling/types';\nimport {CallingClientError} from '../Errors';\nimport {ILine} from './line/types';\n\nexport interface LoggerConfig {\n  level: LOGGER;\n}\n\ninterface DiscoveryConfig {\n  country: string;\n  region: string;\n}\n\nexport interface CallingClientConfig {\n  logger?: LoggerConfig;\n  discovery?: DiscoveryConfig;\n  serviceData?: ServiceData;\n  jwe?: string;\n}\n\nexport type CallingClientErrorEmitterCallback = (\n  err: CallingClientError,\n  finalError?: boolean\n) => void;\n\n/**\n * An interface for the `CallingClient` module.\n * The `CallingClient` module is designed to provide a set of APIs related to line registration and calling functionalities within the SDK.\n *\n * @example\n * ```javascript\n * const callingClient = createClient(webex, callingConfig);\n * ```\n */\nexport interface ICallingClient extends Eventing<CallingClientEventTypes> {\n  /**\n   * Represents the `mediaEngine for managing media-related operations within the CallingClient.\n   * The media engine provides access to audio and video devices such as cameras, microphones, and speakers within the media layer.\n   *\n   * @public\n   * @example\n   * ```\n   * const microphones = await callingClient.mediaEngine.Media.getMicrophones();\n   * const speakers = await callingClient.mediaEngine.Media.getSpeakers();\n   * const cameras = await callingClient.mediaEngine.Media.getCameras();\n   * ```\n   */\n  mediaEngine: typeof Media;\n\n  /**\n   * @ignore\n   */\n  getSDKConnector(): ISDKConnector;\n\n  /**\n   * @ignore\n   */\n  getLoggingLevel(): LOGGER;\n\n  /**\n   * Retrieves details of the line object(s) belonging to a user.\n   *\n   * This method gathers all the {@link ILine}  objects and organizes them into a dictionary\n   * where keys represent `lineId`s and values are arrays of {@link ILine} objects registered with\n   * the `callingClient`\n   *\n   * @example\n   * ```typescript\n   * const lines = callingClient.getLines();\n   * ```\n   * The `lines` response object will have `lineId` as its key and\n   * a list {@link ILine} objects as it's value.\n   * ```\n   * {\n   *   'lineId1': lineObj1,\n   *   'lineId2': lineObj2,\n   * }\n   * ```\n   */\n  getLines(): Record<string, ILine>;\n\n  /**\n   * Retrieves a dictionary of active calls grouped by `lineId`.\n   *\n   * This method gathers active {@link ICall}  objects and organizes them into a dictionary\n   * where keys represent `lineId`s and values are arrays of {@link ICall} objects of active calls associated\n   * with each line.\n   *\n   * @example\n   * ```typescript\n   * const activeCalls = callingClient.getActiveCalls();\n   * ```\n   * The `activeCalls` response object will have `lineId` as its key and\n   * a list {@link ICall} objects as it's value.\n   *\n   * ```\n   * {\n   *   'line1': [call1, call2],\n   *   'line2': [call3],\n   * }\n   * ```\n   */\n  getActiveCalls(): Record<string, ICall[]>;\n\n  /**\n   * Retrieves the {@link ICall} object for the currently connected call in the client.\n   *\n   * This method iterates through active call objects and returns the call\n   * that is currently connected (not on hold).\n   *\n   * @example\n   * ```typescript\n   * const connectedCall : ICall = callingClient.getConnectedCall();\n   * ```\n   * The `connectedCall` object will be the Call object of the connected call with the client\n   */\n  getConnectedCall(): ICall | undefined;\n}\n"],"mappings":""}