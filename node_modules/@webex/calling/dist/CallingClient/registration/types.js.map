{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import {IDeviceInfo, RegistrationStatus} from '../../common/types';\n\nexport type Header = {\n  [key: string]: string;\n};\n\nexport type restoreRegistrationCallBack = (\n  restoreData: IDeviceInfo,\n  caller: string\n) => Promise<boolean>;\n\nexport type retry429CallBack = (retryAfter: number, caller: string) => void;\n/**\n * Represents an interface for managing registration-related operations.\n */\nexport interface IRegistration {\n  /**\n   * Sets the primary and backup Mobius server URLs.\n   *\n   * @param primaryMobiusUris - An array of primary Mobius server URLs.\n   * @param backupMobiusUris - An array of backup Mobius server URLs.\n   */\n  setMobiusServers(primaryMobiusUris: string[], backupMobiusUris: string[]): void;\n\n  /**\n   * Triggers the registration process with the given list of servers\n   * Registration is attempted with primary and backup until it succeeds or the list is exhausted\n   */\n  triggerRegistration(): Promise<void>;\n\n  /**\n   * Checks if the device is currently registered.\n   *\n   */\n  isDeviceRegistered(): boolean;\n\n  /**\n   * Sets the status of the registration.\n   *\n   * @param value - The registration status to set.\n   */\n  setStatus(value: RegistrationStatus): void;\n\n  /**\n   * Retrieves the current registration status.\n   *\n   */\n  getStatus(): RegistrationStatus;\n\n  /**\n   * Retrieves information about the device as {@link IDeviceInfo}.\n   *\n   */\n  getDeviceInfo(): IDeviceInfo;\n\n  /**\n   * Clears the keep-alive timer used for registration.\n   */\n  clearKeepaliveTimer(): void;\n\n  /**\n   * Deregisters the device.\n   */\n  deregister(): void;\n\n  /**\n   * Sets the active Mobius server URL to use for registration.\n   *\n   * @param url - The Mobius server URL to set as active.\n   */\n  setActiveMobiusUrl(url: string): void;\n\n  /**\n   * Retrieves the active Mobius server URL.\n   *\n   */\n  getActiveMobiusUrl(): string;\n\n  /**\n   * Attempts to reconnect after a connection failure.\n   *\n   * @param caller - The caller's identifier for reconnection.\n   */\n  reconnectOnFailure(caller: string): Promise<void>;\n\n  /**\n   * Checks if a reconnection attempt is pending.\n   *\n   */\n  isReconnectPending(): boolean;\n\n  /**\n   * Restores the connection and attempts refreshing existing registration with server.\n   * Allows retry if not restored in the first attempt.\n   *\n   * @param retry - Set to `true` to trigger a retry after restoration.\n   */\n  handleConnectionRestoration(retry: boolean): Promise<boolean>;\n}\n"],"mappings":""}