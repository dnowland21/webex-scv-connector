{"version":3,"names":["Media","_interopRequireWildcard","require","_asyncMutex","_constants","_Utils","_types","_SDKConnector","_interopRequireDefault","_impl","_types2","_types3","_Logger","_callManager","_constants2","_line","_types4","_Metrics","_getRequireWildcardCache","e","_WeakMap","r","t","__esModule","_typeof","default","has","get","n","__proto__","a","_Object$defineProperty","_Object$getOwnPropertyDescriptor","u","Object","prototype","hasOwnProperty","call","i","set","_createForOfIteratorHelper","o","allowArrayLike","it","_Symbol","_Symbol$iterator","_Array$isArray","_unsupportedIterableToArray","length","F","s","done","value","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_arrayLikeToArray","toString","slice","constructor","name","_Array$from","test","arr","len","arr2","Array","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","_Reflect$construct","arguments","apply","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","valueOf","CallingClient","exports","_Eventing","_inherits2","_super","webex","config","_this$sdkConfig","_this$sdkConfig$servi","_this$sdkConfig2","_this$sdkConfig2$logg","_this","_classCallCheck2","_defineProperty2","_assertThisInitialized2","_asyncToGenerator2","_regenerator","mark","_callee2","registration","wrap","_callee2$","_context2","prev","log","info","METHOD_START_MESSAGE","file","CALLING_CLIENT_FILE","method","METHODS","CALLS_CLEARED_HANDLER","_values","lineDict","isDeviceRegistered","mutex","runExclusive","_callee","_callee$","_context","isReconnectPending","CALLS_CLEARED_HANDLER_UTIL","reconnectOnFailure","stop","sdkConnector","SDKConnector","getWebex","_config$logger","setWebex","logger","level","setWebexLogger","Mutex","sdkConfig","serviceData","indicator","ServiceIndicator","CALLING","domain","logLevel","LOGGER","ERROR","setLogger","validateServiceData","callManager","getCallManager","metricManager","getMetricManager","mediaEngine","adaptedLogger","_len","args","_key","join","error","_len2","_key2","warn","_len3","_key3","_len4","_key4","trace","_len5","_key5","debug","_len6","_key6","primaryMobiusUris","backupMobiusUris","mobiusServiceHost","URL","internal","services","_serviceUrls","mobius","host","mobiusClusters","_hostCatalog","MOBIUS_US_PROD","MOBIUS_EU_PROD","MOBIUS_US_INT","MOBIUS_EU_INT","mobiusHost","registerSessionsListener","registerCallsClearedListener","_createClass2","key","_init","_callee3","_callee3$","_context3","getMobiusServers","createLine","detectNetworkChange","init","_detectNetworkChange","_callee5","_this2","retry","line","_callee5$","_context5","DETECT_NETWORK_CHANGE","setInterval","_callee4","_callee4$","_context4","mercury","connected","_keys","getActiveCalls","clearKeepaliveTimer","getStatus","RegistrationStatus","IDLE","handleConnectionRestoration","sent","NETWORK_FLAP_TIMEOUT","_getClientRegionInfo","_callee6","_this3","regionInfo","_iterator","_step","temp","myIP","response","clientRegionInfo","extendedError","_callee6$","_context6","GET_CLIENT_REGION_INFO","concat","API_V1","request","uri","URL_ENDPOINT","IP_ENDPOINT","HTTP_METHODS","GET","headers","CISCO_DEVICE_URL","device","url","SPARK_USER_AGENT","CALLING_USER_AGENT","service","ALLOWED_SERVICES","MOBIUS","body","ipv4","DISCOVERY_URL","addAuthHeader","clientRegion","countryCode","abrupt","t0","Error","handleCallingClientErrors","clientError","submitRegistrationMetric","METRIC_EVENT","REGISTRATION_ERROR","REG_ACTION","REGISTER","METRIC_TYPE","BEHAVIORAL","emit","CALLING_CLIENT_EVENT_KEYS","GET_MOBIUS_SERVERS_UTIL","t1","finish","getClientRegionInfo","_getMobiusServers","_callee7","_this$sdkConfig3","_this$sdkConfig3$disc","_this$sdkConfig4","_this$sdkConfig4$disc","_this4","useDefault","_this$sdkConfig5","_this$sdkConfig5$disc","_this$sdkConfig6","_this$sdkConfig6$disc","mobiusServers","mobiusUris","_callee7$","_context7","GET_MOBIUS_SERVERS","discovery","country","region","filterMobiusUris","primary","backup","REGISTER_CALLS_CLEARED_LISTENER","on","ALL_CALLS_CLEARED","callsClearedHandler","getLoggingLevel","getLogLevel","getSDKConnector","_this5","REGISTER_SESSIONS_LISTENER","registerListener","MOBIUS_EVENT_KEYS","CALL_SESSION_EVENT_INCLUSIVE","_ref4","_callee8","event","sessionArr","_callee8$","_context8","data","userSessions","sessionType","SessionType","WEBEX_CALLING","splice","USER_SESSION_INFO","_x","_createLine","_callee9","_this$sdkConfig7","_this$sdkConfig8","_callee9$","_context9","CREATE_LINE","Line","userId","jwe","lineId","getLines","activeCalls","calls","forEach","correlationId","push","getConnectedCall","connectCall","isConnected","isHeld","_uploadLogs2","_callee10","_callee10$","_context10","uploadLogs","Eventing","createClient","_ref5","_callee11","callingClientInstance","_callee11$","_context11","_x2","_x3"],"sources":["CallingClient.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport * as Media from '@webex/internal-media-core';\nimport {Mutex} from 'async-mutex';\nimport ExtendedError from 'Errors/catalog/ExtendedError';\nimport {METHOD_START_MESSAGE} from '../common/constants';\nimport {\n  filterMobiusUris,\n  handleCallingClientErrors,\n  uploadLogs,\n  validateServiceData,\n} from '../common/Utils';\nimport {LOGGER, LogContext} from '../Logger/types';\nimport SDKConnector from '../SDKConnector';\nimport {ClientRegionInfo, ISDKConnector, ServiceHost, WebexSDK} from '../SDKConnector/types';\nimport {Eventing} from '../Events/impl';\nimport {\n  CallingClientEventTypes,\n  MOBIUS_EVENT_KEYS,\n  CallSessionEvent,\n  SessionType,\n  CALLING_CLIENT_EVENT_KEYS,\n} from '../Events/types';\nimport {\n  ServiceIndicator,\n  RegionInfo,\n  ALLOWED_SERVICES,\n  HTTP_METHODS,\n  IpInfo,\n  MobiusServers,\n  WebexRequestPayload,\n  RegistrationStatus,\n  UploadLogsResponse,\n} from '../common/types';\nimport {ICallingClient, CallingClientConfig} from './types';\nimport {ICall, ICallManager} from './calling/types';\nimport log from '../Logger';\nimport {getCallManager} from './calling/callManager';\nimport {\n  CALLING_CLIENT_FILE,\n  CALLS_CLEARED_HANDLER_UTIL,\n  CALLING_USER_AGENT,\n  CISCO_DEVICE_URL,\n  DISCOVERY_URL,\n  GET_MOBIUS_SERVERS_UTIL,\n  IP_ENDPOINT,\n  SPARK_USER_AGENT,\n  URL_ENDPOINT,\n  NETWORK_FLAP_TIMEOUT,\n  API_V1,\n  MOBIUS_US_PROD,\n  MOBIUS_EU_PROD,\n  MOBIUS_US_INT,\n  MOBIUS_EU_INT,\n  METHODS,\n} from './constants';\nimport Line from './line';\nimport {ILine} from './line/types';\nimport {METRIC_EVENT, REG_ACTION, METRIC_TYPE, IMetricManager} from '../Metrics/types';\nimport {getMetricManager} from '../Metrics';\n\n/**\n * The `CallingClient` module provides a set of APIs for line registration and calling functionalities within the SDK.\n *\n * The following code snippet demonstrates how to create an instance of `CallingClient` using a `webex` instance and `callingConfig`:\n *\n * @example\n * ```javascript\n * const callingClient = createClient(webex, callingConfig);\n * ```\n */\n\nexport class CallingClient extends Eventing<CallingClientEventTypes> implements ICallingClient {\n  private sdkConnector: ISDKConnector;\n\n  private webex: WebexSDK;\n\n  private mutex: Mutex;\n\n  private callManager: ICallManager;\n\n  private metricManager: IMetricManager;\n\n  private sdkConfig?: CallingClientConfig;\n\n  private primaryMobiusUris: string[];\n\n  private backupMobiusUris: string[];\n\n  private mobiusClusters: ServiceHost[];\n\n  private mobiusHost: string;\n\n  public mediaEngine: typeof Media;\n\n  private lineDict: Record<string, ILine> = {};\n\n  /**\n   * @ignore\n   */\n  constructor(webex: WebexSDK, config?: CallingClientConfig) {\n    super();\n    this.sdkConnector = SDKConnector;\n\n    if (!this.sdkConnector.getWebex()) {\n      SDKConnector.setWebex(webex);\n      if (config?.logger?.level && webex.logger.config) {\n        webex.logger.config.level = config.logger.level; // override the webex logger level\n      }\n      log.setWebexLogger(webex.logger);\n    }\n    this.mutex = new Mutex();\n    this.webex = this.sdkConnector.getWebex();\n\n    this.sdkConfig = config;\n    const serviceData = this.sdkConfig?.serviceData?.indicator\n      ? this.sdkConfig.serviceData\n      : {indicator: ServiceIndicator.CALLING, domain: ''};\n\n    const logLevel = this.sdkConfig?.logger?.level ? this.sdkConfig.logger.level : LOGGER.ERROR;\n    log.setLogger(logLevel, CALLING_CLIENT_FILE);\n    validateServiceData(serviceData);\n\n    this.callManager = getCallManager(this.webex, serviceData.indicator);\n    this.metricManager = getMetricManager(this.webex, serviceData.indicator);\n\n    this.mediaEngine = Media;\n\n    const adaptedLogger: Media.Logger = {\n      log: (...args) => webex.logger.log(args.join(' : ')),\n      error: (...args) => webex.logger.error(args.join(' : ')),\n      warn: (...args) => webex.logger.warn(args.join(' : ')),\n      info: (...args) => webex.logger.info(args.join(' : ')),\n      trace: (...args) => webex.logger.trace(args.join(' : ')),\n      debug: (...args) => webex.logger.debug(args.join(' : ')),\n    };\n\n    this.mediaEngine.setLogger(adaptedLogger);\n\n    this.primaryMobiusUris = [];\n    this.backupMobiusUris = [];\n    let mobiusServiceHost = '';\n    try {\n      mobiusServiceHost = new URL(this.webex.internal.services._serviceUrls.mobius).host;\n    } catch (error) {\n      log.warn(`Failed to parse mobius service URL`, {\n        file: CALLING_CLIENT_FILE,\n        method: this.constructor.name,\n      });\n    }\n\n    this.mobiusClusters =\n      (mobiusServiceHost && this.webex.internal.services._hostCatalog[mobiusServiceHost]) ||\n      this.webex.internal.services._hostCatalog[MOBIUS_US_PROD] ||\n      this.webex.internal.services._hostCatalog[MOBIUS_EU_PROD] ||\n      this.webex.internal.services._hostCatalog[MOBIUS_US_INT] ||\n      this.webex.internal.services._hostCatalog[MOBIUS_EU_INT];\n    this.mobiusHost = '';\n\n    this.registerSessionsListener();\n\n    this.registerCallsClearedListener();\n  }\n\n  // async calls required to run after constructor\n\n  /**\n   * Initializes the `CallingClient` by performing the following steps:\n   *\n   * 1. Retrieves list of servers.\n   * 2. Creates a line.\n   * 3. Sets up network change detection.\n   *\n   * This method should be called once to initialize the `callingClient`.\n   *\n   * @returns A promise that resolves when the initialization is complete.\n   * @ignore\n   */\n  public async init() {\n    await this.getMobiusServers();\n    await this.createLine();\n\n    /* Better to run the timer once rather than after every registration */\n    this.detectNetworkChange();\n  }\n\n  /**\n   * Register callbacks for network changes.\n   */\n  private async detectNetworkChange() {\n    log.info(METHOD_START_MESSAGE, {\n      file: CALLING_CLIENT_FILE,\n      method: METHODS.DETECT_NETWORK_CHANGE,\n    });\n    let retry = false;\n\n    // this is a temporary logic to get registration obj\n    // it will change once we have proper lineId and multiple lines as well\n    const line = Object.values(this.lineDict)[0];\n\n    setInterval(async () => {\n      if (\n        !this.webex.internal.mercury.connected &&\n        !retry &&\n        !Object.keys(this.callManager.getActiveCalls()).length\n      ) {\n        log.warn(`Network has flapped, waiting for mercury connection to be up`, {\n          file: CALLING_CLIENT_FILE,\n          method: METHODS.DETECT_NETWORK_CHANGE,\n        });\n\n        line.registration.clearKeepaliveTimer();\n\n        retry = true;\n      }\n\n      if (retry && this.webex.internal.mercury.connected) {\n        if (line.getStatus() !== RegistrationStatus.IDLE) {\n          retry = await line.registration.handleConnectionRestoration(retry);\n        } else {\n          retry = false;\n        }\n      }\n    }, NETWORK_FLAP_TIMEOUT);\n  }\n\n  /**\n   * Fetches countryCode and region of the client.\n   */\n  private async getClientRegionInfo(): Promise<RegionInfo> {\n    log.info(METHOD_START_MESSAGE, {\n      file: CALLING_CLIENT_FILE,\n      method: METHODS.GET_CLIENT_REGION_INFO,\n    });\n    const regionInfo = {} as RegionInfo;\n\n    for (const mobius of this.mobiusClusters) {\n      this.mobiusHost = `https://${mobius.host}${API_V1}`;\n\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        const temp = <WebexRequestPayload>await this.webex.request({\n          uri: `${this.mobiusHost}${URL_ENDPOINT}${IP_ENDPOINT}`,\n          method: HTTP_METHODS.GET,\n          headers: {\n            [CISCO_DEVICE_URL]: this.webex.internal.device.url,\n            [SPARK_USER_AGENT]: CALLING_USER_AGENT,\n          },\n          service: ALLOWED_SERVICES.MOBIUS,\n        });\n\n        const myIP = (temp.body as IpInfo).ipv4;\n        // eslint-disable-next-line no-await-in-loop\n        const response = <WebexRequestPayload>await this.webex.request({\n          uri: `${DISCOVERY_URL}/${myIP}`,\n          method: HTTP_METHODS.GET,\n          addAuthHeader: false,\n          headers: {\n            [SPARK_USER_AGENT]: null,\n          },\n        });\n\n        const clientRegionInfo = response.body as ClientRegionInfo;\n\n        regionInfo.clientRegion = clientRegionInfo?.clientRegion\n          ? clientRegionInfo.clientRegion\n          : '';\n\n        regionInfo.countryCode = clientRegionInfo?.countryCode ? clientRegionInfo.countryCode : '';\n        break;\n      } catch (err: unknown) {\n        const extendedError = new Error(\n          `Failed to get client region info: ${err}`\n        ) as ExtendedError;\n        log.error(extendedError, {\n          method: METHODS.GET_CLIENT_REGION_INFO,\n          file: CALLING_CLIENT_FILE,\n        });\n\n        handleCallingClientErrors(\n          err as WebexRequestPayload,\n          (clientError) => {\n            this.metricManager.submitRegistrationMetric(\n              METRIC_EVENT.REGISTRATION_ERROR,\n              REG_ACTION.REGISTER,\n              METRIC_TYPE.BEHAVIORAL,\n              clientError\n            );\n            this.emit(CALLING_CLIENT_EVENT_KEYS.ERROR, clientError);\n          },\n          {method: GET_MOBIUS_SERVERS_UTIL, file: CALLING_CLIENT_FILE}\n        );\n        regionInfo.clientRegion = '';\n        regionInfo.countryCode = '';\n      }\n    }\n\n    return regionInfo;\n  }\n\n  /**\n   * Local method for finding the mobius servers.\n   */\n  private async getMobiusServers() {\n    log.info(METHOD_START_MESSAGE, {\n      file: CALLING_CLIENT_FILE,\n      method: METHODS.GET_MOBIUS_SERVERS,\n    });\n    /* Following operations are performed in a synchronous way ->\n\n        1. Get RegionInfo\n        2. Get Mobius Server with that RegionInfo\n        3. Check whether Mobius server was found without any error\n        4. If there is error , we don't need to send registration\n        5. Otherwise send registration\n        */\n\n    let useDefault = false;\n\n    let clientRegion: string;\n    let countryCode: string;\n\n    if (this.sdkConfig?.discovery?.country && this.sdkConfig?.discovery?.region) {\n      log.log('Updating region and country from the SDK config', {\n        file: CALLING_CLIENT_FILE,\n        method: GET_MOBIUS_SERVERS_UTIL,\n      });\n      clientRegion = this.sdkConfig?.discovery?.region;\n      countryCode = this.sdkConfig?.discovery?.country;\n      this.mobiusHost = this.webex.internal.services._serviceUrls.mobius;\n    } else {\n      log.log('Updating region and country through Region discovery', {\n        file: CALLING_CLIENT_FILE,\n        method: GET_MOBIUS_SERVERS_UTIL,\n      });\n\n      const regionInfo = await this.getClientRegionInfo();\n\n      clientRegion = regionInfo.clientRegion;\n      countryCode = regionInfo.countryCode;\n    }\n\n    if (clientRegion && countryCode) {\n      log.log(\n        `Found Region: ${clientRegion} and country: ${countryCode}, going to fetch Mobius server`,\n        '' as LogContext\n      );\n\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        const temp = <WebexRequestPayload>await this.webex.request({\n          uri: `${this.mobiusHost}${URL_ENDPOINT}?regionCode=${clientRegion}&countryCode=${countryCode}`,\n          method: HTTP_METHODS.GET,\n          headers: {\n            [CISCO_DEVICE_URL]: this.webex.internal.device.url,\n            [SPARK_USER_AGENT]: CALLING_USER_AGENT,\n          },\n          service: ALLOWED_SERVICES.MOBIUS,\n        });\n\n        log.log('Mobius Server found for the region', '' as LogContext);\n        const mobiusServers = temp.body as MobiusServers;\n\n        /* update arrays of Mobius Uris. */\n        const mobiusUris = filterMobiusUris(mobiusServers, this.mobiusHost);\n        this.primaryMobiusUris = mobiusUris.primary;\n        this.backupMobiusUris = mobiusUris.backup;\n        log.info(\n          `Final list of Mobius Servers, primary: ${mobiusUris.primary} and backup: ${mobiusUris.backup}`,\n          '' as LogContext\n        );\n      } catch (err: unknown) {\n        const extendedError = new Error(`Failed to get Mobius servers: ${err}`) as ExtendedError;\n        log.error(extendedError, {\n          method: METHODS.GET_MOBIUS_SERVERS,\n          file: CALLING_CLIENT_FILE,\n        });\n\n        handleCallingClientErrors(\n          err as WebexRequestPayload,\n          (clientError) => {\n            this.metricManager.submitRegistrationMetric(\n              METRIC_EVENT.REGISTRATION_ERROR,\n              REG_ACTION.REGISTER,\n              METRIC_TYPE.BEHAVIORAL,\n              clientError\n            );\n            this.emit(CALLING_CLIENT_EVENT_KEYS.ERROR, clientError);\n          },\n          {method: GET_MOBIUS_SERVERS_UTIL, file: CALLING_CLIENT_FILE}\n        );\n\n        useDefault = true;\n      }\n    } else {\n      /* Setting this to true because region info is possibly undefined */\n      useDefault = true;\n    }\n\n    /* Use a default URL if Mobius discovery fails either because of region info failure\n     * or because the discovered Mobius couldn't be reached\n     */\n\n    if (useDefault) {\n      log.warn(\n        `Couldn't resolve the region and country code. Defaulting to the catalog entries to discover mobius servers`,\n        '' as LogContext\n      );\n      this.mobiusHost = `https://${this.mobiusClusters[0].host}${API_V1}`;\n      this.primaryMobiusUris = [`${this.mobiusHost}${URL_ENDPOINT}`];\n    }\n  }\n\n  /**\n   * Registers a listener/handler for ALL_CALLS_CLEARED\n   * event emitted by callManager when all the calls\n   * present on sdk are cleaned up.\n   */\n  private registerCallsClearedListener() {\n    log.info(METHOD_START_MESSAGE, {\n      file: CALLING_CLIENT_FILE,\n      method: METHODS.REGISTER_CALLS_CLEARED_LISTENER,\n    });\n\n    this.callManager.on(CALLING_CLIENT_EVENT_KEYS.ALL_CALLS_CLEARED, this.callsClearedHandler);\n  }\n\n  /**\n   * Handler registered for ALL_CALLS_CLEARED event emitted by callManager.\n   *\n   * If re-register attempt was deferred earlier due to active call(s), then it\n   * will be attempted here on receiving a notification from callManager that all\n   * calls are cleaned up.\n   */\n  private callsClearedHandler = async () => {\n    log.info(METHOD_START_MESSAGE, {\n      file: CALLING_CLIENT_FILE,\n      method: METHODS.CALLS_CLEARED_HANDLER,\n    });\n    // this is a temporary logic to get registration obj\n    // it will change once we have proper lineId and multiple lines as well\n    const {registration} = Object.values(this.lineDict)[0];\n\n    if (!registration.isDeviceRegistered()) {\n      await this.mutex.runExclusive(async () => {\n        if (registration.isReconnectPending()) {\n          log.info('All calls cleared, reconnecting', {\n            file: CALLING_CLIENT_FILE,\n            method: CALLS_CLEARED_HANDLER_UTIL,\n          });\n          await registration.reconnectOnFailure(CALLS_CLEARED_HANDLER_UTIL);\n        }\n      });\n    }\n  };\n\n  /**\n   * To get the current log Level.\n   * @ignore\n   */\n  public getLoggingLevel(): LOGGER {\n    return log.getLogLevel();\n  }\n\n  /**\n   *  To return the `sdkConnector` instance that was used during sdk initialisation.\n   * @ignore\n   */\n  public getSDKConnector(): ISDKConnector {\n    return this.sdkConnector;\n  }\n\n  private registerSessionsListener() {\n    log.info(METHOD_START_MESSAGE, {\n      file: CALLING_CLIENT_FILE,\n      method: METHODS.REGISTER_SESSIONS_LISTENER,\n    });\n    this.sdkConnector.registerListener<CallSessionEvent>(\n      MOBIUS_EVENT_KEYS.CALL_SESSION_EVENT_INCLUSIVE,\n      async (event?: CallSessionEvent) => {\n        if (event && event.data.userSessions.userSessions) {\n          const sessionArr = event?.data.userSessions.userSessions;\n\n          if (sessionArr.length === 1) {\n            if (sessionArr[0].sessionType !== SessionType.WEBEX_CALLING) {\n              return;\n            }\n          }\n\n          for (let i = 0; i < sessionArr.length; i += 1) {\n            if (sessionArr[i].sessionType !== SessionType.WEBEX_CALLING) {\n              sessionArr.splice(i, 1);\n            }\n          }\n          this.emit(CALLING_CLIENT_EVENT_KEYS.USER_SESSION_INFO, event as CallSessionEvent);\n        }\n      }\n    );\n  }\n\n  /**\n   * Creates line object inside calling client per user\n   * NOTE: currently multiple lines are not supported\n   */\n  private async createLine(): Promise<void> {\n    log.info(METHOD_START_MESSAGE, {\n      file: CALLING_CLIENT_FILE,\n      method: METHODS.CREATE_LINE,\n    });\n    const line = new Line(\n      this.webex.internal.device.userId,\n      this.webex.internal.device.url,\n      this.mutex,\n      this.primaryMobiusUris,\n      this.backupMobiusUris,\n      this.getLoggingLevel(),\n      this.sdkConfig?.serviceData,\n      this.sdkConfig?.jwe\n    );\n\n    this.lineDict[line.lineId] = line;\n  }\n\n  /**\n   * Retrieves details of all the Line objects belonging to a User\n   * NOTE: currently multiple lines are not supported\n   */\n  public getLines(): Record<string, ILine> {\n    return this.lineDict;\n  }\n\n  /**\n   * Retrieves call objects for all the active calls present in the client\n   */\n  public getActiveCalls(): Record<string, ICall[]> {\n    const activeCalls = {};\n    const calls = this.callManager.getActiveCalls();\n    Object.keys(calls).forEach((correlationId) => {\n      const call = calls[correlationId];\n      if (!activeCalls[call.lineId]) {\n        activeCalls[call.lineId] = [];\n      }\n      activeCalls[call.lineId].push(call);\n    });\n\n    return activeCalls;\n  }\n\n  /**\n   * Retrieves call object for the connected call in the client\n   */\n  public getConnectedCall(): ICall | undefined {\n    let connectCall;\n    const calls = this.callManager.getActiveCalls();\n\n    Object.keys(calls).forEach((correlationId) => {\n      if (calls[correlationId].isConnected() && !calls[correlationId].isHeld()) {\n        connectCall = calls[correlationId];\n      }\n    });\n\n    return connectCall;\n  }\n\n  /**\n   * Uploads logs to help troubleshoot SDK issues.\n   *\n   * This method collects the current SDK logs including network requests, WebSocket\n   * messages, and client-side events, then securely submits them to Webex's diagnostics\n   * service. The returned tracking ID, feedbackID can be provided to Webex support for faster\n   * issue resolution.\n   * @returns Promise<UploadLogsResponse>\n   * @throws Error\n   */\n  public async uploadLogs(): Promise<UploadLogsResponse> {\n    const result = await uploadLogs({}, true);\n    if (!result) {\n      throw new Error('Failed to upload logs: No response received.');\n    }\n\n    return result;\n  }\n}\n\n/**\n * Create the `CallingClient` instance using the `webex` object and callingSdk `config`\n * @param webex - A webex instance.\n * @param config - Config to start the CallingClient with.\n */\nexport const createClient = async (\n  webex: WebexSDK,\n  config?: CallingClientConfig\n): Promise<ICallingClient> => {\n  const callingClientInstance = new CallingClient(webex, config);\n  await callingClientInstance.init();\n\n  return callingClientInstance;\n};\n"],"mappings":"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"}