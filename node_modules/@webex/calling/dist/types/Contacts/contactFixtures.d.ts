export declare const mockCity = "Edinburgh";
export declare const mockCountry = "UK";
export declare const mockState = "London";
export declare const mockStreet = "511, Houston Street";
export declare const mockZipCode = "455372";
export declare const mockCompany = "Intel";
export declare const mockDisplayNameOne = "Jane Doe";
export declare const mockFirstName = "Jane";
export declare const mockLastName = "Doe";
export declare const mockEmail = "jando567@gmail.com";
export declare const mockNumber1 = "jando@intel.com";
export declare const mockNumber2 = "6647384294";
export declare const mockSipAddress = "jando@go.webex.com";
export declare const mockTitle = "Director";
export declare const mockGroupName = "Other contacts";
export declare const mockAvatarURL = "avatar-prod-us-east-2.webexcontent.com";
export declare const mockDisplayNameTwo = "TestUser Webrtc";
export declare const mockContactResponseBodyOne: {
    contacts: ({
        avatarUrlDomain: string;
        contactId: string;
        contactType: string;
        encryptionKeyUrl: string;
        groups: string[];
        isMigration: boolean;
        meta: {
            created: string;
            lastModified: string;
        };
        ownerId: string;
        phoneNumbers: {
            type: string;
            value: string;
        }[];
        sipAddresses: {
            type: string;
            value: string;
        }[];
        addressInfo?: undefined;
        avatarURL?: undefined;
        companyName?: undefined;
        displayName?: undefined;
        emails?: undefined;
        firstName?: undefined;
        lastName?: undefined;
        title?: undefined;
    } | {
        addressInfo: {
            city: string;
            country: string;
            state: string;
            street: string;
            zipCode: string;
        };
        avatarUrlDomain: string;
        avatarURL: string;
        companyName: string;
        contactId: string;
        contactType: string;
        displayName: string;
        emails: {
            type: string;
            value: string;
        }[];
        encryptionKeyUrl: string;
        firstName: string;
        groups: string[];
        isMigration: boolean;
        lastName: string;
        meta: {
            created: string;
            lastModified: string;
        };
        ownerId: string;
        phoneNumbers: {
            type: string;
            value: string;
        }[];
        sipAddresses: {
            type: string;
            value: string;
        }[];
        title: string;
    })[];
    groups: {
        meta: {
            created: string;
            lastModified: string;
        };
        groupId: string;
        groupType: string;
        ownerId: string;
        displayName: string;
        members: string[];
        encryptionKeyUrl: string;
        isMigration: boolean;
    }[];
};
export declare const mockContactResponseBodyTwo: {
    contacts: {
        avatarUrlDomain: string;
        contactId: string;
        contactType: string;
        displayName: string;
        encryptionKeyUrl: string;
        groups: string[];
        ownerId: string;
    }[];
    groups: {
        meta: {
            created: string;
            lastModified: string;
        };
        groupId: string;
        groupType: string;
        ownerId: string;
        displayName: string;
        members: string[];
        encryptionKeyUrl: string;
        isMigration: boolean;
    }[];
};
export declare const mockContactResponseBodyThird: {
    contacts: never[];
    groups: never[];
    ownerId: string;
};
export declare const mockContactListOne: ({
    addressInfo: {
        city: string;
        country: string;
        state: string;
        street: string;
        zipCode: string;
    };
    avatarUrlDomain: string;
    companyName: string;
    contactId: string;
    contactType: string;
    displayName: string;
    emails: {
        type: string;
        value: string;
    }[];
    encryptionKeyUrl: string;
    firstName: string;
    groups: string[];
    lastName: string;
    ownerId: string;
    phoneNumbers: {
        type: string;
        value: string;
    }[];
    sipAddresses: {
        type: string;
        value: string;
    }[];
    title: string;
    isMigration: boolean;
    meta: {
        created: string;
        lastModified: string;
    };
    avatarURL: string;
    department?: undefined;
    manager?: undefined;
} | {
    avatarUrlDomain: string;
    contactId: string;
    contactType: string;
    department: string;
    displayName: string;
    emails: {
        value: string;
    }[];
    encryptionKeyUrl: string;
    firstName: string;
    groups: string[];
    lastName: string;
    manager: string;
    ownerId: string;
    phoneNumbers: {
        type: string;
        value: string;
    }[];
    sipAddresses: ({
        type: string;
        value: string;
        primary: boolean;
    } | {
        type: string;
        value: string;
        primary?: undefined;
    })[];
    title: string;
    avatarURL: string;
    addressInfo?: undefined;
    companyName?: undefined;
    isMigration?: undefined;
    meta?: undefined;
})[];
export declare const mockContactListTwo: {
    avatarUrlDomain: string;
    contactId: string;
    contactType: string;
    displayName: string;
    encryptionKeyUrl: string;
    groups: string[];
    ownerId: string;
}[];
export declare const mockContactGroupListOne: {
    meta: {
        created: string;
        lastModified: string;
    };
    groupId: string;
    groupType: string;
    ownerId: string;
    displayName: string;
    members: string[];
    encryptionKeyUrl: string;
    isMigration: boolean;
}[];
export declare const mockContactGroupListTwo: {
    meta: {
        created: string;
        lastModified: string;
    };
    groupId: string;
    groupType: string;
    ownerId: string;
    displayName: string;
    members: string[];
    encryptionKeyUrl: string;
    isMigration: boolean;
}[];
export declare const mockContactMinimum: {
    contactId: string;
    contactType: string;
    encryptionKeyUrl: string;
    groups: string[];
    ownerId: string;
};
export declare const scimUserMinimum: {
    schemas: string[];
    id: string;
    userName: string;
    userType: string;
};
export declare const mockSCIMListResponse: {
    statusCode: number;
    body: {
        schemas: string[];
        totalResults: number;
        itemsPerPage: number;
        startIndex: number;
        Resources: {
            schemas: string[];
            id: string;
            userName: string;
            active: boolean;
            name: {
                familyName: string;
                givenName: string;
            };
            displayName: string;
            emails: {
                value: string;
                type: string;
                primary: boolean;
            }[];
            userType: string;
            phoneNumbers: {
                value: string;
                type: string;
            }[];
            addresses: {
                type: string;
                streetAddress: string;
                locality: string;
                region: string;
                postalCode: string;
                country: string;
            }[];
            'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User': {
                department: string;
                manager: {
                    value: string;
                    displayName: string;
                    $ref: string;
                };
            };
            'urn:scim:schemas:extension:cisco:webexidentity:2.0:User': {
                isTeamsOnJabberEnabled: boolean;
                isUCCallOnJabberEnabled: boolean;
                licenseID: string[];
                userSettings: string[];
                userPreferences: string[];
                sipAddresses: ({
                    value: string;
                    type: string;
                    primary?: undefined;
                } | {
                    value: string;
                    type: string;
                    primary: boolean;
                })[];
                meta: {
                    organizationId: string;
                };
                userNameType: string;
            };
            meta: {
                resourceType: string;
                location: string;
                version: string;
                created: string;
                lastModified: string;
            };
        }[];
    };
};
export declare const mockSCIMMinListResponse: {
    statusCode: number;
    body: {
        schemas: string[];
        totalResults: number;
        itemsPerPage: number;
        startIndex: number;
        Resources: {
            schemas: string[];
            id: string;
            userName: string;
            userType: string;
        }[];
    };
};
export declare const mockKmsKey: {
    uri: string;
};
//# sourceMappingURL=contactFixtures.d.ts.map