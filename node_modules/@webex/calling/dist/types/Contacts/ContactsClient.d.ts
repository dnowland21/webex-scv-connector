import { LoggerInterface } from '../Voicemail/types';
import { ISDKConnector, WebexSDK } from '../SDKConnector/types';
import { Contact, ContactResponse, IContacts, GroupType } from './types';
export declare class ContactsClient implements IContacts {
    private sdkConnector;
    private encryptionKeyUrl;
    private webex;
    private groups;
    private contacts;
    private defaultGroupId;
    constructor(webex: WebexSDK, logger: LoggerInterface);
    private decryptContactDetail;
    private encryptContactDetail;
    private encryptContact;
    private decryptContact;
    private resolveCloudContacts;
    getContacts(): Promise<ContactResponse>;
    private createNewEncryptionKeyUrl;
    private fetchEncryptionKeyUrl;
    private fetchDefaultGroup;
    createContactGroup(displayName: string, encryptionKeyUrl?: string, groupType?: GroupType): Promise<ContactResponse>;
    deleteContactGroup(groupId: string): Promise<import("..").JanusResponseEvent | import("../CallHistory/types").UpdateMissedCallsResponse | import("../CallHistory/types").UCMLinesResponse | import("../CallHistory/types").DeleteCallHistoryRecordsResponse | import("../Voicemail/types").VoicemailResponseEvent | import("..").CallSettingResponse | ContactResponse>;
    createContact(contactInfo: Contact): Promise<ContactResponse>;
    deleteContact(contactId: string): Promise<ContactResponse>;
    getSDKConnector(): ISDKConnector;
}
export declare const createContactsClient: (webex: WebexSDK, logger: LoggerInterface) => IContacts;
//# sourceMappingURL=ContactsClient.d.ts.map