import { ISDKConnector } from '../SDKConnector/types';
import { Address, PhoneNumber, URIAddress } from '../common/types';
export declare enum ContactType {
    CUSTOM = "CUSTOM",
    CLOUD = "CLOUD"
}
export type Contact = {
    addressInfo?: Address;
    avatarURL?: string;
    avatarUrlDomain?: string;
    companyName?: string;
    contactId: string;
    contactType: ContactType;
    department?: string;
    displayName?: string;
    emails?: URIAddress[];
    encryptionKeyUrl: string;
    firstName?: string;
    groups: string[];
    kmsResourceObjectUrl?: string;
    lastName?: string;
    manager?: string;
    ownerId?: string;
    phoneNumbers?: PhoneNumber[];
    primaryContactMethod?: string;
    schemas?: string;
    sipAddresses?: URIAddress[];
    resolved: boolean;
};
export declare enum GroupType {
    NORMAL = "NORMAL",
    EXTERNAL = "EXTERNAL"
}
export type ContactGroup = {
    displayName: string;
    encryptionKeyUrl: string;
    groupId: string;
    groupType: GroupType;
    members?: string[];
    ownerId?: string;
};
export type ContactList = {
    contacts: Contact[];
    groups: ContactGroup[];
};
export type ContactResponse = {
    statusCode: number;
    data: {
        contacts?: Contact[];
        groups?: ContactGroup[];
        contact?: Contact;
        group?: ContactGroup;
        error?: string;
    };
    message: string | null;
};
export interface IContacts {
    getSDKConnector: () => ISDKConnector;
    getContacts(): Promise<ContactResponse>;
    createContactGroup(displayName: string, encryptionKeyUrl?: string, groupType?: GroupType): Promise<ContactResponse>;
    deleteContactGroup(groupId: string): Promise<ContactResponse>;
    createContact(contactInfo: Contact): Promise<ContactResponse>;
    deleteContact(contactId: string): Promise<ContactResponse>;
}
export type ContactIdContactInfo = {
    [Key: string]: Contact;
};
//# sourceMappingURL=types.d.ts.map