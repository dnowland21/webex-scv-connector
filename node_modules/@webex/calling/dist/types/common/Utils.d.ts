import { restoreRegistrationCallBack, retry429CallBack } from '../CallingClient/registration/types';
import { CallingClientErrorEmitterCallback } from '../CallingClient/types';
import { LogContext } from '../Logger/types';
import { CallErrorEmitterCallBack, CallRtpStats, RetryCallBack } from '../CallingClient/calling/types';
import { ERROR_LAYER } from '../Errors/types';
import { CALLING_BACKEND, CorrelationId, DecodeType, DisplayInformation, LogsMetaData, MobiusServers, SORT, ServiceData, UploadLogsResponse, WebexRequestPayload } from './types';
import { DeleteCallHistoryRecordsResponse, JanusResponseEvent, UCMLinesResponse, UpdateMissedCallsResponse } from '../CallHistory/types';
import { VoicemailResponseEvent, MessageInfo, CallingPartyInfo, FilteredVoicemail } from '../Voicemail/types';
import { WebexSDK } from '../SDKConnector/types';
import { CallSettingResponse } from '../CallSettings/types';
import { ContactResponse } from '../Contacts/types';
import { LineErrorEmitterCallback } from '../CallingClient/line/types';
export declare function filterMobiusUris(mobiusServers: MobiusServers, defaultMobiusUrl: string): {
    primary: string[];
    backup: string[];
};
export declare function emitFinalFailure(emitterCb: LineErrorEmitterCallback, loggerContext: LogContext): void;
export declare function handleRegistrationErrors(err: WebexRequestPayload, emitterCb: LineErrorEmitterCallback, loggerContext: LogContext, retry429Cb?: retry429CallBack, restoreRegCb?: restoreRegistrationCallBack): Promise<boolean>;
export declare function handleCallingClientErrors(err: WebexRequestPayload, emitterCb: CallingClientErrorEmitterCallback, loggerContext: LogContext): Promise<boolean>;
export declare function handleCallErrors(emitterCb: CallErrorEmitterCallBack, errorLayer: ERROR_LAYER, retryCb: RetryCallBack, correlationId: CorrelationId, err: WebexRequestPayload, caller: string, file: string): Promise<void>;
export declare function serviceErrorCodeHandler(err: WebexRequestPayload, loggerContext: LogContext): Promise<JanusResponseEvent | VoicemailResponseEvent | CallSettingResponse | ContactResponse | UpdateMissedCallsResponse | UCMLinesResponse | DeleteCallHistoryRecordsResponse>;
export declare function parseMediaQualityStatistics(stats: RTCStatsReport): CallRtpStats;
export declare const waitForMsecs: (msec: number) => Promise<unknown>;
export declare function getCallingBackEnd(webex: WebexSDK): CALLING_BACKEND;
export declare function getXsiActionEndpoint(webex: WebexSDK, loggerContext: LogContext, callingBackend: CALLING_BACKEND): Promise<any>;
export declare function getVgActionEndpoint(webex: WebexSDK, callingBackend: CALLING_BACKEND): unknown;
export declare function getSortedVoicemailList(voiceMessageList: MessageInfo[], sortOrder: SORT): MessageInfo[];
export declare function scimQuery(filter: string): Promise<WebexRequestPayload>;
export declare function resolveCallerIdDisplay(filter: string): Promise<DisplayInformation>;
export declare function resolveCallerIdByName(name: string): Promise<DisplayInformation>;
export declare function resolveContact(callingPartyInfo: CallingPartyInfo): Promise<DisplayInformation | null>;
export declare function storeVoicemailList(context: string, voiceMessageList: MessageInfo[]): void;
export declare function fetchVoicemailList(context: string, offset: number, offsetLimit: number, loggerContext: LogContext): FilteredVoicemail;
export declare function inferIdFromUuid(id: string, decodeType: DecodeType): string;
export declare function validateServiceData(serviceData: ServiceData): void;
export declare function modifySdpForIPv4(sdp: string): string;
export declare function uploadLogs(metaData?: LogsMetaData, throwError?: boolean): Promise<UploadLogsResponse | undefined>;
//# sourceMappingURL=Utils.d.ts.map