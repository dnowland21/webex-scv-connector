import * as Media from '@webex/internal-media-core';
import { LOGGER } from '../Logger/types';
import { ISDKConnector, WebexSDK } from '../SDKConnector/types';
import { Eventing } from '../Events/impl';
import { CallingClientEventTypes } from '../Events/types';
import { UploadLogsResponse } from '../common/types';
import { ICallingClient, CallingClientConfig } from './types';
import { ICall } from './calling/types';
import { ILine } from './line/types';
export declare class CallingClient extends Eventing<CallingClientEventTypes> implements ICallingClient {
    private sdkConnector;
    private webex;
    private mutex;
    private callManager;
    private metricManager;
    private sdkConfig?;
    private primaryMobiusUris;
    private backupMobiusUris;
    private mobiusClusters;
    private mobiusHost;
    mediaEngine: typeof Media;
    private lineDict;
    constructor(webex: WebexSDK, config?: CallingClientConfig);
    init(): Promise<void>;
    private detectNetworkChange;
    private getClientRegionInfo;
    private getMobiusServers;
    private registerCallsClearedListener;
    private callsClearedHandler;
    getLoggingLevel(): LOGGER;
    getSDKConnector(): ISDKConnector;
    private registerSessionsListener;
    private createLine;
    getLines(): Record<string, ILine>;
    getActiveCalls(): Record<string, ICall[]>;
    getConnectedCall(): ICall | undefined;
    uploadLogs(): Promise<UploadLogsResponse>;
}
export declare const createClient: (webex: WebexSDK, config?: CallingClientConfig) => Promise<ICallingClient>;
//# sourceMappingURL=CallingClient.d.ts.map