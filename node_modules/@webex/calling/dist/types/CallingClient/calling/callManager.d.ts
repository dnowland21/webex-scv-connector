import { CallEventTypes } from '../../Events/types';
import { Eventing } from '../../Events/impl';
import { WebexSDK } from '../../SDKConnector/types';
import { CallDetails, CallDirection, CorrelationId, ServiceIndicator } from '../../common/types';
import { ICall, ICallManager } from './types';
import { ILine } from '../line/types';
export declare class CallManager extends Eventing<CallEventTypes> implements ICallManager {
    private sdkConnector;
    private webex;
    private callCollection;
    private activeMobiusUrl;
    private serviceIndicator;
    private lineDict;
    constructor(webex: WebexSDK, indicator: ServiceIndicator);
    createCall: (direction: CallDirection, deviceId: string, lineId: string, destination?: CallDetails) => ICall;
    updateActiveMobius(url: string): void;
    private listenForWsEvents;
    private dequeueWsEvents;
    getCall: (correlationId: CorrelationId) => ICall;
    getActiveCalls: () => Record<string, ICall>;
    updateLine(deviceId: string, line: ILine): void;
    private getLineId;
}
export declare const getCallManager: (webex: WebexSDK, indicator: ServiceIndicator) => ICallManager;
//# sourceMappingURL=callManager.d.ts.map