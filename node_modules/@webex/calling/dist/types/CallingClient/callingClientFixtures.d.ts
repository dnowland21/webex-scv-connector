import { WebexRequestPayload } from '../common/types';
declare const ipPayload: WebexRequestPayload;
declare const regionBody: {
    attribution: string;
    clientAddress: string;
    clientRegion: string;
    countryCode: string;
    disclaimer: string;
    regionCode: string;
    timezone: string;
};
declare const regionPayload: WebexRequestPayload;
declare const primaryUrl: string;
declare const discoveryPayload: WebexRequestPayload;
declare const registrationPayload: WebexRequestPayload;
declare const uri: string;
declare const myIP: string;
declare const mockUSServiceHosts: {
    host: string;
    ttl: number;
    priority: number;
    id: string;
}[];
declare const mockEUServiceHosts: {
    host: string;
    ttl: number;
    priority: number;
    id: string;
}[];
declare const mockEUIntServiceHosts: {
    host: string;
    ttl: number;
    priority: number;
    id: string;
}[];
declare const mockIntServiceHosts: {
    host: string;
    ttl: number;
    priority: number;
    id: string;
}[];
declare const mockCatalogEU: {
    'mobius-eu-central-1.prod.infra.webex.com': {
        host: string;
        ttl: number;
        priority: number;
        id: string;
    }[];
};
declare const mockCatalogEUInt: {
    'mobius-eu-central-1.int.infra.webex.com': {
        host: string;
        ttl: number;
        priority: number;
        id: string;
    }[];
};
declare const mockCatalogUS: {
    'mobius-us-east-1.prod.infra.webex.com': {
        host: string;
        ttl: number;
        priority: number;
        id: string;
    }[];
    'mobius-eu-central-1.prod.infra.webex.com': {
        host: string;
        ttl: number;
        priority: number;
        id: string;
    }[];
};
declare const mockCatalogUSInt: {
    'mobius-us-east-1.int.infra.webex.com': {
        host: string;
        ttl: number;
        priority: number;
        id: string;
    }[];
    'mobius-eu-central-1.int.infra.webex.com': {
        host: string;
        ttl: number;
        priority: number;
        id: string;
    }[];
};
export { ipPayload, regionBody, regionPayload, primaryUrl, discoveryPayload, registrationPayload, uri, myIP, mockEUServiceHosts, mockEUIntServiceHosts, mockIntServiceHosts, mockUSServiceHosts, mockCatalogEU, mockCatalogEUInt, mockCatalogUS, mockCatalogUSInt, };
//# sourceMappingURL=callingClientFixtures.d.ts.map