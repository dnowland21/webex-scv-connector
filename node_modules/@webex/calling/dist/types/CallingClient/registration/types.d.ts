import { IDeviceInfo, RegistrationStatus } from '../../common/types';
export type Header = {
    [key: string]: string;
};
export type restoreRegistrationCallBack = (restoreData: IDeviceInfo, caller: string) => Promise<boolean>;
export type retry429CallBack = (retryAfter: number, caller: string) => void;
export interface IRegistration {
    setMobiusServers(primaryMobiusUris: string[], backupMobiusUris: string[]): void;
    triggerRegistration(): Promise<void>;
    isDeviceRegistered(): boolean;
    setStatus(value: RegistrationStatus): void;
    getStatus(): RegistrationStatus;
    getDeviceInfo(): IDeviceInfo;
    clearKeepaliveTimer(): void;
    deregister(): void;
    setActiveMobiusUrl(url: string): void;
    getActiveMobiusUrl(): string;
    reconnectOnFailure(caller: string): Promise<void>;
    isReconnectPending(): boolean;
    handleConnectionRestoration(retry: boolean): Promise<boolean>;
}
//# sourceMappingURL=types.d.ts.map