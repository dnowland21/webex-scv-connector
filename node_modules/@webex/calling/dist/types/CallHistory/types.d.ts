import { Eventing } from '../Events/impl';
import { CallHistoryEventTypes, EndTimeSessionId, UserSession, UCMLinesApiResponse } from '../Events/types';
import { LOGGER } from '../Logger/types';
import { SORT, SORT_BY } from '../common/types';
export interface LoggerInterface {
    level: LOGGER;
}
export type JanusResponseEvent = {
    statusCode: number;
    data: {
        userSessions?: UserSession[];
        error?: string;
    };
    message: string | null;
};
export type UpdateMissedCallsResponse = {
    statusCode: number;
    data: {
        readStatusMessage?: string;
        error?: string;
    };
    message: string | null;
};
export type UCMLinesResponse = {
    statusCode: number;
    data: {
        lines?: UCMLinesApiResponse;
        error?: string;
    };
    message: string | null;
};
export type DeleteCallHistoryRecordsResponse = {
    statusCode: number;
    data: {
        deleteStatusMessage?: string;
        error?: string;
    };
    message: string | null;
};
export interface ICallHistory extends Eventing<CallHistoryEventTypes> {
    getCallHistoryData(days: number, limit: number, sort: SORT, sortBy: SORT_BY): Promise<JanusResponseEvent>;
    updateMissedCalls(endTimeSessionIds: EndTimeSessionId[]): Promise<UpdateMissedCallsResponse>;
    deleteCallHistoryRecords(deleteSessionIds: EndTimeSessionId[]): Promise<DeleteCallHistoryRecordsResponse>;
}
//# sourceMappingURL=types.d.ts.map