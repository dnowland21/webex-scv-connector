import { ISDKConnector, WebexSDK } from '../SDKConnector/types';
import { LoggerInterface, IWxCallBackendConnector, VoicemailResponseEvent, CallingPartyInfo } from './types';
import { DisplayInformation, SORT, WebexRequestPayload } from '../common/types';
export declare class WxCallBackendConnector implements IWxCallBackendConnector {
    xsiEndpoint: WebexRequestPayload;
    userId: string;
    private context;
    private sdkConnector;
    private xsiVoiceMessageURI;
    private webex;
    private authHeaders;
    constructor(webex: WebexSDK, logger: LoggerInterface);
    init(): Promise<VoicemailResponseEvent>;
    getSDKConnector(): ISDKConnector;
    private setXsiVoiceMessageURI;
    getVoicemailList(offset: number, offsetLimit: number, sort: SORT, refresh?: boolean): Promise<import("..").JanusResponseEvent | import("../CallHistory/types").UpdateMissedCallsResponse | import("../CallHistory/types").UCMLinesResponse | import("../CallHistory/types").DeleteCallHistoryRecordsResponse | VoicemailResponseEvent | import("..").CallSettingResponse | import("..").ContactResponse>;
    getVoicemailContent(messageId: string): Promise<VoicemailResponseEvent>;
    getVoicemailSummary(): Promise<VoicemailResponseEvent>;
    voicemailMarkAsRead(messageId: string): Promise<VoicemailResponseEvent>;
    voicemailMarkAsUnread(messageId: string): Promise<VoicemailResponseEvent>;
    deleteVoicemail(messageId: string): Promise<VoicemailResponseEvent>;
    getVMTranscript(messageId: string): Promise<VoicemailResponseEvent>;
    resolveContact(callingPartyInfo: CallingPartyInfo): Promise<DisplayInformation | null>;
    private getAuthHeaders;
}
//# sourceMappingURL=WxCallBackendConnector.d.ts.map