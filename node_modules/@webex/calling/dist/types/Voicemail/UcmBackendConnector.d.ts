import { ISDKConnector, WebexSDK } from '../SDKConnector/types';
import { SORT, DisplayInformation } from '../common/types';
import { CallingPartyInfo, IUcmBackendConnector, LoggerInterface, VoicemailResponseEvent } from './types';
export declare class UcmBackendConnector implements IUcmBackendConnector {
    vgEndpoint: string | unknown;
    userId: string;
    orgId: string;
    private sdkConnector;
    private webex;
    private vgVoiceMessageURI;
    constructor(webex: WebexSDK, logger: LoggerInterface);
    init(): VoicemailResponseEvent;
    getSDKConnector(): ISDKConnector;
    private setUcmVoiceMessageBaseURI;
    getVoicemailList(offset: number, offsetLimit: number, sort: SORT): Promise<import("..").JanusResponseEvent | import("../CallHistory/types").UpdateMissedCallsResponse | import("../CallHistory/types").UCMLinesResponse | import("../CallHistory/types").DeleteCallHistoryRecordsResponse | VoicemailResponseEvent | import("..").CallSettingResponse | import("..").ContactResponse>;
    getVoicemailContent(messageId: string): Promise<VoicemailResponseEvent>;
    getVoicemailSummary(): Promise<VoicemailResponseEvent | null>;
    getVoicemailContentUcm(messageId: string): Promise<unknown>;
    returnUcmPromise(voicemailContentUrl: string, mercuryApi: string): Promise<{
        statusCode: number;
        data: {
            voicemailContent: {
                type: string;
                content: string;
            };
        };
        message: string;
    }>;
    voicemailMarkAsRead(messageId: string): Promise<VoicemailResponseEvent>;
    voicemailMarkAsUnread(messageId: string): Promise<VoicemailResponseEvent>;
    deleteVoicemail(messageId: string): Promise<VoicemailResponseEvent>;
    getVMTranscript(messageId: string): Promise<VoicemailResponseEvent | null>;
    resolveContact(callingPartyInfo: CallingPartyInfo): Promise<DisplayInformation | null>;
}
//# sourceMappingURL=UcmBackendConnector.d.ts.map