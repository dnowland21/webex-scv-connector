import { ISDKConnector, WebexSDK } from '../SDKConnector/types';
import { LoggerInterface, IBroadworksCallBackendConnector, VoicemailResponseEvent, CallingPartyInfo } from './types';
import { DisplayInformation, SORT, WebexRequestPayload } from '../common/types';
export declare class BroadworksBackendConnector implements IBroadworksCallBackendConnector {
    bwtoken: string;
    userId: string;
    xsiAccessToken: string;
    xsiEndpoint: WebexRequestPayload;
    private context;
    private sdkConnector;
    private webex;
    private xsiVoiceMessageURI;
    constructor(webex: WebexSDK, logger: LoggerInterface);
    init(): VoicemailResponseEvent;
    getSDKConnector(): ISDKConnector;
    private getUserId;
    private getBwToken;
    private setXsiVoiceMessageURI;
    getVoicemailList(offset: number, offsetLimit: number, sort: SORT, refresh?: boolean): Promise<VoicemailResponseEvent>;
    getVoicemailContent(messageId: string): Promise<VoicemailResponseEvent>;
    getVoicemailSummary(): Promise<VoicemailResponseEvent | null>;
    voicemailMarkAsRead(messageId: string): Promise<VoicemailResponseEvent>;
    voicemailMarkAsUnread(messageId: string): Promise<VoicemailResponseEvent>;
    deleteVoicemail(messageId: string): Promise<VoicemailResponseEvent>;
    getVMTranscript(messageId: string): Promise<VoicemailResponseEvent | null>;
    resolveContact(callingPartyInfo: CallingPartyInfo): Promise<DisplayInformation | null>;
}
//# sourceMappingURL=BroadworksBackendConnector.d.ts.map