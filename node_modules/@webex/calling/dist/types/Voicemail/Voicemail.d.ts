import { ISDKConnector, WebexSDK } from '../SDKConnector/types';
import { IVoicemail, VoicemailResponseEvent, LoggerInterface, CallingPartyInfo } from './types';
import { DisplayInformation, SORT } from '../common/types';
import { VoicemailEventTypes } from '../Events/types';
import { Eventing } from '../Events/impl';
export declare class Voicemail extends Eventing<VoicemailEventTypes> implements IVoicemail {
    logger: LoggerInterface;
    private sdkConnector;
    private webex;
    private callingBackend;
    private backendConnector;
    private metricManager;
    constructor(webex: WebexSDK, logger: LoggerInterface);
    init(): VoicemailResponseEvent;
    private initializeBackendConnector;
    private submitMetric;
    getVoicemailList(offset: number, offsetLimit: number, sort: SORT, refresh?: boolean): Promise<VoicemailResponseEvent>;
    getVoicemailContent(messageId: string): Promise<VoicemailResponseEvent>;
    getVoicemailSummary(): Promise<VoicemailResponseEvent | null>;
    voicemailMarkAsRead(messageId: string): Promise<VoicemailResponseEvent>;
    voicemailMarkAsUnread(messageId: string): Promise<VoicemailResponseEvent>;
    deleteVoicemail(messageId: string): Promise<VoicemailResponseEvent>;
    getVMTranscript(messageId: string): Promise<VoicemailResponseEvent | null>;
    resolveContact(callingPartyInfo: CallingPartyInfo): Promise<DisplayInformation | null>;
    getSDKConnector(): ISDKConnector;
}
export declare const createVoicemailClient: (webex: WebexSDK, logger: LoggerInterface) => IVoicemail;
//# sourceMappingURL=Voicemail.d.ts.map