{"version":3,"names":["_webexCore","require","STATE","INITIAL","IN_PROGRESS","IDLE","IpNetworkDetector","WebexPlugin","extend","idAttribute","namespace","props","firstIpV4","firstIpV6","firstMdns","totalTime","state","pendingDetection","undefined","derived","supportsIpV4","deps","fn","receivedOnlyMDnsCandidates","supportsIpV6","gatherLocalCandidates","pc","_this","_asyncToGenerator2","default","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","_promise","resolve","reject","done","startTime","performance","now","doneGatheringIceCandidates","onicecandidate","event","_event$candidate","candidate","address","endsWith","includes","onicegatheringstatechange","iceGatheringState","createDataChannel","createOffer","then","offer","setLocalDescription","catch","e","webex","logger","error","stop","detect","_arguments","arguments","_this2","_callee2","force","results","forceParam","_callee2$","_context2","length","RTCPeerConnection","sent","close","finish","version","_default","exports"],"sources":["ipNetworkDetector.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-2023 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\n\nconst STATE = {\n  INITIAL: 'initial',\n  IN_PROGRESS: 'in-progress',\n  IDLE: 'idle',\n};\n\n/**\n * @class\n */\nconst IpNetworkDetector = WebexPlugin.extend({\n  idAttribute: 'IpNetworkDetectorId',\n\n  namespace: 'Device',\n\n  props: {\n    firstIpV4: ['number', true, -1], // time [ms] it took to receive first IPv4 candidate\n    firstIpV6: ['number', true, -1], // time [ms] it took to receive first IPv6 candidate\n    firstMdns: ['number', true, -1], // time [ms] it took to receive first mDNS candidate\n    totalTime: ['number', true, -1], // total time [ms] it took to do the last IP network detection\n    state: ['string', true, STATE.INITIAL],\n    pendingDetection: ['object', false, undefined],\n  },\n\n  derived: {\n    /**\n     * True if we know we're on an IPv4 network,\n     * False if we know that we are not on an IPv4 network,\n     * undefined if we are not sure\n     */\n    supportsIpV4: {\n      deps: ['firstIpV4', 'firstIpV6', 'firstMdns', 'totalTime'],\n      /**\n       * Function for calculating the value of supportsIpV4 prop\n       * @returns {boolean | undefined}\n       */\n      fn() {\n        if (this.firstIpV4 >= 0) {\n          return true;\n        }\n        if (this.totalTime < 0) {\n          // we haven't completed the detection, yet\n          return undefined;\n        }\n        if (this.receivedOnlyMDnsCandidates()) {\n          return undefined;\n        }\n\n        return false;\n      },\n    },\n    /**\n     * True if we know we're on an IPv6 network,\n     * False if we know that we are not on an IPv6 network,\n     * undefined if we are not sure\n     */\n    supportsIpV6: {\n      deps: ['firstIpV4', 'firstIpV6', 'firstMdns', 'totalTime'],\n      /**\n       * Function for calculating the value of supportsIpV6 prop\n       * @returns {boolean | undefined}\n       */ fn() {\n        if (this.firstIpV6 >= 0) {\n          return true;\n        }\n        if (this.totalTime < 0) {\n          // we haven't completed the detection, yet\n          return undefined;\n        }\n        if (this.receivedOnlyMDnsCandidates()) {\n          return undefined;\n        }\n\n        return false;\n      },\n    },\n  },\n\n  /**\n   * Returns true if we have received only mDNS candidates - browsers usually do that if we don't have any user media permissions\n   *\n   * @private\n   * @returns {boolean}\n   */\n  receivedOnlyMDnsCandidates() {\n    return this.totalTime >= 0 && this.firstMdns >= 0 && this.firstIpV4 < 0 && this.firstIpV6 < 0;\n  },\n\n  /**\n   *\n   * @param {RTCPeerConnection} pc Peer connection to use\n   * @private\n   * @returns {Promise<void>}\n   */\n  async gatherLocalCandidates(pc: RTCPeerConnection): Promise<void> {\n    return new Promise((resolve, reject) => {\n      let done = false;\n\n      this.firstIpV4 = -1;\n      this.firstIpV6 = -1;\n      this.firstMdns = -1;\n      this.totalTime = -1;\n      const startTime = performance.now();\n\n      const doneGatheringIceCandidates = () => {\n        if (done) {\n          return;\n        }\n        done = true;\n\n        this.totalTime = performance.now() - startTime;\n\n        resolve();\n      };\n\n      pc.onicecandidate = (event) => {\n        if (event.candidate?.address) {\n          if (event.candidate.address.endsWith('.local')) {\n            // if we don't have camera/mic permissions, browser just gives us mDNS candidates\n            if (this.firstMdns === -1) {\n              this.firstMdns = performance.now() - startTime;\n            }\n          } else if (event.candidate.address.includes(':')) {\n            if (this.firstIpV6 === -1) {\n              this.firstIpV6 = performance.now() - startTime;\n            }\n          } else if (this.firstIpV4 === -1) {\n            this.firstIpV4 = performance.now() - startTime;\n          }\n\n          if (this.firstIpV4 >= 0 && this.firstIpV6 >= 0) {\n            // if we've got both ipv4 and ipv6 candidates, there is no need to wait for any more candidates, we can resolve now\n            resolve();\n          }\n        } else if (event.candidate === null) {\n          doneGatheringIceCandidates();\n        }\n      };\n\n      pc.onicegatheringstatechange = () => {\n        if (pc.iceGatheringState === 'complete') {\n          doneGatheringIceCandidates();\n        }\n      };\n\n      pc.createDataChannel('data');\n\n      pc.createOffer()\n        .then((offer) => pc.setLocalDescription(offer))\n        .catch((e) => {\n          this.webex.logger.error('Failed to detect ip network version:', e);\n          reject(e);\n        });\n    });\n  },\n\n  /**\n   * Detects if we are on IPv4 and/or IPv6 network. Once it resolves, read the\n   * supportsIpV4 and supportsIpV6 props to find out the result.\n   *\n   * @param {boolean} force - if false, the detection will only be done if we haven't managed to get any meaningful results yet\n   * @returns {Promise<void>}\n   */\n  async detect(force = false) {\n    let results;\n    let pc;\n\n    if (this.state === STATE.IN_PROGRESS) {\n      this.pendingDetection = {force};\n\n      return;\n    }\n\n    if (!force && this.state !== STATE.INITIAL && !this.receivedOnlyMDnsCandidates()) {\n      // we already have the results, no need to do the detection again\n      return;\n    }\n\n    try {\n      this.state = STATE.IN_PROGRESS;\n\n      pc = new RTCPeerConnection();\n\n      results = await this.gatherLocalCandidates(pc);\n    } finally {\n      pc.close();\n      this.state = STATE.IDLE;\n    }\n\n    if (this.pendingDetection) {\n      const {force: forceParam} = this.pendingDetection;\n\n      this.pendingDetection = undefined;\n      this.detect(forceParam);\n    }\n  },\n});\n\nexport default IpNetworkDetector;\n"],"mappings":"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"}