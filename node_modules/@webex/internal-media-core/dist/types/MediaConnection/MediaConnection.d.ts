import { TransceiverStats } from '@webex/web-client-media-engine';
import { LoggerCallback as MetricsCallback } from '@webex/rtcstats';
import { EventEmitter } from '../EventEmitter';
import { Direction } from './utils';
import { ConnectionState, MediaConnectionEvents } from './eventTypes';
import { MediaConnectionConfig } from './config';
export interface LocalTracks {
    audio?: MediaStreamTrack | null;
    video?: MediaStreamTrack | null;
    screenShareVideo?: MediaStreamTrack | null;
}
export { Direction, TrackKind } from './utils';
export declare type RemoteQualityLevel = 'LOW' | 'MEDIUM' | 'HIGH';
export interface MediaDirection {
    audio: Direction;
    video: Direction;
    screenShareVideo: Direction;
}
export interface MediaOptions {
    localTracks: LocalTracks;
    direction: MediaDirection;
    remoteQualityLevel?: RemoteQualityLevel;
}
export declare class MediaConnection extends EventEmitter<MediaConnectionEvents> {
    private id?;
    private config;
    private pc;
    private localTracks;
    private transceivers;
    private mediaDirection;
    private remoteQualityLevel?;
    private metricsCallback;
    private forceStatsReport?;
    constructor(mediaConnectionConfig: MediaConnectionConfig, options: MediaOptions, metricsCallback?: MetricsCallback, debugId?: string);
    private log;
    private warn;
    private error;
    private createTransceivers;
    initializeTransceivers(incomingOffer: boolean): void;
    close(): void;
    getConfig(): MediaConnectionConfig;
    getMetricsCallback(): MetricsCallback;
    getSendReceiveOptions(): MediaOptions;
    updateRemoteQualityLevel(newValue?: RemoteQualityLevel): boolean;
    private updateTransceivers;
    updateLocalTracks(tracks: LocalTracks): boolean;
    updateDirection(direction: MediaDirection): boolean;
    update(options: MediaOptions): boolean;
    getPeerConnectionState(): RTCPeerConnectionState;
    getIceConnectionState(): RTCIceConnectionState;
    getConnectionState(): ConnectionState;
    getIceGatheringState(): RTCIceGatheringState;
    getStats(): Promise<RTCStatsReport>;
    getTransceiverStats(): Promise<TransceiverStats>;
    insertDTMF(tones: string, duration?: number, interToneGap?: number): void;
    private setupTransceiverListeners;
    private onToneChange;
    private identifyTransceivers;
    private onTrack;
    private addLocalTracks;
    private onPeerConnectionStateChange;
    private onIceConnectionStateChange;
    private evaluateMediaConnectionState;
    private createSdpMungingConfig;
    createLocalOffer(): Promise<{
        sdp: string;
    }>;
    handleRemoteOffer(sdp?: string): Promise<{
        sdp: string;
    }>;
    handleRemoteAnswer(sdp?: string): Promise<void>;
    private waitForIceCandidates;
    forceRtcMetricsCallback(): void;
}
//# sourceMappingURL=MediaConnection.d.ts.map