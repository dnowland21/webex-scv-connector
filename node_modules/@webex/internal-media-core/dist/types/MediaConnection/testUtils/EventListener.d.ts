import { EventMap } from 'typed-emitter';
import { EventEmitter } from '../../EventEmitter';
import { MediaConnectionEventNames, IceGatheringStateChangedEvent, PeerConnectionStateChangedEvent, IceConnectionStateChangedEvent, RemoteTrackAddedEvent, RoapMessageEvent, DtmfToneChangedEvent } from '../eventTypes';
export declare type LogFn = (action: string, description: string) => void;
export declare const AnyValue: any;
export declare type Options = {
    useChaiExpect?: boolean;
    strict?: boolean;
    debug?: string;
};
export declare type AnyEventData = IceGatheringStateChangedEvent | PeerConnectionStateChangedEvent | IceConnectionStateChangedEvent | RemoteTrackAddedEvent | RoapMessageEvent | DtmfToneChangedEvent | Error | undefined;
export declare class EventListener {
    private receivedEvents;
    private expectedNextEvent;
    private log;
    private options;
    constructor(emitter: EventEmitter<EventMap>, eventType: MediaConnectionEventNames, logFn: LogFn, options?: Options);
    reset(): void;
    private checkExpectation;
    private onEvent;
    waitForEvent: (expectedEvent: AnyEventData) => Promise<void>;
    getReceivedEvents(): AnyEventData[];
}
//# sourceMappingURL=EventListener.d.ts.map