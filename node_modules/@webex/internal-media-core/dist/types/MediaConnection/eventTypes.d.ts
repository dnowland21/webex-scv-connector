import { EventMap } from 'typed-emitter';
import { MediaContent } from '@webex/web-client-media-engine';
export { MediaContent, ConnectionState } from '@webex/web-client-media-engine';
export declare enum MediaConnectionEventNames {
    ICE_GATHERING_STATE_CHANGED = "iceGatheringState:changed",
    PEER_CONNECTION_STATE_CHANGED = "peerConnectionState:changed",
    ICE_CONNECTION_STATE_CHANGED = "iceConnectionState:changed",
    REMOTE_TRACK_ADDED = "remoteTrack:added",
    ROAP_MESSAGE_TO_SEND = "roap:messageToSend",
    ROAP_STARTED = "roap:started",
    ROAP_FAILURE = "roap:failure",
    ROAP_DONE = "roap:done",
    DTMF_TONE_CHANGED = "dtmfTone:changed",
    ACTIVE_SPEAKERS_CHANGED = "activeSpeakers:changed",
    VIDEO_SOURCES_COUNT_CHANGED = "videoSourcesCount:changed",
    AUDIO_SOURCES_COUNT_CHANGED = "audioSourcesCount:changed",
    REMOTE_SDP_ANSWER_PROCESSED = "remoteSdpAnswer:processed",
    REMOTE_SDP_OFFER_PROCESSED = "remoteSdpOffer:processed",
    LOCAL_SDP_OFFER_GENERATED = "localSdpOffer:processed",
    LOCAL_SDP_ANSWER_GENERATED = "localSdpAnswer:processed",
    ICE_CANDIDATE = "iceCandidate",
    ICE_CANDIDATE_ERROR = "iceCandidate:error"
}
export interface PeerConnectionStateChangedEvent {
    state: RTCPeerConnectionState;
}
export interface IceConnectionStateChangedEvent {
    state: RTCIceConnectionState;
}
export interface IceGatheringStateChangedEvent {
    state: RTCIceGatheringState;
}
export interface IceCandidateEvent {
    candidate: RTCIceCandidate | null;
}
export interface IceCandidateErrorEvent {
    error: RTCPeerConnectionIceErrorEvent;
}
export declare enum RemoteTrackType {
    AUDIO = "audio",
    VIDEO = "video",
    SCREENSHARE_VIDEO = "screenShareVideo"
}
export interface ActiveSpeakersChangedEvent {
    seqNum: number;
    csis: Array<number>;
}
export interface RemoteTrackAddedEvent {
    type: RemoteTrackType;
    track: MediaStreamTrack;
}
export declare enum ErrorType {
    DOUBLECONFLICT = "DOUBLECONFLICT",
    CONFLICT = "CONFLICT",
    FAILED = "FAILED",
    INVALID_STATE = "INVALID_STATE",
    NOMATCH = "NOMATCH",
    OUT_OF_ORDER = "OUT_OF_ORDER",
    REFUSED = "REFUSED",
    RETRY = "RETRY",
    TIMEOUT = "TIMEOUT"
}
export interface RoapMessage {
    seq: number;
    messageType: 'OFFER' | 'OFFER_REQUEST' | 'OFFER_RESPONSE' | 'ANSWER' | 'OK' | 'ERROR';
    sdp?: string;
    tieBreaker?: number;
    errorCause?: string;
    errorType?: ErrorType;
    retryAfter?: number;
    headers?: string[];
}
export interface RoapMessageEvent {
    roapMessage: RoapMessage;
}
export interface DtmfToneChangedEvent {
    tone: string;
}
export interface MediaConnectionEvents extends EventMap {
    [MediaConnectionEventNames.ICE_GATHERING_STATE_CHANGED]: (event: IceGatheringStateChangedEvent) => void;
    [MediaConnectionEventNames.PEER_CONNECTION_STATE_CHANGED]: (event: PeerConnectionStateChangedEvent) => void;
    [MediaConnectionEventNames.ICE_CONNECTION_STATE_CHANGED]: (event: IceConnectionStateChangedEvent) => void;
    [MediaConnectionEventNames.REMOTE_TRACK_ADDED]: (event: RemoteTrackAddedEvent) => void;
    [MediaConnectionEventNames.DTMF_TONE_CHANGED]: (event: DtmfToneChangedEvent) => void;
    [MediaConnectionEventNames.REMOTE_SDP_ANSWER_PROCESSED]: () => void;
    [MediaConnectionEventNames.ICE_CANDIDATE]: (candidate: IceCandidateEvent) => void;
    [MediaConnectionEventNames.ICE_CANDIDATE_ERROR]: (error: IceCandidateErrorEvent) => void;
}
export interface MultistreamConnectionEvents extends EventMap {
    [MediaConnectionEventNames.ACTIVE_SPEAKERS_CHANGED]: (event: ActiveSpeakersChangedEvent) => void;
    [MediaConnectionEventNames.VIDEO_SOURCES_COUNT_CHANGED]: (numTotalSources: number, numLiveSources: number, mediaContent: MediaContent) => void;
    [MediaConnectionEventNames.AUDIO_SOURCES_COUNT_CHANGED]: (numTotalSources: number, numLiveSources: number, mediaContent: MediaContent) => void;
}
export interface RoapEvents extends EventMap {
    [MediaConnectionEventNames.ROAP_DONE]: () => void;
    [MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND]: (event: RoapMessageEvent) => void;
    [MediaConnectionEventNames.ROAP_FAILURE]: (error: Error) => void;
}
//# sourceMappingURL=eventTypes.d.ts.map