import { MetricsCallback, TransceiverStats } from '@webex/web-client-media-engine';
import { EventEmitter } from '../EventEmitter';
import { LocalTracks, MediaDirection, MediaOptions, RemoteQualityLevel } from './MediaConnection';
import { RoapMessage, ConnectionState, RoapEvents, MediaConnectionEvents } from './eventTypes';
import { MediaConnectionConfig } from './config';
import { CloseCallback, SendMetricsCallback } from './types';
export declare class RoapMediaConnection extends EventEmitter<RoapEvents | MediaConnectionEvents> {
    private id;
    private debugId?;
    private mediaConnection;
    private roap;
    private sdpNegotiationStarted;
    private closeCallback;
    private sendMetricsCallback;
    constructor(mediaConnectionConfig: MediaConnectionConfig, options: MediaOptions, debugId?: string, metricsCallback?: MetricsCallback, closeCallback?: CloseCallback, sendMetricsCallback?: SendMetricsCallback);
    private log;
    private error;
    private forwardEvent;
    private createMediaConnection;
    private createRoap;
    initiateOffer(): Promise<void>;
    close(): void;
    forceRtcMetricsSend(): Promise<void>;
    private closeMediaConnection;
    private stopRoapSession;
    reconnect(iceServers: RTCIceServer[], initiateOffer?: boolean): Promise<void>;
    updateLocalTracks(tracks: LocalTracks): Promise<void>;
    updateDirection(direction: MediaDirection): Promise<void>;
    updateRemoteQualityLevel(newValue?: RemoteQualityLevel): Promise<void>;
    update(options: MediaOptions): Promise<void>;
    getPeerConnectionState(): RTCPeerConnectionState;
    getIceConnectionState(): RTCIceConnectionState;
    getConnectionState(): ConnectionState;
    getIceGatheringState(): RTCIceGatheringState;
    getStats(): Promise<RTCStatsReport>;
    getTransceiverStats(): Promise<TransceiverStats>;
    insertDTMF(tones: string, duration?: number, interToneGap?: number): void;
    roapMessageReceived(roapMessage: RoapMessage): void;
    private onRemoteTrack;
    private createLocalOffer;
    private handleRemoteOffer;
    private handleRemoteAnswer;
}
//# sourceMappingURL=RoapMediaConnection.d.ts.map