import { EventEmitter } from '../EventEmitter';
import { MultistreamRoapMediaConnection, RoapMediaConnection } from '../MediaConnection';
import { NetworkQualityMonitor } from './NetworkQualityMonitor';
import { StatsAnalyzerEvents } from './eventTypes';
import { ActualExpectedMediaStatus, StatsAnalyzerConfig } from './types';
export declare class StatsAnalyzer extends EventEmitter<StatsAnalyzerEvents> {
    private config;
    private lastEmittedStartStopEvents;
    private previousTransceiverStats?;
    private meetingMediaStatus?;
    private statsInterval?;
    private mqeInterval?;
    private mqeSentCount;
    private networkQualityMonitor;
    private mediaConnection;
    private statsStarted;
    private mqeIntervalSessionReceiveAudioMainBuilder;
    private mqeIntervalSessionReceiveAudioSlidesBuilder;
    private mqeIntervalSessionTransmitAudioMainBuilder;
    private mqeIntervalSessionTransmitAudioSlidesBuilder;
    private mqeIntervalSessionReceiveVideoMainBuilder;
    private mqeIntervalSessionReceiveVideoSlidesBuilder;
    private mqeIntervalSessionTransmitVideoMainBuilder;
    private mqeIntervalSessionTransmitVideoSlidesBuilder;
    constructor({ config, networkQualityMonitor, isMultistream, }: {
        config: StatsAnalyzerConfig;
        networkQualityMonitor: NetworkQualityMonitor;
        isMultistream?: boolean;
    });
    private get builders();
    getLocalIpAddress(): string | undefined;
    getNetworkType(): string | undefined;
    get shareVideoEncoderImplementation(): string | undefined;
    private get peerReflexiveIp();
    private get remoteMediaIp();
    updateMediaStatus(status: Partial<ActualExpectedMediaStatus>): void;
    private sendMqeData;
    startAnalyzer(mediaConnection: MultistreamRoapMediaConnection | RoapMediaConnection): Promise<void>;
    stopAnalyzer(): Promise<void>;
    private emitStartStopEvents;
    private getStatsAndUpdate;
    private monitorStats;
}
//# sourceMappingURL=StatsAnalyzer.d.ts.map