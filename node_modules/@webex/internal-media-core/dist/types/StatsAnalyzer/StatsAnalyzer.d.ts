import { EventEmitter } from '../EventEmitter';
import { ActualExpectedMediaStatus, MqaData, StatsAnalyzerConfig, StatsResults } from './types';
import { MultistreamRoapMediaConnection, RoapMediaConnection } from '../MediaConnection';
import { LastEmittedStartStopEvents, StatsAnalyzerEvents } from './eventTypes';
import { NetworkQualityMonitor } from './NetworkQualityMonitor';
export declare class StatsAnalyzer extends EventEmitter<StatsAnalyzerEvents> {
    config: StatsAnalyzerConfig;
    correlationId: string | undefined;
    lastEmittedStartStopEvents: LastEmittedStartStopEvents;
    lastMqaDataSent: MqaData;
    lastStatsResults: StatsResults | null;
    meetingMediaStatus?: ActualExpectedMediaStatus;
    mqaInterval?: ReturnType<typeof setTimeout>;
    mqaSentCount: number;
    networkQualityMonitor: NetworkQualityMonitor;
    mediaConnection: MultistreamRoapMediaConnection | RoapMediaConnection | null;
    statsInterval?: ReturnType<typeof setTimeout>;
    statsResults: StatsResults;
    statsStarted: boolean;
    successfulCandidatePair: Record<string, any>;
    localIpAddress: string;
    shareVideoEncoderImplementation?: string;
    isMultistream: boolean;
    constructor({ config, networkQualityMonitor, statsResults, isMultistream, }: {
        config: StatsAnalyzerConfig;
        networkQualityMonitor: NetworkQualityMonitor;
        statsResults?: StatsResults;
        isMultistream?: boolean;
    });
    private resetStatsResults;
    updateMediaStatus(status: Partial<ActualExpectedMediaStatus>): void;
    private sendMqaData;
    getLocalIpAddress(): string;
    startAnalyzer(mediaConnection: MultistreamRoapMediaConnection | RoapMediaConnection): Promise<void>;
    stopAnalyzer(): Promise<void>;
    private parseGetStatsResult;
    private filterAndParseGetStatsResults;
    private parseAudioSource;
    private parseCodec;
    private emitStartStopEvents;
    private compareLastStatsResult;
    private getStatsAndParse;
    private processOutboundRTPResult;
    private processInboundRTPResult;
    private extractAndSetLocalIpAddressInfoForDiagnostics;
    private parseCandidate;
    private compareSentAndReceived;
}
//# sourceMappingURL=StatsAnalyzer.d.ts.map