import { EventMap } from 'typed-emitter';
import { StatsMediaType } from './types';
import { MqeInterval } from './mqeTypes';
export declare enum StatsAnalyzerEventNames {
    MEDIA_QUALITY = "MEDIA_QUALITY",
    LOCAL_MEDIA_STARTED = "LOCAL_MEDIA_STARTED",
    LOCAL_MEDIA_STOPPED = "LOCAL_MEDIA_STOPPED",
    REMOTE_MEDIA_STARTED = "REMOTE_MEDIA_STARTED",
    REMOTE_MEDIA_STOPPED = "REMOTE_MEDIA_STOPPED"
}
export interface MediaQualityEvent {
    data: MqeInterval;
}
export interface MediaStartStopEvent {
    mediaType: StatsMediaType;
}
export interface StatsAnalyzerEvents extends EventMap {
    [StatsAnalyzerEventNames.MEDIA_QUALITY]: (event: MediaQualityEvent) => void;
    [StatsAnalyzerEventNames.LOCAL_MEDIA_STARTED]: (event: MediaStartStopEvent) => void;
    [StatsAnalyzerEventNames.LOCAL_MEDIA_STOPPED]: (event: MediaStartStopEvent) => void;
    [StatsAnalyzerEventNames.REMOTE_MEDIA_STARTED]: (event: MediaStartStopEvent) => void;
    [StatsAnalyzerEventNames.REMOTE_MEDIA_STOPPED]: (event: MediaStartStopEvent) => void;
}
export declare type LocalRemoteMediaStartedStopped = {
    local: StatsAnalyzerEventNames.LOCAL_MEDIA_STARTED | StatsAnalyzerEventNames.LOCAL_MEDIA_STOPPED;
    remote: StatsAnalyzerEventNames.REMOTE_MEDIA_STARTED | StatsAnalyzerEventNames.REMOTE_MEDIA_STOPPED;
};
export declare type LastEmittedStartStopEvents = Partial<{
    audio: Partial<LocalRemoteMediaStartedStopped>;
    video: Partial<LocalRemoteMediaStartedStopped>;
    share: Partial<LocalRemoteMediaStartedStopped>;
}>;
export declare enum NetworkQualityEventNames {
    NETWORK_QUALITY = "NETWORK_QUALITY"
}
interface NetworkQualityEvent {
    mediaType: string;
    networkQualityScore: number;
}
export interface NetworkQualityMonitorEvents extends EventMap {
    [NetworkQualityEventNames.NETWORK_QUALITY]: (event: NetworkQualityEvent) => void;
}
export {};
//# sourceMappingURL=eventTypes.d.ts.map