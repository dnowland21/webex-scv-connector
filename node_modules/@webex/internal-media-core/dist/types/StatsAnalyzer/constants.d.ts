import { StatsResults } from './types';
export declare const STATS_DEFAULT: StatsResults;
export declare const DEFAULT_GET_STATS_FILTER: {
    types: string[];
};
export declare const MQA_INTERVAL = 60000;
export declare const _UNKNOWN_ = "UNKNOWN";
export declare const emptyMqaInterval: {
    audioReceive: never[];
    audioTransmit: never[];
    intervalMetadata: {
        peerReflexiveIP: string;
        peripherals: never[];
        cpuInfo: {
            numberOfCores: number;
            description: string;
            architecture: string;
        };
        processAverageCPU: number;
        processMaximumCPU: number;
        systemAverageCPU: number;
        systemMaximumCPU: number;
        screenWidth: number;
        screenHeight: number;
        screenResolution: number;
        appWindowWidth: number;
        appWindowHeight: number;
        appWindowSize: number;
    };
    networkType: string;
    intervalNumber: number;
    videoReceive: never[];
    videoTransmit: never[];
};
export declare const emptyAudioReceive: {
    common: {
        common: {
            direction: string;
            isMain: boolean;
            mariFecEnabled: boolean;
            mariRtxEnabled: boolean;
            mariQosEnabled: boolean;
            mariLiteEnabled: boolean;
            multistreamEnabled: boolean;
        };
        dtlsBitrate: number;
        dtlsPackets: number;
        fecBitrate: number;
        fecPackets: number;
        maxBitrate: number;
        mediaHopByHopLost: number;
        rtcpBitrate: number;
        rtcpPackets: number;
        rtpBitrate: number;
        rtpHopByHopLost: number;
        rtpPackets: number;
        rtpRecovered: number;
        rtxBitrate: number;
        rtxPackets: number;
        srtcpUnprotectErrors: number;
        srtpUnprotectErrors: number;
        stunBitrate: number;
        stunPackets: number;
        transportType: string;
    };
    streams: never[];
};
export declare const emptyAudioReceiveStream: {
    common: {
        codec: string;
        concealedFrames: number;
        csi: never[];
        maxConcealRunLength: number;
        optimalBitrate: number;
        optimalFrameRate: number;
        receivedBitrate: number;
        receivedFrameRate: number;
        renderedFrameRate: number;
        requestedBitrate: number;
        requestedFrameRate: number;
        rtpEndToEndLost: number;
        maxRtpJitter: number;
        meanRtpJitter: number;
        rtpPackets: number;
        ssci: number;
    };
};
export declare const emptyAudioTransmit: {
    common: {
        availableBitrate: number;
        common: {
            direction: string;
            isMain: boolean;
            mariFecEnabled: boolean;
            mariRtxEnabled: boolean;
            mariQosEnabled: boolean;
            mariLiteEnabled: boolean;
            multistreamEnabled: boolean;
        };
        dtlsBitrate: number;
        dtlsPackets: number;
        fecBitrate: number;
        fecPackets: number;
        maxBitrate: number;
        queueDelay: number;
        remoteJitter: number;
        remoteLossRate: number;
        roundTripTime: number;
        rtcpBitrate: number;
        rtcpPackets: number;
        rtpBitrate: number;
        rtpPackets: number;
        rtxBitrate: number;
        rtxPackets: number;
        stunBitrate: number;
        stunPackets: number;
        transportType: string;
    };
    streams: never[];
};
export declare const emptyAudioTransmitStream: {
    common: {
        codec: string;
        csi: never[];
        requestedBitrate: number;
        requestedFrames: number;
        rtpPackets: number;
        ssci: number;
        transmittedBitrate: number;
        transmittedFrameRate: number;
    };
};
export declare const emptyVideoReceive: {
    common: {
        common: {
            direction: string;
            isMain: boolean;
            mariFecEnabled: boolean;
            mariRtxEnabled: boolean;
            mariQosEnabled: boolean;
            mariLiteEnabled: boolean;
            multistreamEnabled: boolean;
        };
        dtlsBitrate: number;
        dtlsPackets: number;
        fecBitrate: number;
        fecPackets: number;
        maxBitrate: number;
        mediaHopByHopLost: number;
        rtcpBitrate: number;
        rtcpPackets: number;
        rtpBitrate: number;
        rtpHopByHopLost: number;
        rtpPackets: number;
        rtpRecovered: number;
        rtxBitrate: number;
        rtxPackets: number;
        srtcpUnprotectErrors: number;
        srtpUnprotectErrors: number;
        stunBitrate: number;
        stunPackets: number;
        transportType: string;
    };
    streams: never[];
};
export declare const emptyVideoReceiveStream: {
    common: {
        codec: string;
        concealedFrames: number;
        csi: never[];
        maxConcealRunLength: number;
        optimalBitrate: number;
        optimalFrameRate: number;
        receivedBitrate: number;
        receivedFrameRate: number;
        renderedFrameRate: number;
        requestedBitrate: number;
        requestedFrameRate: number;
        rtpEndToEndLost: number;
        maxRtpJitter: number;
        meanRtpJitter: number;
        rtpPackets: number;
        ssci: number;
    };
    h264CodecProfile: string;
    isActiveSpeaker: boolean;
    optimalFrameSize: number;
    receivedFrameSize: number;
    receivedHeight: number;
    receivedKeyFrames: number;
    receivedKeyFramesForRequest: number;
    receivedKeyFramesSourceChange: number;
    receivedKeyFramesUnknown: number;
    receivedWidth: number;
    requestedFrameSize: number;
    requestedKeyFrames: number;
};
export declare const emptyVideoTransmit: {
    common: {
        availableBitrate: number;
        common: {
            direction: string;
            isMain: boolean;
            mariFecEnabled: boolean;
            mariRtxEnabled: boolean;
            mariQosEnabled: boolean;
            mariLiteEnabled: boolean;
            multistreamEnabled: boolean;
        };
        dtlsBitrate: number;
        dtlsPackets: number;
        fecBitrate: number;
        fecPackets: number;
        maxBitrate: number;
        queueDelay: number;
        remoteJitter: number;
        remoteLossRate: number;
        roundTripTime: number;
        rtcpBitrate: number;
        rtcpPackets: number;
        rtpBitrate: number;
        rtpPackets: number;
        rtxBitrate: number;
        rtxPackets: number;
        stunBitrate: number;
        stunPackets: number;
        transportType: string;
    };
    streams: never[];
};
export declare const emptyVideoTransmitStream: {
    common: {
        codec: string;
        csi: never[];
        duplicateSsci: number;
        requestedBitrate: number;
        requestedFrames: number;
        rtpPackets: number;
        ssci: number;
        transmittedBitrate: number;
        transmittedFrameRate: number;
    };
    h264CodecProfile: string;
    isAvatar: boolean;
    isHardwareEncoded: boolean;
    localConfigurationChanges: number;
    maxFrameQp: number;
    maxNoiseLevel: number;
    minRegionQp: number;
    remoteConfigurationChanges: number;
    requestedFrameSize: number;
    requestedKeyFrames: number;
    transmittedFrameSize: number;
    transmittedHeight: number;
    transmittedKeyFrames: number;
    transmittedKeyFramesClient: number;
    transmittedKeyFramesConfigurationChange: number;
    transmittedKeyFramesFeedback: number;
    transmittedKeyFramesLocalDrop: number;
    transmittedKeyFramesOtherLayer: number;
    transmittedKeyFramesPeriodic: number;
    transmittedKeyFramesSceneChange: number;
    transmittedKeyFramesStartup: number;
    transmittedKeyFramesUnknown: number;
    transmittedWidth: number;
};
export declare const emptySender: {
    trackLabel: string;
    maxPacketLossRatio: number;
    availableBandwidth: number;
    bytesSent: number;
    meanRemoteJitter: never[];
    meanRoundTripTime: never[];
};
export declare const emptyReceiver: {
    availableBandwidth: number;
    bytesReceived: number;
    meanRtpJitter: never[];
    meanRoundTripTime: never[];
};
export declare const VIDEO_FRAME_RATE_MULTIPLIER = 100;
export declare const NOISE_REDUCTION_MODE: {
    NONE: string;
    LOW_POWER: string;
};
export declare const VIRTUAL_BACKGROUND_MODE: {
    NONE: string;
    BLUR: string;
    REPLACE_IMAGE: string;
    REPLACE_VIDEO: string;
};
//# sourceMappingURL=constants.d.ts.map