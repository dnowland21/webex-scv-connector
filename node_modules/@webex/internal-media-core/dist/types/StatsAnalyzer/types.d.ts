import { Direction } from '../MediaConnection/utils';
export declare type StatsMediaType = 'audio' | 'video' | 'share';
export declare enum NetworkType {
    VPN = "vpn",
    UNKNOWN = "unknown",
    WIFI = "wifi",
    ETHERNET = "ethernet"
}
export declare enum MediaDevices {
    MICROPHONE = "microphone",
    SPEAKER = "speaker",
    CAMERA = "camera"
}
export declare enum MediaDirection {
    SEND = "send",
    RECEIVE = "recv"
}
export declare enum IpType {
    REMOTE = "remote",
    LOCAL = "local"
}
export declare type StatsAnalyzerConfig = {
    enableStatsAnalyzer: boolean;
    analyzerInterval: number;
    videoPacketLossRatioThreshold: number;
    rttThreshold: number;
    jitterThreshold: number;
    correlationId: string;
};
export declare type StatsResults = Record<string, any>;
export declare type MqaData = Record<string, any>;
export declare type GetStatsResults = Record<string, any>;
declare type MediaStatus = {
    mediaType: StatsMediaType;
    mediaContent: 'main' | 'slides';
    direction: Direction;
    state: string;
    csi: number;
    cameraCount?: number;
};
export declare type ActualExpectedMediaStatus = {
    actual: {
        audioStatus?: MediaStatus;
        videoStatus?: MediaStatus;
        shareStatus?: MediaStatus;
    };
    expected: {
        sendAudio?: boolean;
        sendVideo?: boolean;
        sendShare?: boolean;
        receiveAudio?: boolean;
        receiveVideo?: boolean;
        receiveShare?: boolean;
    };
};
export declare type NetworkQualityStatus = Record<string, any>;
export declare type NetworkQualityMonitorConfig = {
    videoPacketLossRatioThreshold: number;
    rttThreshold: number;
    jitterThreshold: number;
};
export declare type NetworkQualityFrequencyTypes = {
    UPLINK: 'uplink';
    DOWNLINK: 'downlink';
};
export declare type NetworkQualityIndicatorTypes = {
    PACKETLOSS: 'packetLoss';
    LATENCY: 'latency';
    JITTER: 'jitter';
};
export {};
//# sourceMappingURL=types.d.ts.map