import { MqeIntervalSessionCommon, MqeIntervalSessionReceive, MqeIntervalSessionTransmit, MqeIntervalStreamReceiveAudio, MqeIntervalStreamReceiveCommon, MqeIntervalStreamReceiveVideo, MqeIntervalStreamTransmitAudio, MqeIntervalStreamTransmitCommon, MqeIntervalStreamTransmitVideo } from './mqeTypes';
import { StatsMap } from './types';
export declare abstract class MqeBuilder {
    currentIntervalStats: StatsMap;
    previousIntervalStats: StatsMap;
    protected isMain: boolean;
    protected multistreamEnabled: boolean;
    protected direction: MqeIntervalSessionCommon['direction'];
    protected mediaKind: 'audio' | 'video';
    constructor(params: {
        isMain: boolean;
        multistreamEnabled: boolean;
        direction: MqeIntervalSessionCommon['direction'];
        mediaKind: 'audio' | 'video';
    });
    abstract buildMqe(): Record<string, unknown>;
    updateCurrentIntervalStats(newStats: StatsMap): void;
    reset(): void;
    resetForNextInterval(): void;
    protected buildMqeIntervalSessionCommon(): MqeIntervalSessionCommon;
    protected buildMqeIntervalSessionReceive(): MqeIntervalSessionReceive;
    protected buildMqeIntervalStreamReceiveAudio(id: string): MqeIntervalStreamReceiveAudio;
    protected buildMqeIntervalStreamReceiveVideo(id: string): MqeIntervalStreamReceiveVideo;
    protected buildMqeIntervalStreamReceiveCommon(id: string): MqeIntervalStreamReceiveCommon;
    protected buildMqeIntervalSessionTransmit(): MqeIntervalSessionTransmit;
    protected buildMqeIntervalStreamTransmitAudio(id: string): MqeIntervalStreamTransmitAudio;
    protected buildMqeIntervalStreamTransmitVideo(id: string): MqeIntervalStreamTransmitVideo;
    protected buildMqeIntervalStreamTransmitCommon(id: string): MqeIntervalStreamTransmitCommon;
}
//# sourceMappingURL=MqeBuilder.d.ts.map