'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  });
  return Object.freeze(n);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

var domain;

// This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).
function EventHandlers() {}
EventHandlers.prototype = Object.create(null);

function EventEmitter$6() {
  EventEmitter$6.init.call(this);
}

// nodejs oddity
// require('events') === require('events').EventEmitter
EventEmitter$6.EventEmitter = EventEmitter$6;

EventEmitter$6.usingDomains = false;

EventEmitter$6.prototype.domain = undefined;
EventEmitter$6.prototype._events = undefined;
EventEmitter$6.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter$6.defaultMaxListeners = 10;

EventEmitter$6.init = function() {
  this.domain = null;
  if (EventEmitter$6.usingDomains) {
    // if there is an active domain, then attach to it.
    if (domain.active ) ;
  }

  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$6.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter$6.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter$6.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone$3(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone$3(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone$3(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone$3(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone$3(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter$6.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events, domain;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  domain = this.domain;

  // If there is no 'error' event listener then throw.
  if (doError) {
    er = arguments[1];
    if (domain) {
      if (!er)
        er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain;
      er.domainThrown = false;
      domain.emit('error', er);
    } else if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener$3(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] :
                                          [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' ' + type + ' listeners added. ' +
                            'Use emitter.setMaxListeners() to increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }

  return target;
}
function emitWarning(e) {
  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
}
EventEmitter$6.prototype.addListener = function addListener(type, listener) {
  return _addListener$3(this, type, listener, false);
};

EventEmitter$6.prototype.on = EventEmitter$6.prototype.addListener;

EventEmitter$6.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener$3(this, type, listener, true);
    };

function _onceWrap$3(target, type, listener) {
  var fired = false;
  function g() {
    target.removeListener(type, g);
    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }
  g.listener = listener;
  return g;
}

EventEmitter$6.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap$3(this, type, listener));
  return this;
};

EventEmitter$6.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap$3(this, type, listener));
      return this;
    };

// emits a 'removeListener' event iff the listener was removed
EventEmitter$6.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || (list.listener && list.listener === listener)) {
        if (--this._eventsCount === 0)
          this._events = new EventHandlers();
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length; i-- > 0;) {
          if (list[i] === listener ||
              (list[i].listener && list[i].listener === listener)) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (list.length === 1) {
          list[0] = undefined;
          if (--this._eventsCount === 0) {
            this._events = new EventHandlers();
            return this;
          } else {
            delete events[type];
          }
        } else {
          spliceOne$3(list, position);
        }

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };
    
// Alias for removeListener added in NodeJS 10.0
// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
EventEmitter$6.prototype.off = function(type, listener){
    return this.removeListener(type, listener);
};

EventEmitter$6.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = new EventHandlers();
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        for (var i = 0, key; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = new EventHandlers();
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        do {
          this.removeListener(type, listeners[listeners.length - 1]);
        } while (listeners[0]);
      }

      return this;
    };

EventEmitter$6.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;

  if (!events)
    ret = [];
  else {
    evlistener = events[type];
    if (!evlistener)
      ret = [];
    else if (typeof evlistener === 'function')
      ret = [evlistener.listener || evlistener];
    else
      ret = unwrapListeners$3(evlistener);
  }

  return ret;
};

EventEmitter$6.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount$3.call(emitter, type);
  }
};

EventEmitter$6.prototype.listenerCount = listenerCount$3;
function listenerCount$3(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter$6.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne$3(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone$3(arr, i) {
  var copy = new Array(i);
  while (i--)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners$3(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

class EventEmitter$5 extends EventEmitter$6 {}

var MEDIA = 'MEDIA';
var DEVICE = 'DEVICE';
var MEDIA_STREAM_TRACK = 'MEDIA_STREAM_TRACK';

var LEVELS = {
  error: 1,
  warn: 2,
  info: 3,
  debug: 4
};
var logFormat = (level, logDetails) => {
  var {
    ID,
    mediaType,
    action,
    description,
    error
  } = logDetails;
  var timestamp = new Date().toISOString();
  var errorText = error ? error.stack ? "".concat(error.message, ": ").concat(error.stack) : "".concat(error) : '';
  return "".concat(timestamp, " ").concat(level, " ").concat(ID || '', " ").concat(mediaType, " ").concat(action, " ").concat(description, " ").concat(errorText).replace(/\s+/g, ' ').trim();
};
var currentLevel = 'error';
var log$3 = (level, args) => {
  if (LEVELS[level] <= LEVELS[currentLevel]) {
    console.log(logFormat(level, args));
  }
};
var logger$4 = {
  info: args => log$3('info', args),
  warn: args => log$3('warn', args),
  error: args => log$3('error', args),
  debug: args => log$3('debug', args)
};
var _loop = function _loop(level) {
  logger$4[level] = logInfo => {
    var {
      ID,
      mediaType,
      action,
      description,
      error
    } = logInfo;
    currentLevel = level;
    return log$3(level, {
      ID,
      mediaType,
      action,
      description,
      error
    });
  };
};
for (var level of ['info', 'warn', 'error', 'debug']) {
  _loop(level);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}

function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}

function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}

function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}

function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  _classApplyDescriptorSet(receiver, descriptor, value);
  return value;
}

function _classPrivateFieldInitSpec$1(obj, privateMap, value) { _checkPrivateRedeclaration$1(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration$1(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
var DeviceKinds;
(function (DeviceKinds) {
  DeviceKinds["AUDIO_INPUT"] = "audioinput";
  DeviceKinds["AUDIO_OUTPUT"] = "audiooutput";
  DeviceKinds["VIDEO_INPUT"] = "videoinput";
})(DeviceKinds || (DeviceKinds = {}));
var _mediaDeviceInfo = /*#__PURE__*/new WeakMap();
class Device {
  constructor(mediaDeviceInfo) {
    _defineProperty(this, "ID", void 0);
    _defineProperty(this, "groupID", void 0);
    _defineProperty(this, "label", void 0);
    _defineProperty(this, "kind", void 0);
    _classPrivateFieldInitSpec$1(this, _mediaDeviceInfo, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _mediaDeviceInfo, mediaDeviceInfo);
    this.ID = _classPrivateFieldGet(this, _mediaDeviceInfo).deviceId;
    this.groupID = _classPrivateFieldGet(this, _mediaDeviceInfo).groupId;
    this.label = _classPrivateFieldGet(this, _mediaDeviceInfo).label;
    this.kind = _classPrivateFieldGet(this, _mediaDeviceInfo).kind;
  }
}

function getTrackSettings(track) {
  logger$4.debug({
    ID: track.id,
    mediaType: MEDIA_STREAM_TRACK,
    action: 'getTrackSettings()',
    description: 'Called'
  });
  var settings = track.getSettings();
  if (settings) {
    logger$4.debug({
      ID: track.id,
      mediaType: MEDIA_STREAM_TRACK,
      action: 'getTrackSettings()',
      description: "Returning track settings ".concat(JSON.stringify(settings))
    });
    return settings;
  }
  var error = new Error('Unable to get track settings');
  logger$4.info({
    ID: track.id,
    mediaType: MEDIA_STREAM_TRACK,
    action: 'getTrackSettings()',
    description: error.message,
    error
  });
  return {};
}

var TrackEventNames;
(function (TrackEventNames) {
  TrackEventNames["TRACK_MUTE_STATE_CHANGED"] = "track:mute";
})(TrackEventNames || (TrackEventNames = {}));

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
var TrackStatus;
(function (TrackStatus) {
  TrackStatus["ENDED"] = "ended";
  TrackStatus["LIVE"] = "live";
})(TrackStatus || (TrackStatus = {}));
var TrackKind;
(function (TrackKind) {
  TrackKind["AUDIO"] = "audio";
  TrackKind["VIDEO"] = "video";
})(TrackKind || (TrackKind = {}));
var _mediaStreamTrack = /*#__PURE__*/new WeakMap();
class Track extends EventEmitter$5 {
  constructor(mediaStreamTrack) {
    super();
    _defineProperty(this, "ID", void 0);
    _defineProperty(this, "kind", void 0);
    _defineProperty(this, "status", void 0);
    _defineProperty(this, "muted", void 0);
    _defineProperty(this, "label", void 0);
    _classPrivateFieldInitSpec(this, _mediaStreamTrack, {
      writable: true,
      value: void 0
    });
    this.ID = mediaStreamTrack.id;
    this.kind = mediaStreamTrack.kind;
    this.status = mediaStreamTrack.readyState;
    this.muted = mediaStreamTrack.muted;
    this.label = mediaStreamTrack.label;
    _classPrivateFieldSet(this, _mediaStreamTrack, mediaStreamTrack);
    _classPrivateFieldGet(this, _mediaStreamTrack).onmute = () => {
      var action = _classPrivateFieldGet(this, _mediaStreamTrack).enabled ? 'muted' : 'unmuted';
      this.emit(TrackEventNames.TRACK_MUTE_STATE_CHANGED, {
        action
      });
    };
  }
  stop() {
    _classPrivateFieldGet(this, _mediaStreamTrack).stop();
    this.status = TrackStatus.ENDED;
  }
  applyConstraints(constraints) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var _constraints$deviceId, _constraints$deviceId2, _constraints$deviceId5;
      logger$4.debug({
        ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId = constraints.deviceId) === null || _constraints$deviceId === void 0 ? void 0 : _constraints$deviceId.toString(),
        mediaType: DEVICE,
        action: 'applyConstraints()',
        description: "Called with ".concat(JSON.stringify(constraints))
      });
      logger$4.info({
        ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId2 = constraints.deviceId) === null || _constraints$deviceId2 === void 0 ? void 0 : _constraints$deviceId2.toString(),
        mediaType: DEVICE,
        action: 'applyConstraints()',
        description: 'Applying constraints to track objects'
      });
      var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();
      var notSupportedConstraints = [];
      for (var thisConstraint of Object.keys(constraints)) {
        if (!supportedConstraints[thisConstraint]) {
          var _constraints$deviceId3;
          logger$4.debug({
            ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId3 = constraints.deviceId) === null || _constraints$deviceId3 === void 0 ? void 0 : _constraints$deviceId3.toString(),
            mediaType: DEVICE,
            action: 'applyConstraints()',
            description: "Not supported constraint tracked ".concat(thisConstraint)
          });
          notSupportedConstraints.push(thisConstraint);
        }
      }
      if (notSupportedConstraints.length > 0) {
        var _constraints$deviceId4;
        console.warn("#TrackObject Unsupported constraints - ".concat(notSupportedConstraints.join(', ')));
        logger$4.debug({
          ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId4 = constraints.deviceId) === null || _constraints$deviceId4 === void 0 ? void 0 : _constraints$deviceId4.toString(),
          mediaType: DEVICE,
          action: 'applyConstraints()',
          description: 'Constraints not applied'
        });
        return false;
      }
      yield _classPrivateFieldGet(_this, _mediaStreamTrack).applyConstraints(constraints);
      logger$4.debug({
        ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId5 = constraints.deviceId) === null || _constraints$deviceId5 === void 0 ? void 0 : _constraints$deviceId5.toString(),
        mediaType: DEVICE,
        action: 'applyConstraints()',
        description: 'Constraints applied successfully'
      });
      return true;
    })();
  }
  getSettings() {
    logger$4.debug({
      mediaType: MEDIA,
      action: 'getSettings()',
      description: 'Called'
    });
    logger$4.info({
      mediaType: MEDIA,
      action: 'getSettings()',
      description: 'Fetching constraints properties for the current media stream track'
    });
    var settings = getTrackSettings(_classPrivateFieldGet(this, _mediaStreamTrack));
    logger$4.debug({
      mediaType: MEDIA,
      action: 'getSettings()',
      description: "Received settings ".concat(JSON.stringify(settings))
    });
    return settings;
  }
  getMediaStreamTrack() {
    logger$4.debug({
      mediaType: MEDIA,
      action: 'getMediaStreamTrack()',
      description: 'Called'
    });
    var mediaStreamTrack = _classPrivateFieldGet(this, _mediaStreamTrack);
    logger$4.debug({
      mediaType: MEDIA,
      action: 'getMediaStreamTrack()',
      description: "Received media stream track ".concat(JSON.stringify(mediaStreamTrack))
    });
    return mediaStreamTrack;
  }
}

var eventEmitter = new EventEmitter$5();
var deviceList = [];
var getDevices$1 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* () {
    var _navigator$mediaDevic;
    logger$4.debug({
      mediaType: DEVICE,
      action: 'getDevices()',
      description: 'Called'
    });
    if (!((_navigator$mediaDevic = navigator.mediaDevices) !== null && _navigator$mediaDevic !== void 0 && _navigator$mediaDevic.enumerateDevices)) {
      console.warn('navigator.mediaDevices.enumerateDevices() is not supported.');
      return [];
    }
    logger$4.info({
      mediaType: DEVICE,
      action: 'getDevices()',
      description: 'Requesting list of available media input and output devices'
    });
    return navigator.mediaDevices.enumerateDevices();
  });
  return function getDevices() {
    return _ref.apply(this, arguments);
  };
}();
var getCameras = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* () {
    logger$4.debug({
      mediaType: DEVICE,
      action: 'getCameras()',
      description: 'Called'
    });
    var devices = yield getDevices$1();
    logger$4.info({
      mediaType: DEVICE,
      action: 'getCameras()',
      description: 'Filtering camera devices from all available media devices'
    });
    return devices.filter(_ref3 => {
      var {
        kind
      } = _ref3;
      return kind === DeviceKinds.VIDEO_INPUT;
    }).map(device => {
      logger$4.debug({
        ID: device.deviceId,
        mediaType: DEVICE,
        action: 'getCameras()',
        description: "Received camera device ".concat(JSON.stringify(device))
      });
      return new Device(device);
    });
  });
  return function getCameras() {
    return _ref2.apply(this, arguments);
  };
}();
var getMicrophones = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator(function* () {
    logger$4.debug({
      mediaType: DEVICE,
      action: 'getMicrophones()',
      description: 'Called'
    });
    var devices = yield getDevices$1();
    logger$4.info({
      mediaType: DEVICE,
      action: 'getMicrophones()',
      description: 'Filtering microphones devices from all available media devices'
    });
    return devices.filter(_ref5 => {
      var {
        kind
      } = _ref5;
      return kind === DeviceKinds.AUDIO_INPUT;
    }).map(device => {
      logger$4.debug({
        ID: device.deviceId,
        mediaType: DEVICE,
        action: 'getMicrophones()',
        description: "Received microphone device ".concat(JSON.stringify(device))
      });
      return new Device(device);
    });
  });
  return function getMicrophones() {
    return _ref4.apply(this, arguments);
  };
}();
var getSpeakers = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator(function* () {
    logger$4.debug({
      mediaType: DEVICE,
      action: 'getSpeakers()',
      description: 'Called'
    });
    var devices = yield getDevices$1();
    logger$4.info({
      mediaType: DEVICE,
      action: 'getSpeakers()',
      description: 'Filtering speaker devices from all available media devices'
    });
    return devices.filter(_ref7 => {
      var {
        kind
      } = _ref7;
      return kind === DeviceKinds.AUDIO_OUTPUT;
    }).map(device => {
      logger$4.debug({
        ID: device.deviceId,
        mediaType: DEVICE,
        action: 'getSpeakers()',
        description: "Received speaker device ".concat(JSON.stringify(device))
      });
      return new Device(device);
    });
  });
  return function getSpeakers() {
    return _ref6.apply(this, arguments);
  };
}();
function getUnsupportedConstraints(mediaConstraints) {
  logger$4.debug({
    mediaType: MEDIA,
    action: 'getUnsupportedConstraints()',
    description: "Called with ".concat(JSON.stringify(mediaConstraints))
  });
  logger$4.info({
    mediaType: MEDIA,
    action: 'getUnsupportedConstraints()',
    description: 'Filtering list of media track unsupported constraints'
  });
  var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();
  var unsupportedConstraints = [];
  Object.keys(mediaConstraints).forEach(constraint => {
    if (!(Object.prototype.hasOwnProperty.call(supportedConstraints, constraint) && supportedConstraints[constraint])) {
      unsupportedConstraints.push(constraint);
    }
  });
  logger$4.debug({
    mediaType: MEDIA,
    action: 'getUnsupportedConstraints()',
    description: "Received unsupported constraints ".concat(unsupportedConstraints)
  });
  return unsupportedConstraints;
}
function createAudioTrack(_x) {
  return _createAudioTrack.apply(this, arguments);
}
function _createAudioTrack() {
  _createAudioTrack = _asyncToGenerator(function* (device) {
    logger$4.debug({
      ID: device === null || device === void 0 ? void 0 : device.ID,
      mediaType: DEVICE,
      action: 'createAudioTrack()',
      description: "Called ".concat(device ? "with ".concat(JSON.stringify(device)) : '', " ")
    });
    if (device && device.kind !== DeviceKinds.AUDIO_INPUT) {
      var _error = new Error("Device ".concat(device.ID, " is not of kind AUDIO_INPUT"));
      logger$4.error({
        ID: device.ID,
        mediaType: 'DEVICE',
        action: 'createAudioTrack()',
        description: _error.message,
        error: _error
      });
      throw _error;
    }
    logger$4.info({
      ID: device === null || device === void 0 ? void 0 : device.ID,
      mediaType: DEVICE,
      action: 'createAudioTrack()',
      description: 'Creating audio track'
    });
    var deviceConfig = device ? {
      audio: {
        deviceId: {
          exact: device.ID
        }
      }
    } : {
      audio: true,
      video: false
    };
    var stream = yield navigator.mediaDevices.getUserMedia(deviceConfig);
    var track = stream.getAudioTracks()[0];
    if (track) {
      logger$4.debug({
        ID: device === null || device === void 0 ? void 0 : device.ID,
        mediaType: DEVICE,
        action: 'createAudioTrack()',
        description: "Received audio track ".concat(JSON.stringify(track))
      });
      return new Track(track);
    }
    var error = new Error("Device could not obtain an audio track of kind ".concat(device === null || device === void 0 ? void 0 : device.kind));
    logger$4.error({
      ID: device === null || device === void 0 ? void 0 : device.ID,
      mediaType: 'DEVICE',
      action: 'createAudioTrack()',
      description: error.message,
      error
    });
    throw error;
  });
  return _createAudioTrack.apply(this, arguments);
}
function createVideoTrack(_x2) {
  return _createVideoTrack.apply(this, arguments);
}
function _createVideoTrack() {
  _createVideoTrack = _asyncToGenerator(function* (device) {
    logger$4.debug({
      ID: device === null || device === void 0 ? void 0 : device.ID,
      mediaType: DEVICE,
      action: 'createVideoTrack()',
      description: "Called ".concat(device ? "with ".concat(JSON.stringify(device)) : '', " ")
    });
    if (device && device.kind !== DeviceKinds.VIDEO_INPUT) {
      var _error2 = new Error("Device ".concat(device.ID, " is not of kind VIDEO_INPUT"));
      logger$4.error({
        ID: device.ID,
        mediaType: 'DEVICE',
        action: 'createVideoTrack()',
        description: _error2.message,
        error: _error2
      });
      throw _error2;
    }
    logger$4.info({
      ID: device === null || device === void 0 ? void 0 : device.ID,
      mediaType: DEVICE,
      action: 'createVideoTrack()',
      description: 'Creating video track'
    });
    var deviceConfig = device ? {
      video: {
        deviceId: {
          exact: device.ID
        }
      }
    } : {
      audio: false,
      video: true
    };
    var stream = yield navigator.mediaDevices.getUserMedia(deviceConfig);
    var track = stream.getVideoTracks()[0];
    if (track) {
      logger$4.debug({
        ID: device === null || device === void 0 ? void 0 : device.ID,
        mediaType: DEVICE,
        action: 'createVideoTrack()',
        description: "Received video track ".concat(JSON.stringify(track))
      });
      return new Track(track);
    }
    var error = new Error("Device could not obtain a video track of kind ".concat(device === null || device === void 0 ? void 0 : device.kind));
    logger$4.error({
      ID: device === null || device === void 0 ? void 0 : device.ID,
      mediaType: 'DEVICE',
      action: 'createVideoTrack()',
      description: error.message,
      error
    });
    throw error;
  });
  return _createVideoTrack.apply(this, arguments);
}
function createContentTrack(_x3) {
  return _createContentTrack.apply(this, arguments);
}
function _createContentTrack() {
  _createContentTrack = _asyncToGenerator(function* (mediaConstraints) {
    var _mediaConstraints$dev, _mediaConstraints$dev2, _mediaConstraints$dev7;
    logger$4.debug({
      ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev = mediaConstraints.deviceId) === null || _mediaConstraints$dev === void 0 ? void 0 : _mediaConstraints$dev.toString(),
      mediaType: DEVICE,
      action: 'createContentTrack()',
      description: "Called ".concat(mediaConstraints ? "with ".concat(JSON.stringify(mediaConstraints)) : '', " ")
    });
    logger$4.info({
      ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev2 = mediaConstraints.deviceId) === null || _mediaConstraints$dev2 === void 0 ? void 0 : _mediaConstraints$dev2.toString(),
      mediaType: MEDIA,
      action: 'createContentTrack()',
      description: 'Creating content track'
    });
    var deviceConfig = {
      audio: false,
      video: true
    };
    var track;
    var stream;
    try {
      stream = yield navigator.mediaDevices.getDisplayMedia(deviceConfig);
      [track] = stream.getVideoTracks();
    } catch (error) {
      if (error instanceof Error) {
        var _mediaConstraints$dev3;
        logger$4.error({
          ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev3 = mediaConstraints.deviceId) === null || _mediaConstraints$dev3 === void 0 ? void 0 : _mediaConstraints$dev3.toString(),
          mediaType: 'DEVICE',
          action: 'createContentTrack()',
          description: error.message,
          error
        });
      }
      throw error;
    }
    if (mediaConstraints) {
      var unsupportedConstraints = getUnsupportedConstraints(mediaConstraints);
      if (unsupportedConstraints.length <= 0) {
        var _mediaConstraints$dev4;
        track.applyConstraints(mediaConstraints);
        logger$4.debug({
          ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev4 = mediaConstraints.deviceId) === null || _mediaConstraints$dev4 === void 0 ? void 0 : _mediaConstraints$dev4.toString(),
          mediaType: DEVICE,
          action: 'createContentTrack()',
          description: 'Applied media constraints to fetched content track'
        });
      } else {
        var _mediaConstraints$dev5;
        var _error3 = new Error("".concat(unsupportedConstraints.join(', '), " constraint is not supported by browser"));
        logger$4.error({
          ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev5 = mediaConstraints.deviceId) === null || _mediaConstraints$dev5 === void 0 ? void 0 : _mediaConstraints$dev5.toString(),
          mediaType: 'DEVICE',
          action: 'createContentTrack()',
          description: _error3.message,
          error: _error3
        });
        throw _error3;
      }
    }
    if (track) {
      var _mediaConstraints$dev6;
      logger$4.debug({
        ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev6 = mediaConstraints.deviceId) === null || _mediaConstraints$dev6 === void 0 ? void 0 : _mediaConstraints$dev6.toString(),
        mediaType: DEVICE,
        action: 'createContentTrack()',
        description: "Received content track ".concat(JSON.stringify(track))
      });
      return new Track(track);
    }
    var error = new Error('Could not obtain a content track');
    logger$4.error({
      ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev7 = mediaConstraints.deviceId) === null || _mediaConstraints$dev7 === void 0 ? void 0 : _mediaConstraints$dev7.toString(),
      mediaType: 'DEVICE',
      action: 'createContentTrack()',
      description: error.message,
      error
    });
    throw error;
  });
  return _createContentTrack.apply(this, arguments);
}
function deviceChangePublisher() {
  return _deviceChangePublisher.apply(this, arguments);
}
function _deviceChangePublisher() {
  _deviceChangePublisher = _asyncToGenerator(function* () {
    var _navigator$mediaDevic2;
    logger$4.debug({
      mediaType: DEVICE,
      action: 'deviceChangePublisher()',
      description: 'Called'
    });
    if (!((_navigator$mediaDevic2 = navigator.mediaDevices) !== null && _navigator$mediaDevic2 !== void 0 && _navigator$mediaDevic2.enumerateDevices)) {
      console.warn('navigator.mediaDevices.enumerateDevices() is not supported.');
      return;
    }
    logger$4.info({
      mediaType: DEVICE,
      action: 'deviceChangePublisher()',
      description: 'Calling individual subscription listener obtained by device change event'
    });
    var newDeviceList = yield navigator.mediaDevices.enumerateDevices();
    var filtered = [];
    var getGroupIdsFrom = [];
    var filterDevicesFrom = [];
    var action = 'changed';
    var deviceListGroups = new Set();
    if (newDeviceList.length !== deviceList.length) {
      [getGroupIdsFrom, filterDevicesFrom, action] = newDeviceList.length < deviceList.length ? [newDeviceList, deviceList, 'removed'] : [deviceList, newDeviceList, 'added'];
      getGroupIdsFrom.forEach(device => {
        deviceListGroups.add(device.groupId);
      });
      filtered = filterDevicesFrom.filter(device => !deviceListGroups.has(device.groupId));
      deviceList.splice(0, deviceList.length);
      deviceList.push(...newDeviceList);
      eventEmitter.emit('device:changed', {
        action,
        devices: filtered
      });
    }
  });
  return _deviceChangePublisher.apply(this, arguments);
}
function on$1(_x4, _x5) {
  return _on.apply(this, arguments);
}
function _on() {
  _on = _asyncToGenerator(function* (eventName, listener) {
    logger$4.debug({
      mediaType: MEDIA,
      action: 'on()',
      description: "Subscribing to an ".concat(eventName, ",").concat(listener)
    });
    eventEmitter.on(eventName, listener);
    if (eventName === 'device:changed') {
      var thisDeviceList = yield getDevices$1();
      deviceList.push(...thisDeviceList);
      navigator.mediaDevices.addEventListener('devicechange', deviceChangePublisher);
    }
  });
  return _on.apply(this, arguments);
}
var off$1 = (eventName, listener) => {
  logger$4.debug({
    mediaType: MEDIA,
    action: 'off()',
    description: "Called ".concat(eventName, " with ").concat(listener, " listener")
  });
  eventEmitter.off(eventName, listener);
};

var bnrProcessor = {
  isModuleAdded: false,
  workletProcessorUrl: 'https://models.intelligence.webex.com/bnr/1.1.0/noise-reduction-effect.worklet.js'
};
function isValidTrack(track) {
  var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();
  var supportedSampleRates = [16000, 32000, 48000];
  if (supportedConstraints.sampleRate) {
    var settings = getTrackSettings(track);
    var {
      sampleRate
    } = settings;
    if (sampleRate && !supportedSampleRates.includes(sampleRate)) {
      var error = new Error("Sample rate of ".concat(sampleRate, " is not supported."));
      logger$4.error({
        ID: track.id,
        mediaType: MEDIA_STREAM_TRACK,
        action: 'isValidTrack()',
        description: error.message,
        error
      });
      throw error;
    } else {
      return true;
    }
  } else {
    var _error = new Error('Not supported');
    logger$4.info({
      ID: track.id,
      mediaType: MEDIA_STREAM_TRACK,
      action: 'isValidTrack()',
      description: _error.message,
      error: _error
    });
    return true;
  }
}
function loadProcessor() {
  return _loadProcessor.apply(this, arguments);
}
function _loadProcessor() {
  _loadProcessor = _asyncToGenerator(function* () {
    logger$4.info({
      mediaType: MEDIA_STREAM_TRACK,
      action: 'loadProcessor()',
      description: 'Creating and loading BNR module'
    });
    var audioContext = new AudioContext();
    bnrProcessor.isModuleAdded = true;
    bnrProcessor.audioContext = audioContext;
    yield audioContext.audioWorklet.addModule(bnrProcessor.workletProcessorUrl);
    bnrProcessor.workletNode = new AudioWorkletNode(audioContext, 'noise-reduction-worklet-processor');
    return audioContext;
  });
  return _loadProcessor.apply(this, arguments);
}
function enableBNR(_x) {
  return _enableBNR.apply(this, arguments);
}
function _enableBNR() {
  _enableBNR = _asyncToGenerator(function* (track) {
    logger$4.debug({
      ID: track.id,
      mediaType: MEDIA_STREAM_TRACK,
      action: 'enableBNR()',
      description: 'Called'
    });
    try {
      isValidTrack(track);
      var streamFromTrack = new MediaStream();
      streamFromTrack.addTrack(track);
      var workletNode;
      logger$4.info({
        ID: track.id,
        mediaType: MEDIA_STREAM_TRACK,
        action: 'enableBNR()',
        description: 'Checking if BNR module is present already'
      });
      var oldDestinationTrack = bnrProcessor.destinationTrack;
      if (oldDestinationTrack && track.id === oldDestinationTrack.id) {
        var oldTrackErrorMsg = 'BNR is enabled on the track already';
        var oldTrackError = new Error(oldTrackErrorMsg);
        logger$4.error({
          ID: track.id,
          mediaType: MEDIA_STREAM_TRACK,
          action: 'enableBNR()',
          description: oldTrackErrorMsg,
          error: oldTrackError
        });
        throw oldTrackError;
      }
      if (bnrProcessor.isModuleAdded) {
        logger$4.debug({
          ID: track.id,
          mediaType: MEDIA_STREAM_TRACK,
          action: 'enableBNR()',
          description: 'Disposing existing BNR module'
        });
        workletNode = bnrProcessor.workletNode;
        workletNode.port.postMessage('DISPOSE');
      }
      logger$4.info({
        ID: track.id,
        mediaType: MEDIA_STREAM_TRACK,
        action: 'enableBNR()',
        description: 'Creating worklet node, connecting source and destination streams'
      });
      var audioContext = yield loadProcessor();
      workletNode = bnrProcessor.workletNode;
      workletNode.port.postMessage('ENABLE');
      bnrProcessor.sourceNode = audioContext.createMediaStreamSource(streamFromTrack);
      bnrProcessor.sourceNode.connect(workletNode);
      bnrProcessor.destinationStream = audioContext.createMediaStreamDestination();
      workletNode.connect(bnrProcessor.destinationStream);
      logger$4.info({
        ID: track.id,
        mediaType: MEDIA_STREAM_TRACK,
        action: 'enableBNR()',
        description: 'Obtaining noise reduced track and returning'
      });
      var destinationStream = bnrProcessor.destinationStream.stream;
      var [destinationTrack] = destinationStream.getAudioTracks();
      bnrProcessor.destinationTrack = destinationTrack;
      return destinationTrack;
    } catch (error) {
      logger$4.error({
        ID: track.id,
        mediaType: MEDIA_STREAM_TRACK,
        action: 'enableBNR()',
        description: 'Error in enableBNR',
        error: error
      });
      throw error;
    }
  });
  return _enableBNR.apply(this, arguments);
}
function disableBNR() {
  logger$4.debug({
    mediaType: MEDIA_STREAM_TRACK,
    action: 'disableBNR()',
    description: 'Called'
  });
  try {
    var workletNode;
    logger$4.info({
      mediaType: MEDIA_STREAM_TRACK,
      action: 'disableBNR()',
      description: 'Checking if BNR is enabled before disabling'
    });
    if (!bnrProcessor.isModuleAdded) {
      var error = new Error('Can not disable as BNR is not enabled');
      logger$4.error({
        mediaType: MEDIA_STREAM_TRACK,
        action: 'disableBNR()',
        description: 'Can not disable as BNR is not enabled'
      });
      throw error;
    } else {
      logger$4.info({
        mediaType: MEDIA_STREAM_TRACK,
        action: 'disableBNR()',
        description: 'Using existing AudioWorkletNode for disabling BNR'
      });
      workletNode = bnrProcessor.workletNode;
    }
    workletNode.port.postMessage('DISPOSE');
    logger$4.info({
      mediaType: MEDIA_STREAM_TRACK,
      action: 'disableBNR()',
      description: 'Obtaining raw media stream track and removing bnr context'
    });
    var bnrDisabledStream = bnrProcessor.sourceNode.mediaStream;
    var [track] = bnrDisabledStream === null || bnrDisabledStream === void 0 ? void 0 : bnrDisabledStream.getAudioTracks();
    bnrProcessor.isModuleAdded = false;
    delete bnrProcessor.workletNode;
    delete bnrProcessor.audioContext;
    delete bnrProcessor.sourceNode;
    delete bnrProcessor.destinationStream;
    delete bnrProcessor.destinationTrack;
    return track;
  } catch (error) {
    logger$4.error({
      mediaType: MEDIA_STREAM_TRACK,
      action: 'disableBNR()',
      description: 'Error in disableBNR',
      error: error
    });
    throw error;
  }
}

var ErrorCode;
(function (ErrorCode) {
  ErrorCode[ErrorCode["MediaConnectionError"] = 30001] = "MediaConnectionError";
  ErrorCode[ErrorCode["SdpError"] = 30002] = "SdpError";
  ErrorCode[ErrorCode["IceGatheringError"] = 30003] = "IceGatheringError";
  ErrorCode[ErrorCode["SdpAnswerHandlingError"] = 30004] = "SdpAnswerHandlingError";
  ErrorCode[ErrorCode["SdpOfferCreationError"] = 30005] = "SdpOfferCreationError";
  ErrorCode[ErrorCode["SdpOfferHandlingError"] = 30006] = "SdpOfferHandlingError";
})(ErrorCode || (ErrorCode = {}));

class MediaConnectionError extends Error {
  constructor(message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(message);
    _defineProperty(this, "code", void 0);
    this.name = options.name || 'MediaConnectionError';
    this.cause = options.cause;
    this.code = options.code || ErrorCode.MediaConnectionError;
  }
}

function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class SdpError extends MediaConnectionError {
  constructor(message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(message, _objectSpread$d({
      code: ErrorCode.SdpError,
      name: 'SdpError'
    }, options));
  }
}

function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class IceGatheringError extends SdpError {
  constructor(message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(message, _objectSpread$c({
      code: ErrorCode.IceGatheringError,
      name: 'IceGatheringError'
    }, options));
  }
}

function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class SdpAnswerHandlingError extends SdpError {
  constructor(message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(message, _objectSpread$b({
      code: ErrorCode.SdpAnswerHandlingError,
      name: 'SdpAnswerHandlingError'
    }, options));
  }
}

function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class SdpOfferCreationError extends SdpError {
  constructor(message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(message, _objectSpread$a({
      code: ErrorCode.SdpOfferCreationError,
      name: 'SdpOfferCreationError'
    }, options));
  }
}

function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class SdpOfferHandlingError extends SdpError {
  constructor(message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(message, _objectSpread$9({
      code: ErrorCode.SdpOfferHandlingError,
      name: 'SdpOfferHandlingError'
    }, options));
  }
}

var Error$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get ErrorCode () { return ErrorCode; },
  IceGatheringError: IceGatheringError,
  MediaConnectionError: MediaConnectionError,
  SdpAnswerHandlingError: SdpAnswerHandlingError,
  SdpError: SdpError,
  SdpOfferCreationError: SdpOfferCreationError,
  SdpOfferHandlingError: SdpOfferHandlingError
});

var commonjsGlobal$5 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var rtcstats$1 = {};

var __awaiter$3 = commonjsGlobal$5 && commonjsGlobal$5.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$1 = commonjsGlobal$5 && commonjsGlobal$5.__generator || function (thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
Object.defineProperty(rtcstats$1, "__esModule", {
  value: true
});
var rtcStats_1$1 = rtcstats$1.rtcStats = void 0;
/**
 * Copies values of any nested depth.
 *
 * @param value - The value to be copied.
 * @returns - Copied value.
 */
var deepCopy$2 = function deepCopy(value) {
  return JSON.parse(JSON.stringify(value));
};
/**
 * Check deep equality between two values.
 *
 * @param value1 - First value to check.
 * @param value2 - Second value to check.
 * @returns True if values are deeply equal, false otherwise.
 */
var deepEqual$1 = function deepEqual(value1, value2) {
  // If both immutable values are equal, return true.
  if (value1 === value2) {
    return true;
  }
  // If both are objects, we check the length and properties of each.
  if (value1 && value2 && typeof value1 === 'object' && typeof value2 === 'object') {
    if (value1.constructor !== value2.constructor) return false;
    // Return false if the objects are of different sizes.
    if (Object.keys(value1).length !== Object.keys(value2).length) {
      return false;
    }
    // Deep equal check each property in the object, returns true if we found no
    // differing properties.
    return Object.keys(value1).reduce(function (val, prop) {
      if (value2[prop]) {
        if (!deepEqual(value1[prop], value2[prop])) {
          return false;
        }
      } else {
        return false;
      }
      return val;
    }, true);
  }
  // Return false if no other conditions are met.
  return false;
};
/**
 * Translates a Map into an object.
 *
 * @param report - The report in Map form.
 * @returns - A deduped object.
 */
var map2obj$1 = function map2obj(report) {
  if (!report.size) {
    return report;
  }
  var o = {};
  report.forEach(function (value, key) {
    o[key] = value;
  });
  return o;
};
var dumpStream$1 = function dumpStream(stream) {
  return {
    id: stream.id,
    tracks: stream.getTracks().map(function (track) {
      return {
        id: track.id,
        kind: track.kind,
        label: track.label,
        enabled: track.enabled,
        muted: track.muted,
        readyState: track.readyState
      };
    })
  };
};
var persistedKeys$1 = ['type', 'id', 'timestamp'];
/**
 * Check to see if the report consists of more than just the persisted metadata.
 *
 * @param report - The report line being checked.
 * @returns True if the report item contains non-persisted keys, false otherwise.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var hasNonMetadata$1 = function hasNonMetadata(report) {
  return !!Object.keys(report).filter(function (key) {
    return !persistedKeys$1.includes(key);
  }).length;
};
/**
 * Apply a delta compression to the stats report. Reduces size by ~90%.
 * To reduce further, report keys could be compressed.
 *
 * @param oldStats - Previous report items that we dedupe against.
 * @param newStats - New incoming stats.
 * @returns - Compressed Stats.
 */
var deltaCompression$1 = function deltaCompression(oldStats, newStats) {
  var updatedStats = deepCopy$2(newStats);
  Object.keys(updatedStats).forEach(function (id) {
    var report = updatedStats[id];
    if (!oldStats[id]) {
      return;
    }
    // Persist specific values beyond delta compression, as long as they
    // aren't the only non-deduped keys.
    Object.keys(report).forEach(function (name) {
      if (deepEqual$1(report[name], oldStats[id][name]) && !persistedKeys$1.includes(name)) {
        delete updatedStats[id][name];
      }
      if (!hasNonMetadata$1(report)) {
        delete updatedStats[id];
      }
    });
  });
  // Use the most recent timestamp.
  var timestamp = -Infinity;
  Object.keys(updatedStats).forEach(function (id) {
    var report = updatedStats[id];
    if (report.timestamp > timestamp) {
      timestamp = report.timestamp;
    }
  });
  // Delete the timestamps on each item.
  Object.keys(updatedStats).forEach(function (id) {
    var report = updatedStats[id];
    if (report.timestamp === timestamp) {
      delete report.timestamp;
    }
  });
  updatedStats.timestamp = timestamp;
  return updatedStats;
};
/**
 * Format the stats report into an array.
 *
 * @param report - A WebRTC stats report.
 * @returns - An array of Stats Report items.
 */
var formatStatsReport$1 = function formatStatsReport(report) {
  return Object.keys(report).filter(function (name) {
    return name !== 'timestamp';
  }).map(function (name) {
    return JSON.stringify(report[name]);
  });
};
/**
 * Parametrize a single string event to contain type and an (empty) id.
 *
 * @param value - The value to parametrize.
 * @returns An event object.
 */
var makeEvent$1 = function makeEvent(value) {
  return [JSON.stringify({
    value: value,
    type: 'string',
    id: ''
  })];
};
/**
 * Attach a Peer Connection to periodically get updated on events and stats.
 *
 * @param pc - Peer Connection in which we attach.
 * @param logger - Logging function to log events and stats.
 * @param intervalTime - Time between each `getStats` check.
 * @param statsPreProcessor - Optional function that modifies stats.
 */
var rtcStats$1 = function rtcStats(pc, logger, intervalTime, statsPreProcessor) {
  if (statsPreProcessor === void 0) {
    statsPreProcessor = function statsPreProcessor() {
      return Promise.resolve();
    };
  }
  var prev = {};
  /**
   * Log stats or event data with additional tracking information.
   *
   * @param name - Name of the event to log.
   * @param payload - Log data pertaining to the event.
   * @param timestamp - Time the event happened in milliseconds.
   */
  var trace = function trace(name, payload, timestamp) {
    logger({
      timestamp: timestamp ? Math.round(timestamp) : Date.now(),
      name: name,
      payload: payload
    });
  };
  trace('rtcConfiguration', makeEvent$1(JSON.stringify(pc.getConfiguration())));
  var origPeerConnection = window.RTCPeerConnection;
  pc.addEventListener('icecandidate', function (e) {
    if (e.candidate) {
      trace('onicecandidate', makeEvent$1(JSON.stringify(e.candidate)));
    }
  });
  pc.addEventListener('icecandidateerror', function (event) {
    var url = event.url,
      errorCode = event.errorCode,
      errorText = event.errorText;
    trace('onicecandidateerror', makeEvent$1("[".concat(url, "] ").concat(errorCode, ": ").concat(errorText)));
  });
  pc.addEventListener('track', function (e) {
    trace('ontrack', makeEvent$1("".concat(e.track.kind, ":").concat(e.track.id, " ").concat(e.streams.map(function (stream) {
      return "stream:".concat(stream.id);
    }).join(' '))));
  });
  pc.addEventListener('signalingstatechange', function () {
    trace('onsignalingstatechange', makeEvent$1(pc.signalingState));
  });
  pc.addEventListener('iceconnectionstatechange', function () {
    trace('oniceconnectionstatechange', makeEvent$1(pc.iceConnectionState));
  });
  pc.addEventListener('icegatheringstatechange', function () {
    trace('onicegatheringstatechange', makeEvent$1(pc.iceGatheringState));
  });
  pc.addEventListener('connectionstatechange', function () {
    trace('onconnectionstatechange', makeEvent$1(pc.connectionState));
  });
  pc.addEventListener('negotiationneeded', function () {
    trace('onnegotiationneeded', makeEvent$1('negotiationneeded'));
  });
  pc.addEventListener('datachannel', function (event) {
    trace('ondatachannel', makeEvent$1("".concat(event.channel.id, ": ").concat(event.channel.label)));
  });
  ['close'].forEach(function (method) {
    var nativeMethod = origPeerConnection.prototype[method];
    if (nativeMethod) {
      origPeerConnection.prototype[method] = function () {
        trace("on".concat(method), makeEvent$1(method));
        return nativeMethod.apply(this, arguments);
      };
    }
  });
  ['createDataChannel'].forEach(function (method) {
    var nativeMethod = origPeerConnection.prototype[method];
    if (nativeMethod) {
      origPeerConnection.prototype[method] = function () {
        trace("on".concat(method), makeEvent$1(method));
        var dataChannel = nativeMethod.apply(this, arguments);
        dataChannel.addEventListener('open', function () {
          trace("ondataChannelOpen", makeEvent$1("".concat(dataChannel.id, ":").concat(dataChannel.label)));
        });
        dataChannel.addEventListener('close', function () {
          trace("ondataChannelClose", makeEvent$1("".concat(dataChannel.id, ":").concat(dataChannel.label)));
        });
        dataChannel.addEventListener('error', function (event) {
          var error = event.error;
          trace("ondataChannelError", makeEvent$1("".concat(dataChannel.id, ":").concat(dataChannel.label, ": ").concat(error.errorDetail)));
        });
        return dataChannel;
      };
    }
  });
  ['addStream', 'removeStream'].forEach(function (method) {
    var nativeMethod = origPeerConnection.prototype[method];
    if (nativeMethod) {
      origPeerConnection.prototype[method] = function () {
        var stream = arguments[0];
        var streamInfo = stream.getTracks().map(function (t) {
          return "".concat(t.kind, ":").concat(t.id);
        }).join(',');
        trace("on".concat(method), makeEvent$1("".concat(stream.id, " ").concat(streamInfo)));
        return nativeMethod.apply(this, arguments);
      };
    }
  });
  ['addTrack'].forEach(function (method) {
    var nativeMethod = origPeerConnection.prototype[method];
    if (nativeMethod) {
      origPeerConnection.prototype[method] = function () {
        var track = arguments[0];
        var streams = [].slice.call(arguments, 1);
        trace("on".concat(method), makeEvent$1("".concat(track.kind, ":").concat(track.id, " ").concat(streams.map(function (s) {
          return "stream:".concat(s.id);
        }).join(';') || '-')));
        return nativeMethod.apply(this, arguments);
      };
    }
  });
  ['removeTrack'].forEach(function (method) {
    var nativeMethod = origPeerConnection.prototype[method];
    if (nativeMethod) {
      origPeerConnection.prototype[method] = function () {
        var track = arguments[0].track;
        trace("on".concat(method), makeEvent$1(track ? "".concat(track.kind, ":").concat(track.id) : 'null'));
        return nativeMethod.apply(this, arguments);
      };
    }
  });
  ['createOffer', 'createAnswer'].forEach(function (method) {
    var nativeMethod = origPeerConnection.prototype[method];
    if (nativeMethod) {
      origPeerConnection.prototype[method] = function () {
        var opts;
        var args = arguments;
        if (arguments.length === 1 && typeof arguments[0] === 'object') {
          // eslint-disable-next-line prefer-destructuring
          opts = arguments[0];
        } else if (arguments.length === 3 && typeof arguments[2] === 'object') {
          // eslint-disable-next-line prefer-destructuring
          opts = arguments[2];
        }
        trace("on".concat(method), makeEvent$1(opts || ''));
        return nativeMethod.apply(this, opts ? [opts] : undefined).then(function (description) {
          trace("on".concat(method, "OnSuccess"), makeEvent$1(description.sdp));
          if (args.length > 0 && typeof args[0] === 'function') {
            args[0].apply(null, [description]);
            return undefined;
          }
          return description;
        }, function (err) {
          trace("on".concat(method, "OnFailure"), makeEvent$1(err.toString()));
          if (args.length > 1 && typeof args[1] === 'function') {
            args[1].apply(null, [err]);
            return;
          }
          throw err;
        });
      };
    }
  });
  ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
    var nativeMethod = origPeerConnection.prototype[method];
    if (nativeMethod) {
      origPeerConnection.prototype[method] = function () {
        var _this = this;
        var args = arguments;
        trace("on".concat(method), makeEvent$1(method === 'addIceCandidate' ? arguments[0] : arguments[0] ? arguments[0].sdp : 'undefined'));
        return nativeMethod.apply(this, [arguments[0]]).then(function () {
          var _a;
          trace("on".concat(method, "OnSuccess"), makeEvent$1('success'));
          if (method.endsWith('Description')) {
            if (!_this.transportEventsPreviouslyAdded) {
              var senders = _this.getSenders();
              var _loop_1 = function _loop_1(sender) {
                if (sender.transport) {
                  sender.transport.addEventListener('statechange', function () {
                    if (sender && sender.transport) {
                      trace("ondtlsStateChange", makeEvent$1(sender.transport.state));
                    }
                  });
                  sender.transport.addEventListener('error', function (error) {
                    var errorEvent = error;
                    trace("ondtlsError", makeEvent$1(errorEvent.error.errorDetail));
                  });
                  if (sender.transport.iceTransport) {
                    sender.transport.iceTransport.addEventListener('selectedcandidatepairchange', function () {
                      var _a, _b, _c, _d, _e, _f;
                      if (sender.transport && sender.transport.iceTransport) {
                        var pair = sender.transport.iceTransport.getSelectedCandidatePair();
                        var localCandidate = "".concat((_a = pair === null || pair === void 0 ? void 0 : pair.local) === null || _a === void 0 ? void 0 : _a.address, ":").concat((_b = pair === null || pair === void 0 ? void 0 : pair.local) === null || _b === void 0 ? void 0 : _b.port, "/").concat((_c = pair === null || pair === void 0 ? void 0 : pair.local) === null || _c === void 0 ? void 0 : _c.protocol);
                        var remoteCandidate = "".concat((_d = pair === null || pair === void 0 ? void 0 : pair.remote) === null || _d === void 0 ? void 0 : _d.address, ":").concat((_e = pair === null || pair === void 0 ? void 0 : pair.remote) === null || _e === void 0 ? void 0 : _e.port, "/").concat((_f = pair === null || pair === void 0 ? void 0 : pair.remote) === null || _f === void 0 ? void 0 : _f.protocol);
                        var pairString = "local: ".concat(localCandidate, ", remote: ").concat(remoteCandidate);
                        trace('onselectedCandidatePairChange', makeEvent$1(pairString));
                      }
                    });
                  }
                  _this.transportEventsPreviouslyAdded = true;
                  if (pc.getConfiguration().bundlePolicy === 'max-bundle') {
                    return "break";
                  }
                }
              };
              for (var _i = 0, senders_1 = senders; _i < senders_1.length; _i++) {
                var sender = senders_1[_i];
                var state_1 = _loop_1(sender);
                if (state_1 === "break") break;
              }
            }
            if (!_this.sctpEventsPreviouslyAdded) {
              // Some Firefox versions prior to 113 have sctp defined but not the events, so check both here.
              if ((_a = _this.sctp) === null || _a === void 0 ? void 0 : _a.addEventListener) {
                _this.sctp.addEventListener('statechange', function () {
                  trace('onsctpStateChange', makeEvent$1(_this.sctp.state));
                });
                _this.sctpEventsPreviouslyAdded = true;
              }
            }
          }
          if (args.length >= 2 && typeof args[1] === 'function') {
            args[1].apply(null, []);
            return undefined;
          }
          return undefined;
        }, function (err) {
          trace("on".concat(method, "OnFailure"), makeEvent$1(err.toString()));
          if (args.length >= 3 && typeof args[2] === 'function') {
            args[2].apply(null, [err]);
            return undefined;
          }
          throw err;
        });
      };
    }
  });
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    var origGetUserMedia_1 = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    var gum = function gum() {
      trace('onnavigator.mediaDevices.getUserMedia', makeEvent$1(JSON.stringify(arguments[0])));
      return origGetUserMedia_1.apply(navigator.mediaDevices, arguments).then(function (stream) {
        trace('onnavigator.mediaDevices.getUserMediaOnSuccess', makeEvent$1(JSON.stringify(dumpStream$1(stream))));
        return stream;
      }, function (err) {
        trace('onnavigator.mediaDevices.getUserMediaOnFailure', makeEvent$1(err.name));
        return Promise.reject(err);
      });
    };
    navigator.mediaDevices.getUserMedia = gum.bind(navigator.mediaDevices);
  }
  if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {
    var origGetDisplayMedia_1 = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);
    var gdm = function gdm() {
      trace('onnavigator.mediaDevices.getDisplayMedia', makeEvent$1(JSON.stringify(arguments[0])));
      return origGetDisplayMedia_1.apply(navigator.mediaDevices, arguments).then(function (stream) {
        trace('onnavigator.mediaDevices.getDisplayMediaOnSuccess', makeEvent$1(JSON.stringify(dumpStream$1(stream))));
        return stream;
      }, function (err) {
        trace('onnavigator.mediaDevices.getDisplayMediaOnFailure', makeEvent$1(err.name));
        return Promise.reject(err);
      });
    };
    navigator.mediaDevices.getDisplayMedia = gdm.bind(navigator.mediaDevices);
  }
  var getStatsReport = function getStatsReport() {
    return __awaiter$3(void 0, void 0, void 0, function () {
      return __generator$1(this, function (_a) {
        return [2 /*return*/, pc.getStats(null).then(function (res) {
          // Convert from stats report to js Map in order to have values set in `statsPreProcessor`
          var statsMap = new Map();
          res.forEach(function (stats, key) {
            return statsMap.set(key, stats);
          });
          return statsPreProcessor(statsMap).then(function () {
            var now = map2obj$1(statsMap);
            var base = deepCopy$2(now); // our new prev
            var compressed = deltaCompression$1(prev, now);
            trace('stats-report', formatStatsReport$1(compressed), compressed.timestamp !== -Infinity ? compressed.timestamp : undefined);
            prev = base;
            return Promise.resolve();
          });
        })];
      });
    });
  };
  var interval = window.setInterval(function () {
    if (pc.signalingState === 'closed') {
      window.clearInterval(interval);
      return;
    }
    getStatsReport();
  }, intervalTime);
  var forceStatsReport = function forceStatsReport() {
    return __awaiter$3(void 0, void 0, void 0, function () {
      return __generator$1(this, function (_a) {
        return [2 /*return*/, getStatsReport()];
      });
    });
  };
  return {
    forceStatsReport: forceStatsReport
  };
};
rtcStats_1$1 = rtcstats$1.rtcStats = rtcStats$1;

var global$1 = (typeof global !== "undefined" ? global :
  typeof self !== "undefined" ? self :
  typeof window !== "undefined" ? window : {});

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue$2 = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue$2 = currentQueue.concat(queue$2);
    } else {
        queueIndex = -1;
    }
    if (queue$2.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue$2.length;
    while(len) {
        currentQueue = queue$2;
        queue$2 = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue$2.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue$2.push(new Item(fun, args));
    if (queue$2.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
var title = 'browser';
var platform = 'browser';
var browser = true;
var env = {};
var argv = [];
var version = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};

function noop() {}

var on = noop;
var addListener = noop;
var once$4 = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;

function binding(name) {
    throw new Error('process.binding is not supported');
}

function cwd () { return '/' }
function chdir (dir) {
    throw new Error('process.chdir is not supported');
}function umask() { return 0; }

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance$1 = global$1.performance || {};
var performanceNow =
  performance$1.now        ||
  performance$1.mozNow     ||
  performance$1.msNow      ||
  performance$1.oNow       ||
  performance$1.webkitNow  ||
  function(){ return (new Date()).getTime() };

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp){
  var clocktime = performanceNow.call(performance$1)*1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor((clocktime%1)*1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds<0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds,nanoseconds]
}

var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}

var browser$1 = {
  nextTick: nextTick,
  title: title,
  browser: browser,
  env: env,
  argv: argv,
  version: version,
  versions: versions,
  on: on,
  addListener: addListener,
  once: once$4,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform,
  release: release,
  config: config,
  uptime: uptime
};

function _mergeNamespaces$1(n,m){m.forEach(function(e){e&&typeof e!=='string'&&!Array.isArray(e)&&Object.keys(e).forEach(function(k){if(k!=='default'&&!(k in n)){var d=Object.getOwnPropertyDescriptor(e,k);Object.defineProperty(n,k,d.get?d:{enumerable:true,get:function get(){return e[k];}});}});});return Object.freeze(n);}/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function __awaiter$2(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});}var commonjsGlobal$1$1=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global$1!=='undefined'?global$1:typeof self!=='undefined'?self:{};var logger$1$1={exports:{}};/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */(function(module){(function(global){// Top level module for the global, static logger instance.
var Logger={};// For those that are at home that are keeping score.
Logger.VERSION="1.6.1";// Function which handles all incoming log messages.
var logHandler;// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
var contextualLoggersByNameMap={};// Polyfill for ES5's Function.bind.
var bind=function bind(scope,func){return function(){return func.apply(scope,arguments);};};// Super exciting object merger-matron 9000 adding another 100 bytes to your download.
var merge=function merge(){var args=arguments,target=args[0],key,i;for(i=1;i<args.length;i++){for(key in args[i]){if(!(key in target)&&args[i].hasOwnProperty(key)){target[key]=args[i][key];}}}return target;};// Helper to define a logging level object; helps with optimisation.
var defineLogLevel=function defineLogLevel(value,name){return {value:value,name:name};};// Predefined logging levels.
Logger.TRACE=defineLogLevel(1,'TRACE');Logger.DEBUG=defineLogLevel(2,'DEBUG');Logger.INFO=defineLogLevel(3,'INFO');Logger.TIME=defineLogLevel(4,'TIME');Logger.WARN=defineLogLevel(5,'WARN');Logger.ERROR=defineLogLevel(8,'ERROR');Logger.OFF=defineLogLevel(99,'OFF');// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
// of each other.
var ContextualLogger=function ContextualLogger(defaultContext){this.context=defaultContext;this.setLevel(defaultContext.filterLevel);this.log=this.info;// Convenience alias.
};ContextualLogger.prototype={// Changes the current logging level for the logging instance.
setLevel:function setLevel(newLevel){// Ensure the supplied Level object looks valid.
if(newLevel&&"value"in newLevel){this.context.filterLevel=newLevel;}},// Gets the current logging level for the logging instance
getLevel:function getLevel(){return this.context.filterLevel;},// Is the logger configured to output messages at the supplied level?
enabledFor:function enabledFor(lvl){var filterLevel=this.context.filterLevel;return lvl.value>=filterLevel.value;},trace:function trace(){this.invoke(Logger.TRACE,arguments);},debug:function debug(){this.invoke(Logger.DEBUG,arguments);},info:function info(){this.invoke(Logger.INFO,arguments);},warn:function warn(){this.invoke(Logger.WARN,arguments);},error:function error(){this.invoke(Logger.ERROR,arguments);},time:function time(label){if(typeof label==='string'&&label.length>0){this.invoke(Logger.TIME,[label,'start']);}},timeEnd:function timeEnd(label){if(typeof label==='string'&&label.length>0){this.invoke(Logger.TIME,[label,'end']);}},// Invokes the logger callback if it's not being filtered.
invoke:function invoke(level,msgArgs){if(logHandler&&this.enabledFor(level)){logHandler(msgArgs,merge({level:level},this.context));}}};// Protected instance which all calls to the to level `Logger` module will be routed through.
var globalLogger=new ContextualLogger({filterLevel:Logger.OFF});// Configure the global Logger instance.
(function(){// Shortcut for optimisers.
var L=Logger;L.enabledFor=bind(globalLogger,globalLogger.enabledFor);L.trace=bind(globalLogger,globalLogger.trace);L.debug=bind(globalLogger,globalLogger.debug);L.time=bind(globalLogger,globalLogger.time);L.timeEnd=bind(globalLogger,globalLogger.timeEnd);L.info=bind(globalLogger,globalLogger.info);L.warn=bind(globalLogger,globalLogger.warn);L.error=bind(globalLogger,globalLogger.error);// Don't forget the convenience alias!
L.log=L.info;})();// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
// object with the supplied log messages and the second being a context object which contains a hash of stateful
// parameters which the logging function can consume.
Logger.setHandler=function(func){logHandler=func;};// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
Logger.setLevel=function(level){// Set the globalLogger's level.
globalLogger.setLevel(level);// Apply this level to all registered contextual loggers.
for(var key in contextualLoggersByNameMap){if(contextualLoggersByNameMap.hasOwnProperty(key)){contextualLoggersByNameMap[key].setLevel(level);}}};// Gets the global logging filter level
Logger.getLevel=function(){return globalLogger.getLevel();};// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
// default context and log handler.
Logger.get=function(name){// All logger instances are cached so they can be configured ahead of use.
return contextualLoggersByNameMap[name]||(contextualLoggersByNameMap[name]=new ContextualLogger(merge({name:name},globalLogger.context)));};// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
// write to the window's console object (if present); the optional options object can be used to customise the
// formatter used to format each log message.
Logger.createDefaultHandler=function(options){options=options||{};options.formatter=options.formatter||function defaultMessageFormatter(messages,context){// Prepend the logger's name to the log message for easy identification.
if(context.name){messages.unshift("["+context.name+"]");}};// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
// that don't offer a native console method.
var timerStartTimeByLabelMap={};// Support for IE8+ (and other, slightly more sane environments)
var invokeConsoleMethod=function invokeConsoleMethod(hdlr,messages){Function.prototype.apply.call(hdlr,console,messages);};// Check for the presence of a logger.
if(typeof console==="undefined"){return function(){/* no console */};}return function(messages,context){// Convert arguments object to Array.
messages=Array.prototype.slice.call(messages);var hdlr=console.log;var timerLabel;if(context.level===Logger.TIME){timerLabel=(context.name?'['+context.name+'] ':'')+messages[0];if(messages[1]==='start'){if(console.time){console.time(timerLabel);}else {timerStartTimeByLabelMap[timerLabel]=new Date().getTime();}}else {if(console.timeEnd){console.timeEnd(timerLabel);}else {invokeConsoleMethod(hdlr,[timerLabel+': '+(new Date().getTime()-timerStartTimeByLabelMap[timerLabel])+'ms']);}}}else {// Delegate through to custom warn/error loggers if present on the console.
if(context.level===Logger.WARN&&console.warn){hdlr=console.warn;}else if(context.level===Logger.ERROR&&console.error){hdlr=console.error;}else if(context.level===Logger.INFO&&console.info){hdlr=console.info;}else if(context.level===Logger.DEBUG&&console.debug){hdlr=console.debug;}else if(context.level===Logger.TRACE&&console.trace){hdlr=console.trace;}options.formatter(messages,context);invokeConsoleMethod(hdlr,messages);}};};// Configure and example a Default implementation which writes to the `window.console` (if present).  The
// `options` hash can be used to configure the default logLevel and provide a custom message formatter.
Logger.useDefaults=function(options){Logger.setLevel(options&&options.defaultLevel||Logger.DEBUG);Logger.setHandler(Logger.createDefaultHandler(options));};// Createa an alias to useDefaults to avoid reaking a react-hooks rule.
Logger.setDefaults=Logger.useDefaults;// Export to popular environments boilerplate.
if(module.exports){module.exports=Logger;}else {Logger._prevLogger=global.Logger;Logger.noConflict=function(){global.Logger=Logger._prevLogger;return Logger;};global.Logger=Logger;}})(commonjsGlobal$1$1);})(logger$1$1);var Logger$2=logger$1$1.exports;var DEFAULT_LOGGER_NAME$1='webrtc-core';var logger$3=Logger$2.get(DEFAULT_LOGGER_NAME$1);Logger$2.useDefaults({defaultLevel:Logger$2.DEBUG,/* eslint-disable-next-line jsdoc/require-jsdoc */formatter:(messages,context)=>{messages.unshift("[".concat(context.name,"]"));}});var DeviceKind$1;(function(DeviceKind){DeviceKind["AudioInput"]="audioinput";DeviceKind["AudioOutput"]="audiooutput";DeviceKind["VideoInput"]="videoinput";})(DeviceKind$1||(DeviceKind$1={}));/**
 * Prompts the user for permission to use a media input which produces a MediaStream with tracks
 * containing the requested types of media.
 *
 * @param constraints - A MediaStreamConstraints object specifying the types of media to request,
 *     along with any requirements for each type.
 * @returns A Promise whose fulfillment handler receives a MediaStream object when the requested
 *     media has successfully been obtained.
 */function getUserMedia(constraints){return __awaiter$2(this,void 0,void 0,function*(){return navigator.mediaDevices.getUserMedia(constraints);});}/**
 * Prompts the user for permission to use a user's display media and audio. If a video track is
 * absent from the constraints argument, one will still be provided. Includes experimental options
 * found in https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia#options.
 *
 * @param constraints - A MediaStreamConstraints object specifying the types of media to request,
 *     along with any requirements for each type, as well as experimental options.
 * @returns A Promise whose fulfillment handler receives a MediaStream object when the requested
 *     media has successfully been obtained.
 */function getDisplayMedia(constraints){return navigator.mediaDevices.getDisplayMedia(constraints);}/**
 * Requests a list of the available media input and output devices, such as microphones, cameras,
 * headsets, and so forth.
 *
 * @returns A Promise that receives an array of MediaDeviceInfo objects when the promise is
 *     fulfilled.
 */function enumerateDevices(){return __awaiter$2(this,void 0,void 0,function*(){return navigator.mediaDevices.enumerateDevices();});}/**
 * Adds the callback handler to be notified of a media device change (for example, a headset is
 * unplugged from the user's computer).
 *
 * @param handler - The callback function to execute.
 */function setOnDeviceChangeHandler$1(handler){navigator.mediaDevices.ondevicechange=handler;}/**
 * Checks permissions using the navigator's permissions api.
 *
 * @param deviceKinds - Array of DeviceKind items.
 * @throws An error if camera or microphone aren't available options for query() (Firefox), or if
 *    navigator.permissions is undefined (Safari and others).
 * @returns Array of Permission Status objects.
 */function checkNavigatorPermissions(deviceKinds){return __awaiter$2(this,void 0,void 0,function*(){var permissionRequests=[];if(deviceKinds.includes(DeviceKind$1.VideoInput)){permissionRequests.push(navigator.permissions.query({name:'camera'}));}if(deviceKinds.includes(DeviceKind$1.AudioInput)){permissionRequests.push(navigator.permissions.query({name:'microphone'}));}return Promise.all(permissionRequests);});}/**
 * Check to see if the user has granted the application permission to use their devices.
 *
 * @param deviceKinds - Array of DeviceKind items.
 * @returns True if device permissions exist, false if otherwise.
 */function checkDevicePermissions(deviceKinds){return __awaiter$2(this,void 0,void 0,function*(){try{var permissions=yield checkNavigatorPermissions(deviceKinds);if(permissions.every(permission=>permission.state==='granted')){return true;}// eslint-disable-next-line no-empty
}catch(e){}try{var devices=yield enumerateDevices();// If permissions are granted, the MediaDeviceInfo objects will have labels.
return devices.filter(device=>deviceKinds.includes(device.kind)).every(device=>device.label);// eslint-disable-next-line no-empty
}catch(e){}return false;});}/**
 * Ensures that the user has granted permissions to the microphone and camera.
 *
 * @param deviceKinds - Array of DeviceKind items.
 * @param callback - Function that will be executed while device permissions are granted. After this
 *    returns, permissions (for example device labels in Firefox) may not be available anymore.
 * @returns The callback's response.
 */function ensureDevicePermissions(deviceKinds,callback){return __awaiter$2(this,void 0,void 0,function*(){try{var hasDevicePermissions=yield checkDevicePermissions(deviceKinds);if(!hasDevicePermissions){var stream=yield getUserMedia({audio:deviceKinds.includes(DeviceKind$1.AudioInput),video:deviceKinds.includes(DeviceKind$1.VideoInput)});// Callback is here to call a function while an active capture exists, so that the browser
// (Firefox) will allow the user to access device information.
var callbackRes=yield callback();// Stop tracks in the stream so the browser (Safari) will know that there is not an active
// stream running.
stream.getTracks().forEach(track=>track.stop());return callbackRes;}return callback();}catch(e){logger$3.error(e);throw new Error('Failed to ensure device permissions.');}});}var media=/*#__PURE__*/Object.freeze({__proto__:null,get DeviceKind(){return DeviceKind$1;},getUserMedia:getUserMedia,getDisplayMedia:getDisplayMedia,enumerateDevices:enumerateDevices,setOnDeviceChangeHandler:setOnDeviceChangeHandler$1,checkDevicePermissions:checkDevicePermissions,ensureDevicePermissions:ensureDevicePermissions});var WebrtcCoreErrorType;(function(WebrtcCoreErrorType){WebrtcCoreErrorType["DEVICE_PERMISSION_DENIED"]="DEVICE_PERMISSION_DENIED";WebrtcCoreErrorType["CREATE_STREAM_FAILED"]="CREATE_STREAM_FAILED";WebrtcCoreErrorType["ADD_EFFECT_FAILED"]="ADD_EFFECT_FAILED";})(WebrtcCoreErrorType||(WebrtcCoreErrorType={}));/**
 * Represents a WebRTC core error, which contains error type and error message.
 */class WebrtcCoreError{/**
     * Creates new error.
     *
     * @param type - Error type.
     * @param message - Error message.
     */constructor(type){var message=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';this.type=type;this.message=message;}}/**
 * Creates a camera stream. Please note that the constraint params in second getUserMedia call would NOT take effect when:
 *
 * 1. Previous captured video stream from the same device is not stopped.
 * 2. Previous createCameraStream() call for the same device is in progress.
 *
 * @param cameraStreamConstructor - Constructor for the local camera stream.
 * @param constraints - Video device constraints.
 * @returns A LocalCameraStream object or an error.
 */function createCameraStream(cameraStreamConstructor,constraints){return __awaiter$2(this,void 0,void 0,function*(){var stream;try{stream=yield getUserMedia({video:Object.assign({},constraints)});}catch(error){throw new WebrtcCoreError(WebrtcCoreErrorType.CREATE_STREAM_FAILED,"Failed to create camera stream: ".concat(error));}// eslint-disable-next-line new-cap
return new cameraStreamConstructor(stream);});}/**
 * Creates a LocalMicrophoneStream with the given constraints.
 *
 * @param microphoneStreamConstructor - Constructor for the local microphone stream.
 * @param constraints - Audio device constraints.
 * @returns A LocalMicrophoneStream object or an error.
 */function createMicrophoneStream(microphoneStreamConstructor,constraints){return __awaiter$2(this,void 0,void 0,function*(){var stream;try{stream=yield getUserMedia({audio:Object.assign({},constraints)});}catch(error){throw new WebrtcCoreError(WebrtcCoreErrorType.CREATE_STREAM_FAILED,"Failed to create microphone stream: ".concat(error));}// eslint-disable-next-line new-cap
return new microphoneStreamConstructor(stream);});}/**
 * Creates a LocalCameraStream and a LocalMicrophoneStream with the given constraints.
 *
 * @param cameraStreamConstructor - Constructor for the local camera stream.
 * @param microphoneStreamConstructor - Constructor for the local microphone stream.
 * @param constraints - Object containing video and audio device constraints.
 * @param constraints.video - Video device constraints.
 * @param constraints.audio - Audio device constraints.
 * @returns A Promise that resolves to a LocalCameraStream and a LocalMicrophoneStream or an error.
 */function createCameraAndMicrophoneStreams(cameraStreamConstructor,microphoneStreamConstructor,constraints){return __awaiter$2(this,void 0,void 0,function*(){var stream;try{stream=yield getUserMedia({video:Object.assign({},constraints===null||constraints===void 0?void 0:constraints.video),audio:Object.assign({},constraints===null||constraints===void 0?void 0:constraints.audio)});}catch(error){throw new WebrtcCoreError(WebrtcCoreErrorType.CREATE_STREAM_FAILED,"Failed to create camera and microphone streams: ".concat(error));}// eslint-disable-next-line new-cap
var localCameraStream=new cameraStreamConstructor(new MediaStream(stream.getVideoTracks()));// eslint-disable-next-line new-cap
var localMicrophoneStream=new microphoneStreamConstructor(new MediaStream(stream.getAudioTracks()));return [localCameraStream,localMicrophoneStream];});}/**
 * Creates a LocalDisplayStream and a LocalSystemAudioStream with the given parameters.
 *
 * This is a more advanced version of createDisplayStreamWithAudio that allows the user to specify
 * additional display media options and constraints.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia#options.
 *
 * @param options - An object containing the options for creating the display and system audio streams.
 * @param options.video - An object containing the video stream options.
 * @param options.video.displayStreamConstructor - Constructor for the local display stream.
 * @param options.video.constraints - Video device constraints.
 * @param options.video.videoContentHint - A hint for the content of the stream.
 * @param options.video.preferCurrentTab - Whether to offer the current tab as the most prominent capture source.
 * @param options.video.selfBrowserSurface - Whether to allow the user to select the current tab for capture.
 * @param options.video.surfaceSwitching - Whether to allow the user to dynamically switch the shared tab during screen-sharing.
 * @param options.video.monitorTypeSurfaces - Whether to offer the user the option to choose display surfaces whose type is monitor.
 * @param options.audio - An object containing the audio stream options. If present, a system audio stream will be created.
 * @param options.audio.systemAudioStreamConstructor - Constructor for the local system audio stream.
 * @param options.audio.constraints - Audio device constraints.
 * @param options.audio.systemAudio - Whether to include the system audio among the possible audio sources offered to the user.
 * @param options.controller - CaptureController to further manipulate the capture session.
 * @returns A Promise that resolves to a LocalDisplayStream and a LocalSystemAudioStream or an
 * error. If no system audio is available, the LocalSystemAudioStream will be resolved as null
 * instead.
 */function createDisplayMedia(options){return __awaiter$2(this,void 0,void 0,function*(){var _a,_b;var stream;var videoConstraints=options.video.constraints||true;var audioConstraints=((_a=options.audio)===null||_a===void 0?void 0:_a.constraints)||!!options.audio;try{stream=yield getDisplayMedia({video:videoConstraints,audio:audioConstraints,controller:options.controller,preferCurrentTab:options.video.preferCurrentTab,selfBrowserSurface:options.video.selfBrowserSurface,surfaceSwitching:options.video.surfaceSwitching,systemAudio:(_b=options.audio)===null||_b===void 0?void 0:_b.systemAudio,monitorTypeSurfaces:options.video.monitorTypeSurfaces});}catch(error){throw new WebrtcCoreError(WebrtcCoreErrorType.CREATE_STREAM_FAILED,"Failed to create display and/or system audio streams: ".concat(error));}// eslint-disable-next-line new-cap
var localDisplayStream=new options.video.displayStreamConstructor(new MediaStream(stream.getVideoTracks()));if(options.video.videoContentHint){localDisplayStream.contentHint=options.video.videoContentHint;}var localSystemAudioStream=null;if(options.audio&&stream.getAudioTracks().length>0){// eslint-disable-next-line new-cap
localSystemAudioStream=new options.audio.systemAudioStreamConstructor(new MediaStream(stream.getAudioTracks()));}return [localDisplayStream,localSystemAudioStream];});}/**
 * Creates a LocalDisplayStream with the given parameters.
 *
 * @param displayStreamConstructor - Constructor for the local display stream.
 * @param videoContentHint - An optional parameter to give a hint for the content of the stream.
 * @returns A Promise that resolves to a LocalDisplayStream or an error.
 */function createDisplayStream(displayStreamConstructor,videoContentHint){return __awaiter$2(this,void 0,void 0,function*(){var[localDisplayStream]=yield createDisplayMedia({video:{displayStreamConstructor,videoContentHint}});return localDisplayStream;});}/**
 * Creates a LocalDisplayStream and a LocalSystemAudioStream with the given parameters.
 *
 * @param displayStreamConstructor - Constructor for the local display stream.
 * @param systemAudioStreamConstructor - Constructor for the local system audio stream.
 * @param videoContentHint - An optional parameter to give a hint for the content of the stream.
 * @returns A Promise that resolves to a LocalDisplayStream and a LocalSystemAudioStream or an
 * error. If no system audio is available, the LocalSystemAudioStream will be resolved as null
 * instead.
 */function createDisplayStreamWithAudio(displayStreamConstructor,systemAudioStreamConstructor,videoContentHint){return __awaiter$2(this,void 0,void 0,function*(){return createDisplayMedia({video:{displayStreamConstructor,videoContentHint},audio:{systemAudioStreamConstructor}});});}/**
 * Enumerates the media input and output devices available.
 *
 * @param deviceKind - Optional filter to return a specific device kind.
 * @returns List of media devices in an array of MediaDeviceInfo objects.
 */function getDevices(deviceKind){return __awaiter$2(this,void 0,void 0,function*(){var devices;var deviceKinds=deviceKind?[deviceKind]:[DeviceKind$1.AudioInput,DeviceKind$1.VideoInput];try{devices=yield ensureDevicePermissions(deviceKinds,enumerateDevices);}catch(error){throw new WebrtcCoreError(WebrtcCoreErrorType.DEVICE_PERMISSION_DENIED,'Failed to ensure device permissions');}return devices.filter(v=>deviceKind?v.kind===deviceKind:true);});}/**
 * Helper function to get a list of microphone devices.
 *
 * @returns List of microphone devices in an array of MediaDeviceInfo objects.
 */function getAudioInputDevices(){return __awaiter$2(this,void 0,void 0,function*(){return getDevices(DeviceKind$1.AudioInput);});}/**
 * Helper function to get a list of speaker devices.
 *
 * @returns List of speaker devices in an array of MediaDeviceInfo objects.
 */function getAudioOutputDevices(){return __awaiter$2(this,void 0,void 0,function*(){return getDevices(DeviceKind$1.AudioOutput);});}/**
 * Helper function to get a list of camera devices.
 *
 * @returns List of camera devices in an array of MediaDeviceInfo objects.
 */function getVideoInputDevices(){return __awaiter$2(this,void 0,void 0,function*(){return getDevices(DeviceKind$1.VideoInput);});}/**
 * Export the setOnDeviceChangeHandler method directly from the core lib.
 */var {setOnDeviceChangeHandler}=media;var events$1$1={exports:{}};var R$1$1=typeof Reflect==='object'?Reflect:null;var ReflectApply$1$1=R$1$1&&typeof R$1$1.apply==='function'?R$1$1.apply:function ReflectApply(target,receiver,args){return Function.prototype.apply.call(target,receiver,args);};var ReflectOwnKeys$1$1;if(R$1$1&&typeof R$1$1.ownKeys==='function'){ReflectOwnKeys$1$1=R$1$1.ownKeys;}else if(Object.getOwnPropertySymbols){ReflectOwnKeys$1$1=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));};}else {ReflectOwnKeys$1$1=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target);};}function ProcessEmitWarning$1$1(warning){if(console&&console.warn)console.warn(warning);}var NumberIsNaN$1$1=Number.isNaN||function NumberIsNaN(value){return value!==value;};function EventEmitter$1$1(){EventEmitter$1$1.init.call(this);}events$1$1.exports=EventEmitter$1$1;events$1$1.exports.once=once$1$1;// Backwards-compat with node 0.10.x
EventEmitter$1$1.EventEmitter=EventEmitter$1$1;EventEmitter$1$1.prototype._events=undefined;EventEmitter$1$1.prototype._eventsCount=0;EventEmitter$1$1.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners$1$1=10;function checkListener$1$1(listener){if(typeof listener!=='function'){throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof listener);}}Object.defineProperty(EventEmitter$1$1,'defaultMaxListeners',{enumerable:true,get:function get(){return defaultMaxListeners$1$1;},set:function set(arg){if(typeof arg!=='number'||arg<0||NumberIsNaN$1$1(arg)){throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+arg+'.');}defaultMaxListeners$1$1=arg;}});EventEmitter$1$1.init=function(){if(this._events===undefined||this._events===Object.getPrototypeOf(this)._events){this._events=Object.create(null);this._eventsCount=0;}this._maxListeners=this._maxListeners||undefined;};// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$1$1.prototype.setMaxListeners=function setMaxListeners(n){if(typeof n!=='number'||n<0||NumberIsNaN$1$1(n)){throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+'.');}this._maxListeners=n;return this;};function _getMaxListeners$1$1(that){if(that._maxListeners===undefined)return EventEmitter$1$1.defaultMaxListeners;return that._maxListeners;}EventEmitter$1$1.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners$1$1(this);};EventEmitter$1$1.prototype.emit=function emit(type){var args=[];for(var i=1;i<arguments.length;i++){args.push(arguments[i]);}var doError=type==='error';var events=this._events;if(events!==undefined)doError=doError&&events.error===undefined;else if(!doError)return false;// If there is no 'error' event listener then throw.
if(doError){var er;if(args.length>0)er=args[0];if(er instanceof Error){// Note: The comments on the `throw` lines are intentional, they show
// up in Node's output if this results in an unhandled exception.
throw er;// Unhandled 'error' event
}// At least give some kind of context to the user
var err=new Error('Unhandled error.'+(er?' ('+er.message+')':''));err.context=er;throw err;// Unhandled 'error' event
}var handler=events[type];if(handler===undefined)return false;if(typeof handler==='function'){ReflectApply$1$1(handler,this,args);}else {var len=handler.length;var listeners=arrayClone$1$1(handler,len);for(var i=0;i<len;++i){ReflectApply$1$1(listeners[i],this,args);}}return true;};function _addListener$1$1(target,type,listener,prepend){var m;var events;var existing;checkListener$1$1(listener);events=target._events;if(events===undefined){events=target._events=Object.create(null);target._eventsCount=0;}else {// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(events.newListener!==undefined){target.emit('newListener',type,listener.listener?listener.listener:listener);// Re-assign `events` because a newListener handler could have caused the
// this._events to be assigned to a new object
events=target._events;}existing=events[type];}if(existing===undefined){// Optimize the case of one listener. Don't need the extra array object.
existing=events[type]=listener;++target._eventsCount;}else {if(typeof existing==='function'){// Adding the second element, need to change to array.
existing=events[type]=prepend?[listener,existing]:[existing,listener];// If we've already got an array, just append.
}else if(prepend){existing.unshift(listener);}else {existing.push(listener);}// Check for listener leak
m=_getMaxListeners$1$1(target);if(m>0&&existing.length>m&&!existing.warned){existing.warned=true;// No error code for this since it is a Warning
// eslint-disable-next-line no-restricted-syntax
var w=new Error('Possible EventEmitter memory leak detected. '+existing.length+' '+String(type)+' listeners '+'added. Use emitter.setMaxListeners() to '+'increase limit');w.name='MaxListenersExceededWarning';w.emitter=target;w.type=type;w.count=existing.length;ProcessEmitWarning$1$1(w);}}return target;}EventEmitter$1$1.prototype.addListener=function addListener(type,listener){return _addListener$1$1(this,type,listener,false);};EventEmitter$1$1.prototype.on=EventEmitter$1$1.prototype.addListener;EventEmitter$1$1.prototype.prependListener=function prependListener(type,listener){return _addListener$1$1(this,type,listener,true);};function onceWrapper$1$1(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;if(arguments.length===0)return this.listener.call(this.target);return this.listener.apply(this.target,arguments);}}function _onceWrap$1$1(target,type,listener){var state={fired:false,wrapFn:undefined,target:target,type:type,listener:listener};var wrapped=onceWrapper$1$1.bind(state);wrapped.listener=listener;state.wrapFn=wrapped;return wrapped;}EventEmitter$1$1.prototype.once=function once(type,listener){checkListener$1$1(listener);this.on(type,_onceWrap$1$1(this,type,listener));return this;};EventEmitter$1$1.prototype.prependOnceListener=function prependOnceListener(type,listener){checkListener$1$1(listener);this.prependListener(type,_onceWrap$1$1(this,type,listener));return this;};// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter$1$1.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;checkListener$1$1(listener);events=this._events;if(events===undefined)return this;list=events[type];if(list===undefined)return this;if(list===listener||list.listener===listener){if(--this._eventsCount===0)this._events=Object.create(null);else {delete events[type];if(events.removeListener)this.emit('removeListener',type,list.listener||listener);}}else if(typeof list!=='function'){position=-1;for(i=list.length-1;i>=0;i--){if(list[i]===listener||list[i].listener===listener){originalListener=list[i].listener;position=i;break;}}if(position<0)return this;if(position===0)list.shift();else {spliceOne$1$1(list,position);}if(list.length===1)events[type]=list[0];if(events.removeListener!==undefined)this.emit('removeListener',type,originalListener||listener);}return this;};EventEmitter$1$1.prototype.off=EventEmitter$1$1.prototype.removeListener;EventEmitter$1$1.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events,i;events=this._events;if(events===undefined)return this;// not listening for removeListener, no need to emit
if(events.removeListener===undefined){if(arguments.length===0){this._events=Object.create(null);this._eventsCount=0;}else if(events[type]!==undefined){if(--this._eventsCount===0)this._events=Object.create(null);else delete events[type];}return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){var keys=Object.keys(events);var key;for(i=0;i<keys.length;++i){key=keys[i];if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events=Object.create(null);this._eventsCount=0;return this;}listeners=events[type];if(typeof listeners==='function'){this.removeListener(type,listeners);}else if(listeners!==undefined){// LIFO order
for(i=listeners.length-1;i>=0;i--){this.removeListener(type,listeners[i]);}}return this;};function _listeners$1$1(target,type,unwrap){var events=target._events;if(events===undefined)return [];var evlistener=events[type];if(evlistener===undefined)return [];if(typeof evlistener==='function')return unwrap?[evlistener.listener||evlistener]:[evlistener];return unwrap?unwrapListeners$1$1(evlistener):arrayClone$1$1(evlistener,evlistener.length);}EventEmitter$1$1.prototype.listeners=function listeners(type){return _listeners$1$1(this,type,true);};EventEmitter$1$1.prototype.rawListeners=function rawListeners(type){return _listeners$1$1(this,type,false);};EventEmitter$1$1.listenerCount=function(emitter,type){if(typeof emitter.listenerCount==='function'){return emitter.listenerCount(type);}else {return listenerCount$1$1.call(emitter,type);}};EventEmitter$1$1.prototype.listenerCount=listenerCount$1$1;function listenerCount$1$1(type){var events=this._events;if(events!==undefined){var evlistener=events[type];if(typeof evlistener==='function'){return 1;}else if(evlistener!==undefined){return evlistener.length;}}return 0;}EventEmitter$1$1.prototype.eventNames=function eventNames(){return this._eventsCount>0?ReflectOwnKeys$1$1(this._events):[];};function arrayClone$1$1(arr,n){var copy=new Array(n);for(var i=0;i<n;++i){copy[i]=arr[i];}return copy;}function spliceOne$1$1(list,index){for(;index+1<list.length;index++){list[index]=list[index+1];}list.pop();}function unwrapListeners$1$1(arr){var ret=new Array(arr.length);for(var i=0;i<ret.length;++i){ret[i]=arr[i].listener||arr[i];}return ret;}function once$1$1(emitter,name){return new Promise(function(resolve,reject){function errorListener(err){emitter.removeListener(name,resolver);reject(err);}function resolver(){if(typeof emitter.removeListener==='function'){emitter.removeListener('error',errorListener);}resolve([].slice.call(arguments));}eventTargetAgnosticAddListener$1$1(emitter,name,resolver,{once:true});if(name!=='error'){addErrorHandlerIfEventEmitter$1$1(emitter,errorListener,{once:true});}});}function addErrorHandlerIfEventEmitter$1$1(emitter,handler,flags){if(typeof emitter.on==='function'){eventTargetAgnosticAddListener$1$1(emitter,'error',handler,flags);}}function eventTargetAgnosticAddListener$1$1(emitter,name,listener,flags){if(typeof emitter.on==='function'){if(flags.once){emitter.once(name,listener);}else {emitter.on(name,listener);}}else if(typeof emitter.addEventListener==='function'){// EventTarget does not have `error` event semantics like Node
// EventEmitters, we do not listen for `error` events here.
emitter.addEventListener(name,function wrapListener(arg){// IE does not have builtin `{ once: true }` support so we
// have to do it manually.
if(flags.once){emitter.removeEventListener(name,wrapListener);}listener(arg);});}else {throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof emitter);}}class EventEmitter$2$1 extends events$1$1.exports.EventEmitter{}class TypedEvent$1{constructor(){this.emitter=new EventEmitter$2$1();}on(handler){this.emitter.on('event',handler);}once(handler){this.emitter.once('event',handler);}off(handler){this.emitter.off('event',handler);}emit(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}this.emitter.emit('event',...args);}}function AddEvents(Base){return class WithEvents extends Base{on(eventName,handler){this[eventName].on(handler);}once(eventName,handler){this[eventName].once(handler);}off(eventName,handler){this[eventName].off(handler);}};}var _a$2$1;exports.StreamEventNames = void 0;(function(StreamEventNames){StreamEventNames["Ended"]="stream-ended";})(exports.StreamEventNames||(exports.StreamEventNames={}));/**
 * Base stream class.
 */class _Stream{/**
     * Create a Stream from the given values.
     *
     * @param stream - The initial output MediaStream for this Stream.
     */constructor(stream){// TODO: these should be protected, but we need the helper type in ts-events
// to hide the 'emit' method from TypedEvent.
this[_a$2$1]=new TypedEvent$1();this.outputStream=stream;this.handleTrackEnded=this.handleTrackEnded.bind(this);this.addTrackHandlersForStreamEvents(this.outputTrack);}/**
     * Handler which is called when a track's ended event fires.
     */handleTrackEnded(){this[exports.StreamEventNames.Ended].emit();}/**
     * Helper function to add event handlers to a MediaStreamTrack. Unlike the virtual
     * {@link addTrackHandlers} function, which can be overridden, this function is internal to this
     * class and will only add the event handlers relevant to this class. It prevents, for example,
     * accidentally adding the same event handlers multiple times, which could happen if the virtual
     * `addTrackHandlers` method was called from a subclass's constructor.
     *
     * @param track - The MediaStreamTrack.
     */addTrackHandlersForStreamEvents(track){track.addEventListener('ended',this.handleTrackEnded);}/**
     * Add event handlers to a MediaStreamTrack.
     *
     * @param track - The MediaStreamTrack.
     */addTrackHandlers(track){this.addTrackHandlersForStreamEvents(track);}/**
     * Remove event handlers from a MediaStreamTrack.
     *
     * @param track - The MediaStreamTrack.
     */removeTrackHandlers(track){track.removeEventListener('ended',this.handleTrackEnded);}/**
     * Get the ID of the output stream.
     *
     * @returns The ID of the output stream.
     */get id(){return this.outputStream.id;}/**
     * Get the track of the output stream.
     *
     * @returns The output track.
     */get outputTrack(){return this.outputStream.getTracks()[0];}}_a$2$1=exports.StreamEventNames.Ended;var Stream=AddEvents(_Stream);var _a$1$1,_b,_c,_d,_e;exports.LocalStreamEventNames = void 0;(function(LocalStreamEventNames){LocalStreamEventNames["UserMuteStateChange"]="user-mute-state-change";LocalStreamEventNames["SystemMuteStateChange"]="system-mute-state-change";LocalStreamEventNames["ConstraintsChange"]="constraints-change";LocalStreamEventNames["OutputTrackChange"]="output-track-change";LocalStreamEventNames["EffectAdded"]="effect-added";})(exports.LocalStreamEventNames||(exports.LocalStreamEventNames={}));/**
 * A stream which originates on the local device.
 */class _LocalStream extends Stream{/**
     * Create a LocalStream from the given values.
     *
     * @param stream - The initial output MediaStream for this Stream.
     */constructor(stream){super(stream);this[_a$1$1]=new TypedEvent$1();this[_b]=new TypedEvent$1();this[_c]=new TypedEvent$1();this[_d]=new TypedEvent$1();this[_e]=new TypedEvent$1();this.effects=[];this.loadingEffects=new Map();this.inputStream=stream;this.handleTrackMutedBySystem=this.handleTrackMutedBySystem.bind(this);this.handleTrackUnmutedBySystem=this.handleTrackUnmutedBySystem.bind(this);this.addTrackHandlersForLocalStreamEvents(this.inputTrack);}/**
     * Handler which is called when a track's mute event fires.
     */handleTrackMutedBySystem(){this[exports.LocalStreamEventNames.SystemMuteStateChange].emit(true);}/**
     * Handler which is called when a track's unmute event fires.
     */handleTrackUnmutedBySystem(){this[exports.LocalStreamEventNames.SystemMuteStateChange].emit(false);}/**
     * Helper function to add event handlers to a MediaStreamTrack. See
     * {@link Stream.addTrackHandlersForStreamEvents} for why this is useful.
     *
     * @param track - The MediaStreamTrack.
     */addTrackHandlersForLocalStreamEvents(track){track.addEventListener('mute',this.handleTrackMutedBySystem);track.addEventListener('unmute',this.handleTrackUnmutedBySystem);}/**
     * @inheritdoc
     */addTrackHandlers(track){super.addTrackHandlers(track);this.addTrackHandlersForLocalStreamEvents(track);}/**
     * @inheritdoc
     */removeTrackHandlers(track){super.removeTrackHandlers(track);track.removeEventListener('mute',this.handleTrackMutedBySystem);track.removeEventListener('unmute',this.handleTrackUnmutedBySystem);}/**
     * Get the track within the MediaStream with which this LocalStream was created.
     *
     * @returns The track within the MediaStream with which this LocalStream
     * was created.
     */get inputTrack(){return this.inputStream.getTracks()[0];}/**
     * Check whether or not this stream is muted. This considers both whether the stream has been
     * muted by the user (see {@link userMuted}) and whether the stream has been muted by the system
     * (see {@link systemMuted}).
     *
     * @returns True if the stream is muted, false otherwise.
     */get muted(){return this.userMuted||this.systemMuted;}/**
     * Check whether or not this stream has been muted by the user. This is equivalent to checking the
     * MediaStreamTrack "enabled" state.
     *
     * @returns True if the stream has been muted by the user, false otherwise.
     */get userMuted(){return !this.inputTrack.enabled;}/**
     * Check whether or not this stream has been muted by the user. This is equivalent to checking the
     * MediaStreamTrack "muted" state.
     *
     * @returns True if the stream has been muted by the system, false otherwise.
     */get systemMuted(){return this.inputTrack.muted;}/**
     * Set the user mute state of this stream.
     *
     * Note: This sets the user-toggled mute state, equivalent to changing the "enabled" state of the
     * track. It is separate from the system-toggled mute state.
     *
     * @param isMuted - True to mute, false to unmute.
     */setUserMuted(isMuted){if(this.inputTrack.enabled===isMuted){this.inputTrack.enabled=!isMuted;this[exports.LocalStreamEventNames.UserMuteStateChange].emit(isMuted);}}/**
     * @inheritdoc
     */getSettings(){return this.inputTrack.getSettings();}/**
     * Get the label of the input track on this stream.
     *
     * @returns The label of the track.
     */get label(){return this.inputTrack.label;}/**
     * Get the readyState of the input track on this stream.
     *
     * @returns The readyState of the track.
     */get readyState(){return this.inputTrack.readyState;}/**
     * Change the track of the output stream to a different track.
     *
     * Note: this method assumes and enforces that if both input and output streams have the same
     * track, then they must also be the same stream.
     *
     * @param newTrack - The track to be used in the output stream.
     */changeOutputTrack(newTrack){if(this.outputTrack.id!==newTrack.id){// If the input track and the *old* output track are currently the same, then the streams must
// be the same too. We want to apply the new track to the output stream without affecting the
// input stream, so we separate them by setting the input stream to be its own stream.
if(this.inputTrack.id===this.outputTrack.id){this.inputStream=new MediaStream(this.inputStream);}this.outputStream.removeTrack(this.outputTrack);this.outputStream.addTrack(newTrack);// If the input track and the *new* output track are now the same, then we want the streams to
// be the same too.
if(this.inputTrack.id===this.outputTrack.id){this.inputStream=this.outputStream;}this[exports.LocalStreamEventNames.OutputTrackChange].emit(newTrack);}}/**
     * @inheritdoc
     */stop(){this.inputTrack.stop();this.outputTrack.stop();this.disposeEffects();// calling stop() will not automatically emit Ended, so we emit it here
this[exports.StreamEventNames.Ended].emit();}/**
     * Adds an effect to a local stream.
     *
     * @param effect - The effect to add.
     */addEffect(effect){return __awaiter$2(this,void 0,void 0,function*(){// Check if the effect has already been added.
if(this.effects.some(e=>e.id===effect.id)){return;}// Load the effect. Because loading is asynchronous, keep track of the loading effects.
this.loadingEffects.set(effect.kind,effect);yield effect.load(this.outputTrack);// After loading, check whether or not we still want to use this effect. If another effect of
// the same kind was added while this effect was loading, we only want to use the latest effect,
// so dispose this one. If the effects list was cleared while this effect was loading, also
// dispose it.
if(effect!==this.loadingEffects.get(effect.kind)){yield effect.dispose();throw new WebrtcCoreError(WebrtcCoreErrorType.ADD_EFFECT_FAILED,"Another effect with kind ".concat(effect.kind," was added while effect ").concat(effect.id," was loading, or the effects list was cleared."));}this.loadingEffects.delete(effect.kind);/**
             * Handle when the effect's output track has been changed. This will update the input of the
             * next effect in the effects list of the output of the stream.
             *
             * @param track - The new output track of the effect.
             */var handleEffectTrackUpdated=track=>{var _f;var effectIndex=this.effects.findIndex(e=>e.id===effect.id);if(effectIndex===this.effects.length-1){this.changeOutputTrack(track);}else if(effectIndex>=0){(_f=this.effects[effectIndex+1])===null||_f===void 0?void 0:_f.replaceInputTrack(track);}else {logger$3.error("Effect with ID ".concat(effect.id," not found in effects list."));}};/**
             * Handle when the effect has been disposed. This will remove all event listeners from the
             * effect.
             */var handleEffectDisposed=()=>{effect.off('track-updated',handleEffectTrackUpdated);effect.off('disposed',handleEffectDisposed);};// TODO: using EffectEvent.TrackUpdated or EffectEvent.Disposed will cause the entire
// web-media-effects lib to be rebuilt and inflates the size of the webrtc-core build, so
// we use type assertion here as a temporary workaround.
effect.on('track-updated',handleEffectTrackUpdated);effect.on('disposed',handleEffectDisposed);// Add the effect to the effects list. If an effect of the same kind has already been added,
// dispose the existing effect and replace it with the new effect. If the existing effect was
// enabled, also enable the new effect.
var existingEffectIndex=this.effects.findIndex(e=>e.kind===effect.kind);if(existingEffectIndex>=0){var[existingEffect]=this.effects.splice(existingEffectIndex,1,effect);if(existingEffect.isEnabled){// If the existing effect is not the first effect in the effects list, then the input of the
// new effect should be the output of the previous effect in the effects list. We know the
// output track of the previous effect must exist because it must have been loaded (and all
// loaded effects have an output track).
var inputTrack=existingEffectIndex===0?this.inputTrack:this.effects[existingEffectIndex-1].getOutputTrack();yield effect.replaceInputTrack(inputTrack);// Enabling the new effect will trigger the track-updated event, which will handle the new
// effect's updated output track.
yield effect.enable();}yield existingEffect.dispose();}else {this.effects.push(effect);}// Emit an event with the effect so others can listen to the effect events.
this[exports.LocalStreamEventNames.EffectAdded].emit(effect);});}/**
     * Get an effect from the effects list by ID.
     *
     * @param id - The id of the effect you want to get.
     * @returns The effect or undefined.
     */getEffectById(id){return this.effects.find(effect=>effect.id===id);}/**
     * Get an effect from the effects list by kind.
     *
     * @param kind - The kind of the effect you want to get.
     * @returns The effect or undefined.
     */getEffectByKind(kind){return this.effects.find(effect=>effect.kind===kind);}/**
     * Get all the effects from the effects list.
     *
     * @returns A list of effects.
     */getEffects(){return this.effects;}/**
     * Method to serialize data about input, output streams
     * and also effects from LocalStream.
     *
     * @returns - A JSON-compatible object representation with data from LocalStream.
     */toJSON(){return {muted:this.muted,label:this.label,readyState:this.readyState,inputStream:{active:this.inputStream.active,id:this.inputStream.id,enabled:this.inputTrack.enabled,muted:this.inputTrack.muted},outputStream:{active:this.outputStream.active,id:this.outputStream.id},effects:this.effects.map(effect=>{return {id:effect.id,kind:effect.kind,isEnabled:effect.isEnabled};})};}/**
     * Cleanup the local effects.
     */disposeEffects(){return __awaiter$2(this,void 0,void 0,function*(){this.loadingEffects.clear();// Dispose of any effects currently in use
if(this.effects.length>0){this.changeOutputTrack(this.inputTrack);yield Promise.all(this.effects.map(effect=>effect.dispose()));this.effects=[];}});}}_a$1$1=exports.LocalStreamEventNames.UserMuteStateChange,_b=exports.LocalStreamEventNames.SystemMuteStateChange,_c=exports.LocalStreamEventNames.ConstraintsChange,_d=exports.LocalStreamEventNames.OutputTrackChange,_e=exports.LocalStreamEventNames.EffectAdded;var LocalStream=AddEvents(_LocalStream);/**
 * An audio LocalStream.
 */class LocalAudioStream extends LocalStream{/**
     * Apply constraints to the stream.
     *
     * @param constraints - The constraints to apply.
     * @returns A promise which resolves when the constraints have been successfully applied.
     */applyConstraints(constraints){return __awaiter$2(this,void 0,void 0,function*(){logger$3.log("Applying constraints to local track:",constraints);return this.inputTrack.applyConstraints(constraints).then(()=>{this[exports.LocalStreamEventNames.ConstraintsChange].emit();});});}}/**
 * A video LocalStream.
 */class LocalVideoStream extends LocalStream{/**
     * Apply constraints to the stream.
     *
     * @param constraints - The constraints to apply.
     * @returns A promise which resolves when the constraints have been successfully applied.
     */applyConstraints(constraints){return __awaiter$2(this,void 0,void 0,function*(){logger$3.log("Applying constraints to local track:",constraints);return this.inputTrack.applyConstraints(constraints).then(()=>{this[exports.LocalStreamEventNames.ConstraintsChange].emit();});});}/**
     * Get the content hint for this stream.
     *
     * @returns The content hint setting for this stream, or undefined if none has been set.
     */get contentHint(){return this.inputTrack.contentHint;}/**
     * Set the content hint for this stream.
     *
     * @param hint - The content hint to set.
     */set contentHint(hint){this.inputTrack.contentHint=hint;}/**
     * Check the resolution and then return how many layers will be active.
     *
     * @returns The active layers count.
     */getNumActiveSimulcastLayers(){var activeSimulcastLayersNumber=0;var videoHeight=this.inputTrack.getSettings().height;if(videoHeight<=180){activeSimulcastLayersNumber=1;}else if(videoHeight<=360){activeSimulcastLayersNumber=2;}else {activeSimulcastLayersNumber=3;}return activeSimulcastLayersNumber;}}/**
 * A local camera stream.
 */class LocalCameraStream extends LocalVideoStream{}/**
 * A local display stream.
 */class LocalDisplayStream extends LocalVideoStream{}/**
 * A local microphone stream.
 */class LocalMicrophoneStream extends LocalAudioStream{}/**
 * A local system audio stream.
 */class LocalSystemAudioStream extends LocalAudioStream{}var _a$6$1;var RemoteMediaState;(function(RemoteMediaState){RemoteMediaState["Started"]="started";RemoteMediaState["Stopped"]="stopped";})(RemoteMediaState||(RemoteMediaState={}));exports.RemoteStreamEventNames = void 0;(function(RemoteStreamEventNames){RemoteStreamEventNames["MediaStateChange"]="media-state-change";})(exports.RemoteStreamEventNames||(exports.RemoteStreamEventNames={}));/**
 * A stream originating from a remote peer.
 */class _RemoteStream extends Stream{/**
     * Create a RemoteStream from the given values.
     *
     * @param stream - The initial output MediaStream for this Stream.
     */constructor(stream){super(stream);this[_a$6$1]=new TypedEvent$1();this.handleMediaStarted=this.handleMediaStarted.bind(this);this.handleMediaStopped=this.handleMediaStopped.bind(this);this.outputTrack.addEventListener('mute',this.handleMediaStopped);this.outputTrack.addEventListener('unmute',this.handleMediaStarted);}/**
     * @inheritdoc
     */handleMediaStarted(){this[exports.RemoteStreamEventNames.MediaStateChange].emit(RemoteMediaState.Started);}/**
     * @inheritdoc
     */handleMediaStopped(){this[exports.RemoteStreamEventNames.MediaStateChange].emit(RemoteMediaState.Stopped);}/**
     * Helper function to add event handlers to a MediaStreamTrack. See
     * {@link Stream.addTrackHandlersForStreamEvents} for why this is useful.
     *
     * @param track - The MediaStreamTrack.
     */addTrackHandlersForRemoteStreamEvents(track){track.addEventListener('mute',this.handleMediaStopped);track.addEventListener('unmute',this.handleMediaStarted);}/**
     * @inheritdoc
     */addTrackHandlers(track){super.addTrackHandlers(track);this.addTrackHandlersForRemoteStreamEvents(track);}/**
     * @inheritdoc
     */removeTrackHandlers(track){super.removeTrackHandlers(track);track.removeEventListener('mute',this.handleMediaStopped);track.removeEventListener('unmute',this.handleMediaStarted);}/**
     * Get whether the media on this stream has started or stopped.
     *
     * @returns The state of the media.
     */get mediaState(){return this.outputTrack.muted?RemoteMediaState.Stopped:RemoteMediaState.Started;}/**
     * @inheritdoc
     */getSettings(){return this.outputTrack.getSettings();}/**
     * Replace the existing track on the output stream for a new track.
     *
     * @param newTrack - The track to add to the stream.
     */replaceTrack(newTrack){var oldTrack=this.outputTrack;this.removeTrackHandlers(oldTrack);this.outputStream.removeTrack(oldTrack);this.outputStream.addTrack(newTrack);this.addTrackHandlers(newTrack);if(oldTrack.muted!==newTrack.muted){if(newTrack.muted){this.handleMediaStopped();}else {this.handleMediaStarted();}}// TODO: Chrome/React may not automatically refresh the media element with the new track when
// the output track has changed, so we may need to emit an event here if this is the case.
// this[StreamEventNames.OutputTrackChange].emit(newTrack);
}/**
     * @inheritdoc
     */stop(){this.outputTrack.stop();// calling stop() will not automatically emit Ended, so we emit it here
this[exports.StreamEventNames.Ended].emit();}}_a$6$1=exports.RemoteStreamEventNames.MediaStateChange;var RemoteStream=AddEvents(_RemoteStream);var commonjsGlobal$3=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global$1!=='undefined'?global$1:typeof self!=='undefined'?self:{};function getDefaultExportFromCjs$1(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,'default')?x['default']:x;}var es5$1={exports:{}};(function(module,exports){!function(e,t){module.exports=t();}(commonjsGlobal$3,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports;}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e){r.d(n,i,function(t){return e[t];}.bind(null,i));}return n;},r.n=function(e){var t=e&&e.__esModule?function(){return e.default;}:function(){return e;};return r.d(t,"a",t),t;},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t);},r.p="",r(r.s=90);}({17:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||"";},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||"";},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r;},e.getWindowsVersionName=function(e){switch(e){case"NT":return "NT";case"XP":return "XP";case"NT 5.0":return "2000";case"NT 5.1":return "XP";case"NT 5.2":return "2003";case"NT 6.0":return "Vista";case"NT 6.1":return "7";case"NT 6.2":return "8";case"NT 6.3":return "8.1";case"NT 10.0":return "10";default:return;}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map(function(e){return parseInt(e,10)||0;});if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return;}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map(function(e){return parseInt(e,10)||0;});if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0;},e.getVersionPrecision=function(e){return e.split(".").length;},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),function(e){return new Array(20-e.length).join("0")+e;}).reverse();});for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1;}else if(u[0][a]<u[1][a])return -1;}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1){n.push(t(e[r]));}return n;},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i;}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++){s[a-1]=arguments[a];}if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function o(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach(function(t){n[t]=e[t];});};for(t=0,r=s.length;t<r;t+=1){o();}return e;},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e];},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||"";},e;}();t.default=i,e.exports=t.default;},18:function _(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t);},e.parse=function(e){return new i.default(e).getResult();},t=e,n=[{key:"BROWSER_MAP",get:function get(){return s.BROWSER_MAP;}},{key:"ENGINE_MAP",get:function get(){return s.ENGINE_MAP;}},{key:"OS_MAP",get:function get(){return s.OS_MAP;}},{key:"PLATFORMS_MAP",get:function get(){return s.PLATFORMS_MAP;}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e;}();t.default=o,e.exports=t.default;},91:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e};}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua;},t.test=function(e){return e.test(this._ua);},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t);});throw new Error("Browser's test function is not valid");});return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser;},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser();},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||"";},t.getBrowserVersion=function(){return this.getBrowser().version;},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS();},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t);});throw new Error("Browser's test function is not valid");});return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os;},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||"";},t.getOSVersion=function(){return this.getOS().version;},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform();},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||"";},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t);});throw new Error("Browser's test function is not valid");});return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform;},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine();},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||"";},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t);});throw new Error("Browser's test function is not valid");});return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine;},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this;},t.getResult=function(){return o.default.assign({},this.parsedResult);},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach(function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1);}),n>0){var a=Object.keys(r),u=o.default.find(a,function(e){return t.isOS(e);});if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d;}var c=o.default.find(a,function(e){return t.isPlatform(e);});if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f;}}if(s>0){var l=Object.keys(i),h=o.default.find(l,function(e){return t.isBrowser(e,!0);});if(void 0!==h)return this.compareVersion(i[h]);}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r;},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1;},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase();},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase();},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase();},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e);},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some(function(e){return t.is(e);});},e;}();t.default=d,e.exports=t.default;},92:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function describe(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/opera/i],describe:function describe(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/opr\/|opios/i],describe:function describe(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/SamsungBrowser/i],describe:function describe(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/Whale/i],describe:function describe(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/MZBrowser/i],describe:function describe(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/focus/i],describe:function describe(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/swing/i],describe:function describe(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/coast/i],describe:function describe(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function describe(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/yabrowser/i],describe:function describe(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/ucbrowser/i],describe:function describe(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/Maxthon|mxios/i],describe:function describe(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/epiphany/i],describe:function describe(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/puffin/i],describe:function describe(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/sleipnir/i],describe:function describe(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/k-meleon/i],describe:function describe(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/micromessenger/i],describe:function describe(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/qqbrowser/i],describe:function describe(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/msie|trident/i],describe:function describe(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/\sedg\//i],describe:function describe(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/edg([ea]|ios)/i],describe:function describe(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/vivaldi/i],describe:function describe(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/seamonkey/i],describe:function describe(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/sailfish/i],describe:function describe(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t;}},{test:[/silk/i],describe:function describe(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/phantom/i],describe:function describe(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/slimerjs/i],describe:function describe(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function describe(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/(web|hpw)[o0]s/i],describe:function describe(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/bada/i],describe:function describe(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/tizen/i],describe:function describe(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/qupzilla/i],describe:function describe(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/firefox|iceweasel|fxios/i],describe:function describe(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/electron/i],describe:function describe(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/MiuiBrowser/i],describe:function describe(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/chromium/i],describe:function describe(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/chrome|crios|crmo/i],describe:function describe(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/GSA/i],describe:function describe(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:function test(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r;},describe:function describe(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/playstation 4/i],describe:function describe(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/safari|applewebkit/i],describe:function describe(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/.*/i],describe:function describe(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)};}}];t.default=a,e.exports=t.default;},93:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function describe(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t};}},{test:[/windows phone/i],describe:function describe(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t};}},{test:[/windows /i],describe:function describe(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r};}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function describe(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t;}},{test:[/macintosh/i],describe:function describe(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n;}},{test:[/(ipod|iphone|ipad)/i],describe:function describe(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t};}},{test:function test(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r;},describe:function describe(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n;}},{test:[/(web|hpw)[o0]s/i],describe:function describe(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r;}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function describe(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t};}},{test:[/bada/i],describe:function describe(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t};}},{test:[/tizen/i],describe:function describe(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t};}},{test:[/linux/i],describe:function describe(){return {name:s.OS_MAP.Linux};}},{test:[/CrOS/],describe:function describe(){return {name:s.OS_MAP.ChromeOS};}},{test:[/PlayStation 4/],describe:function describe(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t};}}];t.default=a,e.exports=t.default;},94:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function describe(){return {type:"bot",vendor:"Google"};}},{test:[/huawei/i],describe:function describe(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r;}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"};}},{test:[/ipad/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"};}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"};}},{test:[/kftt build/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"};}},{test:[/silk/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"};}},{test:[/tablet(?! pc)/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet};}},{test:function test(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r;},describe:function describe(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t};}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function describe(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"};}},{test:[/[^-]mobi/i],describe:function describe(){return {type:s.PLATFORMS_MAP.mobile};}},{test:function test(e){return "blackberry"===e.getBrowserName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"};}},{test:function test(e){return "bada"===e.getBrowserName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.mobile};}},{test:function test(e){return "windows phone"===e.getBrowserName();},describe:function describe(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"};}},{test:function test(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(!0)&&t>=3;},describe:function describe(){return {type:s.PLATFORMS_MAP.tablet};}},{test:function test(e){return "android"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.mobile};}},{test:function test(e){return "macos"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"};}},{test:function test(e){return "windows"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.desktop};}},{test:function test(e){return "linux"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.desktop};}},{test:function test(e){return "playstation 4"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.tv};}},{test:function test(e){return "roku"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.tv};}}];t.default=a,e.exports=t.default;},95:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function test(e){return "microsoft edge"===e.getBrowserName(!0);},describe:function describe(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t};}},{test:[/trident/i],describe:function describe(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:function test(e){return e.test(/presto/i);},describe:function describe(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:function test(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r;},describe:function describe(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/(apple)?webkit\/537\.36/i],describe:function describe(){return {name:s.ENGINE_MAP.Blink};}},{test:[/(apple)?webkit/i],describe:function describe(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}}];t.default=a,e.exports=t.default;}});});})(es5$1);var Bowser$1=/*@__PURE__*/getDefaultExportFromCjs$1(es5$1.exports);var BrowserName$1;(function(BrowserName){BrowserName["CHROME"]="Chrome";BrowserName["FIREFOX"]="Firefox";BrowserName["EDGE"]="Microsoft Edge";BrowserName["SAFARI"]="Safari";})(BrowserName$1||(BrowserName$1={}));class BrowserInfo$1{static getBrowserDetails(){return this.browser.getBrowser();}static getOSDetails(){return this.browser.getOS();}static getPlatformDetails(){return this.browser.getPlatform();}static getEngineDetails(){return this.browser.getEngine();}static isChrome(){return this.browser.getBrowserName()===BrowserName$1.CHROME;}static isFirefox(){return this.browser.getBrowserName()===BrowserName$1.FIREFOX;}static isEdge(){return this.browser.getBrowserName()===BrowserName$1.EDGE;}static isSafari(){return this.browser.getBrowserName()===BrowserName$1.SAFARI;}static isVersionGreaterThan(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:">".concat(version)};return this.browser.satisfies(checkTree);}static isVersionGreaterThanOrEqualTo(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:">=".concat(version)};return this.browser.satisfies(checkTree);}static isVersionLessThan(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:"<".concat(version)};return this.browser.satisfies(checkTree);}static isVersionLessThanOrEqualTo(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:"<=".concat(version)};return this.browser.satisfies(checkTree);}static isSubVersionOf(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:"~".concat(version)};return this.browser.satisfies(checkTree);}}BrowserInfo$1.browser=Bowser$1.getParser(window.navigator.userAgent);var CapabilityState$1;(function(CapabilityState){CapabilityState["NOT_CAPABLE"]="not capable";CapabilityState["CAPABLE"]="capable";CapabilityState["UNKNOWN"]="unknown";})(CapabilityState$1||(CapabilityState$1={}));var events$2={exports:{}};var R$2=typeof Reflect==='object'?Reflect:null;var ReflectApply$2=R$2&&typeof R$2.apply==='function'?R$2.apply:function ReflectApply(target,receiver,args){return Function.prototype.apply.call(target,receiver,args);};var ReflectOwnKeys$2;if(R$2&&typeof R$2.ownKeys==='function'){ReflectOwnKeys$2=R$2.ownKeys;}else if(Object.getOwnPropertySymbols){ReflectOwnKeys$2=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));};}else {ReflectOwnKeys$2=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target);};}function ProcessEmitWarning$2(warning){if(console&&console.warn)console.warn(warning);}var NumberIsNaN$2=Number.isNaN||function NumberIsNaN(value){return value!==value;};function EventEmitter$1$2(){EventEmitter$1$2.init.call(this);}events$2.exports=EventEmitter$1$2;events$2.exports.once=once$3;// Backwards-compat with node 0.10.x
EventEmitter$1$2.EventEmitter=EventEmitter$1$2;EventEmitter$1$2.prototype._events=undefined;EventEmitter$1$2.prototype._eventsCount=0;EventEmitter$1$2.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners$2=10;function checkListener$2(listener){if(typeof listener!=='function'){throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof listener);}}Object.defineProperty(EventEmitter$1$2,'defaultMaxListeners',{enumerable:true,get:function get(){return defaultMaxListeners$2;},set:function set(arg){if(typeof arg!=='number'||arg<0||NumberIsNaN$2(arg)){throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+arg+'.');}defaultMaxListeners$2=arg;}});EventEmitter$1$2.init=function(){if(this._events===undefined||this._events===Object.getPrototypeOf(this)._events){this._events=Object.create(null);this._eventsCount=0;}this._maxListeners=this._maxListeners||undefined;};// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$1$2.prototype.setMaxListeners=function setMaxListeners(n){if(typeof n!=='number'||n<0||NumberIsNaN$2(n)){throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+'.');}this._maxListeners=n;return this;};function _getMaxListeners$2(that){if(that._maxListeners===undefined)return EventEmitter$1$2.defaultMaxListeners;return that._maxListeners;}EventEmitter$1$2.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners$2(this);};EventEmitter$1$2.prototype.emit=function emit(type){var args=[];for(var i=1;i<arguments.length;i++){args.push(arguments[i]);}var doError=type==='error';var events=this._events;if(events!==undefined)doError=doError&&events.error===undefined;else if(!doError)return false;// If there is no 'error' event listener then throw.
if(doError){var er;if(args.length>0)er=args[0];if(er instanceof Error){// Note: The comments on the `throw` lines are intentional, they show
// up in Node's output if this results in an unhandled exception.
throw er;// Unhandled 'error' event
}// At least give some kind of context to the user
var err=new Error('Unhandled error.'+(er?' ('+er.message+')':''));err.context=er;throw err;// Unhandled 'error' event
}var handler=events[type];if(handler===undefined)return false;if(typeof handler==='function'){ReflectApply$2(handler,this,args);}else {var len=handler.length;var listeners=arrayClone$2(handler,len);for(var i=0;i<len;++i){ReflectApply$2(listeners[i],this,args);}}return true;};function _addListener$2(target,type,listener,prepend){var m;var events;var existing;checkListener$2(listener);events=target._events;if(events===undefined){events=target._events=Object.create(null);target._eventsCount=0;}else {// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(events.newListener!==undefined){target.emit('newListener',type,listener.listener?listener.listener:listener);// Re-assign `events` because a newListener handler could have caused the
// this._events to be assigned to a new object
events=target._events;}existing=events[type];}if(existing===undefined){// Optimize the case of one listener. Don't need the extra array object.
existing=events[type]=listener;++target._eventsCount;}else {if(typeof existing==='function'){// Adding the second element, need to change to array.
existing=events[type]=prepend?[listener,existing]:[existing,listener];// If we've already got an array, just append.
}else if(prepend){existing.unshift(listener);}else {existing.push(listener);}// Check for listener leak
m=_getMaxListeners$2(target);if(m>0&&existing.length>m&&!existing.warned){existing.warned=true;// No error code for this since it is a Warning
// eslint-disable-next-line no-restricted-syntax
var w=new Error('Possible EventEmitter memory leak detected. '+existing.length+' '+String(type)+' listeners '+'added. Use emitter.setMaxListeners() to '+'increase limit');w.name='MaxListenersExceededWarning';w.emitter=target;w.type=type;w.count=existing.length;ProcessEmitWarning$2(w);}}return target;}EventEmitter$1$2.prototype.addListener=function addListener(type,listener){return _addListener$2(this,type,listener,false);};EventEmitter$1$2.prototype.on=EventEmitter$1$2.prototype.addListener;EventEmitter$1$2.prototype.prependListener=function prependListener(type,listener){return _addListener$2(this,type,listener,true);};function onceWrapper$2(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;if(arguments.length===0)return this.listener.call(this.target);return this.listener.apply(this.target,arguments);}}function _onceWrap$2(target,type,listener){var state={fired:false,wrapFn:undefined,target:target,type:type,listener:listener};var wrapped=onceWrapper$2.bind(state);wrapped.listener=listener;state.wrapFn=wrapped;return wrapped;}EventEmitter$1$2.prototype.once=function once(type,listener){checkListener$2(listener);this.on(type,_onceWrap$2(this,type,listener));return this;};EventEmitter$1$2.prototype.prependOnceListener=function prependOnceListener(type,listener){checkListener$2(listener);this.prependListener(type,_onceWrap$2(this,type,listener));return this;};// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter$1$2.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;checkListener$2(listener);events=this._events;if(events===undefined)return this;list=events[type];if(list===undefined)return this;if(list===listener||list.listener===listener){if(--this._eventsCount===0)this._events=Object.create(null);else {delete events[type];if(events.removeListener)this.emit('removeListener',type,list.listener||listener);}}else if(typeof list!=='function'){position=-1;for(i=list.length-1;i>=0;i--){if(list[i]===listener||list[i].listener===listener){originalListener=list[i].listener;position=i;break;}}if(position<0)return this;if(position===0)list.shift();else {spliceOne$2(list,position);}if(list.length===1)events[type]=list[0];if(events.removeListener!==undefined)this.emit('removeListener',type,originalListener||listener);}return this;};EventEmitter$1$2.prototype.off=EventEmitter$1$2.prototype.removeListener;EventEmitter$1$2.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events,i;events=this._events;if(events===undefined)return this;// not listening for removeListener, no need to emit
if(events.removeListener===undefined){if(arguments.length===0){this._events=Object.create(null);this._eventsCount=0;}else if(events[type]!==undefined){if(--this._eventsCount===0)this._events=Object.create(null);else delete events[type];}return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){var keys=Object.keys(events);var key;for(i=0;i<keys.length;++i){key=keys[i];if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events=Object.create(null);this._eventsCount=0;return this;}listeners=events[type];if(typeof listeners==='function'){this.removeListener(type,listeners);}else if(listeners!==undefined){// LIFO order
for(i=listeners.length-1;i>=0;i--){this.removeListener(type,listeners[i]);}}return this;};function _listeners$2(target,type,unwrap){var events=target._events;if(events===undefined)return [];var evlistener=events[type];if(evlistener===undefined)return [];if(typeof evlistener==='function')return unwrap?[evlistener.listener||evlistener]:[evlistener];return unwrap?unwrapListeners$2(evlistener):arrayClone$2(evlistener,evlistener.length);}EventEmitter$1$2.prototype.listeners=function listeners(type){return _listeners$2(this,type,true);};EventEmitter$1$2.prototype.rawListeners=function rawListeners(type){return _listeners$2(this,type,false);};EventEmitter$1$2.listenerCount=function(emitter,type){if(typeof emitter.listenerCount==='function'){return emitter.listenerCount(type);}else {return listenerCount$2.call(emitter,type);}};EventEmitter$1$2.prototype.listenerCount=listenerCount$2;function listenerCount$2(type){var events=this._events;if(events!==undefined){var evlistener=events[type];if(typeof evlistener==='function'){return 1;}else if(evlistener!==undefined){return evlistener.length;}}return 0;}EventEmitter$1$2.prototype.eventNames=function eventNames(){return this._eventsCount>0?ReflectOwnKeys$2(this._events):[];};function arrayClone$2(arr,n){var copy=new Array(n);for(var i=0;i<n;++i){copy[i]=arr[i];}return copy;}function spliceOne$2(list,index){for(;index+1<list.length;index++){list[index]=list[index+1];}list.pop();}function unwrapListeners$2(arr){var ret=new Array(arr.length);for(var i=0;i<ret.length;++i){ret[i]=arr[i].listener||arr[i];}return ret;}function once$3(emitter,name){return new Promise(function(resolve,reject){function errorListener(err){emitter.removeListener(name,resolver);reject(err);}function resolver(){if(typeof emitter.removeListener==='function'){emitter.removeListener('error',errorListener);}resolve([].slice.call(arguments));}eventTargetAgnosticAddListener$2(emitter,name,resolver,{once:true});if(name!=='error'){addErrorHandlerIfEventEmitter$2(emitter,errorListener,{once:true});}});}function addErrorHandlerIfEventEmitter$2(emitter,handler,flags){if(typeof emitter.on==='function'){eventTargetAgnosticAddListener$2(emitter,'error',handler,flags);}}function eventTargetAgnosticAddListener$2(emitter,name,listener,flags){if(typeof emitter.on==='function'){if(flags.once){emitter.once(name,listener);}else {emitter.on(name,listener);}}else if(typeof emitter.addEventListener==='function'){// EventTarget does not have `error` event semantics like Node
// EventEmitters, we do not listen for `error` events here.
emitter.addEventListener(name,function wrapListener(arg){// IE does not have builtin `{ once: true }` support so we
// have to do it manually.
if(flags.once){emitter.removeEventListener(name,wrapListener);}listener(arg);});}else {throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof emitter);}}/**
 *  Typed event emitter class.
 */class EventEmitter$4 extends events$2.exports.EventEmitter{}// Overall connection state (based on the ICE and DTLS connection states)
exports.ConnectionState = void 0;(function(ConnectionState){ConnectionState["New"]="New";ConnectionState["Closed"]="Closed";ConnectionState["Connected"]="Connected";ConnectionState["Connecting"]="Connecting";ConnectionState["Disconnected"]="Disconnected";ConnectionState["Failed"]="Failed";})(exports.ConnectionState||(exports.ConnectionState={}));var ConnectionStateEvents;(function(ConnectionStateEvents){ConnectionStateEvents["PeerConnectionStateChanged"]="PeerConnectionStateChanged";ConnectionStateEvents["IceConnectionStateChanged"]="IceConnectionStateChanged";})(ConnectionStateEvents||(ConnectionStateEvents={}));/**
 * Listens on the connection's ICE and DTLS state changes and emits a single
 * event that summarizes all the internal states into a single overall connection state.
 */class ConnectionStateHandler extends EventEmitter$4{/**
     * Creates an instance of ConnectionStateHandler.
     *
     * @param getCurrentStatesCallback - Callback for getting the connection state information
     *                                   from the peer connection.
     */constructor(getCurrentStatesCallback){super();this.getCurrentStatesCallback=getCurrentStatesCallback;}/**
     * Handler for connection state change.
     */onPeerConnectionStateChange(){var state=this.getPeerConnectionState();this.emit(ConnectionStateEvents.PeerConnectionStateChanged,state);}/**
     * Handler for ice connection state change.
     */onIceConnectionStateChange(){var state=this.getIceConnectionState();this.emit(ConnectionStateEvents.IceConnectionStateChanged,state);}/**
     * Evaluates the overall connection state based on peer connection's
     * connectionState and iceConnectionState.
     *
     * @returns Current overall connection state.
     */evaluateMediaConnectionState(){var{connectionState,iceState}=this.getCurrentStatesCallback();var connectionStates=[connectionState,iceState];var mediaConnectionState;if(connectionStates.every(value=>value==='new')){mediaConnectionState=exports.ConnectionState.New;}else if(connectionStates.some(value=>value==='closed')){mediaConnectionState=exports.ConnectionState.Closed;}else if(connectionStates.some(value=>value==='failed')){mediaConnectionState=exports.ConnectionState.Failed;}else if(connectionStates.some(value=>value==='disconnected')){mediaConnectionState=exports.ConnectionState.Disconnected;}else if(connectionStates.every(value=>value==='connected'||value==='completed')){mediaConnectionState=exports.ConnectionState.Connected;}else {mediaConnectionState=exports.ConnectionState.Connecting;}logger$3.log("iceConnectionState=".concat(iceState," connectionState=").concat(connectionState," => ").concat(mediaConnectionState));return mediaConnectionState;}/**
     * Gets current connection state.
     *
     * @returns Current connection state.
     */getPeerConnectionState(){var{connectionState}=this.getCurrentStatesCallback();return connectionState;}/**
     * Gets current ice connection state.
     *
     * @returns Current ice connection state.
     */getIceConnectionState(){var{iceState}=this.getCurrentStatesCallback();return iceState;}/**
     * Gets current overall connection state.
     *
     * @returns Current overall connection state.
     */getConnectionState(){return this.evaluateMediaConnectionState();}}ConnectionStateHandler.Events=ConnectionStateEvents;/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */var logDisabled_$1=true;var deprecationWarnings_$1=true;/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */function extractVersion$1(uastring,expr,pos){var match=uastring.match(expr);return match&&match.length>=pos&&parseInt(match[pos],10);}// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent$1(window,eventNameToWrap,wrapper){if(!window.RTCPeerConnection){return;}var proto=window.RTCPeerConnection.prototype;var nativeAddEventListener=proto.addEventListener;proto.addEventListener=function(nativeEventName,cb){if(nativeEventName!==eventNameToWrap){return nativeAddEventListener.apply(this,arguments);}var wrappedCallback=e=>{var modifiedEvent=wrapper(e);if(modifiedEvent){if(cb.handleEvent){cb.handleEvent(modifiedEvent);}else {cb(modifiedEvent);}}};this._eventMap=this._eventMap||{};if(!this._eventMap[eventNameToWrap]){this._eventMap[eventNameToWrap]=new Map();}this._eventMap[eventNameToWrap].set(cb,wrappedCallback);return nativeAddEventListener.apply(this,[nativeEventName,wrappedCallback]);};var nativeRemoveEventListener=proto.removeEventListener;proto.removeEventListener=function(nativeEventName,cb){if(nativeEventName!==eventNameToWrap||!this._eventMap||!this._eventMap[eventNameToWrap]){return nativeRemoveEventListener.apply(this,arguments);}if(!this._eventMap[eventNameToWrap].has(cb)){return nativeRemoveEventListener.apply(this,arguments);}var unwrappedCb=this._eventMap[eventNameToWrap].get(cb);this._eventMap[eventNameToWrap].delete(cb);if(this._eventMap[eventNameToWrap].size===0){delete this._eventMap[eventNameToWrap];}if(Object.keys(this._eventMap).length===0){delete this._eventMap;}return nativeRemoveEventListener.apply(this,[nativeEventName,unwrappedCb]);};Object.defineProperty(proto,'on'+eventNameToWrap,{get(){return this['_on'+eventNameToWrap];},set(cb){if(this['_on'+eventNameToWrap]){this.removeEventListener(eventNameToWrap,this['_on'+eventNameToWrap]);delete this['_on'+eventNameToWrap];}if(cb){this.addEventListener(eventNameToWrap,this['_on'+eventNameToWrap]=cb);}},enumerable:true,configurable:true});}function disableLog$1(bool){if(typeof bool!=='boolean'){return new Error('Argument type: '+typeof bool+'. Please use a boolean.');}logDisabled_$1=bool;return bool?'adapter.js logging disabled':'adapter.js logging enabled';}/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */function disableWarnings$1(bool){if(typeof bool!=='boolean'){return new Error('Argument type: '+typeof bool+'. Please use a boolean.');}deprecationWarnings_$1=!bool;return 'adapter.js deprecation warnings '+(bool?'disabled':'enabled');}function log$2(){if(typeof window==='object'){if(logDisabled_$1){return;}if(typeof console!=='undefined'&&typeof console.log==='function'){console.log.apply(console,arguments);}}}/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */function deprecated$1(oldMethod,newMethod){if(!deprecationWarnings_$1){return;}console.warn(oldMethod+' is deprecated, please use '+newMethod+' instead.');}/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */function detectBrowser$1(window){// Returned result object.
var result={browser:null,version:null};// Fail early if it's not a browser
if(typeof window==='undefined'||!window.navigator){result.browser='Not a browser.';return result;}var{navigator}=window;if(navigator.mozGetUserMedia){// Firefox.
result.browser='firefox';result.version=extractVersion$1(navigator.userAgent,/Firefox\/(\d+)\./,1);}else if(navigator.webkitGetUserMedia||window.isSecureContext===false&&window.webkitRTCPeerConnection){// Chrome, Chromium, Webview, Opera.
// Version matches Chrome/WebRTC version.
// Chrome 74 removed webkitGetUserMedia on http as well so we need the
// more complicated fallback to webkitRTCPeerConnection.
result.browser='chrome';result.version=extractVersion$1(navigator.userAgent,/Chrom(e|ium)\/(\d+)\./,2);}else if(window.RTCPeerConnection&&navigator.userAgent.match(/AppleWebKit\/(\d+)\./)){// Safari.
result.browser='safari';result.version=extractVersion$1(navigator.userAgent,/AppleWebKit\/(\d+)\./,1);result.supportsUnifiedPlan=window.RTCRtpTransceiver&&'currentDirection'in window.RTCRtpTransceiver.prototype;}else {// Default fallthrough: not supported.
result.browser='Not a supported browser.';return result;}return result;}/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */function isObject$1(val){return Object.prototype.toString.call(val)==='[object Object]';}/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */function compactObject$1(data){if(!isObject$1(data)){return data;}return Object.keys(data).reduce(function(accumulator,key){var isObj=isObject$1(data[key]);var value=isObj?compactObject$1(data[key]):data[key];var isEmptyObject=isObj&&!Object.keys(value).length;if(value===undefined||isEmptyObject){return accumulator;}return Object.assign(accumulator,{[key]:value});},{});}/* iterates the stats graph recursively. */function walkStats$1(stats,base,resultSet){if(!base||resultSet.has(base.id)){return;}resultSet.set(base.id,base);Object.keys(base).forEach(name=>{if(name.endsWith('Id')){walkStats$1(stats,stats.get(base[name]),resultSet);}else if(name.endsWith('Ids')){base[name].forEach(id=>{walkStats$1(stats,stats.get(id),resultSet);});}});}/* filter getStats for a sender/receiver track. */function filterStats$1(result,track,outbound){var streamStatsType=outbound?'outbound-rtp':'inbound-rtp';var filteredResult=new Map();if(track===null){return filteredResult;}var trackStats=[];result.forEach(value=>{if(value.type==='track'&&value.trackIdentifier===track.id){trackStats.push(value);}});trackStats.forEach(trackStat=>{result.forEach(stats=>{if(stats.type===streamStatsType&&stats.trackId===trackStat.id){walkStats$1(result,stats,filteredResult);}});});return filteredResult;}/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */var logging$1=log$2;function shimGetUserMedia$2$1(window,browserDetails){var navigator=window&&window.navigator;if(!navigator.mediaDevices){return;}var constraintsToChrome_=function constraintsToChrome_(c){if(typeof c!=='object'||c.mandatory||c.optional){return c;}var cc={};Object.keys(c).forEach(key=>{if(key==='require'||key==='advanced'||key==='mediaSource'){return;}var r=typeof c[key]==='object'?c[key]:{ideal:c[key]};if(r.exact!==undefined&&typeof r.exact==='number'){r.min=r.max=r.exact;}var oldname_=function oldname_(prefix,name){if(prefix){return prefix+name.charAt(0).toUpperCase()+name.slice(1);}return name==='deviceId'?'sourceId':name;};if(r.ideal!==undefined){cc.optional=cc.optional||[];var oc={};if(typeof r.ideal==='number'){oc[oldname_('min',key)]=r.ideal;cc.optional.push(oc);oc={};oc[oldname_('max',key)]=r.ideal;cc.optional.push(oc);}else {oc[oldname_('',key)]=r.ideal;cc.optional.push(oc);}}if(r.exact!==undefined&&typeof r.exact!=='number'){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname_('',key)]=r.exact;}else {['min','max'].forEach(mix=>{if(r[mix]!==undefined){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname_(mix,key)]=r[mix];}});}});if(c.advanced){cc.optional=(cc.optional||[]).concat(c.advanced);}return cc;};var shimConstraints_=function shimConstraints_(constraints,func){if(browserDetails.version>=61){return func(constraints);}constraints=JSON.parse(JSON.stringify(constraints));if(constraints&&typeof constraints.audio==='object'){var remap=function remap(obj,a,b){if(a in obj&&!(b in obj)){obj[b]=obj[a];delete obj[a];}};constraints=JSON.parse(JSON.stringify(constraints));remap(constraints.audio,'autoGainControl','googAutoGainControl');remap(constraints.audio,'noiseSuppression','googNoiseSuppression');constraints.audio=constraintsToChrome_(constraints.audio);}if(constraints&&typeof constraints.video==='object'){// Shim facingMode for mobile & surface pro.
var face=constraints.video.facingMode;face=face&&(typeof face==='object'?face:{ideal:face});var getSupportedFacingModeLies=browserDetails.version<66;if(face&&(face.exact==='user'||face.exact==='environment'||face.ideal==='user'||face.ideal==='environment')&&!(navigator.mediaDevices.getSupportedConstraints&&navigator.mediaDevices.getSupportedConstraints().facingMode&&!getSupportedFacingModeLies)){delete constraints.video.facingMode;var matches;if(face.exact==='environment'||face.ideal==='environment'){matches=['back','rear'];}else if(face.exact==='user'||face.ideal==='user'){matches=['front'];}if(matches){// Look for matches in label, or use last cam for back (typical).
return navigator.mediaDevices.enumerateDevices().then(devices=>{devices=devices.filter(d=>d.kind==='videoinput');var dev=devices.find(d=>matches.some(match=>d.label.toLowerCase().includes(match)));if(!dev&&devices.length&&matches.includes('back')){dev=devices[devices.length-1];// more likely the back cam
}if(dev){constraints.video.deviceId=face.exact?{exact:dev.deviceId}:{ideal:dev.deviceId};}constraints.video=constraintsToChrome_(constraints.video);logging$1('chrome: '+JSON.stringify(constraints));return func(constraints);});}}constraints.video=constraintsToChrome_(constraints.video);}logging$1('chrome: '+JSON.stringify(constraints));return func(constraints);};var shimError_=function shimError_(e){if(browserDetails.version>=64){return e;}return {name:{PermissionDeniedError:'NotAllowedError',PermissionDismissedError:'NotAllowedError',InvalidStateError:'NotAllowedError',DevicesNotFoundError:'NotFoundError',ConstraintNotSatisfiedError:'OverconstrainedError',TrackStartError:'NotReadableError',MediaDeviceFailedDueToShutdown:'NotAllowedError',MediaDeviceKillSwitchOn:'NotAllowedError',TabCaptureError:'AbortError',ScreenCaptureError:'AbortError',DeviceCaptureError:'AbortError'}[e.name]||e.name,message:e.message,constraint:e.constraint||e.constraintName,toString(){return this.name+(this.message&&': ')+this.message;}};};var getUserMedia_=function getUserMedia_(constraints,onSuccess,onError){shimConstraints_(constraints,c=>{navigator.webkitGetUserMedia(c,onSuccess,e=>{if(onError){onError(shimError_(e));}});});};navigator.getUserMedia=getUserMedia_.bind(navigator);// Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
// function which returns a Promise, it does not accept spec-style
// constraints.
if(navigator.mediaDevices.getUserMedia){var origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(cs){return shimConstraints_(cs,c=>origGetUserMedia(c).then(stream=>{if(c.audio&&!stream.getAudioTracks().length||c.video&&!stream.getVideoTracks().length){stream.getTracks().forEach(track=>{track.stop();});throw new DOMException('','NotFoundError');}return stream;},e=>Promise.reject(shimError_(e))));};}}/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */function shimGetDisplayMedia$1$1(window,getSourceId){if(window.navigator.mediaDevices&&'getDisplayMedia'in window.navigator.mediaDevices){return;}if(!window.navigator.mediaDevices){return;}// getSourceId is a function that returns a promise resolving with
// the sourceId of the screen/window/tab to be shared.
if(typeof getSourceId!=='function'){console.error('shimGetDisplayMedia: getSourceId argument is not '+'a function');return;}window.navigator.mediaDevices.getDisplayMedia=function getDisplayMedia(constraints){return getSourceId(constraints).then(sourceId=>{var widthSpecified=constraints.video&&constraints.video.width;var heightSpecified=constraints.video&&constraints.video.height;var frameRateSpecified=constraints.video&&constraints.video.frameRate;constraints.video={mandatory:{chromeMediaSource:'desktop',chromeMediaSourceId:sourceId,maxFrameRate:frameRateSpecified||3}};if(widthSpecified){constraints.video.mandatory.maxWidth=widthSpecified;}if(heightSpecified){constraints.video.mandatory.maxHeight=heightSpecified;}return window.navigator.mediaDevices.getUserMedia(constraints);});};}/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */function shimMediaStream$1(window){window.MediaStream=window.MediaStream||window.webkitMediaStream;}function shimOnTrack$1$1(window){if(typeof window==='object'&&window.RTCPeerConnection&&!('ontrack'in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'ontrack',{get(){return this._ontrack;},set(f){if(this._ontrack){this.removeEventListener('track',this._ontrack);}this.addEventListener('track',this._ontrack=f);},enumerable:true,configurable:true});var origSetRemoteDescription=window.RTCPeerConnection.prototype.setRemoteDescription;window.RTCPeerConnection.prototype.setRemoteDescription=function setRemoteDescription(){if(!this._ontrackpoly){this._ontrackpoly=e=>{// onaddstream does not fire when a track is added to an existing
// stream. But stream.onaddtrack is implemented so we use that.
e.stream.addEventListener('addtrack',te=>{var receiver;if(window.RTCPeerConnection.prototype.getReceivers){receiver=this.getReceivers().find(r=>r.track&&r.track.id===te.track.id);}else {receiver={track:te.track};}var event=new Event('track');event.track=te.track;event.receiver=receiver;event.transceiver={receiver};event.streams=[e.stream];this.dispatchEvent(event);});e.stream.getTracks().forEach(track=>{var receiver;if(window.RTCPeerConnection.prototype.getReceivers){receiver=this.getReceivers().find(r=>r.track&&r.track.id===track.id);}else {receiver={track};}var event=new Event('track');event.track=track;event.receiver=receiver;event.transceiver={receiver};event.streams=[e.stream];this.dispatchEvent(event);});};this.addEventListener('addstream',this._ontrackpoly);}return origSetRemoteDescription.apply(this,arguments);};}else {// even if RTCRtpTransceiver is in window, it is only used and
// emitted in unified-plan. Unfortunately this means we need
// to unconditionally wrap the event.
wrapPeerConnectionEvent$1(window,'track',e=>{if(!e.transceiver){Object.defineProperty(e,'transceiver',{value:{receiver:e.receiver}});}return e;});}}function shimGetSendersWithDtmf$1(window){// Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
if(typeof window==='object'&&window.RTCPeerConnection&&!('getSenders'in window.RTCPeerConnection.prototype)&&'createDTMFSender'in window.RTCPeerConnection.prototype){var shimSenderWithDtmf=function shimSenderWithDtmf(pc,track){return {track,get dtmf(){if(this._dtmf===undefined){if(track.kind==='audio'){this._dtmf=pc.createDTMFSender(track);}else {this._dtmf=null;}}return this._dtmf;},_pc:pc};};// augment addTrack when getSenders is not available.
if(!window.RTCPeerConnection.prototype.getSenders){window.RTCPeerConnection.prototype.getSenders=function getSenders(){this._senders=this._senders||[];return this._senders.slice();// return a copy of the internal state.
};var origAddTrack=window.RTCPeerConnection.prototype.addTrack;window.RTCPeerConnection.prototype.addTrack=function addTrack(track,stream){var sender=origAddTrack.apply(this,arguments);if(!sender){sender=shimSenderWithDtmf(this,track);this._senders.push(sender);}return sender;};var origRemoveTrack=window.RTCPeerConnection.prototype.removeTrack;window.RTCPeerConnection.prototype.removeTrack=function removeTrack(sender){origRemoveTrack.apply(this,arguments);var idx=this._senders.indexOf(sender);if(idx!==-1){this._senders.splice(idx,1);}};}var origAddStream=window.RTCPeerConnection.prototype.addStream;window.RTCPeerConnection.prototype.addStream=function addStream(stream){this._senders=this._senders||[];origAddStream.apply(this,[stream]);stream.getTracks().forEach(track=>{this._senders.push(shimSenderWithDtmf(this,track));});};var origRemoveStream=window.RTCPeerConnection.prototype.removeStream;window.RTCPeerConnection.prototype.removeStream=function removeStream(stream){this._senders=this._senders||[];origRemoveStream.apply(this,[stream]);stream.getTracks().forEach(track=>{var sender=this._senders.find(s=>s.track===track);if(sender){// remove sender
this._senders.splice(this._senders.indexOf(sender),1);}});};}else if(typeof window==='object'&&window.RTCPeerConnection&&'getSenders'in window.RTCPeerConnection.prototype&&'createDTMFSender'in window.RTCPeerConnection.prototype&&window.RTCRtpSender&&!('dtmf'in window.RTCRtpSender.prototype)){var origGetSenders=window.RTCPeerConnection.prototype.getSenders;window.RTCPeerConnection.prototype.getSenders=function getSenders(){var senders=origGetSenders.apply(this,[]);senders.forEach(sender=>sender._pc=this);return senders;};Object.defineProperty(window.RTCRtpSender.prototype,'dtmf',{get(){if(this._dtmf===undefined){if(this.track.kind==='audio'){this._dtmf=this._pc.createDTMFSender(this.track);}else {this._dtmf=null;}}return this._dtmf;}});}}function shimGetStats$1(window){if(!window.RTCPeerConnection){return;}var origGetStats=window.RTCPeerConnection.prototype.getStats;window.RTCPeerConnection.prototype.getStats=function getStats(){var[selector,onSucc,onErr]=arguments;// If selector is a function then we are in the old style stats so just
// pass back the original getStats format to avoid breaking old users.
if(arguments.length>0&&typeof selector==='function'){return origGetStats.apply(this,arguments);}// When spec-style getStats is supported, return those when called with
// either no arguments or the selector argument is null.
if(origGetStats.length===0&&(arguments.length===0||typeof selector!=='function')){return origGetStats.apply(this,[]);}var fixChromeStats_=function fixChromeStats_(response){var standardReport={};var reports=response.result();reports.forEach(report=>{var standardStats={id:report.id,timestamp:report.timestamp,type:{localcandidate:'local-candidate',remotecandidate:'remote-candidate'}[report.type]||report.type};report.names().forEach(name=>{standardStats[name]=report.stat(name);});standardReport[standardStats.id]=standardStats;});return standardReport;};// shim getStats with maplike support
var makeMapStats=function makeMapStats(stats){return new Map(Object.keys(stats).map(key=>[key,stats[key]]));};if(arguments.length>=2){var successCallbackWrapper_=function successCallbackWrapper_(response){onSucc(makeMapStats(fixChromeStats_(response)));};return origGetStats.apply(this,[successCallbackWrapper_,selector]);}// promise-support
return new Promise((resolve,reject)=>{origGetStats.apply(this,[function(response){resolve(makeMapStats(fixChromeStats_(response)));},reject]);}).then(onSucc,onErr);};}function shimSenderReceiverGetStats$1(window){if(!(typeof window==='object'&&window.RTCPeerConnection&&window.RTCRtpSender&&window.RTCRtpReceiver)){return;}// shim sender stats.
if(!('getStats'in window.RTCRtpSender.prototype)){var origGetSenders=window.RTCPeerConnection.prototype.getSenders;if(origGetSenders){window.RTCPeerConnection.prototype.getSenders=function getSenders(){var senders=origGetSenders.apply(this,[]);senders.forEach(sender=>sender._pc=this);return senders;};}var origAddTrack=window.RTCPeerConnection.prototype.addTrack;if(origAddTrack){window.RTCPeerConnection.prototype.addTrack=function addTrack(){var sender=origAddTrack.apply(this,arguments);sender._pc=this;return sender;};}window.RTCRtpSender.prototype.getStats=function getStats(){var sender=this;return this._pc.getStats().then(result=>/* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */filterStats$1(result,sender.track,true));};}// shim receiver stats.
if(!('getStats'in window.RTCRtpReceiver.prototype)){var origGetReceivers=window.RTCPeerConnection.prototype.getReceivers;if(origGetReceivers){window.RTCPeerConnection.prototype.getReceivers=function getReceivers(){var receivers=origGetReceivers.apply(this,[]);receivers.forEach(receiver=>receiver._pc=this);return receivers;};}wrapPeerConnectionEvent$1(window,'track',e=>{e.receiver._pc=e.srcElement;return e;});window.RTCRtpReceiver.prototype.getStats=function getStats(){var receiver=this;return this._pc.getStats().then(result=>filterStats$1(result,receiver.track,false));};}if(!('getStats'in window.RTCRtpSender.prototype&&'getStats'in window.RTCRtpReceiver.prototype)){return;}// shim RTCPeerConnection.getStats(track).
var origGetStats=window.RTCPeerConnection.prototype.getStats;window.RTCPeerConnection.prototype.getStats=function getStats(){if(arguments.length>0&&arguments[0]instanceof window.MediaStreamTrack){var track=arguments[0];var sender;var receiver;var err;this.getSenders().forEach(s=>{if(s.track===track){if(sender){err=true;}else {sender=s;}}});this.getReceivers().forEach(r=>{if(r.track===track){if(receiver){err=true;}else {receiver=r;}}return r.track===track;});if(err||sender&&receiver){return Promise.reject(new DOMException('There are more than one sender or receiver for the track.','InvalidAccessError'));}else if(sender){return sender.getStats();}else if(receiver){return receiver.getStats();}return Promise.reject(new DOMException('There is no sender or receiver for the track.','InvalidAccessError'));}return origGetStats.apply(this,arguments);};}function shimAddTrackRemoveTrackWithNative$1(window){// shim addTrack/removeTrack with native variants in order to make
// the interactions with legacy getLocalStreams behave as in other browsers.
// Keeps a mapping stream.id => [stream, rtpsenders...]
window.RTCPeerConnection.prototype.getLocalStreams=function getLocalStreams(){this._shimmedLocalStreams=this._shimmedLocalStreams||{};return Object.keys(this._shimmedLocalStreams).map(streamId=>this._shimmedLocalStreams[streamId][0]);};var origAddTrack=window.RTCPeerConnection.prototype.addTrack;window.RTCPeerConnection.prototype.addTrack=function addTrack(track,stream){if(!stream){return origAddTrack.apply(this,arguments);}this._shimmedLocalStreams=this._shimmedLocalStreams||{};var sender=origAddTrack.apply(this,arguments);if(!this._shimmedLocalStreams[stream.id]){this._shimmedLocalStreams[stream.id]=[stream,sender];}else if(this._shimmedLocalStreams[stream.id].indexOf(sender)===-1){this._shimmedLocalStreams[stream.id].push(sender);}return sender;};var origAddStream=window.RTCPeerConnection.prototype.addStream;window.RTCPeerConnection.prototype.addStream=function addStream(stream){this._shimmedLocalStreams=this._shimmedLocalStreams||{};stream.getTracks().forEach(track=>{var alreadyExists=this.getSenders().find(s=>s.track===track);if(alreadyExists){throw new DOMException('Track already exists.','InvalidAccessError');}});var existingSenders=this.getSenders();origAddStream.apply(this,arguments);var newSenders=this.getSenders().filter(newSender=>existingSenders.indexOf(newSender)===-1);this._shimmedLocalStreams[stream.id]=[stream].concat(newSenders);};var origRemoveStream=window.RTCPeerConnection.prototype.removeStream;window.RTCPeerConnection.prototype.removeStream=function removeStream(stream){this._shimmedLocalStreams=this._shimmedLocalStreams||{};delete this._shimmedLocalStreams[stream.id];return origRemoveStream.apply(this,arguments);};var origRemoveTrack=window.RTCPeerConnection.prototype.removeTrack;window.RTCPeerConnection.prototype.removeTrack=function removeTrack(sender){this._shimmedLocalStreams=this._shimmedLocalStreams||{};if(sender){Object.keys(this._shimmedLocalStreams).forEach(streamId=>{var idx=this._shimmedLocalStreams[streamId].indexOf(sender);if(idx!==-1){this._shimmedLocalStreams[streamId].splice(idx,1);}if(this._shimmedLocalStreams[streamId].length===1){delete this._shimmedLocalStreams[streamId];}});}return origRemoveTrack.apply(this,arguments);};}function shimAddTrackRemoveTrack$1(window,browserDetails){if(!window.RTCPeerConnection){return;}// shim addTrack and removeTrack.
if(window.RTCPeerConnection.prototype.addTrack&&browserDetails.version>=65){return shimAddTrackRemoveTrackWithNative$1(window);}// also shim pc.getLocalStreams when addTrack is shimmed
// to return the original streams.
var origGetLocalStreams=window.RTCPeerConnection.prototype.getLocalStreams;window.RTCPeerConnection.prototype.getLocalStreams=function getLocalStreams(){var nativeStreams=origGetLocalStreams.apply(this);this._reverseStreams=this._reverseStreams||{};return nativeStreams.map(stream=>this._reverseStreams[stream.id]);};var origAddStream=window.RTCPeerConnection.prototype.addStream;window.RTCPeerConnection.prototype.addStream=function addStream(stream){this._streams=this._streams||{};this._reverseStreams=this._reverseStreams||{};stream.getTracks().forEach(track=>{var alreadyExists=this.getSenders().find(s=>s.track===track);if(alreadyExists){throw new DOMException('Track already exists.','InvalidAccessError');}});// Add identity mapping for consistency with addTrack.
// Unless this is being used with a stream from addTrack.
if(!this._reverseStreams[stream.id]){var newStream=new window.MediaStream(stream.getTracks());this._streams[stream.id]=newStream;this._reverseStreams[newStream.id]=stream;stream=newStream;}origAddStream.apply(this,[stream]);};var origRemoveStream=window.RTCPeerConnection.prototype.removeStream;window.RTCPeerConnection.prototype.removeStream=function removeStream(stream){this._streams=this._streams||{};this._reverseStreams=this._reverseStreams||{};origRemoveStream.apply(this,[this._streams[stream.id]||stream]);delete this._reverseStreams[this._streams[stream.id]?this._streams[stream.id].id:stream.id];delete this._streams[stream.id];};window.RTCPeerConnection.prototype.addTrack=function addTrack(track,stream){if(this.signalingState==='closed'){throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.','InvalidStateError');}var streams=[].slice.call(arguments,1);if(streams.length!==1||!streams[0].getTracks().find(t=>t===track)){// this is not fully correct but all we can manage without
// [[associated MediaStreams]] internal slot.
throw new DOMException('The adapter.js addTrack polyfill only supports a single '+' stream which is associated with the specified track.','NotSupportedError');}var alreadyExists=this.getSenders().find(s=>s.track===track);if(alreadyExists){throw new DOMException('Track already exists.','InvalidAccessError');}this._streams=this._streams||{};this._reverseStreams=this._reverseStreams||{};var oldStream=this._streams[stream.id];if(oldStream){// this is using odd Chrome behaviour, use with caution:
// https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
// Note: we rely on the high-level addTrack/dtmf shim to
// create the sender with a dtmf sender.
oldStream.addTrack(track);// Trigger ONN async.
Promise.resolve().then(()=>{this.dispatchEvent(new Event('negotiationneeded'));});}else {var newStream=new window.MediaStream([track]);this._streams[stream.id]=newStream;this._reverseStreams[newStream.id]=stream;this.addStream(newStream);}return this.getSenders().find(s=>s.track===track);};// replace the internal stream id with the external one and
// vice versa.
function replaceInternalStreamId(pc,description){var sdp=description.sdp;Object.keys(pc._reverseStreams||[]).forEach(internalId=>{var externalStream=pc._reverseStreams[internalId];var internalStream=pc._streams[externalStream.id];sdp=sdp.replace(new RegExp(internalStream.id,'g'),externalStream.id);});return new RTCSessionDescription({type:description.type,sdp});}function replaceExternalStreamId(pc,description){var sdp=description.sdp;Object.keys(pc._reverseStreams||[]).forEach(internalId=>{var externalStream=pc._reverseStreams[internalId];var internalStream=pc._streams[externalStream.id];sdp=sdp.replace(new RegExp(externalStream.id,'g'),internalStream.id);});return new RTCSessionDescription({type:description.type,sdp});}['createOffer','createAnswer'].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];var methodObj={[method](){var args=arguments;var isLegacyCall=arguments.length&&typeof arguments[0]==='function';if(isLegacyCall){return nativeMethod.apply(this,[description=>{var desc=replaceInternalStreamId(this,description);args[0].apply(null,[desc]);},err=>{if(args[1]){args[1].apply(null,err);}},arguments[2]]);}return nativeMethod.apply(this,arguments).then(description=>replaceInternalStreamId(this,description));}};window.RTCPeerConnection.prototype[method]=methodObj[method];});var origSetLocalDescription=window.RTCPeerConnection.prototype.setLocalDescription;window.RTCPeerConnection.prototype.setLocalDescription=function setLocalDescription(){if(!arguments.length||!arguments[0].type){return origSetLocalDescription.apply(this,arguments);}arguments[0]=replaceExternalStreamId(this,arguments[0]);return origSetLocalDescription.apply(this,arguments);};// TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier
var origLocalDescription=Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype,'localDescription');Object.defineProperty(window.RTCPeerConnection.prototype,'localDescription',{get(){var description=origLocalDescription.get.apply(this);if(description.type===''){return description;}return replaceInternalStreamId(this,description);}});window.RTCPeerConnection.prototype.removeTrack=function removeTrack(sender){if(this.signalingState==='closed'){throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.','InvalidStateError');}// We can not yet check for sender instanceof RTCRtpSender
// since we shim RTPSender. So we check if sender._pc is set.
if(!sender._pc){throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack '+'does not implement interface RTCRtpSender.','TypeError');}var isLocal=sender._pc===this;if(!isLocal){throw new DOMException('Sender was not created by this connection.','InvalidAccessError');}// Search for the native stream the senders track belongs to.
this._streams=this._streams||{};var stream;Object.keys(this._streams).forEach(streamid=>{var hasTrack=this._streams[streamid].getTracks().find(track=>sender.track===track);if(hasTrack){stream=this._streams[streamid];}});if(stream){if(stream.getTracks().length===1){// if this is the last track of the stream, remove the stream. This
// takes care of any shimmed _senders.
this.removeStream(this._reverseStreams[stream.id]);}else {// relying on the same odd chrome behaviour as above.
stream.removeTrack(sender.track);}this.dispatchEvent(new Event('negotiationneeded'));}};}function shimPeerConnection$1$1(window,browserDetails){if(!window.RTCPeerConnection&&window.webkitRTCPeerConnection){// very basic support for old versions.
window.RTCPeerConnection=window.webkitRTCPeerConnection;}if(!window.RTCPeerConnection){return;}// shim implicit creation of RTCSessionDescription/RTCIceCandidate
if(browserDetails.version<53){['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];var methodObj={[method](){arguments[0]=new(method==='addIceCandidate'?window.RTCIceCandidate:window.RTCSessionDescription)(arguments[0]);return nativeMethod.apply(this,arguments);}};window.RTCPeerConnection.prototype[method]=methodObj[method];});}}// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded$1(window,browserDetails){wrapPeerConnectionEvent$1(window,'negotiationneeded',e=>{var pc=e.target;if(browserDetails.version<72||pc.getConfiguration&&pc.getConfiguration().sdpSemantics==='plan-b'){if(pc.signalingState!=='stable'){return;}}return e;});}var chromeShim$1=/*#__PURE__*/Object.freeze({__proto__:null,shimMediaStream:shimMediaStream$1,shimOnTrack:shimOnTrack$1$1,shimGetSendersWithDtmf:shimGetSendersWithDtmf$1,shimGetStats:shimGetStats$1,shimSenderReceiverGetStats:shimSenderReceiverGetStats$1,shimAddTrackRemoveTrackWithNative:shimAddTrackRemoveTrackWithNative$1,shimAddTrackRemoveTrack:shimAddTrackRemoveTrack$1,shimPeerConnection:shimPeerConnection$1$1,fixNegotiationNeeded:fixNegotiationNeeded$1,shimGetUserMedia:shimGetUserMedia$2$1,shimGetDisplayMedia:shimGetDisplayMedia$1$1});/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */function shimGetUserMedia$1$1(window,browserDetails){var navigator=window&&window.navigator;var MediaStreamTrack=window&&window.MediaStreamTrack;navigator.getUserMedia=function(constraints,onSuccess,onError){// Replace Firefox 44+'s deprecation warning with unprefixed version.
deprecated$1('navigator.getUserMedia','navigator.mediaDevices.getUserMedia');navigator.mediaDevices.getUserMedia(constraints).then(onSuccess,onError);};if(!(browserDetails.version>55&&'autoGainControl'in navigator.mediaDevices.getSupportedConstraints())){var remap=function remap(obj,a,b){if(a in obj&&!(b in obj)){obj[b]=obj[a];delete obj[a];}};var nativeGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){if(typeof c==='object'&&typeof c.audio==='object'){c=JSON.parse(JSON.stringify(c));remap(c.audio,'autoGainControl','mozAutoGainControl');remap(c.audio,'noiseSuppression','mozNoiseSuppression');}return nativeGetUserMedia(c);};if(MediaStreamTrack&&MediaStreamTrack.prototype.getSettings){var nativeGetSettings=MediaStreamTrack.prototype.getSettings;MediaStreamTrack.prototype.getSettings=function(){var obj=nativeGetSettings.apply(this,arguments);remap(obj,'mozAutoGainControl','autoGainControl');remap(obj,'mozNoiseSuppression','noiseSuppression');return obj;};}if(MediaStreamTrack&&MediaStreamTrack.prototype.applyConstraints){var nativeApplyConstraints=MediaStreamTrack.prototype.applyConstraints;MediaStreamTrack.prototype.applyConstraints=function(c){if(this.kind==='audio'&&typeof c==='object'){c=JSON.parse(JSON.stringify(c));remap(c,'autoGainControl','mozAutoGainControl');remap(c,'noiseSuppression','mozNoiseSuppression');}return nativeApplyConstraints.apply(this,[c]);};}}}/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */function shimGetDisplayMedia$2(window,preferredMediaSource){if(window.navigator.mediaDevices&&'getDisplayMedia'in window.navigator.mediaDevices){return;}if(!window.navigator.mediaDevices){return;}window.navigator.mediaDevices.getDisplayMedia=function getDisplayMedia(constraints){if(!(constraints&&constraints.video)){var err=new DOMException('getDisplayMedia without video '+'constraints is undefined');err.name='NotFoundError';// from https://heycam.github.io/webidl/#idl-DOMException-error-names
err.code=8;return Promise.reject(err);}if(constraints.video===true){constraints.video={mediaSource:preferredMediaSource};}else {constraints.video.mediaSource=preferredMediaSource;}return window.navigator.mediaDevices.getUserMedia(constraints);};}/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */function shimOnTrack$2(window){if(typeof window==='object'&&window.RTCTrackEvent&&'receiver'in window.RTCTrackEvent.prototype&&!('transceiver'in window.RTCTrackEvent.prototype)){Object.defineProperty(window.RTCTrackEvent.prototype,'transceiver',{get(){return {receiver:this.receiver};}});}}function shimPeerConnection$2(window,browserDetails){if(typeof window!=='object'||!(window.RTCPeerConnection||window.mozRTCPeerConnection)){return;// probably media.peerconnection.enabled=false in about:config
}if(!window.RTCPeerConnection&&window.mozRTCPeerConnection){// very basic support for old versions.
window.RTCPeerConnection=window.mozRTCPeerConnection;}if(browserDetails.version<53){// shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];var methodObj={[method](){arguments[0]=new(method==='addIceCandidate'?window.RTCIceCandidate:window.RTCSessionDescription)(arguments[0]);return nativeMethod.apply(this,arguments);}};window.RTCPeerConnection.prototype[method]=methodObj[method];});}var modernStatsTypes={inboundrtp:'inbound-rtp',outboundrtp:'outbound-rtp',candidatepair:'candidate-pair',localcandidate:'local-candidate',remotecandidate:'remote-candidate'};var nativeGetStats=window.RTCPeerConnection.prototype.getStats;window.RTCPeerConnection.prototype.getStats=function getStats(){var[selector,onSucc,onErr]=arguments;return nativeGetStats.apply(this,[selector||null]).then(stats=>{if(browserDetails.version<53&&!onSucc){// Shim only promise getStats with spec-hyphens in type names
// Leave callback version alone; misc old uses of forEach before Map
try{stats.forEach(stat=>{stat.type=modernStatsTypes[stat.type]||stat.type;});}catch(e){if(e.name!=='TypeError'){throw e;}// Avoid TypeError: "type" is read-only, in old versions. 34-43ish
stats.forEach((stat,i)=>{stats.set(i,Object.assign({},stat,{type:modernStatsTypes[stat.type]||stat.type}));});}}return stats;}).then(onSucc,onErr);};}function shimSenderGetStats$1(window){if(!(typeof window==='object'&&window.RTCPeerConnection&&window.RTCRtpSender)){return;}if(window.RTCRtpSender&&'getStats'in window.RTCRtpSender.prototype){return;}var origGetSenders=window.RTCPeerConnection.prototype.getSenders;if(origGetSenders){window.RTCPeerConnection.prototype.getSenders=function getSenders(){var senders=origGetSenders.apply(this,[]);senders.forEach(sender=>sender._pc=this);return senders;};}var origAddTrack=window.RTCPeerConnection.prototype.addTrack;if(origAddTrack){window.RTCPeerConnection.prototype.addTrack=function addTrack(){var sender=origAddTrack.apply(this,arguments);sender._pc=this;return sender;};}window.RTCRtpSender.prototype.getStats=function getStats(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map());};}function shimReceiverGetStats$1(window){if(!(typeof window==='object'&&window.RTCPeerConnection&&window.RTCRtpSender)){return;}if(window.RTCRtpSender&&'getStats'in window.RTCRtpReceiver.prototype){return;}var origGetReceivers=window.RTCPeerConnection.prototype.getReceivers;if(origGetReceivers){window.RTCPeerConnection.prototype.getReceivers=function getReceivers(){var receivers=origGetReceivers.apply(this,[]);receivers.forEach(receiver=>receiver._pc=this);return receivers;};}wrapPeerConnectionEvent$1(window,'track',e=>{e.receiver._pc=e.srcElement;return e;});window.RTCRtpReceiver.prototype.getStats=function getStats(){return this._pc.getStats(this.track);};}function shimRemoveStream$1(window){if(!window.RTCPeerConnection||'removeStream'in window.RTCPeerConnection.prototype){return;}window.RTCPeerConnection.prototype.removeStream=function removeStream(stream){deprecated$1('removeStream','removeTrack');this.getSenders().forEach(sender=>{if(sender.track&&stream.getTracks().includes(sender.track)){this.removeTrack(sender);}});};}function shimRTCDataChannel$1(window){// rename DataChannel to RTCDataChannel (native fix in FF60):
// https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
if(window.DataChannel&&!window.RTCDataChannel){window.RTCDataChannel=window.DataChannel;}}function shimAddTransceiver$1(window){// https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
// Firefox ignores the init sendEncodings options passed to addTransceiver
// https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
if(!(typeof window==='object'&&window.RTCPeerConnection)){return;}var origAddTransceiver=window.RTCPeerConnection.prototype.addTransceiver;if(origAddTransceiver){window.RTCPeerConnection.prototype.addTransceiver=function addTransceiver(){this.setParametersPromises=[];// WebIDL input coercion and validation
var sendEncodings=arguments[1]&&arguments[1].sendEncodings;if(sendEncodings===undefined){sendEncodings=[];}sendEncodings=[...sendEncodings];var shouldPerformCheck=sendEncodings.length>0;if(shouldPerformCheck){// If sendEncodings params are provided, validate grammar
sendEncodings.forEach(encodingParam=>{if('rid'in encodingParam){var ridRegex=/^[a-z0-9]{0,16}$/i;if(!ridRegex.test(encodingParam.rid)){throw new TypeError('Invalid RID value provided.');}}if('scaleResolutionDownBy'in encodingParam){if(!(parseFloat(encodingParam.scaleResolutionDownBy)>=1.0)){throw new RangeError('scale_resolution_down_by must be >= 1.0');}}if('maxFramerate'in encodingParam){if(!(parseFloat(encodingParam.maxFramerate)>=0)){throw new RangeError('max_framerate must be >= 0.0');}}});}var transceiver=origAddTransceiver.apply(this,arguments);if(shouldPerformCheck){// Check if the init options were applied. If not we do this in an
// asynchronous way and save the promise reference in a global object.
// This is an ugly hack, but at the same time is way more robust than
// checking the sender parameters before and after the createOffer
// Also note that after the createoffer we are not 100% sure that
// the params were asynchronously applied so we might miss the
// opportunity to recreate offer.
var{sender}=transceiver;var params=sender.getParameters();if(!('encodings'in params)||// Avoid being fooled by patched getParameters() below.
params.encodings.length===1&&Object.keys(params.encodings[0]).length===0){params.encodings=sendEncodings;sender.sendEncodings=sendEncodings;this.setParametersPromises.push(sender.setParameters(params).then(()=>{delete sender.sendEncodings;}).catch(()=>{delete sender.sendEncodings;}));}}return transceiver;};}}function shimGetParameters$1(window){if(!(typeof window==='object'&&window.RTCRtpSender)){return;}var origGetParameters=window.RTCRtpSender.prototype.getParameters;if(origGetParameters){window.RTCRtpSender.prototype.getParameters=function getParameters(){var params=origGetParameters.apply(this,arguments);if(!('encodings'in params)){params.encodings=[].concat(this.sendEncodings||[{}]);}return params;};}}function shimCreateOffer$1(window){// https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
// Firefox ignores the init sendEncodings options passed to addTransceiver
// https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
if(!(typeof window==='object'&&window.RTCPeerConnection)){return;}var origCreateOffer=window.RTCPeerConnection.prototype.createOffer;window.RTCPeerConnection.prototype.createOffer=function createOffer(){if(this.setParametersPromises&&this.setParametersPromises.length){return Promise.all(this.setParametersPromises).then(()=>{return origCreateOffer.apply(this,arguments);}).finally(()=>{this.setParametersPromises=[];});}return origCreateOffer.apply(this,arguments);};}function shimCreateAnswer$1(window){// https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
// Firefox ignores the init sendEncodings options passed to addTransceiver
// https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
if(!(typeof window==='object'&&window.RTCPeerConnection)){return;}var origCreateAnswer=window.RTCPeerConnection.prototype.createAnswer;window.RTCPeerConnection.prototype.createAnswer=function createAnswer(){if(this.setParametersPromises&&this.setParametersPromises.length){return Promise.all(this.setParametersPromises).then(()=>{return origCreateAnswer.apply(this,arguments);}).finally(()=>{this.setParametersPromises=[];});}return origCreateAnswer.apply(this,arguments);};}var firefoxShim$1=/*#__PURE__*/Object.freeze({__proto__:null,shimOnTrack:shimOnTrack$2,shimPeerConnection:shimPeerConnection$2,shimSenderGetStats:shimSenderGetStats$1,shimReceiverGetStats:shimReceiverGetStats$1,shimRemoveStream:shimRemoveStream$1,shimRTCDataChannel:shimRTCDataChannel$1,shimAddTransceiver:shimAddTransceiver$1,shimGetParameters:shimGetParameters$1,shimCreateOffer:shimCreateOffer$1,shimCreateAnswer:shimCreateAnswer$1,shimGetUserMedia:shimGetUserMedia$1$1,shimGetDisplayMedia:shimGetDisplayMedia$2});/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */function shimLocalStreamsAPI$1(window){if(typeof window!=='object'||!window.RTCPeerConnection){return;}if(!('getLocalStreams'in window.RTCPeerConnection.prototype)){window.RTCPeerConnection.prototype.getLocalStreams=function getLocalStreams(){if(!this._localStreams){this._localStreams=[];}return this._localStreams;};}if(!('addStream'in window.RTCPeerConnection.prototype)){var _addTrack=window.RTCPeerConnection.prototype.addTrack;window.RTCPeerConnection.prototype.addStream=function addStream(stream){if(!this._localStreams){this._localStreams=[];}if(!this._localStreams.includes(stream)){this._localStreams.push(stream);}// Try to emulate Chrome's behaviour of adding in audio-video order.
// Safari orders by track id.
stream.getAudioTracks().forEach(track=>_addTrack.call(this,track,stream));stream.getVideoTracks().forEach(track=>_addTrack.call(this,track,stream));};window.RTCPeerConnection.prototype.addTrack=function addTrack(track){for(var _len2=arguments.length,streams=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){streams[_key2-1]=arguments[_key2];}if(streams){streams.forEach(stream=>{if(!this._localStreams){this._localStreams=[stream];}else if(!this._localStreams.includes(stream)){this._localStreams.push(stream);}});}return _addTrack.apply(this,arguments);};}if(!('removeStream'in window.RTCPeerConnection.prototype)){window.RTCPeerConnection.prototype.removeStream=function removeStream(stream){if(!this._localStreams){this._localStreams=[];}var index=this._localStreams.indexOf(stream);if(index===-1){return;}this._localStreams.splice(index,1);var tracks=stream.getTracks();this.getSenders().forEach(sender=>{if(tracks.includes(sender.track)){this.removeTrack(sender);}});};}}function shimRemoteStreamsAPI$1(window){if(typeof window!=='object'||!window.RTCPeerConnection){return;}if(!('getRemoteStreams'in window.RTCPeerConnection.prototype)){window.RTCPeerConnection.prototype.getRemoteStreams=function getRemoteStreams(){return this._remoteStreams?this._remoteStreams:[];};}if(!('onaddstream'in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'onaddstream',{get(){return this._onaddstream;},set(f){if(this._onaddstream){this.removeEventListener('addstream',this._onaddstream);this.removeEventListener('track',this._onaddstreampoly);}this.addEventListener('addstream',this._onaddstream=f);this.addEventListener('track',this._onaddstreampoly=e=>{e.streams.forEach(stream=>{if(!this._remoteStreams){this._remoteStreams=[];}if(this._remoteStreams.includes(stream)){return;}this._remoteStreams.push(stream);var event=new Event('addstream');event.stream=stream;this.dispatchEvent(event);});});}});var origSetRemoteDescription=window.RTCPeerConnection.prototype.setRemoteDescription;window.RTCPeerConnection.prototype.setRemoteDescription=function setRemoteDescription(){var pc=this;if(!this._onaddstreampoly){this.addEventListener('track',this._onaddstreampoly=function(e){e.streams.forEach(stream=>{if(!pc._remoteStreams){pc._remoteStreams=[];}if(pc._remoteStreams.indexOf(stream)>=0){return;}pc._remoteStreams.push(stream);var event=new Event('addstream');event.stream=stream;pc.dispatchEvent(event);});});}return origSetRemoteDescription.apply(pc,arguments);};}}function shimCallbacksAPI$1(window){if(typeof window!=='object'||!window.RTCPeerConnection){return;}var prototype=window.RTCPeerConnection.prototype;var origCreateOffer=prototype.createOffer;var origCreateAnswer=prototype.createAnswer;var setLocalDescription=prototype.setLocalDescription;var setRemoteDescription=prototype.setRemoteDescription;var addIceCandidate=prototype.addIceCandidate;prototype.createOffer=function createOffer(successCallback,failureCallback){var options=arguments.length>=2?arguments[2]:arguments[0];var promise=origCreateOffer.apply(this,[options]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};prototype.createAnswer=function createAnswer(successCallback,failureCallback){var options=arguments.length>=2?arguments[2]:arguments[0];var promise=origCreateAnswer.apply(this,[options]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};var withCallback=function withCallback(description,successCallback,failureCallback){var promise=setLocalDescription.apply(this,[description]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};prototype.setLocalDescription=withCallback;withCallback=function withCallback(description,successCallback,failureCallback){var promise=setRemoteDescription.apply(this,[description]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};prototype.setRemoteDescription=withCallback;withCallback=function withCallback(candidate,successCallback,failureCallback){var promise=addIceCandidate.apply(this,[candidate]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};prototype.addIceCandidate=withCallback;}function shimGetUserMedia$3(window){var navigator=window&&window.navigator;if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){// shim not needed in Safari 12.1
var mediaDevices=navigator.mediaDevices;var _getUserMedia=mediaDevices.getUserMedia.bind(mediaDevices);navigator.mediaDevices.getUserMedia=constraints=>{return _getUserMedia(shimConstraints$1(constraints));};}if(!navigator.getUserMedia&&navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){navigator.getUserMedia=function getUserMedia(constraints,cb,errcb){navigator.mediaDevices.getUserMedia(constraints).then(cb,errcb);}.bind(navigator);}}function shimConstraints$1(constraints){if(constraints&&constraints.video!==undefined){return Object.assign({},constraints,{video:compactObject$1(constraints.video)});}return constraints;}function shimRTCIceServerUrls$1(window){if(!window.RTCPeerConnection){return;}// migrate from non-spec RTCIceServer.url to RTCIceServer.urls
var OrigPeerConnection=window.RTCPeerConnection;window.RTCPeerConnection=function RTCPeerConnection(pcConfig,pcConstraints){if(pcConfig&&pcConfig.iceServers){var newIceServers=[];for(var i=0;i<pcConfig.iceServers.length;i++){var server=pcConfig.iceServers[i];if(!server.hasOwnProperty('urls')&&server.hasOwnProperty('url')){deprecated$1('RTCIceServer.url','RTCIceServer.urls');server=JSON.parse(JSON.stringify(server));server.urls=server.url;delete server.url;newIceServers.push(server);}else {newIceServers.push(pcConfig.iceServers[i]);}}pcConfig.iceServers=newIceServers;}return new OrigPeerConnection(pcConfig,pcConstraints);};window.RTCPeerConnection.prototype=OrigPeerConnection.prototype;// wrap static methods. Currently just generateCertificate.
if('generateCertificate'in OrigPeerConnection){Object.defineProperty(window.RTCPeerConnection,'generateCertificate',{get(){return OrigPeerConnection.generateCertificate;}});}}function shimTrackEventTransceiver$1(window){// Add event.transceiver member over deprecated event.receiver
if(typeof window==='object'&&window.RTCTrackEvent&&'receiver'in window.RTCTrackEvent.prototype&&!('transceiver'in window.RTCTrackEvent.prototype)){Object.defineProperty(window.RTCTrackEvent.prototype,'transceiver',{get(){return {receiver:this.receiver};}});}}function shimCreateOfferLegacy$1(window){var origCreateOffer=window.RTCPeerConnection.prototype.createOffer;window.RTCPeerConnection.prototype.createOffer=function createOffer(offerOptions){if(offerOptions){if(typeof offerOptions.offerToReceiveAudio!=='undefined'){// support bit values
offerOptions.offerToReceiveAudio=!!offerOptions.offerToReceiveAudio;}var audioTransceiver=this.getTransceivers().find(transceiver=>transceiver.receiver.track.kind==='audio');if(offerOptions.offerToReceiveAudio===false&&audioTransceiver){if(audioTransceiver.direction==='sendrecv'){if(audioTransceiver.setDirection){audioTransceiver.setDirection('sendonly');}else {audioTransceiver.direction='sendonly';}}else if(audioTransceiver.direction==='recvonly'){if(audioTransceiver.setDirection){audioTransceiver.setDirection('inactive');}else {audioTransceiver.direction='inactive';}}}else if(offerOptions.offerToReceiveAudio===true&&!audioTransceiver){this.addTransceiver('audio',{direction:'recvonly'});}if(typeof offerOptions.offerToReceiveVideo!=='undefined'){// support bit values
offerOptions.offerToReceiveVideo=!!offerOptions.offerToReceiveVideo;}var videoTransceiver=this.getTransceivers().find(transceiver=>transceiver.receiver.track.kind==='video');if(offerOptions.offerToReceiveVideo===false&&videoTransceiver){if(videoTransceiver.direction==='sendrecv'){if(videoTransceiver.setDirection){videoTransceiver.setDirection('sendonly');}else {videoTransceiver.direction='sendonly';}}else if(videoTransceiver.direction==='recvonly'){if(videoTransceiver.setDirection){videoTransceiver.setDirection('inactive');}else {videoTransceiver.direction='inactive';}}}else if(offerOptions.offerToReceiveVideo===true&&!videoTransceiver){this.addTransceiver('video',{direction:'recvonly'});}}return origCreateOffer.apply(this,arguments);};}function shimAudioContext$1(window){if(typeof window!=='object'||window.AudioContext){return;}window.AudioContext=window.webkitAudioContext;}var safariShim$1=/*#__PURE__*/Object.freeze({__proto__:null,shimLocalStreamsAPI:shimLocalStreamsAPI$1,shimRemoteStreamsAPI:shimRemoteStreamsAPI$1,shimCallbacksAPI:shimCallbacksAPI$1,shimGetUserMedia:shimGetUserMedia$3,shimConstraints:shimConstraints$1,shimRTCIceServerUrls:shimRTCIceServerUrls$1,shimTrackEventTransceiver:shimTrackEventTransceiver$1,shimCreateOfferLegacy:shimCreateOfferLegacy$1,shimAudioContext:shimAudioContext$1});var sdp$1$1={exports:{}};/* eslint-env node */(function(module){// SDP helpers.
var SDPUtils={};// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier=function(){return Math.random().toString(36).substr(2,10);};// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName=SDPUtils.generateIdentifier();// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines=function(blob){return blob.trim().split('\n').map(line=>line.trim());};// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections=function(blob){var parts=blob.split('\nm=');return parts.map((part,index)=>(index>0?'m='+part:part).trim()+'\r\n');};// Returns the session description.
SDPUtils.getDescription=function(blob){var sections=SDPUtils.splitSections(blob);return sections&&sections[0];};// Returns the individual media sections.
SDPUtils.getMediaSections=function(blob){var sections=SDPUtils.splitSections(blob);sections.shift();return sections;};// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix=function(blob,prefix){return SDPUtils.splitLines(blob).filter(line=>line.indexOf(prefix)===0);};// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate=function(line){var parts;// Parse both variants.
if(line.indexOf('a=candidate:')===0){parts=line.substring(12).split(' ');}else {parts=line.substring(10).split(' ');}var candidate={foundation:parts[0],component:{1:'rtp',2:'rtcp'}[parts[1]]||parts[1],protocol:parts[2].toLowerCase(),priority:parseInt(parts[3],10),ip:parts[4],address:parts[4],// address is an alias for ip.
port:parseInt(parts[5],10),// skip parts[6] == 'typ'
type:parts[7]};for(var i=8;i<parts.length;i+=2){switch(parts[i]){case'raddr':candidate.relatedAddress=parts[i+1];break;case'rport':candidate.relatedPort=parseInt(parts[i+1],10);break;case'tcptype':candidate.tcpType=parts[i+1];break;case'ufrag':candidate.ufrag=parts[i+1];// for backward compatibility.
candidate.usernameFragment=parts[i+1];break;default:// extension handling, in particular ufrag. Don't overwrite.
if(candidate[parts[i]]===undefined){candidate[parts[i]]=parts[i+1];}break;}}return candidate;};// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate=function(candidate){var sdp=[];sdp.push(candidate.foundation);var component=candidate.component;if(component==='rtp'){sdp.push(1);}else if(component==='rtcp'){sdp.push(2);}else {sdp.push(component);}sdp.push(candidate.protocol.toUpperCase());sdp.push(candidate.priority);sdp.push(candidate.address||candidate.ip);sdp.push(candidate.port);var type=candidate.type;sdp.push('typ');sdp.push(type);if(type!=='host'&&candidate.relatedAddress&&candidate.relatedPort){sdp.push('raddr');sdp.push(candidate.relatedAddress);sdp.push('rport');sdp.push(candidate.relatedPort);}if(candidate.tcpType&&candidate.protocol.toLowerCase()==='tcp'){sdp.push('tcptype');sdp.push(candidate.tcpType);}if(candidate.usernameFragment||candidate.ufrag){sdp.push('ufrag');sdp.push(candidate.usernameFragment||candidate.ufrag);}return 'candidate:'+sdp.join(' ');};// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions=function(line){return line.substr(14).split(' ');};// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap=function(line){var parts=line.substr(9).split(' ');var parsed={payloadType:parseInt(parts.shift(),10)// was: id
};parts=parts[0].split('/');parsed.name=parts[0];parsed.clockRate=parseInt(parts[1],10);// was: clockrate
parsed.channels=parts.length===3?parseInt(parts[2],10):1;// legacy alias, got renamed back to channels in ORTC.
parsed.numChannels=parsed.channels;return parsed;};// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap=function(codec){var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}var channels=codec.channels||codec.numChannels||1;return 'a=rtpmap:'+pt+' '+codec.name+'/'+codec.clockRate+(channels!==1?'/'+channels:'')+'\r\n';};// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap=function(line){var parts=line.substr(9).split(' ');return {id:parseInt(parts[0],10),direction:parts[0].indexOf('/')>0?parts[0].split('/')[1]:'sendrecv',uri:parts[1]};};// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap=function(headerExtension){return 'a=extmap:'+(headerExtension.id||headerExtension.preferredId)+(headerExtension.direction&&headerExtension.direction!=='sendrecv'?'/'+headerExtension.direction:'')+' '+headerExtension.uri+'\r\n';};// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp=function(line){var parsed={};var kv;var parts=line.substr(line.indexOf(' ')+1).split(';');for(var j=0;j<parts.length;j++){kv=parts[j].trim().split('=');parsed[kv[0].trim()]=kv[1];}return parsed;};// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp=function(codec){var line='';var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}if(codec.parameters&&Object.keys(codec.parameters).length){var params=[];Object.keys(codec.parameters).forEach(param=>{if(codec.parameters[param]!==undefined){params.push(param+'='+codec.parameters[param]);}else {params.push(param);}});line+='a=fmtp:'+pt+' '+params.join(';')+'\r\n';}return line;};// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb=function(line){var parts=line.substr(line.indexOf(' ')+1).split(' ');return {type:parts.shift(),parameter:parts.join(' ')};};// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb=function(codec){var lines='';var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}if(codec.rtcpFeedback&&codec.rtcpFeedback.length){// FIXME: special handling for trr-int?
codec.rtcpFeedback.forEach(fb=>{lines+='a=rtcp-fb:'+pt+' '+fb.type+(fb.parameter&&fb.parameter.length?' '+fb.parameter:'')+'\r\n';});}return lines;};// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia=function(line){var sp=line.indexOf(' ');var parts={ssrc:parseInt(line.substr(7,sp-7),10)};var colon=line.indexOf(':',sp);if(colon>-1){parts.attribute=line.substr(sp+1,colon-sp-1);parts.value=line.substr(colon+1);}else {parts.attribute=line.substr(sp+1);}return parts;};// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup=function(line){var parts=line.substr(13).split(' ');return {semantics:parts.shift(),ssrcs:parts.map(ssrc=>parseInt(ssrc,10))};};// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid=function(mediaSection){var mid=SDPUtils.matchPrefix(mediaSection,'a=mid:')[0];if(mid){return mid.substr(6);}};// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint=function(line){var parts=line.substr(14).split(' ');return {algorithm:parts[0].toLowerCase(),// algorithm is case-sensitive in Edge.
value:parts[1].toUpperCase()// the definition is upper-case in RFC 4572.
};};// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters=function(mediaSection,sessionpart){var lines=SDPUtils.matchPrefix(mediaSection+sessionpart,'a=fingerprint:');// Note: a=setup line is ignored since we use the 'auto' role in Edge.
return {role:'auto',fingerprints:lines.map(SDPUtils.parseFingerprint)};};// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters=function(params,setupType){var sdp='a=setup:'+setupType+'\r\n';params.fingerprints.forEach(fp=>{sdp+='a=fingerprint:'+fp.algorithm+' '+fp.value+'\r\n';});return sdp;};// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine=function(line){var parts=line.substr(9).split(' ');return {tag:parseInt(parts[0],10),cryptoSuite:parts[1],keyParams:parts[2],sessionParams:parts.slice(3)};};SDPUtils.writeCryptoLine=function(parameters){return 'a=crypto:'+parameters.tag+' '+parameters.cryptoSuite+' '+(typeof parameters.keyParams==='object'?SDPUtils.writeCryptoKeyParams(parameters.keyParams):parameters.keyParams)+(parameters.sessionParams?' '+parameters.sessionParams.join(' '):'')+'\r\n';};// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams=function(keyParams){if(keyParams.indexOf('inline:')!==0){return null;}var parts=keyParams.substr(7).split('|');return {keyMethod:'inline',keySalt:parts[0],lifeTime:parts[1],mkiValue:parts[2]?parts[2].split(':')[0]:undefined,mkiLength:parts[2]?parts[2].split(':')[1]:undefined};};SDPUtils.writeCryptoKeyParams=function(keyParams){return keyParams.keyMethod+':'+keyParams.keySalt+(keyParams.lifeTime?'|'+keyParams.lifeTime:'')+(keyParams.mkiValue&&keyParams.mkiLength?'|'+keyParams.mkiValue+':'+keyParams.mkiLength:'');};// Extracts all SDES parameters.
SDPUtils.getCryptoParameters=function(mediaSection,sessionpart){var lines=SDPUtils.matchPrefix(mediaSection+sessionpart,'a=crypto:');return lines.map(SDPUtils.parseCryptoLine);};// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters=function(mediaSection,sessionpart){var ufrag=SDPUtils.matchPrefix(mediaSection+sessionpart,'a=ice-ufrag:')[0];var pwd=SDPUtils.matchPrefix(mediaSection+sessionpart,'a=ice-pwd:')[0];if(!(ufrag&&pwd)){return null;}return {usernameFragment:ufrag.substr(12),password:pwd.substr(10)};};// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters=function(params){var sdp='a=ice-ufrag:'+params.usernameFragment+'\r\n'+'a=ice-pwd:'+params.password+'\r\n';if(params.iceLite){sdp+='a=ice-lite\r\n';}return sdp;};// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters=function(mediaSection){var description={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]};var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].split(' ');for(var i=3;i<mline.length;i++){// find all codecs from mline[3..]
var pt=mline[i];var rtpmapline=SDPUtils.matchPrefix(mediaSection,'a=rtpmap:'+pt+' ')[0];if(rtpmapline){var codec=SDPUtils.parseRtpMap(rtpmapline);var fmtps=SDPUtils.matchPrefix(mediaSection,'a=fmtp:'+pt+' ');// Only the first a=fmtp:<pt> is considered.
codec.parameters=fmtps.length?SDPUtils.parseFmtp(fmtps[0]):{};codec.rtcpFeedback=SDPUtils.matchPrefix(mediaSection,'a=rtcp-fb:'+pt+' ').map(SDPUtils.parseRtcpFb);description.codecs.push(codec);// parse FEC mechanisms from rtpmap lines.
switch(codec.name.toUpperCase()){case'RED':case'ULPFEC':description.fecMechanisms.push(codec.name.toUpperCase());break;}}}SDPUtils.matchPrefix(mediaSection,'a=extmap:').forEach(line=>{description.headerExtensions.push(SDPUtils.parseExtmap(line));});// FIXME: parse rtcp.
return description;};// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription=function(kind,caps){var sdp='';// Build the mline.
sdp+='m='+kind+' ';sdp+=caps.codecs.length>0?'9':'0';// reject if no codecs.
sdp+=' UDP/TLS/RTP/SAVPF ';sdp+=caps.codecs.map(codec=>{if(codec.preferredPayloadType!==undefined){return codec.preferredPayloadType;}return codec.payloadType;}).join(' ')+'\r\n';sdp+='c=IN IP4 0.0.0.0\r\n';sdp+='a=rtcp:9 IN IP4 0.0.0.0\r\n';// Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
caps.codecs.forEach(codec=>{sdp+=SDPUtils.writeRtpMap(codec);sdp+=SDPUtils.writeFmtp(codec);sdp+=SDPUtils.writeRtcpFb(codec);});var maxptime=0;caps.codecs.forEach(codec=>{if(codec.maxptime>maxptime){maxptime=codec.maxptime;}});if(maxptime>0){sdp+='a=maxptime:'+maxptime+'\r\n';}if(caps.headerExtensions){caps.headerExtensions.forEach(extension=>{sdp+=SDPUtils.writeExtmap(extension);});}// FIXME: write fecMechanisms.
return sdp;};// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters=function(mediaSection){var encodingParameters=[];var description=SDPUtils.parseRtpParameters(mediaSection);var hasRed=description.fecMechanisms.indexOf('RED')!==-1;var hasUlpfec=description.fecMechanisms.indexOf('ULPFEC')!==-1;// filter a=ssrc:... cname:, ignore PlanB-msid
var ssrcs=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(line=>SDPUtils.parseSsrcMedia(line)).filter(parts=>parts.attribute==='cname');var primarySsrc=ssrcs.length>0&&ssrcs[0].ssrc;var secondarySsrc;var flows=SDPUtils.matchPrefix(mediaSection,'a=ssrc-group:FID').map(line=>{var parts=line.substr(17).split(' ');return parts.map(part=>parseInt(part,10));});if(flows.length>0&&flows[0].length>1&&flows[0][0]===primarySsrc){secondarySsrc=flows[0][1];}description.codecs.forEach(codec=>{if(codec.name.toUpperCase()==='RTX'&&codec.parameters.apt){var encParam={ssrc:primarySsrc,codecPayloadType:parseInt(codec.parameters.apt,10)};if(primarySsrc&&secondarySsrc){encParam.rtx={ssrc:secondarySsrc};}encodingParameters.push(encParam);if(hasRed){encParam=JSON.parse(JSON.stringify(encParam));encParam.fec={ssrc:primarySsrc,mechanism:hasUlpfec?'red+ulpfec':'red'};encodingParameters.push(encParam);}}});if(encodingParameters.length===0&&primarySsrc){encodingParameters.push({ssrc:primarySsrc});}// we support both b=AS and b=TIAS but interpret AS as TIAS.
var bandwidth=SDPUtils.matchPrefix(mediaSection,'b=');if(bandwidth.length){if(bandwidth[0].indexOf('b=TIAS:')===0){bandwidth=parseInt(bandwidth[0].substr(7),10);}else if(bandwidth[0].indexOf('b=AS:')===0){// use formula from JSEP to convert b=AS to TIAS value.
bandwidth=parseInt(bandwidth[0].substr(5),10)*1000*0.95-50*40*8;}else {bandwidth=undefined;}encodingParameters.forEach(params=>{params.maxBitrate=bandwidth;});}return encodingParameters;};// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters=function(mediaSection){var rtcpParameters={};// Gets the first SSRC. Note that with RTX there might be multiple
// SSRCs.
var remoteSsrc=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(line=>SDPUtils.parseSsrcMedia(line)).filter(obj=>obj.attribute==='cname')[0];if(remoteSsrc){rtcpParameters.cname=remoteSsrc.value;rtcpParameters.ssrc=remoteSsrc.ssrc;}// Edge uses the compound attribute instead of reducedSize
// compound is !reducedSize
var rsize=SDPUtils.matchPrefix(mediaSection,'a=rtcp-rsize');rtcpParameters.reducedSize=rsize.length>0;rtcpParameters.compound=rsize.length===0;// parses the rtcp-mux attrіbute.
// Note that Edge does not support unmuxed RTCP.
var mux=SDPUtils.matchPrefix(mediaSection,'a=rtcp-mux');rtcpParameters.mux=mux.length>0;return rtcpParameters;};SDPUtils.writeRtcpParameters=function(rtcpParameters){var sdp='';if(rtcpParameters.reducedSize){sdp+='a=rtcp-rsize\r\n';}if(rtcpParameters.mux){sdp+='a=rtcp-mux\r\n';}if(rtcpParameters.ssrc!==undefined&&rtcpParameters.cname){sdp+='a=ssrc:'+rtcpParameters.ssrc+' cname:'+rtcpParameters.cname+'\r\n';}return sdp;};// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid=function(mediaSection){var parts;var spec=SDPUtils.matchPrefix(mediaSection,'a=msid:');if(spec.length===1){parts=spec[0].substr(7).split(' ');return {stream:parts[0],track:parts[1]};}var planB=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(line=>SDPUtils.parseSsrcMedia(line)).filter(msidParts=>msidParts.attribute==='msid');if(planB.length>0){parts=planB[0].value.split(' ');return {stream:parts[0],track:parts[1]};}};// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription=function(mediaSection){var mline=SDPUtils.parseMLine(mediaSection);var maxSizeLine=SDPUtils.matchPrefix(mediaSection,'a=max-message-size:');var maxMessageSize;if(maxSizeLine.length>0){maxMessageSize=parseInt(maxSizeLine[0].substr(19),10);}if(isNaN(maxMessageSize)){maxMessageSize=65536;}var sctpPort=SDPUtils.matchPrefix(mediaSection,'a=sctp-port:');if(sctpPort.length>0){return {port:parseInt(sctpPort[0].substr(12),10),protocol:mline.fmt,maxMessageSize};}var sctpMapLines=SDPUtils.matchPrefix(mediaSection,'a=sctpmap:');if(sctpMapLines.length>0){var parts=sctpMapLines[0].substr(10).split(' ');return {port:parseInt(parts[0],10),protocol:parts[1],maxMessageSize};}};// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription=function(media,sctp){var output=[];if(media.protocol!=='DTLS/SCTP'){output=['m='+media.kind+' 9 '+media.protocol+' '+sctp.protocol+'\r\n','c=IN IP4 0.0.0.0\r\n','a=sctp-port:'+sctp.port+'\r\n'];}else {output=['m='+media.kind+' 9 '+media.protocol+' '+sctp.port+'\r\n','c=IN IP4 0.0.0.0\r\n','a=sctpmap:'+sctp.port+' '+sctp.protocol+' 65535\r\n'];}if(sctp.maxMessageSize!==undefined){output.push('a=max-message-size:'+sctp.maxMessageSize+'\r\n');}return output.join('');};// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId=function(){return Math.random().toString().substr(2,21);};// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate=function(sessId,sessVer,sessUser){var sessionId;var version=sessVer!==undefined?sessVer:2;if(sessId){sessionId=sessId;}else {sessionId=SDPUtils.generateSessionId();}var user=sessUser||'thisisadapterortc';// FIXME: sess-id should be an NTP timestamp.
return 'v=0\r\n'+'o='+user+' '+sessionId+' '+version+' IN IP4 127.0.0.1\r\n'+'s=-\r\n'+'t=0 0\r\n';};// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection=function(mediaSection,sessionpart){// Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
var lines=SDPUtils.splitLines(mediaSection);for(var i=0;i<lines.length;i++){switch(lines[i]){case'a=sendrecv':case'a=sendonly':case'a=recvonly':case'a=inactive':return lines[i].substr(2);// FIXME: What should happen here?
}}if(sessionpart){return SDPUtils.getDirection(sessionpart);}return 'sendrecv';};SDPUtils.getKind=function(mediaSection){var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].split(' ');return mline[0].substr(2);};SDPUtils.isRejected=function(mediaSection){return mediaSection.split(' ',2)[1]==='0';};SDPUtils.parseMLine=function(mediaSection){var lines=SDPUtils.splitLines(mediaSection);var parts=lines[0].substr(2).split(' ');return {kind:parts[0],port:parseInt(parts[1],10),protocol:parts[2],fmt:parts.slice(3).join(' ')};};SDPUtils.parseOLine=function(mediaSection){var line=SDPUtils.matchPrefix(mediaSection,'o=')[0];var parts=line.substr(2).split(' ');return {username:parts[0],sessionId:parts[1],sessionVersion:parseInt(parts[2],10),netType:parts[3],addressType:parts[4],address:parts[5]};};// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP=function(blob){if(typeof blob!=='string'||blob.length===0){return false;}var lines=SDPUtils.splitLines(blob);for(var i=0;i<lines.length;i++){if(lines[i].length<2||lines[i].charAt(1)!=='='){return false;}// TODO: check the modifier a bit more.
}return true;};// Expose public methods.
{module.exports=SDPUtils;}})(sdp$1$1);var SDPUtils$1=sdp$1$1.exports;var sdp$2=/*#__PURE__*/_mergeNamespaces$1({__proto__:null,'default':SDPUtils$1},[sdp$1$1.exports]);/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */function shimRTCIceCandidate$1(window){// foundation is arbitrarily chosen as an indicator for full support for
// https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
if(!window.RTCIceCandidate||window.RTCIceCandidate&&'foundation'in window.RTCIceCandidate.prototype){return;}var NativeRTCIceCandidate=window.RTCIceCandidate;window.RTCIceCandidate=function RTCIceCandidate(args){// Remove the a= which shouldn't be part of the candidate string.
if(typeof args==='object'&&args.candidate&&args.candidate.indexOf('a=')===0){args=JSON.parse(JSON.stringify(args));args.candidate=args.candidate.substr(2);}if(args.candidate&&args.candidate.length){// Augment the native candidate with the parsed fields.
var nativeCandidate=new NativeRTCIceCandidate(args);var parsedCandidate=SDPUtils$1.parseCandidate(args.candidate);var augmentedCandidate=Object.assign(nativeCandidate,parsedCandidate);// Add a serializer that does not serialize the extra attributes.
augmentedCandidate.toJSON=function toJSON(){return {candidate:augmentedCandidate.candidate,sdpMid:augmentedCandidate.sdpMid,sdpMLineIndex:augmentedCandidate.sdpMLineIndex,usernameFragment:augmentedCandidate.usernameFragment};};return augmentedCandidate;}return new NativeRTCIceCandidate(args);};window.RTCIceCandidate.prototype=NativeRTCIceCandidate.prototype;// Hook up the augmented candidate in onicecandidate and
// addEventListener('icecandidate', ...)
wrapPeerConnectionEvent$1(window,'icecandidate',e=>{if(e.candidate){Object.defineProperty(e,'candidate',{value:new window.RTCIceCandidate(e.candidate),writable:'false'});}return e;});}function shimMaxMessageSize$1(window,browserDetails){if(!window.RTCPeerConnection){return;}if(!('sctp'in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'sctp',{get(){return typeof this._sctp==='undefined'?null:this._sctp;}});}var sctpInDescription=function sctpInDescription(description){if(!description||!description.sdp){return false;}var sections=SDPUtils$1.splitSections(description.sdp);sections.shift();return sections.some(mediaSection=>{var mLine=SDPUtils$1.parseMLine(mediaSection);return mLine&&mLine.kind==='application'&&mLine.protocol.indexOf('SCTP')!==-1;});};var getRemoteFirefoxVersion=function getRemoteFirefoxVersion(description){// TODO: Is there a better solution for detecting Firefox?
var match=description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(match===null||match.length<2){return -1;}var version=parseInt(match[1],10);// Test for NaN (yes, this is ugly)
return version!==version?-1:version;};var getCanSendMaxMessageSize=function getCanSendMaxMessageSize(remoteIsFirefox){// Every implementation we know can send at least 64 KiB.
// Note: Although Chrome is technically able to send up to 256 KiB, the
//       data does not reach the other peer reliably.
//       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
var canSendMaxMessageSize=65536;if(browserDetails.browser==='firefox'){if(browserDetails.version<57){if(remoteIsFirefox===-1){// FF < 57 will send in 16 KiB chunks using the deprecated PPID
// fragmentation.
canSendMaxMessageSize=16384;}else {// However, other FF (and RAWRTC) can reassemble PPID-fragmented
// messages. Thus, supporting ~2 GiB when sending.
canSendMaxMessageSize=2147483637;}}else if(browserDetails.version<60){// Currently, all FF >= 57 will reset the remote maximum message size
// to the default value when a data channel is created at a later
// stage. :(
// See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
canSendMaxMessageSize=browserDetails.version===57?65535:65536;}else {// FF >= 60 supports sending ~2 GiB
canSendMaxMessageSize=2147483637;}}return canSendMaxMessageSize;};var getMaxMessageSize=function getMaxMessageSize(description,remoteIsFirefox){// Note: 65536 bytes is the default value from the SDP spec. Also,
//       every implementation we know supports receiving 65536 bytes.
var maxMessageSize=65536;// FF 57 has a slightly incorrect default remote max message size, so
// we need to adjust it here to avoid a failure when sending.
// See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
if(browserDetails.browser==='firefox'&&browserDetails.version===57){maxMessageSize=65535;}var match=SDPUtils$1.matchPrefix(description.sdp,'a=max-message-size:');if(match.length>0){maxMessageSize=parseInt(match[0].substr(19),10);}else if(browserDetails.browser==='firefox'&&remoteIsFirefox!==-1){// If the maximum message size is not present in the remote SDP and
// both local and remote are Firefox, the remote peer can receive
// ~2 GiB.
maxMessageSize=2147483637;}return maxMessageSize;};var origSetRemoteDescription=window.RTCPeerConnection.prototype.setRemoteDescription;window.RTCPeerConnection.prototype.setRemoteDescription=function setRemoteDescription(){this._sctp=null;// Chrome decided to not expose .sctp in plan-b mode.
// As usual, adapter.js has to do an 'ugly worakaround'
// to cover up the mess.
if(browserDetails.browser==='chrome'&&browserDetails.version>=76){var{sdpSemantics}=this.getConfiguration();if(sdpSemantics==='plan-b'){Object.defineProperty(this,'sctp',{get(){return typeof this._sctp==='undefined'?null:this._sctp;},enumerable:true,configurable:true});}}if(sctpInDescription(arguments[0])){// Check if the remote is FF.
var isFirefox=getRemoteFirefoxVersion(arguments[0]);// Get the maximum message size the local peer is capable of sending
var canSendMMS=getCanSendMaxMessageSize(isFirefox);// Get the maximum message size of the remote peer.
var remoteMMS=getMaxMessageSize(arguments[0],isFirefox);// Determine final maximum message size
var maxMessageSize;if(canSendMMS===0&&remoteMMS===0){maxMessageSize=Number.POSITIVE_INFINITY;}else if(canSendMMS===0||remoteMMS===0){maxMessageSize=Math.max(canSendMMS,remoteMMS);}else {maxMessageSize=Math.min(canSendMMS,remoteMMS);}// Create a dummy RTCSctpTransport object and the 'maxMessageSize'
// attribute.
var sctp={};Object.defineProperty(sctp,'maxMessageSize',{get(){return maxMessageSize;}});this._sctp=sctp;}return origSetRemoteDescription.apply(this,arguments);};}function shimSendThrowTypeError$1(window){if(!(window.RTCPeerConnection&&'createDataChannel'in window.RTCPeerConnection.prototype)){return;}// Note: Although Firefox >= 57 has a native implementation, the maximum
//       message size can be reset for all data channels at a later stage.
//       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
function wrapDcSend(dc,pc){var origDataChannelSend=dc.send;dc.send=function send(){var data=arguments[0];var length=data.length||data.size||data.byteLength;if(dc.readyState==='open'&&pc.sctp&&length>pc.sctp.maxMessageSize){throw new TypeError('Message too large (can send a maximum of '+pc.sctp.maxMessageSize+' bytes)');}return origDataChannelSend.apply(dc,arguments);};}var origCreateDataChannel=window.RTCPeerConnection.prototype.createDataChannel;window.RTCPeerConnection.prototype.createDataChannel=function createDataChannel(){var dataChannel=origCreateDataChannel.apply(this,arguments);wrapDcSend(dataChannel,this);return dataChannel;};wrapPeerConnectionEvent$1(window,'datachannel',e=>{wrapDcSend(e.channel,e.target);return e;});}/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */function shimConnectionState$1(window){if(!window.RTCPeerConnection||'connectionState'in window.RTCPeerConnection.prototype){return;}var proto=window.RTCPeerConnection.prototype;Object.defineProperty(proto,'connectionState',{get(){return {completed:'connected',checking:'connecting'}[this.iceConnectionState]||this.iceConnectionState;},enumerable:true,configurable:true});Object.defineProperty(proto,'onconnectionstatechange',{get(){return this._onconnectionstatechange||null;},set(cb){if(this._onconnectionstatechange){this.removeEventListener('connectionstatechange',this._onconnectionstatechange);delete this._onconnectionstatechange;}if(cb){this.addEventListener('connectionstatechange',this._onconnectionstatechange=cb);}},enumerable:true,configurable:true});['setLocalDescription','setRemoteDescription'].forEach(method=>{var origMethod=proto[method];proto[method]=function(){if(!this._connectionstatechangepoly){this._connectionstatechangepoly=e=>{var pc=e.target;if(pc._lastConnectionState!==pc.connectionState){pc._lastConnectionState=pc.connectionState;var newEvent=new Event('connectionstatechange',e);pc.dispatchEvent(newEvent);}return e;};this.addEventListener('iceconnectionstatechange',this._connectionstatechangepoly);}return origMethod.apply(this,arguments);};});}function removeExtmapAllowMixed$1(window,browserDetails){/* remove a=extmap-allow-mixed for webrtc.org < M71 */if(!window.RTCPeerConnection){return;}if(browserDetails.browser==='chrome'&&browserDetails.version>=71){return;}if(browserDetails.browser==='safari'&&browserDetails.version>=605){return;}var nativeSRD=window.RTCPeerConnection.prototype.setRemoteDescription;window.RTCPeerConnection.prototype.setRemoteDescription=function setRemoteDescription(desc){if(desc&&desc.sdp&&desc.sdp.indexOf('\na=extmap-allow-mixed')!==-1){var _sdp=desc.sdp.split('\n').filter(line=>{return line.trim()!=='a=extmap-allow-mixed';}).join('\n');// Safari enforces read-only-ness of RTCSessionDescription fields.
if(window.RTCSessionDescription&&desc instanceof window.RTCSessionDescription){arguments[0]=new window.RTCSessionDescription({type:desc.type,sdp:_sdp});}else {desc.sdp=_sdp;}}return nativeSRD.apply(this,arguments);};}function shimAddIceCandidateNullOrEmpty$1(window,browserDetails){// Support for addIceCandidate(null or undefined)
// as well as addIceCandidate({candidate: "", ...})
// https://bugs.chromium.org/p/chromium/issues/detail?id=978582
// Note: must be called before other polyfills which change the signature.
if(!(window.RTCPeerConnection&&window.RTCPeerConnection.prototype)){return;}var nativeAddIceCandidate=window.RTCPeerConnection.prototype.addIceCandidate;if(!nativeAddIceCandidate||nativeAddIceCandidate.length===0){return;}window.RTCPeerConnection.prototype.addIceCandidate=function addIceCandidate(){if(!arguments[0]){if(arguments[1]){arguments[1].apply(null);}return Promise.resolve();}// Firefox 68+ emits and processes {candidate: "", ...}, ignore
// in older versions.
// Native support for ignoring exists for Chrome M77+.
// Safari ignores as well, exact version unknown but works in the same
// version that also ignores addIceCandidate(null).
if((browserDetails.browser==='chrome'&&browserDetails.version<78||browserDetails.browser==='firefox'&&browserDetails.version<68||browserDetails.browser==='safari')&&arguments[0]&&arguments[0].candidate===''){return Promise.resolve();}return nativeAddIceCandidate.apply(this,arguments);};}// Note: Make sure to call this ahead of APIs that modify
// setLocalDescription.length
function shimParameterlessSetLocalDescription$1(window,browserDetails){if(!(window.RTCPeerConnection&&window.RTCPeerConnection.prototype)){return;}var nativeSetLocalDescription=window.RTCPeerConnection.prototype.setLocalDescription;if(!nativeSetLocalDescription||nativeSetLocalDescription.length===0){return;}window.RTCPeerConnection.prototype.setLocalDescription=function setLocalDescription(){var desc=arguments[0]||{};if(typeof desc!=='object'||desc.type&&desc.sdp){return nativeSetLocalDescription.apply(this,arguments);}// The remaining steps should technically happen when SLD comes off the
// RTCPeerConnection's operations chain (not ahead of going on it), but
// this is too difficult to shim. Instead, this shim only covers the
// common case where the operations chain is empty. This is imperfect, but
// should cover many cases. Rationale: Even if we can't reduce the glare
// window to zero on imperfect implementations, there's value in tapping
// into the perfect negotiation pattern that several browsers support.
desc={type:desc.type,sdp:desc.sdp};if(!desc.type){switch(this.signalingState){case'stable':case'have-local-offer':case'have-remote-pranswer':desc.type='offer';break;default:desc.type='answer';break;}}if(desc.sdp||desc.type!=='offer'&&desc.type!=='answer'){return nativeSetLocalDescription.apply(this,[desc]);}var func=desc.type==='offer'?this.createOffer:this.createAnswer;return func.apply(this).then(d=>nativeSetLocalDescription.apply(this,[d]));};}var commonShim$1=/*#__PURE__*/Object.freeze({__proto__:null,shimRTCIceCandidate:shimRTCIceCandidate$1,shimMaxMessageSize:shimMaxMessageSize$1,shimSendThrowTypeError:shimSendThrowTypeError$1,shimConnectionState:shimConnectionState$1,removeExtmapAllowMixed:removeExtmapAllowMixed$1,shimAddIceCandidateNullOrEmpty:shimAddIceCandidateNullOrEmpty$1,shimParameterlessSetLocalDescription:shimParameterlessSetLocalDescription$1});/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ // Shimming starts here.
function adapterFactory$1(){var{window}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{shimChrome:true,shimFirefox:true,shimSafari:true};// Utils.
var logging=log$2;var browserDetails=detectBrowser$1(window);var adapter={browserDetails,commonShim: commonShim$1,extractVersion:extractVersion$1,disableLog:disableLog$1,disableWarnings:disableWarnings$1,// Expose sdp as a convenience. For production apps include directly.
sdp: sdp$2};// Shim browser if found.
switch(browserDetails.browser){case'chrome':if(!chromeShim$1||!shimPeerConnection$1$1||!options.shimChrome){logging('Chrome shim is not included in this adapter release.');return adapter;}if(browserDetails.version===null){logging('Chrome shim can not determine version, not shimming.');return adapter;}logging('adapter.js shimming chrome.');// Export to the adapter global object visible in the browser.
adapter.browserShim=chromeShim$1;// Must be called before shimPeerConnection.
shimAddIceCandidateNullOrEmpty$1(window,browserDetails);shimParameterlessSetLocalDescription$1(window);shimGetUserMedia$2$1(window,browserDetails);shimMediaStream$1(window);shimPeerConnection$1$1(window,browserDetails);shimOnTrack$1$1(window);shimAddTrackRemoveTrack$1(window,browserDetails);shimGetSendersWithDtmf$1(window);shimGetStats$1(window);shimSenderReceiverGetStats$1(window);fixNegotiationNeeded$1(window,browserDetails);shimRTCIceCandidate$1(window);shimConnectionState$1(window);shimMaxMessageSize$1(window,browserDetails);shimSendThrowTypeError$1(window);removeExtmapAllowMixed$1(window,browserDetails);break;case'firefox':if(!firefoxShim$1||!shimPeerConnection$2||!options.shimFirefox){logging('Firefox shim is not included in this adapter release.');return adapter;}logging('adapter.js shimming firefox.');// Export to the adapter global object visible in the browser.
adapter.browserShim=firefoxShim$1;// Must be called before shimPeerConnection.
shimAddIceCandidateNullOrEmpty$1(window,browserDetails);shimParameterlessSetLocalDescription$1(window);shimGetUserMedia$1$1(window,browserDetails);shimPeerConnection$2(window,browserDetails);shimOnTrack$2(window);shimRemoveStream$1(window);shimSenderGetStats$1(window);shimReceiverGetStats$1(window);shimRTCDataChannel$1(window);shimAddTransceiver$1(window);shimGetParameters$1(window);shimCreateOffer$1(window);shimCreateAnswer$1(window);shimRTCIceCandidate$1(window);shimConnectionState$1(window);shimMaxMessageSize$1(window,browserDetails);shimSendThrowTypeError$1(window);break;case'safari':if(!safariShim$1||!options.shimSafari){logging('Safari shim is not included in this adapter release.');return adapter;}logging('adapter.js shimming safari.');// Export to the adapter global object visible in the browser.
adapter.browserShim=safariShim$1;// Must be called before shimCallbackAPI.
shimAddIceCandidateNullOrEmpty$1(window,browserDetails);shimParameterlessSetLocalDescription$1(window);shimRTCIceServerUrls$1(window);shimCreateOfferLegacy$1(window);shimCallbacksAPI$1(window);shimLocalStreamsAPI$1(window);shimRemoteStreamsAPI$1(window);shimTrackEventTransceiver$1(window);shimGetUserMedia$3(window);shimAudioContext$1(window);shimRTCIceCandidate$1(window);shimMaxMessageSize$1(window,browserDetails);shimSendThrowTypeError$1(window);removeExtmapAllowMixed$1(window,browserDetails);break;default:logging('Unsupported browser!');break;}return adapter;}/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */adapterFactory$1({window:typeof window==='undefined'?undefined:window});/**
 * Creates an RTCPeerConnection.
 *
 * @param configuration - Config to the RTCPeerConnection constructor.
 * @returns An RTCPeerConnection instance.
 */function createRTCPeerConnection(configuration){return new RTCPeerConnection(configuration);}/**
 * A type-safe form of the DOMString used in the MediaStreamTrack.kind field.
 */exports.MediaStreamTrackKind = void 0;(function(MediaStreamTrackKind){MediaStreamTrackKind["Audio"]="audio";MediaStreamTrackKind["Video"]="video";})(exports.MediaStreamTrackKind||(exports.MediaStreamTrackKind={}));var PeerConnectionEvents;(function(PeerConnectionEvents){PeerConnectionEvents["IceGatheringStateChange"]="icegatheringstatechange";PeerConnectionEvents["IceCandidate"]="icecandidate";PeerConnectionEvents["IceCandidateError"]="icecandidateerror";PeerConnectionEvents["PeerConnectionStateChange"]="peerconnectionstatechange";PeerConnectionEvents["IceConnectionStateChange"]="iceconnectionstatechange";PeerConnectionEvents["CreateOfferOnSuccess"]="createofferonsuccess";PeerConnectionEvents["CreateAnswerOnSuccess"]="createansweronsuccess";PeerConnectionEvents["SetLocalDescriptionOnSuccess"]="setlocaldescriptiononsuccess";PeerConnectionEvents["SetRemoteDescriptionOnSuccess"]="setremotedescriptiononsuccess";})(PeerConnectionEvents||(PeerConnectionEvents={}));/**
 * Manages a single RTCPeerConnection with the server.
 */class PeerConnection extends EventEmitter$4{/**
     * Creates an instance of the RTCPeerConnection.
     *
     * @param configuration - Config to the RTCPeerConnection constructor.
     */constructor(configuration){super();this.iceCandidates=[];logger$3.log('PeerConnection init');this.pc=createRTCPeerConnection(configuration);this.connectionStateHandler=new ConnectionStateHandler(()=>{return {connectionState:this.pc.connectionState,iceState:this.pc.iceConnectionState};});this.connectionStateHandler.on(ConnectionStateHandler.Events.PeerConnectionStateChanged,state=>{this.emit(PeerConnection.Events.PeerConnectionStateChange,state);});this.connectionStateHandler.on(ConnectionStateHandler.Events.IceConnectionStateChanged,state=>{this.emit(PeerConnection.Events.IceConnectionStateChange,state);});// Forward the connection state related events to connection state handler
// eslint-disable-next-line jsdoc/require-jsdoc
this.pc.oniceconnectionstatechange=()=>this.connectionStateHandler.onIceConnectionStateChange();// eslint-disable-next-line jsdoc/require-jsdoc
this.pc.onconnectionstatechange=()=>this.connectionStateHandler.onPeerConnectionStateChange();// Subscribe to underlying PeerConnection events and emit them via the EventEmitter
/* eslint-disable jsdoc/require-jsdoc */this.pc.onicegatheringstatechange=ev=>{this.emit(PeerConnection.Events.IceGatheringStateChange,ev);};/* eslint-disable jsdoc/require-jsdoc */this.pc.onicecandidate=ev=>{if(ev.candidate){this.iceCandidates.push(ev.candidate);}this.emit(PeerConnection.Events.IceCandidate,ev);};this.pc.onicecandidateerror=ev=>{this.emit(PeerConnection.Events.IceCandidateError,ev);};}/**
     * Get the underlying RTCPeerConnection.
     *
     * @returns The underlying RTCPeerConnection.
     */getUnderlyingRTCPeerConnection(){return this.pc;}/**
     * Gets the overall connection state of the underlying RTCPeerConnection.
     *
     * @returns The underlying connection's overall state.
     */getConnectionState(){return this.connectionStateHandler.getConnectionState();}/**
     * Gets the connection state of the underlying RTCPeerConnection.
     *
     * @returns The underlying RTCPeerConnection connection state.
     */getPeerConnectionState(){return this.connectionStateHandler.getPeerConnectionState();}/**
     * Gets the ICE connection state of the underlying RTCPeerConnection.
     *
     * @returns The underlying RTCPeerConnection ICE connection state.
     */getIceConnectionState(){return this.connectionStateHandler.getIceConnectionState();}/**
     * Gets the list of ICE candidates that have been gathered.
     *
     * @returns An array of RTCIceCandidate objects representing the ICE candidates.
     */getIceCandidates(){return this.iceCandidates;}/**
     * Adds a new media track to the set of tracks which will be transmitted to the other peer.
     *
     * @param track - A MediaStreamTrack object representing the media track to add to the peer connection.
     * @param streams - (Optional) One or more local MediaStream objects to which the track should be
     *     added.
     * @returns The RTCRtpSender object which will be used to transmit the media data, or null if
     *     there is no underlying track when a track is added.
     */addTrack(track){for(var _len3=arguments.length,streams=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){streams[_key3-1]=arguments[_key3];}return this.pc.addTrack(track,...streams);}/**
     * Creates a new RTCRtpTransceiver and adds it to the set of transceivers associated with the
     * PeerConnection.  Each transceiver represents a bidirectional stream, with both an RTCRtpSender
     * and an RTCRtpReceiver associated with it.
     *
     * @param trackOrKind - A MediaStreamTrack to associate with the transceiver, or a string which is used
     * as the kind of the receiver's track, and by extension the RTCRtpReceiver itself.
     * @param init - Options that you may wish to specify when creating the new transceiver.
     * @returns - The created RTCRtpTransceiver object.
     */addTransceiver(trackOrKind,init){return this.pc.addTransceiver(trackOrKind,init);}/**
     * Tell the local end of the connection to stop sending media from the specified track, without
     * actually removing the corresponding RTCRtpSender from the list of senders as reported by
     * RTCPeerConnection.getSenders().  If the track is already stopped, or is not in the connection's
     * senders list, the method has no effect.
     *
     * If the connection has already been negotiated (signalingState is set to 'stable'), it is marked
     * as needing to be negotiated again; the remote peer won't experience the change until this
     * negotiation occurs.  A negotiatedneeded event is sent to the RTCPeerConnection to let the local
     * end know this negotiation must occur.
     *
     * @param sender - An RTCRtpSender specifying the sender to remove from the connection.
     */removeTrack(sender){this.pc.removeTrack(sender);}/**
     * Creates a new data channel linked with the remote peer.
     *
     * @param label - A human-readable name for the channel.  May not be longer than 65,535 bytes.
     * @param options - An object providing configuration options for the data channel.
     * @returns An RTCDataChannel object.
     */createDataChannel(label,options){return this.pc.createDataChannel(label,options);}/**
     * Creates an SDP answer to an offer received from a remote peer during the offer/answer
     * negotiation of a WebRTC connection.
     *
     * @param options - (Optional) An object which contains options which customize the answer; this
     *     is based on the RTCAnswerOptions dictionary.
     * @returns A Promise whose fulfillment handler is called with an object conforming to the
     *     RTCSessionDescriptionInit dictionary which contains the SDP answer to be delivered to the
     *     other peer.
     */createAnswer(options){return __awaiter$2(this,void 0,void 0,function*(){return this.pc.createAnswer(options).then(answer=>{this.emit(PeerConnection.Events.CreateAnswerOnSuccess,answer);return answer;});});}/**
     * Initiates the creation of an SDP offer for the purpose of starting a new WebRTC connection to a
     * remote peer.
     *
     * @param options - (Optional) An RTCOfferOptions dictionary providing options requested for the
     *    offer.
     * @returns A Promise whose fulfillment handler will receive an object conforming to the
     *    RTCSessionDescriptionInit dictionary which contains the SDP describing the generated offer.
     *    That received offer should be delivered through the signaling server to a remote peer.
     */createOffer(options){return __awaiter$2(this,void 0,void 0,function*(){return this.pc.createOffer(options).then(offer=>{this.emit(PeerConnection.Events.CreateOfferOnSuccess,offer);return offer;});});}/**
     * Changes the local description associated with the connection.
     *
     * @param description - An RTCSessionDescriptionInit or RTCSessionDescription which specifies the
     *     configuration to be applied to the local end of the connection.
     * @returns A Promise which is fulfilled once the value of RTCPeerConnection.localDescription is
     *     successfully changed or rejected if the change cannot be applied.
     */setLocalDescription(description){return __awaiter$2(this,void 0,void 0,function*(){var _a;// In Firefox, setLocalDescription will not throw an error if an m-line has no codecs, even
// though it violates https://datatracker.ietf.org/doc/html/rfc8866. See
// https://bugzilla.mozilla.org/show_bug.cgi?id=1857612. So, we check the media lines here to
// preemptively throw an error on Firefox.
if(BrowserInfo$1.isFirefox()){(_a=description===null||description===void 0?void 0:description.sdp)===null||_a===void 0?void 0:_a.split(/(\r\n|\r|\n)/).filter(line=>line.startsWith('m')).forEach(mediaLine=>{if(mediaLine.trim().split(' ').length<4){throw new Error("Invalid media line ".concat(mediaLine,", expected at least 4 fields"));}});}return this.pc.setLocalDescription(description).then(()=>{if(description){this.emit(PeerConnection.Events.SetLocalDescriptionOnSuccess,description);}});});}/**
     * Sets the specified session description as the remote peer's current offer or answer.
     *
     * @param description - An RTCSessionDescriptionInit or RTCSessionDescription which specifies the
     *     remote peer's current offer or answer.
     * @returns A Promise which is fulfilled once the value of the connection's remoteDescription is
     *     successfully changed or rejected if the change cannot be applied (for example, if the
     *     specified description is incompatible with one or both of the peers on the connection).
     */setRemoteDescription(description){return __awaiter$2(this,void 0,void 0,function*(){return this.pc.setRemoteDescription(description).then(()=>{this.emit(PeerConnection.Events.SetRemoteDescriptionOnSuccess,description);});});}/**
     * Closes the current peer connection.
     */close(){this.pc.close();}/**
     * Get the local description from this PeerConnection.
     *
     * @returns An RTCSessionDescription representing the local description, or null if none has been set.
     */getLocalDescription(){return this.pc.localDescription;}/**
     * Get the remote description from this PeerConnection.
     *
     * @returns An RTCSessionDescription representing the remote description, or null if none has been set.
     */getRemoteDescription(){return this.pc.remoteDescription;}/**
     * Returns an array of RTCRtpSender objects, each of which represents the RTP sender responsible
     * for transmitting one track's data.  A sender object provides methods and properties for
     * examining and controlling the encoding and transmission of the track's data.
     *
     * @returns An array of RTCRtpSender objects, one for each track on the connection.  The array is
     * empty if there are no RTP senders on the connection.
     */getSenders(){return this.pc.getSenders();}/**
     * Get the list of RTCRtpTransceiver objects being used to send and receive data on the
     * connection.
     *
     * @returns - An array of the RTCRtpTransceiver objects representing the transceivers handling
     * sending and receiving all media on the PeerConnection.  The list is in the order in which the
     * transceivers were added to the connection.
     */getTransceivers(){return this.pc.getTransceivers();}/**
     * Get statistics about either the overall connection or about the specified MediaStreamTrack.
     *
     * @param selector - An optional MediaStreamTrack for which to gather statistics. If not provided,
     * statistics will be gathered for the entire underlying RTCPeerConnection.
     * @returns - A Promise which resolves with an RTCStatsReport object providing connection
     * statistics.
     */getStats(selector){return this.pc.getStats(selector);}/**
     * Returns a string that describes the connections' ICE gathering state.
     *
     * @returns - The ICE gathering state.
     */get iceGatheringState(){return this.pc.iceGatheringState;}/**
     * Returns the type of a connection that has been established.
     *
     * @returns The connection type which would be `ConnectionType`.
     */getCurrentConnectionType(){return __awaiter$2(this,void 0,void 0,function*(){var _a;// make sure this method only can be called when the ice connection is established;
var isIceConnected=this.pc.iceConnectionState==='connected'||this.pc.iceConnectionState==='completed';if(!isIceConnected){throw new Error('Ice connection is not established');}var succeededLocalCandidateIds=new Set();// eslint-disable-next-line @typescript-eslint/no-explicit-any
var localCandidateStatsReports=[];(yield this.pc.getStats()).forEach(report=>{var _a;// collect all local candidate ids from `candidate-pair` stats reports with `succeeded` state.
if(report.type==='candidate-pair'&&((_a=report.state)===null||_a===void 0?void 0:_a.toLowerCase())==='succeeded'){succeededLocalCandidateIds.add(report.localCandidateId);}// collect all `local-candidate` stats.
if(report.type==='local-candidate'){localCandidateStatsReports.push(report);}});// find the `local-candidate` stats which report id contains in `succeededLocalCandidateIds`.
var localCandidate=localCandidateStatsReports.find(report=>succeededLocalCandidateIds.has(report.id));if(!localCandidate){return 'unknown';}if(localCandidate.relayProtocol){return "TURN-".concat(localCandidate.relayProtocol.toUpperCase());}return (_a=localCandidate.protocol)===null||_a===void 0?void 0:_a.toUpperCase();});}}PeerConnection.Events=PeerConnectionEvents;var commonjsGlobal$2=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global$1!=='undefined'?global$1:typeof self!=='undefined'?self:{};var logger$2={exports:{}};/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */(function(module){(function(global){// Top level module for the global, static logger instance.
var Logger={};// For those that are at home that are keeping score.
Logger.VERSION="1.6.1";// Function which handles all incoming log messages.
var logHandler;// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
var contextualLoggersByNameMap={};// Polyfill for ES5's Function.bind.
var bind=function bind(scope,func){return function(){return func.apply(scope,arguments);};};// Super exciting object merger-matron 9000 adding another 100 bytes to your download.
var merge=function merge(){var args=arguments,target=args[0],key,i;for(i=1;i<args.length;i++){for(key in args[i]){if(!(key in target)&&args[i].hasOwnProperty(key)){target[key]=args[i][key];}}}return target;};// Helper to define a logging level object; helps with optimisation.
var defineLogLevel=function defineLogLevel(value,name){return {value:value,name:name};};// Predefined logging levels.
Logger.TRACE=defineLogLevel(1,'TRACE');Logger.DEBUG=defineLogLevel(2,'DEBUG');Logger.INFO=defineLogLevel(3,'INFO');Logger.TIME=defineLogLevel(4,'TIME');Logger.WARN=defineLogLevel(5,'WARN');Logger.ERROR=defineLogLevel(8,'ERROR');Logger.OFF=defineLogLevel(99,'OFF');// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
// of each other.
var ContextualLogger=function ContextualLogger(defaultContext){this.context=defaultContext;this.setLevel(defaultContext.filterLevel);this.log=this.info;// Convenience alias.
};ContextualLogger.prototype={// Changes the current logging level for the logging instance.
setLevel:function setLevel(newLevel){// Ensure the supplied Level object looks valid.
if(newLevel&&"value"in newLevel){this.context.filterLevel=newLevel;}},// Gets the current logging level for the logging instance
getLevel:function getLevel(){return this.context.filterLevel;},// Is the logger configured to output messages at the supplied level?
enabledFor:function enabledFor(lvl){var filterLevel=this.context.filterLevel;return lvl.value>=filterLevel.value;},trace:function trace(){this.invoke(Logger.TRACE,arguments);},debug:function debug(){this.invoke(Logger.DEBUG,arguments);},info:function info(){this.invoke(Logger.INFO,arguments);},warn:function warn(){this.invoke(Logger.WARN,arguments);},error:function error(){this.invoke(Logger.ERROR,arguments);},time:function time(label){if(typeof label==='string'&&label.length>0){this.invoke(Logger.TIME,[label,'start']);}},timeEnd:function timeEnd(label){if(typeof label==='string'&&label.length>0){this.invoke(Logger.TIME,[label,'end']);}},// Invokes the logger callback if it's not being filtered.
invoke:function invoke(level,msgArgs){if(logHandler&&this.enabledFor(level)){logHandler(msgArgs,merge({level:level},this.context));}}};// Protected instance which all calls to the to level `Logger` module will be routed through.
var globalLogger=new ContextualLogger({filterLevel:Logger.OFF});// Configure the global Logger instance.
(function(){// Shortcut for optimisers.
var L=Logger;L.enabledFor=bind(globalLogger,globalLogger.enabledFor);L.trace=bind(globalLogger,globalLogger.trace);L.debug=bind(globalLogger,globalLogger.debug);L.time=bind(globalLogger,globalLogger.time);L.timeEnd=bind(globalLogger,globalLogger.timeEnd);L.info=bind(globalLogger,globalLogger.info);L.warn=bind(globalLogger,globalLogger.warn);L.error=bind(globalLogger,globalLogger.error);// Don't forget the convenience alias!
L.log=L.info;})();// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
// object with the supplied log messages and the second being a context object which contains a hash of stateful
// parameters which the logging function can consume.
Logger.setHandler=function(func){logHandler=func;};// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
Logger.setLevel=function(level){// Set the globalLogger's level.
globalLogger.setLevel(level);// Apply this level to all registered contextual loggers.
for(var key in contextualLoggersByNameMap){if(contextualLoggersByNameMap.hasOwnProperty(key)){contextualLoggersByNameMap[key].setLevel(level);}}};// Gets the global logging filter level
Logger.getLevel=function(){return globalLogger.getLevel();};// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
// default context and log handler.
Logger.get=function(name){// All logger instances are cached so they can be configured ahead of use.
return contextualLoggersByNameMap[name]||(contextualLoggersByNameMap[name]=new ContextualLogger(merge({name:name},globalLogger.context)));};// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
// write to the window's console object (if present); the optional options object can be used to customise the
// formatter used to format each log message.
Logger.createDefaultHandler=function(options){options=options||{};options.formatter=options.formatter||function defaultMessageFormatter(messages,context){// Prepend the logger's name to the log message for easy identification.
if(context.name){messages.unshift("["+context.name+"]");}};// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
// that don't offer a native console method.
var timerStartTimeByLabelMap={};// Support for IE8+ (and other, slightly more sane environments)
var invokeConsoleMethod=function invokeConsoleMethod(hdlr,messages){Function.prototype.apply.call(hdlr,console,messages);};// Check for the presence of a logger.
if(typeof console==="undefined"){return function(){/* no console */};}return function(messages,context){// Convert arguments object to Array.
messages=Array.prototype.slice.call(messages);var hdlr=console.log;var timerLabel;if(context.level===Logger.TIME){timerLabel=(context.name?'['+context.name+'] ':'')+messages[0];if(messages[1]==='start'){if(console.time){console.time(timerLabel);}else {timerStartTimeByLabelMap[timerLabel]=new Date().getTime();}}else {if(console.timeEnd){console.timeEnd(timerLabel);}else {invokeConsoleMethod(hdlr,[timerLabel+': '+(new Date().getTime()-timerStartTimeByLabelMap[timerLabel])+'ms']);}}}else {// Delegate through to custom warn/error loggers if present on the console.
if(context.level===Logger.WARN&&console.warn){hdlr=console.warn;}else if(context.level===Logger.ERROR&&console.error){hdlr=console.error;}else if(context.level===Logger.INFO&&console.info){hdlr=console.info;}else if(context.level===Logger.DEBUG&&console.debug){hdlr=console.debug;}else if(context.level===Logger.TRACE&&console.trace){hdlr=console.trace;}options.formatter(messages,context);invokeConsoleMethod(hdlr,messages);}};};// Configure and example a Default implementation which writes to the `window.console` (if present).  The
// `options` hash can be used to configure the default logLevel and provide a custom message formatter.
Logger.useDefaults=function(options){Logger.setLevel(options&&options.defaultLevel||Logger.DEBUG);Logger.setHandler(Logger.createDefaultHandler(options));};// Createa an alias to useDefaults to avoid reaking a react-hooks rule.
Logger.setDefaults=Logger.useDefaults;// Export to popular environments boilerplate.
if(module.exports){module.exports=Logger;}else {Logger._prevLogger=global.Logger;Logger.noConflict=function(){global.Logger=Logger._prevLogger;return Logger;};global.Logger=Logger;}})(commonjsGlobal$2);})(logger$2);var Logger$1=logger$2.exports;Logger$1.useDefaults({defaultLevel:Logger$1.DEBUG,formatter:(messages,context)=>{messages.unshift("[".concat(context.name,"] "));}});function areNamedMediaGroupsEqual(left,right){return left.type===right.type&&left.value===right.value;}exports.MediaFamily = void 0;(function(MediaFamily){MediaFamily["Audio"]="AUDIO";MediaFamily["Video"]="VIDEO";})(exports.MediaFamily||(exports.MediaFamily={}));exports.MediaContent = void 0;(function(MediaContent){MediaContent["Main"]="MAIN";MediaContent["Slides"]="SLIDES";})(exports.MediaContent||(exports.MediaContent={}));exports.Policy = void 0;(function(Policy){Policy["ActiveSpeaker"]="active-speaker";Policy["ReceiverSelected"]="receiver-selected";})(exports.Policy||(exports.Policy={}));exports.MediaType = void 0;(function(MediaType){MediaType["VideoMain"]="VIDEO-MAIN";MediaType["VideoSlides"]="VIDEO-SLIDES";MediaType["AudioMain"]="AUDIO-MAIN";MediaType["AudioSlides"]="AUDIO-SLIDES";})(exports.MediaType||(exports.MediaType={}));function randomInteger(min,max){return Math.floor(Math.random()*(max-min+1))+min;}function generateSceneId(){return randomInteger(0,0x7fffff);}function generateCsi(mediaFamily,sceneId){var av;if(mediaFamily===exports.MediaFamily.Audio){av=0;}else {av=1;}return sceneId<<8|av;}function getMediaType(mediaFamily,mediaContent){if(mediaFamily===exports.MediaFamily.Video&&mediaContent===exports.MediaContent.Main){return exports.MediaType.VideoMain;}if(mediaFamily===exports.MediaFamily.Video&&mediaContent===exports.MediaContent.Slides){return exports.MediaType.VideoSlides;}if(mediaFamily===exports.MediaFamily.Audio&&mediaContent===exports.MediaContent.Main){return exports.MediaType.AudioMain;}return exports.MediaType.AudioSlides;}function getMediaFamily(mediaType){return [exports.MediaType.VideoMain,exports.MediaType.VideoSlides].includes(mediaType)?exports.MediaFamily.Video:exports.MediaFamily.Audio;}function getMediaContent(mediaType){return [exports.MediaType.VideoMain,exports.MediaType.AudioMain].includes(mediaType)?exports.MediaContent.Main:exports.MediaContent.Slides;}var isTruthyOrZero=value=>value===0||Boolean(value);function areArraysEqual(left,right,predicate){if(left.length!==right.length){return false;}for(var i=0;i<left.length;i+=1){if(!predicate(left[i],right[i])){return false;}}return true;}class ActiveSpeakerInfo{constructor(priority,crossPriorityDuplication,crossPolicyDuplication,preferLiveVideo,namedMediaGroups){this.priority=priority;this.crossPriorityDuplication=crossPriorityDuplication;this.crossPolicyDuplication=crossPolicyDuplication;this.preferLiveVideo=preferLiveVideo;this.namedMediaGroups=namedMediaGroups;}toString(){return "ActiveSpeakerInfo(priority=".concat(this.priority,", crossPriorityDuplication=").concat(this.crossPriorityDuplication,", crossPolicyDuplication=").concat(this.crossPolicyDuplication,", preferLiveVideo=").concat(this.preferLiveVideo,"), namedMediaGroups=").concat(this.namedMediaGroups);}}function isValidActiveSpeakerInfo(msg){var maybeActiveSpeakerInfo=msg;return Boolean('priority'in maybeActiveSpeakerInfo&&'crossPriorityDuplication'in maybeActiveSpeakerInfo&&'crossPolicyDuplication'in maybeActiveSpeakerInfo&&'preferLiveVideo'in maybeActiveSpeakerInfo);}function areActiveSpeakerInfosEqual(left,right){return left.priority===right.priority&&left.crossPriorityDuplication===right.crossPriorityDuplication&&left.crossPolicyDuplication===right.crossPolicyDuplication&&left.preferLiveVideo===right.preferLiveVideo&&areArraysEqual(left.namedMediaGroups||[],right.namedMediaGroups||[],areNamedMediaGroupsEqual);}function isValidActiveSpeakerNotificationMsg(msg){var maybeActiveSpeakerNotificationMsg=msg;return Boolean(maybeActiveSpeakerNotificationMsg.seqNum&&maybeActiveSpeakerNotificationMsg.csis);}class H264Codec{constructor(maxFs,maxFps,maxMbps,maxWidth,maxHeight){this.maxFs=maxFs;this.maxFps=maxFps;this.maxMbps=maxMbps;this.maxWidth=maxWidth;this.maxHeight=maxHeight;}}function areH264CodecsEqual(left,right){if(left===undefined||right===undefined){return left===right;}return left.maxFs===right.maxFs&&left.maxFps===right.maxFps&&left.maxMbps===right.maxMbps&&left.maxWidth===right.maxWidth&&left.maxHeight===right.maxHeight;}class CodecInfo$1{constructor(payloadType,h264){this.payloadType=payloadType;this.h264=h264;}}function areCodecInfosEqual(left,right){return left.payloadType===right.payloadType&&areH264CodecsEqual(left.h264,right.h264);}var JmpMsgType;(function(JmpMsgType){JmpMsgType["MediaRequest"]="mediaRequest";JmpMsgType["MediaRequestAck"]="mediaRequestAck";JmpMsgType["MediaRequestStatus"]="mediaRequestStatus";JmpMsgType["MediaRequestStatusAck"]="mediaRequestStatusAck";JmpMsgType["SourceAdvertisement"]="sourceAdvertisement";JmpMsgType["SourceAdvertisementAck"]="sourceAdvertisementAck";JmpMsgType["ActiveSpeakerNotification"]="activeSpeakerNotification";})(JmpMsgType||(JmpMsgType={}));class JmpMsg{constructor(mediaFamily,mediaContent,payload){this.mediaFamily=mediaFamily;this.mediaContent=mediaContent;this.payload=payload;}toString(){return "JmpMsg(mediaFamily=".concat(this.mediaFamily,", mediaContent=").concat(this.mediaContent,", payload=").concat(this.payload,")");}}function isValidJmpMsgPayload(msg){var maybeJmpMsgPayload=msg;return Boolean(maybeJmpMsgPayload.msgType&&maybeJmpMsgPayload.payload);}function isValidJmpMsg(msg){var maybeJmpMsg=msg;return Boolean(maybeJmpMsg.mediaContent&&maybeJmpMsg.mediaFamily&&maybeJmpMsg.payload&&isValidJmpMsgPayload(maybeJmpMsg.payload));}class MediaRequestAckMsg{constructor(mediaRequestSeqNum){this.mediaRequestSeqNum=mediaRequestSeqNum;}toString(){return "MediaRequestAckMsg(seqNum=".concat(this.mediaRequestSeqNum,")");}}function isValidMediaRequestAckMsg(msg){var maybeMediaRequestAckMsg=msg;return Boolean(maybeMediaRequestAckMsg.mediaRequestSeqNum);}class MediaRequestMsg{constructor(seqNum,requests){this.seqNum=seqNum;this.requests=requests;}toString(){return "JmpMediaMsg(seqNum=".concat(this.seqNum,", requests=[").concat(this.requests,"])");}}function isValidMediaRequestMsg(msg){var maybeMediaRequestMsg=msg;return Boolean(maybeMediaRequestMsg.seqNum&&maybeMediaRequestMsg.requests);}class MediaRequestStatusAckMsg{constructor(mediaRequestStatusSeqNum){this.mediaRequestStatusSeqNum=mediaRequestStatusSeqNum;}toString(){return "MediaRequestStatusAckMsg(seqNum=".concat(this.mediaRequestStatusSeqNum,")");}}function isValidMediaRequestStatusAckMsg(msg){var maybeMediaRequestStatusAckMsg=msg;return Boolean(maybeMediaRequestStatusAckMsg.mediaRequestStatusSeqNum);}function isValidMidRidStreamId(obj){if(typeof obj!=='object'||obj===null)return false;var maybeMidRidStreamId=obj;return typeof maybeMidRidStreamId.mid==='string'&&(maybeMidRidStreamId.rid===undefined||typeof maybeMidRidStreamId.rid==='string')&&!('ssrc'in maybeMidRidStreamId);}function isValidSsrcStreamId(obj){if(typeof obj!=='object'||obj===null)return false;var maybeSsrcStreamId=obj;return typeof maybeSsrcStreamId.ssrc==='number'&&(maybeSsrcStreamId.rtxSsrc===undefined||typeof maybeSsrcStreamId.rtxSsrc==='number')&&!('mid'in maybeSsrcStreamId);}function isValidStreamId(obj){return isValidMidRidStreamId(obj)||isValidSsrcStreamId(obj);}function areStreamIdsEqual(id1,id2){var keys1=Object.keys(id1);var keys2=Object.keys(id2);if(keys1.length!==keys2.length){return false;}return keys1.every(key=>id1[key]===id2[key]);}function isValidStreamInfo(obj){var maybeStreamInfo=obj;return Boolean(maybeStreamInfo.id&&isValidStreamId(maybeStreamInfo.id)&&['no source','invalid source','live','avatar','bandwidth disabled','away'].includes(maybeStreamInfo.state));}function areStreamInfosEqual(left,right){return areStreamIdsEqual(left.id,right.id)&&left.state===right.state&&left.csi===right.csi;}class MediaRequestStatusMsg{constructor(seqNum,streamStates){this.seqNum=seqNum;this.streamStates=streamStates;}}function isValidMediaRequestStatusMsg(msg){var maybeMediaRequestStatusMsg=msg;return Boolean(maybeMediaRequestStatusMsg.seqNum)&&maybeMediaRequestStatusMsg.streamStates&&maybeMediaRequestStatusMsg.streamStates.every(streamInfo=>isValidStreamInfo(streamInfo));}class ReceiverSelectedInfo{constructor(csi){this.csi=csi;}toString(){return "ReceiverSelectedInfo(csi=".concat(this.csi,")");}}function isValidReceiverSelectedInfo(msg){var maybeReceiverSelectedInfo=msg;return Boolean(maybeReceiverSelectedInfo.csi);}function areReceiverSelectedInfosEqual(left,right){return left.csi===right.csi;}function arePolicySpecificInfosEqual(left,right){if(isValidActiveSpeakerInfo(left)){if(!isValidActiveSpeakerInfo(right)){return false;}return areActiveSpeakerInfosEqual(left,right);}if(isValidReceiverSelectedInfo(left)){if(!isValidReceiverSelectedInfo(right)){return false;}return areReceiverSelectedInfosEqual(left,right);}throw new Error('Invalid PolicySpecificInfo');}class SourceAdvertisementAckMsg{constructor(sourceAdvertisementSeqNum){this.sourceAdvertisementSeqNum=sourceAdvertisementSeqNum;}toString(){return "SourceAdvertisementAckMsg(sourceAdvertisementSeqNum=".concat(this.sourceAdvertisementSeqNum,")");}}function isValidSourceAdvertisementAckMsg(msg){var maybeSourceAdvertisementAckMsg=msg;return Boolean(maybeSourceAdvertisementAckMsg.sourceAdvertisementSeqNum);}class SourceAdvertisementMsg{constructor(seqNum,numTotalSources,numLiveSources,namedMediaGroups,videoContentHint){this.seqNum=seqNum;this.numTotalSources=numTotalSources;this.numLiveSources=numLiveSources;this.namedMediaGroups=namedMediaGroups;this.videoContentHint=videoContentHint;}toString(){return "SourceAdvertisement(seqNum=".concat(this.seqNum,", numTotalSources=").concat(this.numTotalSources,", numLiveSources=").concat(this.numLiveSources,", namedMediaGroups=").concat(this.namedMediaGroups,", videoContentHint=").concat(this.videoContentHint);}}function isValidSourceAdvertisementMsg(msg){var maybeSourceAdvertisementMsg=msg;return Boolean(maybeSourceAdvertisementMsg.seqNum&&isTruthyOrZero(maybeSourceAdvertisementMsg.numTotalSources)&&isTruthyOrZero(maybeSourceAdvertisementMsg.numLiveSources));}function areSourceAdvertisementMsgsEqual(sourceAdvertisementMsg1,sourceAdvertisementMsg2){return sourceAdvertisementMsg1.numLiveSources===sourceAdvertisementMsg2.numLiveSources&&sourceAdvertisementMsg1.numTotalSources===sourceAdvertisementMsg2.numTotalSources&&areArraysEqual(sourceAdvertisementMsg1.namedMediaGroups||[],sourceAdvertisementMsg2.namedMediaGroups||[],areNamedMediaGroupsEqual)&&sourceAdvertisementMsg1.videoContentHint===sourceAdvertisementMsg2.videoContentHint;}class StreamRequest$1{constructor(policy,policySpecificInfo,ids,maxPayloadBitsPerSecond){var codecInfos=arguments.length>4&&arguments[4]!==undefined?arguments[4]:[];this.policy=policy;this.policySpecificInfo=policySpecificInfo;this.ids=ids;this.maxPayloadBitsPerSecond=maxPayloadBitsPerSecond;this.codecInfos=codecInfos;}toString(){return "Request(policy=".concat(this.policy,", info=").concat(this.policySpecificInfo,", ids=[").concat(this.ids,"], maxPayloadBitsPerSecond=[").concat(this.maxPayloadBitsPerSecond,"], codecInfos=[").concat(this.codecInfos,"])");}}function areStreamRequestsEqual(left,right){if(left.policy!==right.policy){return false;}if(!arePolicySpecificInfosEqual(left.policySpecificInfo,right.policySpecificInfo)){return false;}if(!areArraysEqual(left.ids,right.ids,areStreamIdsEqual)){return false;}if(left.maxPayloadBitsPerSecond!==right.maxPayloadBitsPerSecond){return false;}return areArraysEqual(left.codecInfos,right.codecInfos,areCodecInfosEqual);}class RetransmitHandler{constructor(msg,maxNumRetransmits,retransmitIntervalMs,transmitCallback,expirationCallback){this.timerHandle=undefined;this.msg=msg;this.numRetransmitsLeft=maxNumRetransmits;this.retransmitIntervalMs=retransmitIntervalMs;this.transmitCallback=transmitCallback;this.expirationCallback=expirationCallback;this.scheduleTimer();}onTimer(){var _a;if(this.numRetransmitsLeft>0){--this.numRetransmitsLeft;this.transmitCallback(this.msg);this.scheduleTimer();}else {(_a=this.expirationCallback)===null||_a===void 0?void 0:_a.call(this,this.msg);}}scheduleTimer(){this.timerHandle=window.setTimeout(()=>this.onTimer(),this.retransmitIntervalMs);}cancel(){if(this.timerHandle){clearTimeout(this.timerHandle);}this.timerHandle=undefined;}}var JmpSessionEvents;(function(JmpSessionEvents){JmpSessionEvents["ActiveSpeaker"]="active-speaker";JmpSessionEvents["MediaRequestReceived"]="media-request-received";JmpSessionEvents["MediaRequestStatusReceived"]="media-request-status-received";JmpSessionEvents["SourceAdvertisementReceived"]="source-advertisement-received";})(JmpSessionEvents||(JmpSessionEvents={}));class JmpSession extends EventEmitter$6{constructor(mediaFamily,mediaContent){var maxNumRetransmits=arguments.length>2&&arguments[2]!==undefined?arguments[2]:200;var retransmitIntervalMs=arguments.length>3&&arguments[3]!==undefined?arguments[3]:250;super();this.currMediaRequestSeqNum=1;this.currSourceAdvertisementSeqNum=1;this.currMediaRequestStatusSeqNum=1;this.txCallback=undefined;this.lastSentMediaRequest=undefined;this.lastSentMediaRequestAck=undefined;this.lastReceivedMediaRequest=undefined;this.mediaFamily=mediaFamily;this.mediaContent=mediaContent;this.logger=Logger$1.get("JmpSession ".concat(this.mediaFamily,"-").concat(this.mediaContent));this.maxNumRetransmits=maxNumRetransmits;this.retransmitIntervalMs=retransmitIntervalMs;}getLogger(){return this.logger;}sendRequests(requests){var _a;var mediaRequestMsg=new MediaRequestMsg(this.currMediaRequestSeqNum,requests);if(!this.lastSentMediaRequest||!areArraysEqual(this.lastSentMediaRequest.msg.requests,requests,areStreamRequestsEqual)){this.sendJmpMsg(JmpMsgType.MediaRequest,mediaRequestMsg);(_a=this.lastSentMediaRequest)===null||_a===void 0?void 0:_a.cancel();this.lastSentMediaRequest=new RetransmitHandler(mediaRequestMsg,this.maxNumRetransmits,this.retransmitIntervalMs,()=>{this.logger.info("Retransmitting previously sent MediaRequest...");this.sendJmpMsg(JmpMsgType.MediaRequest,mediaRequestMsg);},expiredJmpMsg=>{this.logger.warn("Retransmits for message expired: ".concat(expiredJmpMsg));});this.currMediaRequestSeqNum++;}else {this.logger.info("Duplicate MediaRequest detected and will not be sent: ".concat(mediaRequestMsg));}}sendSourceAdvertisement(numTotalSources,numLiveSources,namedMediaGroups,videoContentHint){var _a;var sourceAdvertisementMsg=new SourceAdvertisementMsg(this.currSourceAdvertisementSeqNum,numTotalSources,numLiveSources,namedMediaGroups,videoContentHint);if(!this.lastSentSourceAdvertisement||!areSourceAdvertisementMsgsEqual(this.lastSentSourceAdvertisement.msg,sourceAdvertisementMsg)){this.sendJmpMsg(JmpMsgType.SourceAdvertisement,sourceAdvertisementMsg);(_a=this.lastSentSourceAdvertisement)===null||_a===void 0?void 0:_a.cancel();this.lastSentSourceAdvertisement=new RetransmitHandler(sourceAdvertisementMsg,this.maxNumRetransmits,this.retransmitIntervalMs,()=>{this.logger.info("Retransmitting previously sent SourceAdvertisement...");this.sendJmpMsg(JmpMsgType.SourceAdvertisement,sourceAdvertisementMsg);},expiredMsg=>{this.logger.warn("Retransmits for message expired: ",expiredMsg);});this.currSourceAdvertisementSeqNum++;}else {this.logger.info("Duplicate SourceAdvertisement detected and will not be sent: ",sourceAdvertisementMsg);}}sendMediaRequestStatus(streamStates){var _a,_b;var filteredStreamStates=streamStates.filter(streamState=>{var _a;return (_a=this.lastReceivedMediaRequest)===null||_a===void 0?void 0:_a.requests.some(req=>req.ids.find(streamId=>areStreamIdsEqual(streamId,streamState.id)));});var mediaRequestStatus=new MediaRequestStatusMsg(this.currMediaRequestStatusSeqNum,filteredStreamStates);if(!((_a=this.lastSentMediaRequestStatus)===null||_a===void 0?void 0:_a.msg.streamStates)||!areArraysEqual(filteredStreamStates,this.lastSentMediaRequestStatus.msg.streamStates,areStreamInfosEqual)){this.sendJmpMsg(JmpMsgType.MediaRequestStatus,mediaRequestStatus);(_b=this.lastSentMediaRequestStatus)===null||_b===void 0?void 0:_b.cancel();this.lastSentMediaRequestStatus=new RetransmitHandler(mediaRequestStatus,this.maxNumRetransmits,this.retransmitIntervalMs,()=>{this.logger.info("Retransmitting previously sent MediaRequestStatus...");this.sendJmpMsg(JmpMsgType.MediaRequestStatus,mediaRequestStatus);},expiredMsg=>{this.logger.warn("Retransmits for message expired: ",expiredMsg);});this.currMediaRequestStatusSeqNum++;}else {this.logger.info("Duplicate MediaRequestStatus detected and will not be sent: ",mediaRequestStatus);}}receive(jmpMsg){if(jmpMsg.mediaContent!==this.mediaContent||jmpMsg.mediaFamily!==this.mediaFamily){this.logger.error("JmpMsg ".concat(JSON.stringify(jmpMsg)," sent to incorrect JmpSession"));return;}this.logger.debug("Received JmpMsg",JSON.stringify(jmpMsg));var{payload}=jmpMsg;if(payload.msgType===JmpMsgType.MediaRequest){var mediaRequestMsg=payload.payload;if(!isValidMediaRequestMsg(mediaRequestMsg)){this.logger.error("Received invalid MediaRequest:",JSON.stringify(mediaRequestMsg));return;}this.handleIncomingMediaRequest(mediaRequestMsg);}else if(payload.msgType===JmpMsgType.MediaRequestAck){var mediaRequestAckMsg=payload.payload;if(!isValidMediaRequestAckMsg(mediaRequestAckMsg)){this.logger.error("Received invalid MediaRequest ACK:",JSON.stringify(mediaRequestAckMsg));return;}this.handleIncomingMediaRequestAck(mediaRequestAckMsg);}else if(payload.msgType===JmpMsgType.ActiveSpeakerNotification){var activeSpeakerNotification=payload.payload;if(!isValidActiveSpeakerNotificationMsg(activeSpeakerNotification)){this.logger.info("Received invalid Active Speaker Notification:",JSON.stringify(activeSpeakerNotification));return;}this.handleIncomingActiveSpeakerNotification(activeSpeakerNotification);}else if(payload.msgType===JmpMsgType.SourceAdvertisement){var sourceAdvertisement=payload.payload;if(!isValidSourceAdvertisementMsg(sourceAdvertisement)){this.logger.error("Received invalid SourceAdvertisementMsg:",JSON.stringify(sourceAdvertisement));return;}this.handleIncomingSourceAdvertisement(sourceAdvertisement);}else if(payload.msgType===JmpMsgType.SourceAdvertisementAck){var sourceAdvertisementAck=payload.payload;if(!isValidSourceAdvertisementAckMsg(sourceAdvertisementAck)){this.logger.error("Received invalid SourceAdvertisementAckMsg:",JSON.stringify(sourceAdvertisementAck));return;}this.handleIncomingSourceAdvertisementAck(sourceAdvertisementAck);}else if(payload.msgType===JmpMsgType.MediaRequestStatus){var mediaRequestStatus=payload.payload;if(!isValidMediaRequestStatusMsg(mediaRequestStatus)){this.logger.error("Received invalid MediaRequestStatusMsg:",JSON.stringify(mediaRequestStatus));return;}this.handleIncomingMediaRequestStatus(mediaRequestStatus);}else if(payload.msgType===JmpMsgType.MediaRequestStatusAck){var mediaRequestStatusAck=payload.payload;if(!isValidMediaRequestStatusAckMsg(mediaRequestStatusAck)){this.logger.error("Received invalid MediaRequestStatusAckMsg:",JSON.stringify(mediaRequestStatusAck));return;}this.handleIncomingMediaRequestStatusAck(mediaRequestStatusAck);}else {this.logger.error("Received unknown JmpMsg");}}setTxCallback(callback){this.txCallback=callback;}close(){var _a,_b,_c;this.logger.info("closing");(_a=this.lastSentMediaRequest)===null||_a===void 0?void 0:_a.cancel();(_b=this.lastSentMediaRequestStatus)===null||_b===void 0?void 0:_b.cancel();(_c=this.lastSentSourceAdvertisement)===null||_c===void 0?void 0:_c.cancel();}sendJmpMsg(msgType,payload){var _a;var jmpMsg=new JmpMsg(this.mediaFamily,this.mediaContent,{msgType,payload});(_a=this.txCallback)===null||_a===void 0?void 0:_a.call(this,jmpMsg);}handleIncomingMediaRequest(mediaRequestMsg){var _a;if(this.lastReceivedMediaRequest&&mediaRequestMsg.seqNum<((_a=this.lastReceivedMediaRequest)===null||_a===void 0?void 0:_a.seqNum)){this.logger.info("Received old MediaRequest, ignoring");}else if(this.lastReceivedMediaRequest&&mediaRequestMsg.seqNum===this.lastReceivedMediaRequest.seqNum){if(this.lastSentMediaRequestAck){this.logger.info("Received duplicate MediaRequest, re-sending ACK");this.sendJmpMsg(JmpMsgType.MediaRequestAck,this.lastSentMediaRequestAck);}else {this.logger.warn("Received duplicate MediaRequest, but there was no ACK previously sent");}}else {this.logger.info("Received new MediaRequest, sending ACK");var mediaRequestAck=new MediaRequestAckMsg(mediaRequestMsg.seqNum);this.lastReceivedMediaRequest=mediaRequestMsg;this.lastSentMediaRequestAck=mediaRequestAck;this.sendJmpMsg(JmpMsgType.MediaRequestAck,mediaRequestAck);this.emit(JmpSessionEvents.MediaRequestReceived,mediaRequestMsg);}}handleIncomingMediaRequestAck(mediaRequestAckMsg){var _a,_b,_c;if(mediaRequestAckMsg.mediaRequestSeqNum===((_b=(_a=this.lastSentMediaRequest)===null||_a===void 0?void 0:_a.msg)===null||_b===void 0?void 0:_b.seqNum)){this.logger.info("Received ACK for last sent MediaRequest");(_c=this.lastSentMediaRequest)===null||_c===void 0?void 0:_c.cancel();}else {this.logger.info("Received ACK for old MediaRequest");}}handleIncomingActiveSpeakerNotification(activeSpeakerNotification){this.logger.debug("Received Active Speaker Notification:",activeSpeakerNotification);this.emit(JmpSessionEvents.ActiveSpeaker,activeSpeakerNotification);}handleIncomingSourceAdvertisement(sourceAdvertisement){if(this.lastReceivedSourceAdvertisement&&sourceAdvertisement.seqNum<this.lastReceivedSourceAdvertisement.seqNum){this.logger.info("Received old SourceAdvertisement, ignoring");}else if(this.lastReceivedSourceAdvertisement&&sourceAdvertisement.seqNum===this.lastReceivedSourceAdvertisement.seqNum){if(this.lastSentSourceAdvertisementAck){this.logger.info("Received duplicate SourceAdvertisement, re-sending ACK");this.sendJmpMsg(JmpMsgType.SourceAdvertisementAck,this.lastSentSourceAdvertisementAck);}else {this.logger.warn("Received duplicate SourceAdvertisement, but there was no ACK previously sent");}}else {this.logger.info("Received new SourceAdvertisement, sending ACK");var sourceAdvertisementAck=new SourceAdvertisementAckMsg(sourceAdvertisement.seqNum);this.lastReceivedSourceAdvertisement=sourceAdvertisement;this.lastSentSourceAdvertisementAck=sourceAdvertisementAck;this.sendJmpMsg(JmpMsgType.SourceAdvertisementAck,sourceAdvertisementAck);this.emit(JmpSessionEvents.SourceAdvertisementReceived,sourceAdvertisement);}}handleIncomingSourceAdvertisementAck(sourceAdvertisementAck){var _a,_b,_c;if(sourceAdvertisementAck.sourceAdvertisementSeqNum===((_b=(_a=this.lastSentSourceAdvertisement)===null||_a===void 0?void 0:_a.msg)===null||_b===void 0?void 0:_b.seqNum)){this.logger.info("Received ACK for last sent SourceAdvertisement");(_c=this.lastSentSourceAdvertisement)===null||_c===void 0?void 0:_c.cancel();}else {this.logger.info("Received ACK for old SourceAdvertisement");}}handleIncomingMediaRequestStatus(mediaRequestStatus){if(this.lastReceivedMediaRequestStatus&&mediaRequestStatus.seqNum<this.lastReceivedMediaRequestStatus.seqNum){this.logger.info("Received old MediaRequestStatus, ignoring");}else if(this.lastReceivedMediaRequestStatus&&mediaRequestStatus.seqNum===this.lastReceivedMediaRequestStatus.seqNum){if(this.lastSentMediaRequestStatusAck){this.logger.info("Received duplicate MediaRequestStatus, re-sending ACK");this.sendJmpMsg(JmpMsgType.MediaRequestStatusAck,this.lastSentMediaRequestStatusAck);}else {this.logger.warn("Received duplicate MediaRequestStatus, but there was no ACK previously sent");}}else {this.logger.info("Received new MediaRequestStatus, sending ACK");var mediaRequestStatusAck=new MediaRequestStatusAckMsg(mediaRequestStatus.seqNum);this.lastReceivedMediaRequestStatus=mediaRequestStatus;this.lastSentMediaRequestStatusAck=mediaRequestStatusAck;this.sendJmpMsg(JmpMsgType.MediaRequestStatusAck,mediaRequestStatusAck);this.emit(JmpSessionEvents.MediaRequestStatusReceived,mediaRequestStatus);}}handleIncomingMediaRequestStatusAck(mediaRequestStatusAck){var _a,_b,_c;if(mediaRequestStatusAck.mediaRequestStatusSeqNum===((_b=(_a=this.lastSentMediaRequestStatus)===null||_a===void 0?void 0:_a.msg)===null||_b===void 0?void 0:_b.seqNum)){this.logger.info("Received ACK for last sent MediaRequestStatus");(_c=this.lastSentMediaRequestStatus)===null||_c===void 0?void 0:_c.cancel();}else {this.logger.info("Received ACK for old MediaRequestStatus");}}}exports.WcmeErrorType = void 0;(function(WcmeErrorType){WcmeErrorType["CREATE_OFFER_FAILED"]="CREATE_OFFER_FAILED";WcmeErrorType["SET_ANSWER_FAILED"]="SET_ANSWER_FAILED";WcmeErrorType["OFFER_ANSWER_MISMATCH"]="OFFER_ANSWER_MISMATCH";WcmeErrorType["SDP_MUNGE_FAILED"]="SDP_MUNGE_FAILED";WcmeErrorType["SDP_MUNGE_MISSING_CODECS"]="SDP_MUNGE_MISSING_CODECS";WcmeErrorType["INVALID_STREAM_REQUEST"]="INVALID_STREAM_REQUEST";WcmeErrorType["GET_TRANSCEIVER_FAILED"]="GET_TRANSCEIVER_FAILED";WcmeErrorType["GET_MAX_BITRATE_FAILED"]="GET_MAX_BITRATE_FAILED";WcmeErrorType["GET_PAYLOAD_TYPE_FAILED"]="GET_PAYLOAD_TYPE_FAILED";WcmeErrorType["SET_NMG_FAILED"]="SET_NMG_FAILED";WcmeErrorType["SET_SOURCE_STATE_OVERRIDE_FAILED"]="SET_SOURCE_STATE_OVERRIDE_FAILED";WcmeErrorType["DATA_CHANNEL_SEND_FAILED"]="DATA_CHANNEL_SEND_FAILED";WcmeErrorType["RENEW_PEER_CONNECTION_FAILED"]="RENEW_PEER_CONNECTION_FAILED";})(exports.WcmeErrorType||(exports.WcmeErrorType={}));class WcmeError{constructor(type){var message=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';this.type=type;this.message=message;}}var commonjsGlobal$1=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global$1!=='undefined'?global$1:typeof self!=='undefined'?self:{};var logger$1={exports:{}};/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */(function(module){(function(global){// Top level module for the global, static logger instance.
var Logger={};// For those that are at home that are keeping score.
Logger.VERSION="1.6.1";// Function which handles all incoming log messages.
var logHandler;// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
var contextualLoggersByNameMap={};// Polyfill for ES5's Function.bind.
var bind=function bind(scope,func){return function(){return func.apply(scope,arguments);};};// Super exciting object merger-matron 9000 adding another 100 bytes to your download.
var merge=function merge(){var args=arguments,target=args[0],key,i;for(i=1;i<args.length;i++){for(key in args[i]){if(!(key in target)&&args[i].hasOwnProperty(key)){target[key]=args[i][key];}}}return target;};// Helper to define a logging level object; helps with optimisation.
var defineLogLevel=function defineLogLevel(value,name){return {value:value,name:name};};// Predefined logging levels.
Logger.TRACE=defineLogLevel(1,'TRACE');Logger.DEBUG=defineLogLevel(2,'DEBUG');Logger.INFO=defineLogLevel(3,'INFO');Logger.TIME=defineLogLevel(4,'TIME');Logger.WARN=defineLogLevel(5,'WARN');Logger.ERROR=defineLogLevel(8,'ERROR');Logger.OFF=defineLogLevel(99,'OFF');// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
// of each other.
var ContextualLogger=function ContextualLogger(defaultContext){this.context=defaultContext;this.setLevel(defaultContext.filterLevel);this.log=this.info;// Convenience alias.
};ContextualLogger.prototype={// Changes the current logging level for the logging instance.
setLevel:function setLevel(newLevel){// Ensure the supplied Level object looks valid.
if(newLevel&&"value"in newLevel){this.context.filterLevel=newLevel;}},// Gets the current logging level for the logging instance
getLevel:function getLevel(){return this.context.filterLevel;},// Is the logger configured to output messages at the supplied level?
enabledFor:function enabledFor(lvl){var filterLevel=this.context.filterLevel;return lvl.value>=filterLevel.value;},trace:function trace(){this.invoke(Logger.TRACE,arguments);},debug:function debug(){this.invoke(Logger.DEBUG,arguments);},info:function info(){this.invoke(Logger.INFO,arguments);},warn:function warn(){this.invoke(Logger.WARN,arguments);},error:function error(){this.invoke(Logger.ERROR,arguments);},time:function time(label){if(typeof label==='string'&&label.length>0){this.invoke(Logger.TIME,[label,'start']);}},timeEnd:function timeEnd(label){if(typeof label==='string'&&label.length>0){this.invoke(Logger.TIME,[label,'end']);}},// Invokes the logger callback if it's not being filtered.
invoke:function invoke(level,msgArgs){if(logHandler&&this.enabledFor(level)){logHandler(msgArgs,merge({level:level},this.context));}}};// Protected instance which all calls to the to level `Logger` module will be routed through.
var globalLogger=new ContextualLogger({filterLevel:Logger.OFF});// Configure the global Logger instance.
(function(){// Shortcut for optimisers.
var L=Logger;L.enabledFor=bind(globalLogger,globalLogger.enabledFor);L.trace=bind(globalLogger,globalLogger.trace);L.debug=bind(globalLogger,globalLogger.debug);L.time=bind(globalLogger,globalLogger.time);L.timeEnd=bind(globalLogger,globalLogger.timeEnd);L.info=bind(globalLogger,globalLogger.info);L.warn=bind(globalLogger,globalLogger.warn);L.error=bind(globalLogger,globalLogger.error);// Don't forget the convenience alias!
L.log=L.info;})();// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
// object with the supplied log messages and the second being a context object which contains a hash of stateful
// parameters which the logging function can consume.
Logger.setHandler=function(func){logHandler=func;};// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
Logger.setLevel=function(level){// Set the globalLogger's level.
globalLogger.setLevel(level);// Apply this level to all registered contextual loggers.
for(var key in contextualLoggersByNameMap){if(contextualLoggersByNameMap.hasOwnProperty(key)){contextualLoggersByNameMap[key].setLevel(level);}}};// Gets the global logging filter level
Logger.getLevel=function(){return globalLogger.getLevel();};// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
// default context and log handler.
Logger.get=function(name){// All logger instances are cached so they can be configured ahead of use.
return contextualLoggersByNameMap[name]||(contextualLoggersByNameMap[name]=new ContextualLogger(merge({name:name},globalLogger.context)));};// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
// write to the window's console object (if present); the optional options object can be used to customise the
// formatter used to format each log message.
Logger.createDefaultHandler=function(options){options=options||{};options.formatter=options.formatter||function defaultMessageFormatter(messages,context){// Prepend the logger's name to the log message for easy identification.
if(context.name){messages.unshift("["+context.name+"]");}};// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
// that don't offer a native console method.
var timerStartTimeByLabelMap={};// Support for IE8+ (and other, slightly more sane environments)
var invokeConsoleMethod=function invokeConsoleMethod(hdlr,messages){Function.prototype.apply.call(hdlr,console,messages);};// Check for the presence of a logger.
if(typeof console==="undefined"){return function(){/* no console */};}return function(messages,context){// Convert arguments object to Array.
messages=Array.prototype.slice.call(messages);var hdlr=console.log;var timerLabel;if(context.level===Logger.TIME){timerLabel=(context.name?'['+context.name+'] ':'')+messages[0];if(messages[1]==='start'){if(console.time){console.time(timerLabel);}else {timerStartTimeByLabelMap[timerLabel]=new Date().getTime();}}else {if(console.timeEnd){console.timeEnd(timerLabel);}else {invokeConsoleMethod(hdlr,[timerLabel+': '+(new Date().getTime()-timerStartTimeByLabelMap[timerLabel])+'ms']);}}}else {// Delegate through to custom warn/error loggers if present on the console.
if(context.level===Logger.WARN&&console.warn){hdlr=console.warn;}else if(context.level===Logger.ERROR&&console.error){hdlr=console.error;}else if(context.level===Logger.INFO&&console.info){hdlr=console.info;}else if(context.level===Logger.DEBUG&&console.debug){hdlr=console.debug;}else if(context.level===Logger.TRACE&&console.trace){hdlr=console.trace;}options.formatter(messages,context);invokeConsoleMethod(hdlr,messages);}};};// Configure and example a Default implementation which writes to the `window.console` (if present).  The
// `options` hash can be used to configure the default logLevel and provide a custom message formatter.
Logger.useDefaults=function(options){Logger.setLevel(options&&options.defaultLevel||Logger.DEBUG);Logger.setHandler(Logger.createDefaultHandler(options));};// Createa an alias to useDefaults to avoid reaking a react-hooks rule.
Logger.setDefaults=Logger.useDefaults;// Export to popular environments boilerplate.
if(module.exports){module.exports=Logger;}else {Logger._prevLogger=global.Logger;Logger.noConflict=function(){global.Logger=Logger._prevLogger;return Logger;};global.Logger=Logger;}})(commonjsGlobal$1);})(logger$1);var Logger=logger$1.exports;var DEFAULT_LOGGER_NAME='web-client-media-engine';var logger=Logger.get(DEFAULT_LOGGER_NAME);logger.setLevel(Logger.DEBUG);function logErrorAndThrow(errorType,message){logger.error(message);throw new WcmeError(errorType,message);}function setLogHandler(logHandler){Logger.setHandler(logHandler);Logger$1.setHandler(logHandler);Logger$2.setHandler(logHandler);}var MediaCodecMimeType;(function(MediaCodecMimeType){MediaCodecMimeType["H264"]="video/H264";MediaCodecMimeType["AV1"]="video/AV1";MediaCodecMimeType["OPUS"]="audio/opus";})(MediaCodecMimeType||(MediaCodecMimeType={}));var defaultMaxVideoEncodeFrameSize=8160;var defaultMaxVideoEncodeMbps=244800;exports.RecommendedOpusBitrates = void 0;(function(RecommendedOpusBitrates){RecommendedOpusBitrates[RecommendedOpusBitrates["NB"]=12000]="NB";RecommendedOpusBitrates[RecommendedOpusBitrates["WB"]=20000]="WB";RecommendedOpusBitrates[RecommendedOpusBitrates["FB"]=40000]="FB";RecommendedOpusBitrates[RecommendedOpusBitrates["FB_MONO_MUSIC"]=64000]="FB_MONO_MUSIC";RecommendedOpusBitrates[RecommendedOpusBitrates["FB_STEREO_MUSIC"]=128000]="FB_STEREO_MUSIC";})(exports.RecommendedOpusBitrates||(exports.RecommendedOpusBitrates={}));var maxFrameSizeToMaxBitrateMap=new Map([[60,99000],[240,199000],[576,300000],[920,640000],[1296,720000],[2304,880000],[3600,2500000],[8160,4000000]]);var defaultVideoMainRtxTime='300';var defaultVideoSlidesRtxTime='1000';function areProfileLevelIdsCompatible(senderProfileLevelId,receiverProfileLevelId,levelAsymmetryAllowed){var senderProfile=Number.parseInt("0x".concat(senderProfileLevelId),16);var recvProfile=Number.parseInt("0x".concat(receiverProfileLevelId),16);var senderProfileIdc=senderProfile>>16;var recvProfileIdc=recvProfile>>16;var senderProfileIop=(senderProfile&0x00ff00)>>8;var recvProfileIop=(recvProfile&0x00ff00)>>8;var senderLevelIdc=senderProfile&0x0000ff;var recvLevelIdc=recvProfile&0x0000ff;var areProfileCompatible=senderProfileIdc===recvProfileIdc&&senderProfileIop===recvProfileIop||senderProfileIdc===0x42&&recvProfileIdc===0x42&&(senderProfileIop&0x40)===(recvProfileIop&0x40);var isLevelIdcCompatible=levelAsymmetryAllowed?true:senderLevelIdc<=recvLevelIdc;return areProfileCompatible&&isLevelIdcCompatible;}function areCodecsCompatible(senderCodec,receiverCodec){return Object.keys(receiverCodec).every(key=>{if(key==='clockRate'||key==='name'){return senderCodec[key]===receiverCodec[key];}if(key==='fmtParams'){var fmtpForSender=senderCodec[key];var fmtpForReceiver=receiverCodec[key];var levelAsymmetryAllowed=[...fmtpForSender.keys()].some(senderFmtpParamKey=>{return senderFmtpParamKey==='level-asymmetry-allowed'&&fmtpForReceiver.get(senderFmtpParamKey)==='1'&&fmtpForSender.get(senderFmtpParamKey)==='1';});return [...fmtpForSender.keys()].every(senderFmtpParamKey=>{if(fmtpForReceiver.get(senderFmtpParamKey)){if(senderFmtpParamKey==='profile-level-id'){return areProfileLevelIdsCompatible(fmtpForSender.get(senderFmtpParamKey),fmtpForReceiver.get(senderFmtpParamKey),levelAsymmetryAllowed);}}if(senderFmtpParamKey==='packetization-mode'){return fmtpForSender.get(senderFmtpParamKey)===fmtpForReceiver.get(senderFmtpParamKey);}return true;});}return true;});}function gcd(a,b){return b===0?a:gcd(b,a%b);}function getFrameHeightByMaxFs(sourceAspectRatio,requestedMaxFs){var _gcd=gcd(sourceAspectRatio[0],sourceAspectRatio[1]);var minNumberRatiosForWidth=sourceAspectRatio[0]/_gcd;var minNumberRatiosForHeight=sourceAspectRatio[1]/_gcd;var macroBlockSize=16*16;var minRatioNumberByMaxFs=Math.sqrt(requestedMaxFs*macroBlockSize/(minNumberRatiosForWidth*minNumberRatiosForHeight));var roundedMinRatioNumberByMaxFs=Math.max(Math.floor(minRatioNumberByMaxFs),1.0);return roundedMinRatioNumberByMaxFs*minNumberRatiosForHeight;}function getScaleDownRatio(sourceWidth,sourceHeight,maxFs,maxWidth,maxHeight){if(!sourceWidth||!sourceHeight||!maxFs){return undefined;}var scaleDownRatio=Math.max(sourceHeight/getFrameHeightByMaxFs([sourceWidth,sourceHeight],maxFs),1.0);if(maxWidth&&maxHeight){scaleDownRatio=Math.max(sourceWidth/maxWidth,sourceHeight/maxHeight,scaleDownRatio);}return scaleDownRatio;}function getRecommendedMaxBitrateForFrameSize(requestedMaxFs){if(requestedMaxFs<60){logErrorAndThrow(exports.WcmeErrorType.GET_MAX_BITRATE_FAILED,"Requested max video frame size cannot be less than 60.");}var expectedHeight=[...maxFrameSizeToMaxBitrateMap.keys()].sort((a,b)=>b-a).find(h=>requestedMaxFs>=h);return maxFrameSizeToMaxBitrateMap.get(expectedHeight);}/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function __awaiter$1(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});}var rtcstats={};var __awaiter=commonjsGlobal$1&&commonjsGlobal$1.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __generator=commonjsGlobal$1&&commonjsGlobal$1.__generator||function(thisArg,body){var _={label:0,sent:function sent(){if(t[0]&1)throw t[1];return t[1];},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),"throw":verb(1),"return":verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this;}),g;function verb(n){return function(v){return step([n,v]);};}function step(op){if(f)throw new TypeError("Generator is already executing.");while(g&&(g=0,op[0]&&(_=0)),_){try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return {value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue;}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break;}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break;}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break;}if(t[2])_.ops.pop();_.trys.pop();continue;}op=body.call(thisArg,_);}catch(e){op=[6,e];y=0;}finally{f=t=0;}}if(op[0]&5)throw op[1];return {value:op[0]?op[1]:void 0,done:true};}};Object.defineProperty(rtcstats,"__esModule",{value:true});var rtcStats_1=rtcstats.rtcStats=void 0;/**
 * Copies values of any nested depth.
 *
 * @param value - The value to be copied.
 * @returns - Copied value.
 */var deepCopy$1=function deepCopy$1(value){return JSON.parse(JSON.stringify(value));};/**
 * Check deep equality between two values.
 *
 * @param value1 - First value to check.
 * @param value2 - Second value to check.
 * @returns True if values are deeply equal, false otherwise.
 */var deepEqual=function deepEqual(value1,value2){// If both immutable values are equal, return true.
if(value1===value2){return true;}// If both are objects, we check the length and properties of each.
if(value1&&value2&&typeof value1==='object'&&typeof value2==='object'){if(value1.constructor!==value2.constructor)return false;// Return false if the objects are of different sizes.
if(Object.keys(value1).length!==Object.keys(value2).length){return false;}// Deep equal check each property in the object, returns true if we found no
// differing properties.
return Object.keys(value1).reduce(function(val,prop){if(value2[prop]){if(!deepEqual(value1[prop],value2[prop])){return false;}}else {return false;}return val;},true);}// Return false if no other conditions are met.
return false;};/**
 * Translates a Map into an object.
 *
 * @param report - The report in Map form.
 * @returns - A deduped object.
 */var map2obj=function map2obj(report){if(!report.size){return report;}var o={};report.forEach(function(value,key){o[key]=value;});return o;};var dumpStream=function dumpStream(stream){return {id:stream.id,tracks:stream.getTracks().map(function(track){return {id:track.id,kind:track.kind,label:track.label,enabled:track.enabled,muted:track.muted,readyState:track.readyState};})};};var persistedKeys=['type','id','timestamp'];/**
 * Check to see if the report consists of more than just the persisted metadata.
 *
 * @param report - The report line being checked.
 * @returns True if the report item contains non-persisted keys, false otherwise.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
var hasNonMetadata=function hasNonMetadata(report){return !!Object.keys(report).filter(function(key){return !persistedKeys.includes(key);}).length;};/**
 * Apply a delta compression to the stats report. Reduces size by ~90%.
 * To reduce further, report keys could be compressed.
 *
 * @param oldStats - Previous report items that we dedupe against.
 * @param newStats - New incoming stats.
 * @returns - Compressed Stats.
 */var deltaCompression=function deltaCompression(oldStats,newStats){var updatedStats=deepCopy$1(newStats);Object.keys(updatedStats).forEach(function(id){var report=updatedStats[id];if(!oldStats[id]){return;}// Persist specific values beyond delta compression, as long as they
// aren't the only non-deduped keys.
Object.keys(report).forEach(function(name){if(deepEqual(report[name],oldStats[id][name])&&!persistedKeys.includes(name)){delete updatedStats[id][name];}if(!hasNonMetadata(report)){delete updatedStats[id];}});});// Use the most recent timestamp.
var timestamp=-Infinity;Object.keys(updatedStats).forEach(function(id){var report=updatedStats[id];if(report.timestamp>timestamp){timestamp=report.timestamp;}});// Delete the timestamps on each item.
Object.keys(updatedStats).forEach(function(id){var report=updatedStats[id];if(report.timestamp===timestamp){delete report.timestamp;}});updatedStats.timestamp=timestamp;return updatedStats;};/**
 * Format the stats report into an array.
 *
 * @param report - A WebRTC stats report.
 * @returns - An array of Stats Report items.
 */var formatStatsReport=function formatStatsReport(report){return Object.keys(report).filter(function(name){return name!=='timestamp';}).map(function(name){return JSON.stringify(report[name]);});};/**
 * Parametrize a single string event to contain type and an (empty) id.
 *
 * @param value - The value to parametrize.
 * @returns An event object.
 */var makeEvent=function makeEvent(value){return [JSON.stringify({value:value,type:'string',id:''})];};/**
 * Attach a Peer Connection to periodically get updated on events and stats.
 *
 * @param pc - Peer Connection in which we attach.
 * @param logger - Logging function to log events and stats.
 * @param intervalTime - Time between each `getStats` check.
 * @param statsPreProcessor - Optional function that modifies stats.
 */var rtcStats=function rtcStats(pc,logger,intervalTime,statsPreProcessor){if(statsPreProcessor===void 0){statsPreProcessor=function statsPreProcessor(){return Promise.resolve();};}var prev={};/**
     * Log stats or event data with additional tracking information.
     *
     * @param name - Name of the event to log.
     * @param payload - Log data pertaining to the event.
     * @param timestamp - Time the event happened in milliseconds.
     */var trace=function trace(name,payload,timestamp){logger({timestamp:timestamp?Math.round(timestamp):Date.now(),name:name,payload:payload});};trace('rtcConfiguration',makeEvent(JSON.stringify(pc.getConfiguration())));var origPeerConnection=window.RTCPeerConnection;pc.addEventListener('icecandidate',function(e){if(e.candidate){trace('onicecandidate',makeEvent(JSON.stringify(e.candidate)));}});pc.addEventListener('icecandidateerror',function(event){var url=event.url,errorCode=event.errorCode,errorText=event.errorText;trace('onicecandidateerror',makeEvent("[".concat(url,"] ").concat(errorCode,": ").concat(errorText)));});pc.addEventListener('track',function(e){trace('ontrack',makeEvent("".concat(e.track.kind,":").concat(e.track.id," ").concat(e.streams.map(function(stream){return "stream:".concat(stream.id);}).join(' '))));});pc.addEventListener('signalingstatechange',function(){trace('onsignalingstatechange',makeEvent(pc.signalingState));});pc.addEventListener('iceconnectionstatechange',function(){trace('oniceconnectionstatechange',makeEvent(pc.iceConnectionState));});pc.addEventListener('icegatheringstatechange',function(){trace('onicegatheringstatechange',makeEvent(pc.iceGatheringState));});pc.addEventListener('connectionstatechange',function(){trace('onconnectionstatechange',makeEvent(pc.connectionState));});pc.addEventListener('negotiationneeded',function(){trace('onnegotiationneeded',makeEvent('negotiationneeded'));});pc.addEventListener('datachannel',function(event){trace('ondatachannel',makeEvent("".concat(event.channel.id,": ").concat(event.channel.label)));});['close'].forEach(function(method){var nativeMethod=origPeerConnection.prototype[method];if(nativeMethod){origPeerConnection.prototype[method]=function(){trace("on".concat(method),makeEvent(method));return nativeMethod.apply(this,arguments);};}});['createDataChannel'].forEach(function(method){var nativeMethod=origPeerConnection.prototype[method];if(nativeMethod){origPeerConnection.prototype[method]=function(){trace("on".concat(method),makeEvent(method));var dataChannel=nativeMethod.apply(this,arguments);dataChannel.addEventListener('open',function(){trace("ondataChannelOpen",makeEvent("".concat(dataChannel.id,":").concat(dataChannel.label)));});dataChannel.addEventListener('close',function(){trace("ondataChannelClose",makeEvent("".concat(dataChannel.id,":").concat(dataChannel.label)));});dataChannel.addEventListener('error',function(event){var error=event.error;trace("ondataChannelError",makeEvent("".concat(dataChannel.id,":").concat(dataChannel.label,": ").concat(error.errorDetail)));});return dataChannel;};}});['addStream','removeStream'].forEach(function(method){var nativeMethod=origPeerConnection.prototype[method];if(nativeMethod){origPeerConnection.prototype[method]=function(){var stream=arguments[0];var streamInfo=stream.getTracks().map(function(t){return "".concat(t.kind,":").concat(t.id);}).join(',');trace("on".concat(method),makeEvent("".concat(stream.id," ").concat(streamInfo)));return nativeMethod.apply(this,arguments);};}});['addTrack'].forEach(function(method){var nativeMethod=origPeerConnection.prototype[method];if(nativeMethod){origPeerConnection.prototype[method]=function(){var track=arguments[0];var streams=[].slice.call(arguments,1);trace("on".concat(method),makeEvent("".concat(track.kind,":").concat(track.id," ").concat(streams.map(function(s){return "stream:".concat(s.id);}).join(';')||'-')));return nativeMethod.apply(this,arguments);};}});['removeTrack'].forEach(function(method){var nativeMethod=origPeerConnection.prototype[method];if(nativeMethod){origPeerConnection.prototype[method]=function(){var track=arguments[0].track;trace("on".concat(method),makeEvent(track?"".concat(track.kind,":").concat(track.id):'null'));return nativeMethod.apply(this,arguments);};}});['createOffer','createAnswer'].forEach(function(method){var nativeMethod=origPeerConnection.prototype[method];if(nativeMethod){origPeerConnection.prototype[method]=function(){var opts;var args=arguments;if(arguments.length===1&&typeof arguments[0]==='object'){// eslint-disable-next-line prefer-destructuring
opts=arguments[0];}else if(arguments.length===3&&typeof arguments[2]==='object'){// eslint-disable-next-line prefer-destructuring
opts=arguments[2];}trace("on".concat(method),makeEvent(opts||''));return nativeMethod.apply(this,opts?[opts]:undefined).then(function(description){trace("on".concat(method,"OnSuccess"),makeEvent(description.sdp));if(args.length>0&&typeof args[0]==='function'){args[0].apply(null,[description]);return undefined;}return description;},function(err){trace("on".concat(method,"OnFailure"),makeEvent(err.toString()));if(args.length>1&&typeof args[1]==='function'){args[1].apply(null,[err]);return;}throw err;});};}});['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=origPeerConnection.prototype[method];if(nativeMethod){origPeerConnection.prototype[method]=function(){var _this=this;var args=arguments;trace("on".concat(method),makeEvent(method==='addIceCandidate'?arguments[0]:arguments[0]?arguments[0].sdp:'undefined'));return nativeMethod.apply(this,[arguments[0]]).then(function(){var _a;trace("on".concat(method,"OnSuccess"),makeEvent('success'));if(method.endsWith('Description')){if(!_this.transportEventsPreviouslyAdded){var senders=_this.getSenders();var _loop_1=function _loop_1(sender){if(sender.transport){sender.transport.addEventListener('statechange',function(){if(sender&&sender.transport){trace("ondtlsStateChange",makeEvent(sender.transport.state));}});sender.transport.addEventListener('error',function(error){var errorEvent=error;trace("ondtlsError",makeEvent(errorEvent.error.errorDetail));});if(sender.transport.iceTransport){sender.transport.iceTransport.addEventListener('selectedcandidatepairchange',function(){var _a,_b,_c,_d,_e,_f;if(sender.transport&&sender.transport.iceTransport){var pair=sender.transport.iceTransport.getSelectedCandidatePair();var localCandidate="".concat((_a=pair===null||pair===void 0?void 0:pair.local)===null||_a===void 0?void 0:_a.address,":").concat((_b=pair===null||pair===void 0?void 0:pair.local)===null||_b===void 0?void 0:_b.port,"/").concat((_c=pair===null||pair===void 0?void 0:pair.local)===null||_c===void 0?void 0:_c.protocol);var remoteCandidate="".concat((_d=pair===null||pair===void 0?void 0:pair.remote)===null||_d===void 0?void 0:_d.address,":").concat((_e=pair===null||pair===void 0?void 0:pair.remote)===null||_e===void 0?void 0:_e.port,"/").concat((_f=pair===null||pair===void 0?void 0:pair.remote)===null||_f===void 0?void 0:_f.protocol);var pairString="local: ".concat(localCandidate,", remote: ").concat(remoteCandidate);trace('onselectedCandidatePairChange',makeEvent(pairString));}});}_this.transportEventsPreviouslyAdded=true;if(pc.getConfiguration().bundlePolicy==='max-bundle'){return "break";}}};for(var _i=0,senders_1=senders;_i<senders_1.length;_i++){var sender=senders_1[_i];var state_1=_loop_1(sender);if(state_1==="break")break;}}if(!_this.sctpEventsPreviouslyAdded){// Some Firefox versions prior to 113 have sctp defined but not the events, so check both here.
if((_a=_this.sctp)===null||_a===void 0?void 0:_a.addEventListener){_this.sctp.addEventListener('statechange',function(){trace('onsctpStateChange',makeEvent(_this.sctp.state));});_this.sctpEventsPreviouslyAdded=true;}}}if(args.length>=2&&typeof args[1]==='function'){args[1].apply(null,[]);return undefined;}return undefined;},function(err){trace("on".concat(method,"OnFailure"),makeEvent(err.toString()));if(args.length>=3&&typeof args[2]==='function'){args[2].apply(null,[err]);return undefined;}throw err;});};}});if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){var origGetUserMedia_1=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);var gum=function gum(){trace('onnavigator.mediaDevices.getUserMedia',makeEvent(JSON.stringify(arguments[0])));return origGetUserMedia_1.apply(navigator.mediaDevices,arguments).then(function(stream){trace('onnavigator.mediaDevices.getUserMediaOnSuccess',makeEvent(JSON.stringify(dumpStream(stream))));return stream;},function(err){trace('onnavigator.mediaDevices.getUserMediaOnFailure',makeEvent(err.name));return Promise.reject(err);});};navigator.mediaDevices.getUserMedia=gum.bind(navigator.mediaDevices);}if(navigator.mediaDevices&&navigator.mediaDevices.getDisplayMedia){var origGetDisplayMedia_1=navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);var gdm=function gdm(){trace('onnavigator.mediaDevices.getDisplayMedia',makeEvent(JSON.stringify(arguments[0])));return origGetDisplayMedia_1.apply(navigator.mediaDevices,arguments).then(function(stream){trace('onnavigator.mediaDevices.getDisplayMediaOnSuccess',makeEvent(JSON.stringify(dumpStream(stream))));return stream;},function(err){trace('onnavigator.mediaDevices.getDisplayMediaOnFailure',makeEvent(err.name));return Promise.reject(err);});};navigator.mediaDevices.getDisplayMedia=gdm.bind(navigator.mediaDevices);}var getStatsReport=function getStatsReport(){return __awaiter(void 0,void 0,void 0,function(){return __generator(this,function(_a){return [2/*return*/,pc.getStats(null).then(function(res){// Convert from stats report to js Map in order to have values set in `statsPreProcessor`
var statsMap=new Map();res.forEach(function(stats,key){return statsMap.set(key,stats);});return statsPreProcessor(statsMap).then(function(){var now=map2obj(statsMap);var base=deepCopy$1(now);// our new prev
var compressed=deltaCompression(prev,now);trace('stats-report',formatStatsReport(compressed),compressed.timestamp!==-Infinity?compressed.timestamp:undefined);prev=base;return Promise.resolve();});})];});});};var interval=window.setInterval(function(){if(pc.signalingState==='closed'){window.clearInterval(interval);return;}getStatsReport();},intervalTime);var forceStatsReport=function forceStatsReport(){return __awaiter(void 0,void 0,void 0,function(){return __generator(this,function(_a){return [2/*return*/,getStatsReport()];});});};return {forceStatsReport:forceStatsReport};};rtcStats_1=rtcstats.rtcStats=rtcStats;var NUM$1='\\d+';var SDP_TOKEN$1="[!#$%&'*+\\-.^_`{|}~a-zA-Z0-9]+";var ANY_NON_WS$1='\\S+';var SP$1='\\s';var REST$1='.+';class Line$1{}var _a$5$1;class BandwidthLine$1 extends Line$1{constructor(bandwidthType,bandwidth){super();this.bandwidthType=bandwidthType;this.bandwidth=bandwidth;}static fromSdpLine(line){if(!BandwidthLine$1.regex.test(line)){return undefined;}var tokens=line.match(BandwidthLine$1.regex);var bandwidthType=tokens[1];var bandwidth=parseInt(tokens[2],10);return new BandwidthLine$1(bandwidthType,bandwidth);}toSdpLine(){return "b=".concat(this.bandwidthType,":").concat(this.bandwidth);}}_a$5$1=BandwidthLine$1;BandwidthLine$1.BW_TYPE_REGEX='CT|AS|TIAS';BandwidthLine$1.regex=new RegExp("^(".concat(_a$5$1.BW_TYPE_REGEX,"):(").concat(NUM$1,")"));class BundleGroupLine$1 extends Line$1{constructor(mids){super();this.mids=mids;}static fromSdpLine(line){if(!BundleGroupLine$1.regex.test(line)){return undefined;}var tokens=line.match(BundleGroupLine$1.regex);var mids=tokens[1].split(' ');return new BundleGroupLine$1(mids);}toSdpLine(){return "a=group:BUNDLE ".concat(this.mids.join(' '));}}BundleGroupLine$1.regex=new RegExp("^group:BUNDLE (".concat(REST$1,")"));var _a$4$1;class CandidateLine$1 extends Line$1{constructor(foundation,componentId,transport,priority,connectionAddress,port,candidateType,relAddr,relPort,candidateExtensions){super();this.foundation=foundation;this.componentId=componentId;this.transport=transport;this.priority=priority;this.connectionAddress=connectionAddress;this.port=port;this.candidateType=candidateType;this.relAddr=relAddr;this.relPort=relPort;this.candidateExtensions=candidateExtensions;}static fromSdpLine(line){if(!CandidateLine$1.regex.test(line)){return undefined;}var tokens=line.match(CandidateLine$1.regex);var foundation=tokens[1];var componentId=parseInt(tokens[2],10);var transport=tokens[3];var priority=parseInt(tokens[4],10);var connectionAddress=tokens[5];var port=parseInt(tokens[6],10);var candidateType=tokens[7];var relAddr=tokens[8];var relPort=tokens[9]?parseInt(tokens[9],10):undefined;var candidateExtensions=tokens[10];return new CandidateLine$1(foundation,componentId,transport,priority,connectionAddress,port,candidateType,relAddr,relPort,candidateExtensions);}toSdpLine(){var str='';str+="a=candidate:".concat(this.foundation," ").concat(this.componentId," ").concat(this.transport," ").concat(this.priority," ").concat(this.connectionAddress," ").concat(this.port," typ ").concat(this.candidateType);if(this.relAddr){str+=" raddr ".concat(this.relAddr);}if(this.relPort){str+=" rport ".concat(this.relPort);}if(this.candidateExtensions){str+=" ".concat(this.candidateExtensions);}return str;}}_a$4$1=CandidateLine$1;CandidateLine$1.ICE_CHARS="[a-zA-Z0-9+/]+";CandidateLine$1.regex=new RegExp("^candidate:(".concat(_a$4$1.ICE_CHARS,") (").concat(NUM$1,") (").concat(ANY_NON_WS$1,") (").concat(NUM$1,") (").concat(ANY_NON_WS$1,") (").concat(NUM$1,") typ (").concat(ANY_NON_WS$1,")(?: raddr (").concat(ANY_NON_WS$1,"))?(?: rport (").concat(NUM$1,"))?(?: (").concat(REST$1,"))?"));class ConnectionLine$1 extends Line$1{constructor(netType,addrType,ipAddr){super();this.netType=netType;this.addrType=addrType;this.ipAddr=ipAddr;}static fromSdpLine(line){if(!ConnectionLine$1.regex.test(line)){return undefined;}var tokens=line.match(ConnectionLine$1.regex);var netType=tokens[1];var addrType=tokens[2];var ipAddr=tokens[3];return new ConnectionLine$1(netType,addrType,ipAddr);}toSdpLine(){return "c=".concat(this.netType," ").concat(this.addrType," ").concat(this.ipAddr);}}ConnectionLine$1.regex=new RegExp("^(".concat(ANY_NON_WS$1,") (").concat(ANY_NON_WS$1,") (").concat(ANY_NON_WS$1,")"));class ContentLine$1 extends Line$1{constructor(values){super();this.values=values;}static fromSdpLine(line){if(!ContentLine$1.regex.test(line)){return undefined;}var tokens=line.match(ContentLine$1.regex);var values=tokens[1].split(',');return new ContentLine$1(values);}toSdpLine(){return "a=content:".concat(this.values.join(','));}}ContentLine$1.regex=new RegExp("^content:(".concat(REST$1,")$"));class DirectionLine$1 extends Line$1{constructor(direction){super();this.direction=direction;}static fromSdpLine(line){if(!DirectionLine$1.regex.test(line)){return undefined;}var tokens=line.match(DirectionLine$1.regex);var direction=tokens[1];return new DirectionLine$1(direction);}toSdpLine(){return "a=".concat(this.direction);}}DirectionLine$1.regex=/^(sendrecv|sendonly|recvonly|inactive)$/;var _a$3$1;class ExtMapLine$1 extends Line$1{constructor(id,uri,direction,extensionAttributes){super();this.id=id;this.uri=uri;this.direction=direction;this.extensionAttributes=extensionAttributes;}static fromSdpLine(line){if(!ExtMapLine$1.regex.test(line)){return undefined;}var tokens=line.match(ExtMapLine$1.regex);var id=parseInt(tokens[1],10);var direction=tokens[2];var uri=tokens[3];var extensionAttributes=tokens[4];return new ExtMapLine$1(id,uri,direction,extensionAttributes);}toSdpLine(){var str='';str+="a=extmap:".concat(this.id);if(this.direction){str+="/".concat(this.direction);}str+=" ".concat(this.uri);if(this.extensionAttributes){str+=" ".concat(this.extensionAttributes);}return str;}}_a$3$1=ExtMapLine$1;ExtMapLine$1.EXTMAP_DIRECTION="sendonly|recvonly|sendrecv|inactive";ExtMapLine$1.regex=new RegExp("^extmap:(".concat(NUM$1,")(?:/(").concat(_a$3$1.EXTMAP_DIRECTION,"))? (").concat(ANY_NON_WS$1,")(?: (").concat(REST$1,"))?"));class FingerprintLine$1 extends Line$1{constructor(fingerprint){super();this.fingerprint=fingerprint;}static fromSdpLine(line){if(!FingerprintLine$1.regex.test(line)){return undefined;}var tokens=line.match(FingerprintLine$1.regex);var fingerprint=tokens[1];return new FingerprintLine$1(fingerprint);}toSdpLine(){return "a=fingerprint:".concat(this.fingerprint);}}FingerprintLine$1.regex=new RegExp("^fingerprint:(".concat(REST$1,")"));function parseFmtpParams$1(fmtpParams){fmtpParams=fmtpParams.replace(/^a=fmtp:\d+\x20/,'');var fmtpObj=new Map();if(/^\d+([,/-]\d+)+$/.test(fmtpParams)){fmtpObj.set(fmtpParams,undefined);return fmtpObj;}fmtpParams=fmtpParams.replace(/;$/,'');fmtpParams.split(';').forEach(param=>{var paramArr=param&&param.split('=');if(paramArr.length!==2||!paramArr[0]||!paramArr[1]){throw new Error("Fmtp params is invalid with ".concat(fmtpParams));}fmtpObj.set(paramArr[0],paramArr[1]);});return fmtpObj;}class FmtpLine$1 extends Line$1{constructor(payloadType,params){super();this.payloadType=payloadType;this.params=params;}static fromSdpLine(line){if(!FmtpLine$1.regex.test(line)){return undefined;}var tokens=line.match(FmtpLine$1.regex);var payloadType=parseInt(tokens[1],10);var params=tokens[2];return new FmtpLine$1(payloadType,parseFmtpParams$1(params));}toSdpLine(){var fmtParams=Array.from(this.params.keys()).map(key=>{if(this.params.get(key)!==undefined){return "".concat(key,"=").concat(this.params.get(key));}return "".concat(key);}).join(';');return "a=fmtp:".concat(this.payloadType," ").concat(fmtParams);}}FmtpLine$1.regex=new RegExp("^fmtp:(".concat(NUM$1,") (").concat(REST$1,")"));class IceOptionsLine$1 extends Line$1{constructor(options){super();this.options=options;}static fromSdpLine(line){if(!IceOptionsLine$1.regex.test(line)){return undefined;}var tokens=line.match(IceOptionsLine$1.regex);var options=tokens[1].split(' ');return new IceOptionsLine$1(options);}toSdpLine(){return "a=ice-options:".concat(this.options.join(' '));}}IceOptionsLine$1.regex=new RegExp("^ice-options:(".concat(REST$1,")$"));class IcePwdLine$1 extends Line$1{constructor(pwd){super();this.pwd=pwd;}static fromSdpLine(line){if(!IcePwdLine$1.regex.test(line)){return undefined;}var tokens=line.match(IcePwdLine$1.regex);var pwd=tokens[1];return new IcePwdLine$1(pwd);}toSdpLine(){return "a=ice-pwd:".concat(this.pwd);}}IcePwdLine$1.regex=new RegExp("^ice-pwd:(".concat(ANY_NON_WS$1,")$"));class IceUfragLine$1 extends Line$1{constructor(ufrag){super();this.ufrag=ufrag;}static fromSdpLine(line){if(!IceUfragLine$1.regex.test(line)){return undefined;}var tokens=line.match(IceUfragLine$1.regex);var ufrag=tokens[1];return new IceUfragLine$1(ufrag);}toSdpLine(){return "a=ice-ufrag:".concat(this.ufrag);}}IceUfragLine$1.regex=new RegExp("^ice-ufrag:(".concat(ANY_NON_WS$1,")$"));class MaxMessageSizeLine$1 extends Line$1{constructor(maxMessageSize){super();this.maxMessageSize=maxMessageSize;}static fromSdpLine(line){if(!MaxMessageSizeLine$1.regex.test(line)){return undefined;}var tokens=line.match(MaxMessageSizeLine$1.regex);var maxMessageSize=parseInt(tokens[1],10);return new MaxMessageSizeLine$1(maxMessageSize);}toSdpLine(){return "a=max-message-size:".concat(this.maxMessageSize);}}MaxMessageSizeLine$1.regex=new RegExp("^max-message-size:(".concat(NUM$1,")"));var _a$2$2;class MediaLine$1 extends Line$1{constructor(type,port,protocol,formats){super();this.type=type;this.port=port;this.protocol=protocol;this.formats=formats;}static fromSdpLine(line){if(!MediaLine$1.regex.test(line)){return undefined;}var tokens=line.match(MediaLine$1.regex);var type=tokens[1];var port=parseInt(tokens[2],10);var protocol=tokens[3];var formats=tokens[4].split(' ');return new MediaLine$1(type,port,protocol,formats);}toSdpLine(){return "m=".concat(this.type," ").concat(this.port," ").concat(this.protocol," ").concat(this.formats.join(' '));}}_a$2$2=MediaLine$1;MediaLine$1.MEDIA_TYPE='audio|video|application';MediaLine$1.regex=new RegExp("^(".concat(_a$2$2.MEDIA_TYPE,") (").concat(NUM$1,") (").concat(ANY_NON_WS$1,") (").concat(REST$1,")"));class MidLine$1 extends Line$1{constructor(mid){super();this.mid=mid;}static fromSdpLine(line){if(!MidLine$1.regex.test(line)){return undefined;}var tokens=line.match(MidLine$1.regex);var mid=tokens[1];return new MidLine$1(mid);}toSdpLine(){return "a=mid:".concat(this.mid);}}MidLine$1.regex=new RegExp("^mid:(".concat(ANY_NON_WS$1,")$"));class OriginLine$1 extends Line$1{constructor(username,sessionId,sessionVersion,netType,addrType,ipAddr){super();this.username=username;this.sessionId=sessionId;this.sessionVersion=sessionVersion;this.netType=netType;this.addrType=addrType;this.ipAddr=ipAddr;}static fromSdpLine(line){if(!OriginLine$1.regex.test(line)){return undefined;}var tokens=line.match(OriginLine$1.regex);var username=tokens[1];var sessionId=tokens[2];var sessionVersion=parseInt(tokens[3],10);var netType=tokens[4];var addrType=tokens[5];var ipAddr=tokens[6];return new OriginLine$1(username,sessionId,sessionVersion,netType,addrType,ipAddr);}toSdpLine(){return "o=".concat(this.username," ").concat(this.sessionId," ").concat(this.sessionVersion," ").concat(this.netType," ").concat(this.addrType," ").concat(this.ipAddr);}}OriginLine$1.regex=new RegExp("^(".concat(ANY_NON_WS$1,") (").concat(ANY_NON_WS$1,") (").concat(NUM$1,") (").concat(ANY_NON_WS$1,") (").concat(ANY_NON_WS$1,") (").concat(ANY_NON_WS$1,")"));var _a$1$2;class RidLine$1 extends Line$1{constructor(id,direction,params){super();this.id=id;this.direction=direction;this.params=params;}static fromSdpLine(line){if(!RidLine$1.regex.test(line)){return undefined;}var tokens=line.match(RidLine$1.regex);var id=tokens[1];var direction=tokens[2];var params=tokens[3];return new RidLine$1(id,direction,params);}toSdpLine(){var str='';str+="a=rid:".concat(this.id," ").concat(this.direction);if(this.params){str+=" ".concat(this.params);}return str;}}_a$1$2=RidLine$1;RidLine$1.RID_ID="[\\w-]+";RidLine$1.RID_DIRECTION="\\bsend\\b|\\brecv\\b";RidLine$1.regex=new RegExp("^rid:(".concat(_a$1$2.RID_ID,") (").concat(_a$1$2.RID_DIRECTION,")(?:").concat(SP$1,"(").concat(REST$1,"))?"));class RtcpMuxLine$1 extends Line$1{static fromSdpLine(line){if(!RtcpMuxLine$1.regex.test(line)){return undefined;}return new RtcpMuxLine$1();}toSdpLine(){return "a=rtcp-mux";}}RtcpMuxLine$1.regex=/^rtcp-mux$/;class RtcpFbLine$1 extends Line$1{constructor(payloadType,feedback){super();this.payloadType=payloadType;this.feedback=feedback;}static fromSdpLine(line){if(!RtcpFbLine$1.regex.test(line)){return undefined;}var tokens=line.match(RtcpFbLine$1.regex);var payloadType=parseInt(tokens[1],10);var feedback=tokens[2];return new RtcpFbLine$1(payloadType,feedback);}toSdpLine(){return "a=rtcp-fb:".concat(this.payloadType," ").concat(this.feedback);}}RtcpFbLine$1.regex=new RegExp("^rtcp-fb:(".concat(NUM$1,") (").concat(REST$1,")"));var _a$7;class RtpMapLine$1 extends Line$1{constructor(payloadType,encodingName,clockRate,encodingParams){super();this.payloadType=payloadType;this.encodingName=encodingName;this.clockRate=clockRate;this.encodingParams=encodingParams;}static fromSdpLine(line){if(!RtpMapLine$1.regex.test(line)){return undefined;}var tokens=line.match(RtpMapLine$1.regex);var payloadType=parseInt(tokens[1],10);var encodingName=tokens[2];var clockRate=parseInt(tokens[3],10);var encodingParams=tokens[4];return new RtpMapLine$1(payloadType,encodingName,clockRate,encodingParams);}toSdpLine(){var str='';str+="a=rtpmap:".concat(this.payloadType," ").concat(this.encodingName,"/").concat(this.clockRate);if(this.encodingParams){str+="/".concat(this.encodingParams);}return str;}}_a$7=RtpMapLine$1;RtpMapLine$1.NON_SLASH_TOKEN='[^\\s/]+';RtpMapLine$1.regex=new RegExp("^rtpmap:(".concat(NUM$1,") (").concat(_a$7.NON_SLASH_TOKEN,")/(").concat(_a$7.NON_SLASH_TOKEN,")(?:/(").concat(_a$7.NON_SLASH_TOKEN,"))?"));class SctpPortLine$1 extends Line$1{constructor(port){super();this.port=port;}static fromSdpLine(line){if(!SctpPortLine$1.regex.test(line)){return undefined;}var tokens=line.match(SctpPortLine$1.regex);var port=parseInt(tokens[1],10);return new SctpPortLine$1(port);}toSdpLine(){return "a=sctp-port:".concat(this.port);}}SctpPortLine$1.regex=new RegExp("^sctp-port:(".concat(NUM$1,")"));class SessionInformationLine$1 extends Line$1{constructor(info){super();this.info=info;}static fromSdpLine(line){if(!SessionInformationLine$1.regex.test(line)){return undefined;}var tokens=line.match(SessionInformationLine$1.regex);var info=tokens[1];return new SessionInformationLine$1(info);}toSdpLine(){return "i=".concat(this.info);}}SessionInformationLine$1.regex=new RegExp("(".concat(REST$1,")"));class SessionNameLine$1 extends Line$1{constructor(name){super();this.name=name;}static fromSdpLine(line){if(!SessionNameLine$1.regex.test(line)){return undefined;}var tokens=line.match(SessionNameLine$1.regex);var name=tokens[1];return new SessionNameLine$1(name);}toSdpLine(){return "s=".concat(this.name);}}SessionNameLine$1.regex=new RegExp("^(".concat(REST$1,")"));class SetupLine$1 extends Line$1{constructor(setup){super();this.setup=setup;}static fromSdpLine(line){if(!SetupLine$1.regex.test(line)){return undefined;}var tokens=line.match(SetupLine$1.regex);var setup=tokens[1];return new SetupLine$1(setup);}toSdpLine(){return "a=setup:".concat(this.setup);}}SetupLine$1.regex=/^setup:(actpass|active|passive)$/;class SimulcastLayer$1{constructor(id,paused){this.id=id;this.paused=paused;}toString(){return this.paused?"~".concat(this.id):this.id;}}class SimulcastLayerList$1{constructor(){this.layers=[];}addLayer(layer){this.layers.push([layer]);}addLayerWithAlternatives(alternatives){this.layers.push(alternatives);}get length(){return this.layers.length;}get(index){return this.layers[index];}static fromString(str){var layerList=new SimulcastLayerList$1();var tokens=str.split(';');if(tokens.length===1&&!tokens[0].trim()){throw new Error('simulcast stream list empty');}tokens.forEach(token=>{if(!token){throw new Error('simulcast layer list empty');}var ridTokens=token.split(',');var layers=[];ridTokens.forEach(ridToken=>{if(!ridToken||ridToken==='~'){throw new Error('rid empty');}var paused=ridToken[0]==='~';var rid=paused?ridToken.substring(1):ridToken;layers.push(new SimulcastLayer$1(rid,paused));});layerList.addLayerWithAlternatives(layers);});return layerList;}toString(){return this.layers.map(altArray=>altArray.map(v=>v.toString()).join(',')).join(';');}}class SimulcastLine$1 extends Line$1{constructor(sendLayers,recvLayers){super();this.sendLayers=sendLayers;this.recvLayers=recvLayers;}static fromSdpLine(line){if(!SimulcastLine$1.regex.test(line)){return undefined;}var tokens=line.match(SimulcastLine$1.regex);var bidirectional=tokens[3]&&tokens[4];var firstDirection=tokens[1];var layerList1=SimulcastLayerList$1.fromString(tokens[2]);var layerList2=new SimulcastLayerList$1();if(bidirectional){var secondDirection=tokens[3];if(firstDirection===secondDirection){return undefined;}layerList2=SimulcastLayerList$1.fromString(tokens[4]);}var sendLayerList;var recvLayerList;if(firstDirection==='send'){sendLayerList=layerList1;recvLayerList=layerList2;}else {sendLayerList=layerList2;recvLayerList=layerList1;}return new SimulcastLine$1(sendLayerList,recvLayerList);}toSdpLine(){var str='a=simulcast:';if(this.sendLayers.length){str+="send ".concat(this.sendLayers.toString());if(this.recvLayers.length){str+=" ";}}if(this.recvLayers.length){str+="recv ".concat(this.recvLayers.toString());}return str;}}SimulcastLine$1.regex=new RegExp("^simulcast:(send|recv) (".concat(ANY_NON_WS$1,")(?: (send|recv) (").concat(ANY_NON_WS$1,"))?"));class SsrcLine$1 extends Line$1{constructor(ssrcId,attribute){var attributeValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;var attributeData=arguments.length>3&&arguments[3]!==undefined?arguments[3]:undefined;super();this.ssrcId=ssrcId;this.attribute=attribute;this.attributeValue=attributeValue;this.attributeData=attributeData;}static fromSdpLine(line){if(!SsrcLine$1.regex.test(line)){return undefined;}var tokens=line.match(SsrcLine$1.regex);var ssrcId=parseInt(tokens[1],10);var attribute=tokens[2];var attributeValue=tokens[3];var attributeData=tokens[4];return new SsrcLine$1(ssrcId,attribute,attributeValue,attributeData);}toSdpLine(){var str="a=ssrc:".concat(this.ssrcId," ").concat(this.attribute);if(this.attributeValue){str+=":".concat(this.attributeValue);}if(this.attributeData){str+=" ".concat(this.attributeData);}return str;}}SsrcLine$1.regex=new RegExp("^ssrc:(".concat(NUM$1,") (").concat(SDP_TOKEN$1,")(?::(").concat(SDP_TOKEN$1,")?(?: (").concat(ANY_NON_WS$1,"))?)?$"));class SsrcGroupLine$1 extends Line$1{constructor(semantics,ssrcs){super();this.semantics=semantics;this.ssrcs=ssrcs;}static fromSdpLine(line){if(!SsrcGroupLine$1.regex.test(line)){return undefined;}var tokens=line.match(SsrcGroupLine$1.regex);var semantics=tokens[1];var ssrcs=tokens[2].split(' ').map(ssrcStr=>parseInt(ssrcStr,10));return new SsrcGroupLine$1(semantics,ssrcs);}toSdpLine(){return "a=ssrc-group:".concat(this.semantics," ").concat(this.ssrcs.join(' '));}}SsrcGroupLine$1.regex=new RegExp("^ssrc-group:(SIM|FID|FEC) ((?:".concat(NUM$1).concat(SP$1,"*)+)"));class TimingLine$1 extends Line$1{constructor(startTime,stopTime){super();this.startTime=startTime;this.stopTime=stopTime;}static fromSdpLine(line){if(!TimingLine$1.regex.test(line)){return undefined;}var tokens=line.match(TimingLine$1.regex);var startTime=parseInt(tokens[1],10);var stopTime=parseInt(tokens[2],10);return new TimingLine$1(startTime,stopTime);}toSdpLine(){return "t=".concat(this.startTime," ").concat(this.stopTime);}}TimingLine$1.regex=new RegExp("^(".concat(NUM$1,") (").concat(NUM$1,")"));class VersionLine$1 extends Line$1{constructor(version){super();this.version=version;}static fromSdpLine(line){if(!VersionLine$1.regex.test(line)){return undefined;}var tokens=line.match(VersionLine$1.regex);var version=parseInt(tokens[1],10);return new VersionLine$1(version);}toSdpLine(){return "v=".concat(this.version);}}VersionLine$1.regex=new RegExp("^(".concat(NUM$1,")$"));class UnknownLine$1 extends Line$1{constructor(value){super();this.value=value;}static fromSdpLine(line){var tokens=line.match(UnknownLine$1.regex);var value=tokens[1];return new UnknownLine$1(value);}toSdpLine(){return "".concat(this.value);}}UnknownLine$1.regex=new RegExp("(".concat(REST$1,")"));class IceInfo$1{constructor(){this.candidates=[];}addLine(line){if(line instanceof IceUfragLine$1){this.ufrag=line;return true;}if(line instanceof IcePwdLine$1){this.pwd=line;return true;}if(line instanceof IceOptionsLine$1){this.options=line;return true;}if(line instanceof CandidateLine$1){this.candidates.push(line);return true;}return false;}toLines(){var lines=[];if(this.ufrag){lines.push(this.ufrag);}if(this.pwd){lines.push(this.pwd);}if(this.options){lines.push(this.options);}this.candidates.forEach(candidate=>lines.push(candidate));return lines;}}class MediaDescription$1{constructor(type,port,protocol){this.iceInfo=new IceInfo$1();this.otherLines=[];this.type=type;this.port=port;this.protocol=protocol;}findOtherLine(ty){return this.otherLines.find(line=>line instanceof ty);}addLine(line){if(line instanceof BundleGroupLine$1){throw new Error("Error: bundle group line not allowed in media description");}if(line instanceof BandwidthLine$1){this.bandwidth=line;return true;}if(line instanceof MidLine$1){this.mid=line.mid;return true;}if(line instanceof FingerprintLine$1){this.fingerprint=line.fingerprint;return true;}if(line instanceof SetupLine$1){this.setup=line.setup;return true;}if(line instanceof ConnectionLine$1){this.connection=line;return true;}if(line instanceof ContentLine$1){this.content=line;return true;}return this.iceInfo.addLine(line);}}class ApplicationMediaDescription$1 extends MediaDescription$1{constructor(mediaLine){super(mediaLine.type,mediaLine.port,mediaLine.protocol);this.fmts=[];this.fmts=mediaLine.formats;}toLines(){var lines=[];lines.push(new MediaLine$1(this.type,this.port,this.protocol,this.fmts));if(this.connection){lines.push(this.connection);}if(this.bandwidth){lines.push(this.bandwidth);}lines.push(...this.iceInfo.toLines());if(this.fingerprint){lines.push(new FingerprintLine$1(this.fingerprint));}if(this.setup){lines.push(new SetupLine$1(this.setup));}if(this.mid){lines.push(new MidLine$1(this.mid));}if(this.content){lines.push(this.content);}if(this.sctpPort){lines.push(new SctpPortLine$1(this.sctpPort));}if(this.maxMessageSize){lines.push(new MaxMessageSizeLine$1(this.maxMessageSize));}lines.push(...this.otherLines);return lines;}addLine(line){if(super.addLine(line)){return true;}if(line instanceof MediaLine$1){throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');}if(line instanceof SctpPortLine$1){this.sctpPort=line.port;return true;}if(line instanceof MaxMessageSizeLine$1){this.maxMessageSize=line.maxMessageSize;return true;}this.otherLines.push(line);return true;}}class CodecInfo$2{constructor(pt){this.fmtParams=new Map();this.feedback=[];this.pt=pt;}addLine(line){if(line instanceof RtpMapLine$1){this.name=line.encodingName;this.clockRate=line.clockRate;this.encodingParams=line.encodingParams;return true;}if(line instanceof FmtpLine$1){this.fmtParams=new Map([...Array.from(this.fmtParams.entries()),...Array.from(line.params.entries())]);if(line.params.has('apt')){var apt=line.params.get('apt');this.primaryCodecPt=parseInt(apt,10);}return true;}if(line instanceof RtcpFbLine$1){this.feedback.push(line.feedback);return true;}return false;}toLines(){var lines=[];if(this.name&&this.clockRate){lines.push(new RtpMapLine$1(this.pt,this.name,this.clockRate,this.encodingParams));}this.feedback.forEach(fb=>{lines.push(new RtcpFbLine$1(this.pt,fb));});if(this.fmtParams.size>0){lines.push(new FmtpLine$1(this.pt,this.fmtParams));}return lines;}}class AvMediaDescription$1 extends MediaDescription$1{constructor(mediaLine){super(mediaLine.type,mediaLine.port,mediaLine.protocol);this.pts=[];this.extMaps=new Map();this.rids=[];this.codecs=new Map();this.rtcpMux=false;this.ssrcs=[];this.ssrcGroups=[];this.pts=mediaLine.formats.map(fmt=>{return parseInt(fmt,10);});this.pts.forEach(pt=>this.codecs.set(pt,new CodecInfo$2(pt)));}toLines(){var lines=[];lines.push(new MediaLine$1(this.type,this.port,this.protocol,this.pts.map(pt=>"".concat(pt))));if(this.connection){lines.push(this.connection);}if(this.bandwidth){lines.push(this.bandwidth);}lines.push(...this.iceInfo.toLines());if(this.fingerprint){lines.push(new FingerprintLine$1(this.fingerprint));}if(this.setup){lines.push(new SetupLine$1(this.setup));}if(this.mid){lines.push(new MidLine$1(this.mid));}if(this.rtcpMux){lines.push(new RtcpMuxLine$1());}if(this.content){lines.push(this.content);}this.extMaps.forEach(extMap=>lines.push(extMap));this.rids.forEach(rid=>lines.push(rid));if(this.simulcast){lines.push(this.simulcast);}if(this.direction){lines.push(new DirectionLine$1(this.direction));}this.codecs.forEach(codec=>lines.push(...codec.toLines()));lines.push(...this.ssrcs);lines.push(...this.ssrcGroups);lines.push(...this.otherLines);return lines;}addLine(line){if(super.addLine(line)){return true;}if(line instanceof MediaLine$1){throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');}if(line instanceof DirectionLine$1){this.direction=line.direction;return true;}if(line instanceof ExtMapLine$1){if(this.extMaps.has(line.id)){throw new Error("Tried to extension with duplicate ID: an extension already exists with ID ".concat(line.id));}this.extMaps.set(line.id,line);return true;}if(line instanceof RidLine$1){this.rids.push(line);return true;}if(line instanceof RtcpMuxLine$1){this.rtcpMux=true;return true;}if(line instanceof SimulcastLine$1){this.simulcast=line;return true;}if(line instanceof RtpMapLine$1||line instanceof FmtpLine$1||line instanceof RtcpFbLine$1){var codec=this.codecs.get(line.payloadType);if(!codec){throw new Error("Error: got line for unknown codec: ".concat(line.toSdpLine()));}codec.addLine(line);return true;}if(line instanceof SsrcLine$1){this.ssrcs.push(line);return true;}if(line instanceof SsrcGroupLine$1){this.ssrcGroups.push(line);return true;}this.otherLines.push(line);return true;}getCodecByPt(pt){return this.codecs.get(pt);}removePt(pt){var associatedPts=[...this.codecs.values()].filter(ci=>ci.primaryCodecPt===pt).map(ci=>ci.pt);var allPtsToRemove=[pt,...associatedPts];allPtsToRemove.forEach(ptToRemove=>{this.codecs.delete(ptToRemove);});this.pts=this.pts.filter(existingPt=>allPtsToRemove.indexOf(existingPt)===-1);}addExtension(_ref){var{uri,direction,attributes,id}=_ref;var getFirstFreeId=()=>{var freeId=1;for(;;){if(!this.extMaps.has(freeId)){break;}freeId+=1;}return freeId;};var extId=id||getFirstFreeId();if(this.extMaps.has(extId)){throw new Error("Extension with ID ".concat(id," already exists"));}if(extId===0){throw new Error("Extension ID 0 is reserved");}this.extMaps.set(extId,new ExtMapLine$1(extId,uri,direction,attributes));}}class SessionDescription$1{constructor(){this.groups=[];this.otherLines=[];}addLine(line){if(line instanceof VersionLine$1){this.version=line;return true;}if(line instanceof OriginLine$1){this.origin=line;return true;}if(line instanceof SessionNameLine$1){this.sessionName=line;return true;}if(line instanceof SessionInformationLine$1){this.information=line;return true;}if(line instanceof TimingLine$1){this.timing=line;return true;}if(line instanceof ConnectionLine$1){this.connection=line;return true;}if(line instanceof BandwidthLine$1){this.bandwidth=line;return true;}if(line instanceof BundleGroupLine$1){this.groups.push(line);return true;}this.otherLines.push(line);return true;}toLines(){var lines=[];if(this.version){lines.push(this.version);}if(this.origin){lines.push(this.origin);}if(this.sessionName){lines.push(this.sessionName);}if(this.information){lines.push(this.information);}if(this.connection){lines.push(this.connection);}if(this.bandwidth){lines.push(this.bandwidth);}if(this.timing){lines.push(this.timing);}if(this.groups){lines.push(...this.groups);}lines.push(...this.otherLines);return lines;}}class Sdp$1{constructor(){this.session=new SessionDescription$1();this.media=[];}get avMedia(){return this.media.filter(mi=>mi instanceof AvMediaDescription$1);}toString(){var lines=[];lines.push(...this.session.toLines());this.media.forEach(m=>lines.push(...m.toLines()));return "".concat(lines.map(l=>l.toSdpLine()).join('\r\n'),"\r\n");}}class Grammar$1{constructor(){this.parsers=new Map();}addParser(lineType,parser){var parsers=this.parsers.get(lineType)||[];parsers.push(parser);this.parsers.set(lineType,parsers);}getParsers(lineType){return this.parsers.get(lineType)||[];}}class SdpGrammar$1 extends Grammar$1{constructor(){super();this.addParser('v',VersionLine$1.fromSdpLine);this.addParser('o',OriginLine$1.fromSdpLine);this.addParser('c',ConnectionLine$1.fromSdpLine);this.addParser('i',SessionInformationLine$1.fromSdpLine);this.addParser('m',MediaLine$1.fromSdpLine);this.addParser('s',SessionNameLine$1.fromSdpLine);this.addParser('t',TimingLine$1.fromSdpLine);this.addParser('b',BandwidthLine$1.fromSdpLine);this.addParser('a',RtpMapLine$1.fromSdpLine);this.addParser('a',RtcpFbLine$1.fromSdpLine);this.addParser('a',FmtpLine$1.fromSdpLine);this.addParser('a',DirectionLine$1.fromSdpLine);this.addParser('a',ExtMapLine$1.fromSdpLine);this.addParser('a',MidLine$1.fromSdpLine);this.addParser('a',IceUfragLine$1.fromSdpLine);this.addParser('a',IcePwdLine$1.fromSdpLine);this.addParser('a',IceOptionsLine$1.fromSdpLine);this.addParser('a',FingerprintLine$1.fromSdpLine);this.addParser('a',SetupLine$1.fromSdpLine);this.addParser('a',SctpPortLine$1.fromSdpLine);this.addParser('a',MaxMessageSizeLine$1.fromSdpLine);this.addParser('a',RtcpMuxLine$1.fromSdpLine);this.addParser('a',BundleGroupLine$1.fromSdpLine);this.addParser('a',ContentLine$1.fromSdpLine);this.addParser('a',RidLine$1.fromSdpLine);this.addParser('a',CandidateLine$1.fromSdpLine);this.addParser('a',SimulcastLine$1.fromSdpLine);this.addParser('a',SsrcLine$1.fromSdpLine);this.addParser('a',SsrcGroupLine$1.fromSdpLine);}}var DefaultSdpGrammar$1=new SdpGrammar$1();function isValidLine$1(line){return line.length>2;}function parseToModel$1(lines){var sdp=new Sdp$1();var currBlock=sdp.session;lines.forEach(l=>{if(l instanceof MediaLine$1){var mediaInfo;if(l.type==='audio'||l.type==='video'){mediaInfo=new AvMediaDescription$1(l);}else if(l.type==='application'){mediaInfo=new ApplicationMediaDescription$1(l);}else {throw new Error("Unhandled media type: ".concat(l.type));}sdp.media.push(mediaInfo);currBlock=mediaInfo;}else {currBlock.addLine(l);}});return sdp;}function parseToLines$1(sdp,grammar){var lines=[];sdp.split(/(\r\n|\r|\n)/).filter(isValidLine$1).forEach(l=>{var lineType=l[0];var lineValue=l.slice(2);var parsers=grammar.getParsers(lineType);for(var parser of parsers){var _result=parser(lineValue);if(_result){lines.push(_result);return;}}var result=UnknownLine$1.fromSdpLine(l);lines.push(result);});return lines;}function parse$1(sdp){var grammar=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DefaultSdpGrammar$1;var lines=parseToLines$1(sdp,grammar);var parsed=parseToModel$1(lines);return parsed;}function disableRtcpFbValue(sdpOrAv,rtcpFbValue){var mediaDescriptions=sdpOrAv instanceof Sdp$1?sdpOrAv.avMedia:[sdpOrAv];mediaDescriptions.forEach(media=>{media.codecs.forEach(codec=>{codec.feedback=codec.feedback.filter(fb=>fb!==rtcpFbValue);});});}function disableTwcc(sdpOrAv){disableRtcpFbValue(sdpOrAv,'transport-cc');}function retainCodecs(av,predicate){var filtered=false;av.codecs.forEach(codecInfo=>{if(!predicate(codecInfo)){av.removePt(codecInfo.pt);filtered=true;}});return filtered;}function retainCodecsByCodecName(av,allowedCodecNames){var allowedLowerCase=allowedCodecNames.map(s=>s.toLowerCase());return retainCodecs(av,codecInfo=>!!codecInfo.name&&allowedLowerCase.includes(codecInfo.name.toLowerCase()));}function retainCandidates(sdpOrMedia,predicate){var mediaDescriptions=sdpOrMedia instanceof Sdp$1?sdpOrMedia.media:[sdpOrMedia];var filtered=false;mediaDescriptions.forEach(media=>{media.iceInfo.candidates=media.iceInfo.candidates.filter(candidate=>{if(predicate(candidate)){return true;}filtered=true;return false;});});return filtered;}function retainCandidatesByTransportType(sdpOrMedia,allowedTransportTypes){var allowedLowerCase=allowedTransportTypes.map(s=>s.toLowerCase());return retainCandidates(sdpOrMedia,candidate=>allowedLowerCase.includes(candidate.transport.toLowerCase()));}function hasCodec(codecName,mLine){return [...mLine.codecs.values()].some(ci=>{var _a;return ((_a=ci.name)===null||_a===void 0?void 0:_a.toLowerCase())===codecName.toLowerCase();});}var commonjsGlobal$4=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global$1!=='undefined'?global$1:typeof self!=='undefined'?self:{};function getDefaultExportFromCjs$2(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,'default')?x['default']:x;}var es5$2={exports:{}};(function(module,exports){!function(e,t){module.exports=t();}(commonjsGlobal$4,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports;}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e){r.d(n,i,function(t){return e[t];}.bind(null,i));}return n;},r.n=function(e){var t=e&&e.__esModule?function(){return e.default;}:function(){return e;};return r.d(t,"a",t),t;},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t);},r.p="",r(r.s=90);}({17:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||"";},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||"";},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r;},e.getWindowsVersionName=function(e){switch(e){case"NT":return "NT";case"XP":return "XP";case"NT 5.0":return "2000";case"NT 5.1":return "XP";case"NT 5.2":return "2003";case"NT 6.0":return "Vista";case"NT 6.1":return "7";case"NT 6.2":return "8";case"NT 6.3":return "8.1";case"NT 10.0":return "10";default:return;}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map(function(e){return parseInt(e,10)||0;});if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return;}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map(function(e){return parseInt(e,10)||0;});if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0;},e.getVersionPrecision=function(e){return e.split(".").length;},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),function(e){return new Array(20-e.length).join("0")+e;}).reverse();});for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1;}else if(u[0][a]<u[1][a])return -1;}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1){n.push(t(e[r]));}return n;},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i;}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++){s[a-1]=arguments[a];}if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function o(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach(function(t){n[t]=e[t];});};for(t=0,r=s.length;t<r;t+=1){o();}return e;},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e];},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||"";},e;}();t.default=i,e.exports=t.default;},18:function _(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t);},e.parse=function(e){return new i.default(e).getResult();},t=e,n=[{key:"BROWSER_MAP",get:function get(){return s.BROWSER_MAP;}},{key:"ENGINE_MAP",get:function get(){return s.ENGINE_MAP;}},{key:"OS_MAP",get:function get(){return s.OS_MAP;}},{key:"PLATFORMS_MAP",get:function get(){return s.PLATFORMS_MAP;}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e;}();t.default=o,e.exports=t.default;},91:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e};}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua;},t.test=function(e){return e.test(this._ua);},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t);});throw new Error("Browser's test function is not valid");});return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser;},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser();},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||"";},t.getBrowserVersion=function(){return this.getBrowser().version;},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS();},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t);});throw new Error("Browser's test function is not valid");});return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os;},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||"";},t.getOSVersion=function(){return this.getOS().version;},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform();},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||"";},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t);});throw new Error("Browser's test function is not valid");});return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform;},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine();},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||"";},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t);});throw new Error("Browser's test function is not valid");});return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine;},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this;},t.getResult=function(){return o.default.assign({},this.parsedResult);},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach(function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1);}),n>0){var a=Object.keys(r),u=o.default.find(a,function(e){return t.isOS(e);});if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d;}var c=o.default.find(a,function(e){return t.isPlatform(e);});if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f;}}if(s>0){var l=Object.keys(i),h=o.default.find(l,function(e){return t.isBrowser(e,!0);});if(void 0!==h)return this.compareVersion(i[h]);}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r;},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1;},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase();},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase();},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase();},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e);},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some(function(e){return t.is(e);});},e;}();t.default=d,e.exports=t.default;},92:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function describe(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/opera/i],describe:function describe(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/opr\/|opios/i],describe:function describe(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/SamsungBrowser/i],describe:function describe(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/Whale/i],describe:function describe(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/MZBrowser/i],describe:function describe(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/focus/i],describe:function describe(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/swing/i],describe:function describe(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/coast/i],describe:function describe(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function describe(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/yabrowser/i],describe:function describe(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/ucbrowser/i],describe:function describe(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/Maxthon|mxios/i],describe:function describe(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/epiphany/i],describe:function describe(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/puffin/i],describe:function describe(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/sleipnir/i],describe:function describe(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/k-meleon/i],describe:function describe(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/micromessenger/i],describe:function describe(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/qqbrowser/i],describe:function describe(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/msie|trident/i],describe:function describe(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/\sedg\//i],describe:function describe(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/edg([ea]|ios)/i],describe:function describe(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/vivaldi/i],describe:function describe(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/seamonkey/i],describe:function describe(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/sailfish/i],describe:function describe(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t;}},{test:[/silk/i],describe:function describe(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/phantom/i],describe:function describe(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/slimerjs/i],describe:function describe(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function describe(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/(web|hpw)[o0]s/i],describe:function describe(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/bada/i],describe:function describe(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/tizen/i],describe:function describe(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/qupzilla/i],describe:function describe(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/firefox|iceweasel|fxios/i],describe:function describe(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/electron/i],describe:function describe(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/MiuiBrowser/i],describe:function describe(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/chromium/i],describe:function describe(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/chrome|crios|crmo/i],describe:function describe(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/GSA/i],describe:function describe(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:function test(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r;},describe:function describe(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/playstation 4/i],describe:function describe(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/safari|applewebkit/i],describe:function describe(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t;}},{test:[/.*/i],describe:function describe(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)};}}];t.default=a,e.exports=t.default;},93:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function describe(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t};}},{test:[/windows phone/i],describe:function describe(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t};}},{test:[/windows /i],describe:function describe(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r};}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function describe(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t;}},{test:[/macintosh/i],describe:function describe(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n;}},{test:[/(ipod|iphone|ipad)/i],describe:function describe(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t};}},{test:function test(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r;},describe:function describe(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n;}},{test:[/(web|hpw)[o0]s/i],describe:function describe(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r;}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function describe(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t};}},{test:[/bada/i],describe:function describe(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t};}},{test:[/tizen/i],describe:function describe(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t};}},{test:[/linux/i],describe:function describe(){return {name:s.OS_MAP.Linux};}},{test:[/CrOS/],describe:function describe(){return {name:s.OS_MAP.ChromeOS};}},{test:[/PlayStation 4/],describe:function describe(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t};}}];t.default=a,e.exports=t.default;},94:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function describe(){return {type:"bot",vendor:"Google"};}},{test:[/huawei/i],describe:function describe(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r;}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"};}},{test:[/ipad/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"};}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"};}},{test:[/kftt build/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"};}},{test:[/silk/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"};}},{test:[/tablet(?! pc)/i],describe:function describe(){return {type:s.PLATFORMS_MAP.tablet};}},{test:function test(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r;},describe:function describe(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t};}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function describe(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"};}},{test:[/[^-]mobi/i],describe:function describe(){return {type:s.PLATFORMS_MAP.mobile};}},{test:function test(e){return "blackberry"===e.getBrowserName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"};}},{test:function test(e){return "bada"===e.getBrowserName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.mobile};}},{test:function test(e){return "windows phone"===e.getBrowserName();},describe:function describe(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"};}},{test:function test(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(!0)&&t>=3;},describe:function describe(){return {type:s.PLATFORMS_MAP.tablet};}},{test:function test(e){return "android"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.mobile};}},{test:function test(e){return "macos"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"};}},{test:function test(e){return "windows"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.desktop};}},{test:function test(e){return "linux"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.desktop};}},{test:function test(e){return "playstation 4"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.tv};}},{test:function test(e){return "roku"===e.getOSName(!0);},describe:function describe(){return {type:s.PLATFORMS_MAP.tv};}}];t.default=a,e.exports=t.default;},95:function _(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function test(e){return "microsoft edge"===e.getBrowserName(!0);},describe:function describe(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t};}},{test:[/trident/i],describe:function describe(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:function test(e){return e.test(/presto/i);},describe:function describe(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:function test(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r;},describe:function describe(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}},{test:[/(apple)?webkit\/537\.36/i],describe:function describe(){return {name:s.ENGINE_MAP.Blink};}},{test:[/(apple)?webkit/i],describe:function describe(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t;}}];t.default=a,e.exports=t.default;}});});})(es5$2);var Bowser$2=/*@__PURE__*/getDefaultExportFromCjs$2(es5$2.exports);var BrowserName$2;(function(BrowserName){BrowserName["CHROME"]="Chrome";BrowserName["FIREFOX"]="Firefox";BrowserName["EDGE"]="Microsoft Edge";BrowserName["SAFARI"]="Safari";})(BrowserName$2||(BrowserName$2={}));var OSName$1;(function(OSName){OSName["WINDOWS"]="Windows";OSName["MAC"]="macOS";OSName["LINUX"]="Linux";})(OSName$1||(OSName$1={}));class BrowserInfo{static getBrowserDetails(){return this.browser.getBrowser();}static getOSDetails(){return this.browser.getOS();}static getPlatformDetails(){return this.browser.getPlatform();}static getEngineDetails(){return this.browser.getEngine();}static isChrome(){return this.browser.getBrowserName()===BrowserName$2.CHROME;}static isFirefox(){return this.browser.getBrowserName()===BrowserName$2.FIREFOX;}static isEdge(){return this.browser.getBrowserName()===BrowserName$2.EDGE;}static isSafari(){return this.browser.getBrowserName()===BrowserName$2.SAFARI;}static isWindows(){return this.browser.getOSName()===OSName$1.WINDOWS;}static isMac(){return this.browser.getOSName()===OSName$1.MAC;}static isLinux(){return this.browser.getOSName()===OSName$1.LINUX;}static isVersionGreaterThan(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:">".concat(version)};return this.browser.satisfies(checkTree);}static isVersionGreaterThanOrEqualTo(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:">=".concat(version)};return this.browser.satisfies(checkTree);}static isVersionLessThan(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:"<".concat(version)};return this.browser.satisfies(checkTree);}static isVersionLessThanOrEqualTo(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:"<=".concat(version)};return this.browser.satisfies(checkTree);}static isSubVersionOf(version){var browserName=this.browser.getBrowserName();var checkTree={[browserName]:"~".concat(version)};return this.browser.satisfies(checkTree);}}BrowserInfo.browser=Bowser$2.getParser(window.navigator.userAgent);var CapabilityState$2;(function(CapabilityState){CapabilityState["NOT_CAPABLE"]="not capable";CapabilityState["CAPABLE"]="capable";CapabilityState["UNKNOWN"]="unknown";})(CapabilityState$2||(CapabilityState$2={}));var simulcastMaxFrameSizes={0:'240',1:'2304',2:'8160'};class JmpLine extends Line$1{static fromSdpLine(line){if(!JmpLine.regex.test(line)){return undefined;}var tokens=line.match(JmpLine.regex);var versions=tokens[1].split(',').filter(v=>v.length);return new JmpLine(versions);}constructor(versions){super();this.versions=versions;}toSdpLine(){return "a=jmp:".concat(this.versions.join(','));}}JmpLine.regex=/^jmp:((?:v\d+,?)+)/;class JmpStreamIdModeLine extends Line$1{constructor(streamIdMode){super();this.streamIdMode=streamIdMode;}static fromSdpLine(line){if(!JmpStreamIdModeLine.regex.test(line)){return undefined;}var tokens=line.match(JmpStreamIdModeLine.regex);var mode=tokens[1];return new JmpStreamIdModeLine(mode);}toSdpLine(){return "a=jmp-stream-id-mode:".concat(this.streamIdMode);}}JmpStreamIdModeLine.regex=/^jmp-stream-id-mode:(MID-RID|SSRC)$/;class JmpSourceLine extends Line$1{constructor(source,csi){super();this.source=source;this.csi=csi;}static fromSdpLine(line){if(!JmpSourceLine.regex.test(line)){return undefined;}var tokens=line.match(JmpSourceLine.regex);var source=tokens[1];var csi=tokens[2];return new JmpSourceLine(source,csi);}toSdpLine(){var line="a=jmp-source:".concat(this.source);if(this.csi){line+=" csi=".concat(this.csi);}return line;}}JmpSourceLine.regex=new RegExp("^jmp-source:(".concat(ANY_NON_WS$1,") (?:csi=(").concat(ANY_NON_WS$1,"))"));DefaultSdpGrammar$1.addParser('a',JmpLine.fromSdpLine);DefaultSdpGrammar$1.addParser('a',JmpSourceLine.fromSdpLine);DefaultSdpGrammar$1.addParser('a',JmpStreamIdModeLine.fromSdpLine);function deepCopy(source){return Array.isArray(source)?source.map(item=>deepCopy(item)):source instanceof Map?new Map(source):source instanceof Date?new Date(source.getTime()):source&&typeof source==='object'?Object.getOwnPropertyNames(source).reduce((o,prop)=>{Object.defineProperty(o,prop,Object.getOwnPropertyDescriptor(source,prop));o[prop]=deepCopy(source[prop]);return o;},Object.create(Object.getPrototypeOf(source))):source;}var ipv4Regex=/(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.)(\d{1,3}\b)/g;var ipv6Regex=/(\b[\da-fA-F]{1,4}(:[\da-fA-F]{1,4}){7}\b)/g;function matchMediaDescriptionsInAnswer(parsedOffer,parsedAnswer){parsedAnswer.session.groups=parsedOffer.session.groups;parsedAnswer.media=parsedOffer.media.map(offerMediaDescription=>{if(!offerMediaDescription.mid){logErrorAndThrow(exports.WcmeErrorType.OFFER_ANSWER_MISMATCH,"Offer media description is missing MID.");}var answerMediaDescription=parsedAnswer.media.find(m=>m.mid===offerMediaDescription.mid);if(answerMediaDescription){return answerMediaDescription;}if(!(offerMediaDescription instanceof AvMediaDescription$1)){logErrorAndThrow(exports.WcmeErrorType.OFFER_ANSWER_MISMATCH,"Answer is missing a non-AV media description for MID ".concat(offerMediaDescription.mid,"."));}var startingMediaDescription=parsedAnswer.avMedia.find(m=>m.type===offerMediaDescription.type);if(!startingMediaDescription){logErrorAndThrow(exports.WcmeErrorType.OFFER_ANSWER_MISMATCH,"Answer has no media description of type ".concat(offerMediaDescription.type,", can't generate synthetic answer media description for MID ").concat(offerMediaDescription.mid,"."));}var fakeCorrespondingDescription=deepCopy(startingMediaDescription);fakeCorrespondingDescription.mid=offerMediaDescription.mid;fakeCorrespondingDescription.simulcast=undefined;fakeCorrespondingDescription.bandwidth=undefined;if(offerMediaDescription.direction==='sendrecv'||offerMediaDescription.direction==='sendonly'){fakeCorrespondingDescription.direction='recvonly';}if(offerMediaDescription.direction==='recvonly'){fakeCorrespondingDescription.direction='sendonly';}return fakeCorrespondingDescription;});}function setupBundle(parsedSdp,bundlePolicy,midMap){if(bundlePolicy==='max-compat'){var audioMainMids=midMap.get(exports.MediaType.AudioMain);var videoMainMids=midMap.get(exports.MediaType.VideoMain);var audioContentMids=midMap.get(exports.MediaType.AudioSlides);var videoContentMids=midMap.get(exports.MediaType.VideoSlides);parsedSdp.session.groups.splice(0,parsedSdp.session.groups.length);if(audioMainMids){parsedSdp.session.groups.push(new BundleGroupLine$1(audioMainMids));}if(videoMainMids){parsedSdp.session.groups.push(new BundleGroupLine$1(videoMainMids));}if(audioContentMids){parsedSdp.session.groups.push(new BundleGroupLine$1(audioContentMids));}if(videoContentMids){parsedSdp.session.groups.push(new BundleGroupLine$1(videoContentMids));}}}function filterRecvOnlyMediaDescriptions(parsedSdp){var filteredMids=[];parsedSdp.media=parsedSdp.media.filter(media=>{if(media instanceof ApplicationMediaDescription$1||media instanceof AvMediaDescription$1&&media.direction!=='recvonly'){filteredMids.push(media.mid);return true;}return false;});parsedSdp.session.groups.forEach(g=>{g.mids=g.mids.filter(m=>filteredMids.includes(m));});}function injectContentType(mediaDescription,mediaContent){if(mediaContent===exports.MediaContent.Slides){mediaDescription.addLine(new ContentLine$1(['slides']));}}function injectJmpAttributes(mediaDescription,csi,streamSignalingMode){if(!mediaDescription.otherLines.find(line=>line instanceof JmpLine)){mediaDescription.addLine(new JmpLine(['v1']));}if(!mediaDescription.otherLines.find(line=>line instanceof JmpSourceLine)){mediaDescription.addLine(new JmpSourceLine(mediaDescription.mid,csi.toString()));}if(!mediaDescription.otherLines.find(line=>line instanceof JmpStreamIdModeLine)){mediaDescription.addLine(new JmpStreamIdModeLine(streamSignalingMode));}}function injectDummyCandidates(mediaDescription){mediaDescription.iceInfo.candidates=[];mediaDescription.addLine(new CandidateLine$1('dummy1',1,'udp',3,'0.0.0.0',9,'host'));mediaDescription.addLine(new CandidateLine$1('dummy2',1,'tcp',2,'0.0.0.0',9,'host'));mediaDescription.addLine(new CandidateLine$1('dummy3',1,'udp',1,'0.0.0.0',9,'relay'));}function maskIp(sdp){var maskedSdp=sdp.replace(ipv4Regex,(match,firstOctets)=>{return "".concat(firstOctets,"0");});maskedSdp=maskedSdp.replace(ipv6Regex,match=>{return match.replace(/:[\da-fA-F]{1,4}$/,':0');});return maskedSdp;}function removeMidRidExtensions(mediaDescription){mediaDescription.extMaps.forEach((extMapLine,extId,extMap)=>{if(/^urn:ietf:params:rtp-hdrext:sdes:(?:mid|rtp-stream-id|repaired-rtp-stream-id)$/.test(extMapLine.uri)){extMap.delete(extId);}});}function addVlaExtension(mediaDescription){var vlaExtensionUri='http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00';if(![...mediaDescription.extMaps.values()].some(extMapLine=>extMapLine.uri===vlaExtensionUri)){mediaDescription.addExtension({uri:vlaExtensionUri});}}function applyFormatParameters(mediaDescription,codecs,paramsMap){paramsMap.forEach((value,param)=>{[...mediaDescription.codecs.values()].filter(ci=>ci.name&&codecs.includes(ci.name)).forEach(ci=>{if(value===null){ci.fmtParams.delete(param);}else {ci.fmtParams.set(param,"".concat(value));}});});}function hasIceCandidates(sdp){return sdp.media.some(media=>media.iceInfo.candidates.length);}function generateSsrc(){return Math.floor(Math.random()*0xffffffff)+1;}class EgressSdpMunger{constructor(){this.streamIds=[];this.customCodecParameters=new Map();}reset(){this.streamIds=[];}mungeLocalDescription(mediaDescription,options){var _a;retainCodecsByCodecName(mediaDescription,['h264','opus','rtx']);if(options.forceSoftwareEncoder){var isH264Cbp=codecInfo=>{var _a;if(((_a=codecInfo.name)===null||_a===void 0?void 0:_a.toLowerCase())==='h264'){var profileLevelId=codecInfo.fmtParams.get('profile-level-id');return !!profileLevelId&&/^42[^0]/.test(profileLevelId);}return false;};if([...mediaDescription.codecs.values()].some(isH264Cbp)){retainCodecs(mediaDescription,codecInfo=>{var _a;return ((_a=codecInfo.name)===null||_a===void 0?void 0:_a.toLowerCase())!=='h264'||isH264Cbp(codecInfo);});}else {logger.log("No H.264 CBP present in m-line with MID ".concat(mediaDescription.mid,", so all H.264 codecs have been retained."));}}if(mediaDescription.codecs.size===0){logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_MISSING_CODECS,"No codecs present in m-line with MID ".concat(mediaDescription.mid," after filtering."));}mediaDescription.rids=[];mediaDescription.simulcast=undefined;removeMidRidExtensions(mediaDescription);if(options.simulcastEnabled){addVlaExtension(mediaDescription);}var numStreams=options.simulcastEnabled?3:1;if(!this.streamIds.length){if(mediaDescription.ssrcs.length){var ssrcs=[...new Set(mediaDescription.ssrcs.map(ssrcLine=>ssrcLine.ssrcId))];mediaDescription.ssrcGroups.forEach(sg=>{if(!sg.ssrcs.every(ssrc=>ssrcs.includes(ssrc))){logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_FAILED,'SSRC present in SSRC groups is missing from SSRC lines.');}});var rtxSsrcGroups=mediaDescription.ssrcGroups.filter(sg=>sg.semantics==='FID');if(rtxSsrcGroups.length&&rtxSsrcGroups.length!==numStreams){logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_FAILED,"Expected ".concat(numStreams," RTX SSRC groups, got ").concat(rtxSsrcGroups.length,"."));}rtxSsrcGroups.forEach(sg=>{this.streamIds.push({ssrc:sg.ssrcs[0],rtxSsrc:sg.ssrcs[1]});});var simulcastSsrcs=(_a=mediaDescription.ssrcGroups.find(sg=>sg.semantics==='SIM'))===null||_a===void 0?void 0:_a.ssrcs;if(simulcastSsrcs){if(simulcastSsrcs.length!==numStreams||!this.streamIds.every(_ref2=>{var{ssrc}=_ref2;return simulcastSsrcs.includes(ssrc);})){logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_FAILED,'SSRCs in simulcast SSRC group do not match primary SSRCs in RTX SSRC groups.');}this.streamIds.sort((a,b)=>simulcastSsrcs.indexOf(a.ssrc)-simulcastSsrcs.indexOf(b.ssrc));}else if(rtxSsrcGroups.length>1){logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_FAILED,'Multiple RTX SSRC groups but no simulcast SSRC group found.');}if(!this.streamIds.length){this.streamIds.push({ssrc:ssrcs[0]});}}else {[...Array(numStreams).keys()].forEach(()=>{var newStreamId={ssrc:generateSsrc()};if(options.rtxEnabled){newStreamId.rtxSsrc=generateSsrc();}this.streamIds.push(newStreamId);});}}mediaDescription.ssrcs=[];mediaDescription.ssrcGroups=[];this.streamIds.forEach(streamId=>{var rtpSsrc=streamId.ssrc;mediaDescription.addLine(new SsrcLine$1(rtpSsrc,'cname',"".concat(rtpSsrc,"-cname")));mediaDescription.addLine(new SsrcLine$1(rtpSsrc,'msid','-',"".concat(mediaDescription.mid)));if(options.rtxEnabled){var{rtxSsrc}=streamId;if(rtxSsrc){mediaDescription.addLine(new SsrcLine$1(rtxSsrc,'cname',"".concat(rtpSsrc,"-cname")));mediaDescription.addLine(new SsrcLine$1(rtxSsrc,'msid','-',"".concat(mediaDescription.mid)));mediaDescription.addLine(new SsrcGroupLine$1('FID',[rtpSsrc,rtxSsrc]));}}});if(options.simulcastEnabled){mediaDescription.addLine(new SsrcGroupLine$1('SIM',this.streamIds.map(streamId=>streamId.ssrc)));}applyFormatParameters(mediaDescription,['H264','opus'],this.customCodecParameters);if(options.twccDisabled){disableTwcc(mediaDescription);}}mungeLocalDescriptionForRemoteServer(mediaDescription,mediaContent,csi){var mungeOptions=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{injectDummyCandidates:true};injectContentType(mediaDescription,mediaContent);injectJmpAttributes(mediaDescription,csi,'SSRC');if(mungeOptions.injectDummyCandidates){injectDummyCandidates(mediaDescription);}if(mediaDescription.type==='video'){var ssrcGroup=mediaDescription.ssrcGroups.find(sg=>sg.semantics==='SIM');if(ssrcGroup){ssrcGroup.ssrcs.forEach((ssrc,index)=>{mediaDescription.addLine(new SsrcLine$1(ssrc,'fmtp',"* max-fs=".concat(simulcastMaxFrameSizes[index])));});}}}mungeRemoteDescription(mediaDescription){var mungeOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{dtxDisabled:true};if(retainCandidatesByTransportType(mediaDescription,['udp','tcp'])){logger.log("Some unsupported remote candidates have been removed from mid ".concat(mediaDescription.mid));}mediaDescription.bandwidth=undefined;[...mediaDescription.codecs.values()].forEach(ci=>{ci.fmtParams.set('x-google-start-bitrate','60000');});if(mediaDescription.type==='audio'){[...mediaDescription.codecs.values()].forEach(ci=>{ci.fmtParams.set('usedtx',mungeOptions.dtxDisabled?'0':'1');});}}getSenderIds(){return this.streamIds;}getEncodingIndexForStreamId(streamId){return this.streamIds.findIndex(currStreamId=>areStreamIdsEqual(currStreamId,streamId));}setCodecParameters(parameters){Object.entries(parameters).forEach(_ref3=>{var[param,value]=_ref3;this.customCodecParameters.set(param,value);});}deleteCodecParameters(parameters){parameters.forEach(param=>{this.customCodecParameters.set(param,null);});}}var events$1={exports:{}};var R$1=typeof Reflect==='object'?Reflect:null;var ReflectApply$1=R$1&&typeof R$1.apply==='function'?R$1.apply:function ReflectApply(target,receiver,args){return Function.prototype.apply.call(target,receiver,args);};var ReflectOwnKeys$1;if(R$1&&typeof R$1.ownKeys==='function'){ReflectOwnKeys$1=R$1.ownKeys;}else if(Object.getOwnPropertySymbols){ReflectOwnKeys$1=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));};}else {ReflectOwnKeys$1=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target);};}function ProcessEmitWarning$1(warning){if(console&&console.warn)console.warn(warning);}var NumberIsNaN$1=Number.isNaN||function NumberIsNaN(value){return value!==value;};function EventEmitter$3(){EventEmitter$3.init.call(this);}events$1.exports=EventEmitter$3;events$1.exports.once=once$2;// Backwards-compat with node 0.10.x
EventEmitter$3.EventEmitter=EventEmitter$3;EventEmitter$3.prototype._events=undefined;EventEmitter$3.prototype._eventsCount=0;EventEmitter$3.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners$1=10;function checkListener$1(listener){if(typeof listener!=='function'){throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof listener);}}Object.defineProperty(EventEmitter$3,'defaultMaxListeners',{enumerable:true,get:function get(){return defaultMaxListeners$1;},set:function set(arg){if(typeof arg!=='number'||arg<0||NumberIsNaN$1(arg)){throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+arg+'.');}defaultMaxListeners$1=arg;}});EventEmitter$3.init=function(){if(this._events===undefined||this._events===Object.getPrototypeOf(this)._events){this._events=Object.create(null);this._eventsCount=0;}this._maxListeners=this._maxListeners||undefined;};// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$3.prototype.setMaxListeners=function setMaxListeners(n){if(typeof n!=='number'||n<0||NumberIsNaN$1(n)){throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+'.');}this._maxListeners=n;return this;};function _getMaxListeners$1(that){if(that._maxListeners===undefined)return EventEmitter$3.defaultMaxListeners;return that._maxListeners;}EventEmitter$3.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners$1(this);};EventEmitter$3.prototype.emit=function emit(type){var args=[];for(var i=1;i<arguments.length;i++){args.push(arguments[i]);}var doError=type==='error';var events=this._events;if(events!==undefined)doError=doError&&events.error===undefined;else if(!doError)return false;// If there is no 'error' event listener then throw.
if(doError){var er;if(args.length>0)er=args[0];if(er instanceof Error){// Note: The comments on the `throw` lines are intentional, they show
// up in Node's output if this results in an unhandled exception.
throw er;// Unhandled 'error' event
}// At least give some kind of context to the user
var err=new Error('Unhandled error.'+(er?' ('+er.message+')':''));err.context=er;throw err;// Unhandled 'error' event
}var handler=events[type];if(handler===undefined)return false;if(typeof handler==='function'){ReflectApply$1(handler,this,args);}else {var len=handler.length;var listeners=arrayClone$1(handler,len);for(var i=0;i<len;++i){ReflectApply$1(listeners[i],this,args);}}return true;};function _addListener$1(target,type,listener,prepend){var m;var events;var existing;checkListener$1(listener);events=target._events;if(events===undefined){events=target._events=Object.create(null);target._eventsCount=0;}else {// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(events.newListener!==undefined){target.emit('newListener',type,listener.listener?listener.listener:listener);// Re-assign `events` because a newListener handler could have caused the
// this._events to be assigned to a new object
events=target._events;}existing=events[type];}if(existing===undefined){// Optimize the case of one listener. Don't need the extra array object.
existing=events[type]=listener;++target._eventsCount;}else {if(typeof existing==='function'){// Adding the second element, need to change to array.
existing=events[type]=prepend?[listener,existing]:[existing,listener];// If we've already got an array, just append.
}else if(prepend){existing.unshift(listener);}else {existing.push(listener);}// Check for listener leak
m=_getMaxListeners$1(target);if(m>0&&existing.length>m&&!existing.warned){existing.warned=true;// No error code for this since it is a Warning
// eslint-disable-next-line no-restricted-syntax
var w=new Error('Possible EventEmitter memory leak detected. '+existing.length+' '+String(type)+' listeners '+'added. Use emitter.setMaxListeners() to '+'increase limit');w.name='MaxListenersExceededWarning';w.emitter=target;w.type=type;w.count=existing.length;ProcessEmitWarning$1(w);}}return target;}EventEmitter$3.prototype.addListener=function addListener(type,listener){return _addListener$1(this,type,listener,false);};EventEmitter$3.prototype.on=EventEmitter$3.prototype.addListener;EventEmitter$3.prototype.prependListener=function prependListener(type,listener){return _addListener$1(this,type,listener,true);};function onceWrapper$1(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;if(arguments.length===0)return this.listener.call(this.target);return this.listener.apply(this.target,arguments);}}function _onceWrap$1(target,type,listener){var state={fired:false,wrapFn:undefined,target:target,type:type,listener:listener};var wrapped=onceWrapper$1.bind(state);wrapped.listener=listener;state.wrapFn=wrapped;return wrapped;}EventEmitter$3.prototype.once=function once(type,listener){checkListener$1(listener);this.on(type,_onceWrap$1(this,type,listener));return this;};EventEmitter$3.prototype.prependOnceListener=function prependOnceListener(type,listener){checkListener$1(listener);this.prependListener(type,_onceWrap$1(this,type,listener));return this;};// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter$3.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;checkListener$1(listener);events=this._events;if(events===undefined)return this;list=events[type];if(list===undefined)return this;if(list===listener||list.listener===listener){if(--this._eventsCount===0)this._events=Object.create(null);else {delete events[type];if(events.removeListener)this.emit('removeListener',type,list.listener||listener);}}else if(typeof list!=='function'){position=-1;for(i=list.length-1;i>=0;i--){if(list[i]===listener||list[i].listener===listener){originalListener=list[i].listener;position=i;break;}}if(position<0)return this;if(position===0)list.shift();else {spliceOne$1(list,position);}if(list.length===1)events[type]=list[0];if(events.removeListener!==undefined)this.emit('removeListener',type,originalListener||listener);}return this;};EventEmitter$3.prototype.off=EventEmitter$3.prototype.removeListener;EventEmitter$3.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events,i;events=this._events;if(events===undefined)return this;// not listening for removeListener, no need to emit
if(events.removeListener===undefined){if(arguments.length===0){this._events=Object.create(null);this._eventsCount=0;}else if(events[type]!==undefined){if(--this._eventsCount===0)this._events=Object.create(null);else delete events[type];}return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){var keys=Object.keys(events);var key;for(i=0;i<keys.length;++i){key=keys[i];if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events=Object.create(null);this._eventsCount=0;return this;}listeners=events[type];if(typeof listeners==='function'){this.removeListener(type,listeners);}else if(listeners!==undefined){// LIFO order
for(i=listeners.length-1;i>=0;i--){this.removeListener(type,listeners[i]);}}return this;};function _listeners$1(target,type,unwrap){var events=target._events;if(events===undefined)return [];var evlistener=events[type];if(evlistener===undefined)return [];if(typeof evlistener==='function')return unwrap?[evlistener.listener||evlistener]:[evlistener];return unwrap?unwrapListeners$1(evlistener):arrayClone$1(evlistener,evlistener.length);}EventEmitter$3.prototype.listeners=function listeners(type){return _listeners$1(this,type,true);};EventEmitter$3.prototype.rawListeners=function rawListeners(type){return _listeners$1(this,type,false);};EventEmitter$3.listenerCount=function(emitter,type){if(typeof emitter.listenerCount==='function'){return emitter.listenerCount(type);}else {return listenerCount$1.call(emitter,type);}};EventEmitter$3.prototype.listenerCount=listenerCount$1;function listenerCount$1(type){var events=this._events;if(events!==undefined){var evlistener=events[type];if(typeof evlistener==='function'){return 1;}else if(evlistener!==undefined){return evlistener.length;}}return 0;}EventEmitter$3.prototype.eventNames=function eventNames(){return this._eventsCount>0?ReflectOwnKeys$1(this._events):[];};function arrayClone$1(arr,n){var copy=new Array(n);for(var i=0;i<n;++i){copy[i]=arr[i];}return copy;}function spliceOne$1(list,index){for(;index+1<list.length;index++){list[index]=list[index+1];}list.pop();}function unwrapListeners$1(arr){var ret=new Array(arr.length);for(var i=0;i<ret.length;++i){ret[i]=arr[i].listener||arr[i];}return ret;}function once$2(emitter,name){return new Promise(function(resolve,reject){function errorListener(err){emitter.removeListener(name,resolver);reject(err);}function resolver(){if(typeof emitter.removeListener==='function'){emitter.removeListener('error',errorListener);}resolve([].slice.call(arguments));}eventTargetAgnosticAddListener$1(emitter,name,resolver,{once:true});if(name!=='error'){addErrorHandlerIfEventEmitter$1(emitter,errorListener,{once:true});}});}function addErrorHandlerIfEventEmitter$1(emitter,handler,flags){if(typeof emitter.on==='function'){eventTargetAgnosticAddListener$1(emitter,'error',handler,flags);}}function eventTargetAgnosticAddListener$1(emitter,name,listener,flags){if(typeof emitter.on==='function'){if(flags.once){emitter.once(name,listener);}else {emitter.on(name,listener);}}else if(typeof emitter.addEventListener==='function'){// EventTarget does not have `error` event semantics like Node
// EventEmitters, we do not listen for `error` events here.
emitter.addEventListener(name,function wrapListener(arg){// IE does not have builtin `{ once: true }` support so we
// have to do it manually.
if(flags.once){emitter.removeEventListener(name,wrapListener);}listener(arg);});}else {throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof emitter);}}class EventEmitter$2 extends events$1.exports.EventEmitter{}class IngressSdpMunger{constructor(){this.customCodecParameters=new Map();this.customRtxCodecParameters=new Map();this.ssrc=generateSsrc();}getReceiverId(){return Object.assign({ssrc:this.ssrc},this.rtxSsrc?{rtxSsrc:this.rtxSsrc}:{});}mungeLocalDescription(mediaDescription,options){retainCodecsByCodecName(mediaDescription,['h264','opus','rtx']);if(mediaDescription.codecs.size===0){logErrorAndThrow(exports.WcmeErrorType.SDP_MUNGE_MISSING_CODECS,"No codecs present in m-line with MID ".concat(mediaDescription.mid," after filtering."));}removeMidRidExtensions(mediaDescription);applyFormatParameters(mediaDescription,['H264','opus'],this.customCodecParameters);applyFormatParameters(mediaDescription,['rtx'],this.customRtxCodecParameters);if(options.twccDisabled){disableTwcc(mediaDescription);}}mungeRemoteDescription(mediaDescription){if(!mediaDescription.ssrcs.length){mediaDescription.addLine(new SsrcLine$1(this.ssrc,'cname',"".concat(this.ssrc,"-cname")));mediaDescription.addLine(new SsrcLine$1(this.ssrc,'msid','-',"".concat(mediaDescription.mid)));if(hasCodec('rtx',mediaDescription)){if(!this.rtxSsrc){this.rtxSsrc=generateSsrc();}mediaDescription.addLine(new SsrcLine$1(this.rtxSsrc,'cname',"".concat(this.ssrc,"-cname")));mediaDescription.addLine(new SsrcLine$1(this.rtxSsrc,'msid','-',"".concat(mediaDescription.mid)));mediaDescription.addLine(new SsrcGroupLine$1('FID',[this.ssrc,this.rtxSsrc]));}}if(retainCandidatesByTransportType(mediaDescription,['udp','tcp'])){logger.log("Some unsupported remote candidates have been removed from mid ".concat(mediaDescription.mid));}[...mediaDescription.codecs.values()].forEach(ci=>{ci.fmtParams.set('x-google-start-bitrate','60000');});applyFormatParameters(mediaDescription,['rtx'],this.customRtxCodecParameters);}setCodecParameters(parameters){Object.entries(parameters).forEach(_ref4=>{var[param,value]=_ref4;this.customCodecParameters.set(param,value);});}setRtxCodecParameters(parameters){Object.entries(parameters).forEach(_ref5=>{var[param,value]=_ref5;this.customRtxCodecParameters.set(param,value);});}reset(){this.ssrc=generateSsrc();}}var HomerMsgType;(function(HomerMsgType){HomerMsgType["Multistream"]="multistream";})(HomerMsgType||(HomerMsgType={}));class HomerMsg{constructor(msgType,payload){this.msgType=msgType;this.payload=payload;}static fromJson(data){if(!data.msgType||!data.payload){return null;}return new HomerMsg(data.msgType,data.payload);}}class MidPredictor{constructor(){this.currentMid=0;this.midMap=new Map();}getNextMid(mediaType){var mid=this.currentMid++;var mids=this.midMap.get(mediaType)||[];mids.push("".concat(mid));this.midMap.set(mediaType,mids);return "".concat(mid);}allocateMidForDatachannel(){this.currentMid+=1;}reset(){this.midMap=new Map();this.currentMid=0;}getMidMap(){return this.midMap;}}var OveruseState;(function(OveruseState){OveruseState[OveruseState["NOT_OVERUSED"]=0]="NOT_OVERUSED";OveruseState[OveruseState["OVERUSED"]=1]="OVERUSED";})(OveruseState||(OveruseState={}));class OveruseStateManager{constructor(callback){this.monitors=[];this.lastOverallOveruseState=OveruseState.NOT_OVERUSED;this.isRunning=false;this.overuseUpdateCallback=callback;}addMonitor(monitor){this.monitors.push(monitor);if(this.isRunning){monitor.startMonitoring(()=>this.onMonitorOveruseUpdate());}}start(){this.isRunning=true;this.monitors.forEach(monitor=>monitor.startMonitoring(()=>this.onMonitorOveruseUpdate()));}stop(){this.isRunning=false;this.monitors.forEach(monitor=>monitor.stopMonitoring());}onMonitorOveruseUpdate(){var overuseStates=this.monitors.map(monitor=>monitor.getLastOveruseState());var overallOveruseState=overuseStates.some(overuseState=>overuseState===OveruseState.OVERUSED)?OveruseState.OVERUSED:OveruseState.NOT_OVERUSED;if(overallOveruseState!==this.lastOverallOveruseState){this.lastOverallOveruseState=overallOveruseState;this.overuseUpdateCallback(overallOveruseState);}}}exports.ReceiveSlotEvents = void 0;(function(ReceiveSlotEvents){ReceiveSlotEvents["MediaStarted"]="media-started";ReceiveSlotEvents["MediaStopped"]="media-stopped";ReceiveSlotEvents["MediaEnded"]="media-ended";ReceiveSlotEvents["SourceUpdate"]="source-update";})(exports.ReceiveSlotEvents||(exports.ReceiveSlotEvents={}));class ReceiveSlot extends EventEmitter$2{constructor(idGetter,track){super();this._isRequested=false;this._idGetter=idGetter;this.handleStreamMediaStateChange=this.handleStreamMediaStateChange.bind(this);this.handleStreamEnded=this.handleStreamEnded.bind(this);this._stream=new RemoteStream(new MediaStream([track]));this._sourceState=track.kind===exports.MediaStreamTrackKind.Video?'no source':undefined;this._stream.on(exports.RemoteStreamEventNames.MediaStateChange,this.handleStreamMediaStateChange);this._stream.on(exports.StreamEventNames.Ended,this.handleStreamEnded);}handleStreamMediaStateChange(state){if(state===RemoteMediaState.Stopped){this.emit(exports.ReceiveSlotEvents.MediaStopped);}else {this.emit(exports.ReceiveSlotEvents.MediaStarted);}}handleStreamEnded(){this.emit(exports.ReceiveSlotEvents.MediaEnded);}_replaceTrack(newTrack){this._stream.replaceTrack(newTrack);}_updateSource(state,csi){if(state!==this._sourceState||csi!==this._currentRxCsi){this._sourceState=state;this._currentRxCsi=csi;this.emit(exports.ReceiveSlotEvents.SourceUpdate,state,csi);}}close(){this._stream.off(exports.RemoteStreamEventNames.MediaStateChange,this.handleStreamMediaStateChange);this._stream.off(exports.StreamEventNames.Ended,this.handleStreamEnded);}get id(){return this._idGetter();}get stream(){return this._stream.outputStream;}get currentRxCsi(){return this._currentRxCsi;}get sourceState(){return this._sourceState;}}ReceiveSlot.Events=exports.ReceiveSlotEvents;function getCurrentTimestamp(){return performance.timeOrigin+performance.now();}class StatsManager{constructor(statsGetter){var statsPreprocessor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:()=>__awaiter$1(this,void 0,void 0,function*(){});this.statsGetter=statsGetter;this.statsPreProcessor=statsPreprocessor;}getStats(){return __awaiter$1(this,void 0,void 0,function*(){var statsReport=yield this.statsGetter();var statsMap=new Map();statsReport.forEach((stats,key)=>statsMap.set(key,stats));yield this.statsPreProcessor(statsMap);return statsMap;});}}class Transceiver{constructor(config){this.twccDisabled=false;this._rtcRtpTransceiver=config.rtcRtpTransceiver;this.mid=config.mid;this.mediaType=config.mediaType;}replaceTransceiver(newRtcRtpTransceiver){this._rtcRtpTransceiver=newRtcRtpTransceiver;}get receiver(){return this._rtcRtpTransceiver.receiver;}get sender(){return this._rtcRtpTransceiver.sender;}close(){try{this._rtcRtpTransceiver.stop();}catch(error){if(error instanceof DOMException&&error.name==='InvalidStateError'){logger.warn('Peer connection is already closed, skipping call to RTCRtpTransceiver.stop()');}else {logger.error('An unexpected error occurred while stopping the RTCRtpTransceiver:',error);throw error;}}}}class ReceiveOnlyTransceiver extends Transceiver{constructor(config){super(config);this.metadata={isActiveSpeaker:false};this.munger=config.munger;this._receiveSlot=new ReceiveSlot(()=>{if(!this._rtcRtpTransceiver.mid){return null;}return this.munger.getReceiverId();},this._rtcRtpTransceiver.receiver.track);}replaceTransceiver(newRtcRtpTransceiver){super.replaceTransceiver(newRtcRtpTransceiver);this._receiveSlot._replaceTrack(newRtcRtpTransceiver.receiver.track);}close(){super.close();this._receiveSlot.close();}get receiveSlot(){return this._receiveSlot;}getStats(){return __awaiter$1(this,void 0,void 0,function*(){var statsMap=new Map();var statsReport=yield this.receiver.getStats();statsReport.forEach((stats,key)=>{if(stats.type==='inbound-rtp'){stats.mid=this.mid;stats.csi=this.receiveSlot.currentRxCsi;stats.sourceState=this.receiveSlot.sourceState;stats.calliopeMediaType=this.mediaType;stats.requestedBitrate=this.metadata.requestedBitrate;stats.requestedFrameSize=this.metadata.requestedFrameSize;stats.requestedFrameRate=this.metadata.requestedFrameRate;stats.isRequested=this.receiveSlot._isRequested;stats.lastRequestedUpdateTimestamp=this.metadata.lastRequestedUpdateTimestamp;stats.isActiveSpeaker=this.metadata.isActiveSpeaker;stats.lastActiveSpeakerUpdateTimestamp=this.metadata.lastActiveSpeakerUpdateTimestamp;Object.assign(stats,this.receiverId);}statsMap.set(key,stats);});return statsMap;});}mungeLocalDescription(mediaDescription){this.munger.mungeLocalDescription(mediaDescription,{twccDisabled:this.twccDisabled});}mungeRemoteDescription(mediaDescription){this.munger.mungeRemoteDescription(mediaDescription);}get receiverId(){return this.munger.getReceiverId();}resetSdpMunger(){this.munger.reset();}handleRequested(streamRequest){var _a,_b,_c,_d;if(!this.receiveSlot._isRequested){this.receiveSlot._isRequested=true;this.metadata.lastRequestedUpdateTimestamp=getCurrentTimestamp();}this.metadata.requestedBitrate=streamRequest.maxPayloadBitsPerSecond;this.metadata.requestedFrameSize=(_b=(_a=streamRequest.codecInfos[0])===null||_a===void 0?void 0:_a.h264)===null||_b===void 0?void 0:_b.maxFs;this.metadata.requestedFrameRate=(_d=(_c=streamRequest.codecInfos[0])===null||_c===void 0?void 0:_c.h264)===null||_d===void 0?void 0:_d.maxFps;}handleUnrequested(){if(this.receiveSlot._isRequested){this.receiveSlot._isRequested=false;this.metadata.lastRequestedUpdateTimestamp=getCurrentTimestamp();}this.metadata.requestedBitrate=undefined;this.metadata.requestedFrameSize=undefined;this.metadata.requestedFrameRate=undefined;this.receiveSlot._updateSource('no source',undefined);}handleActiveSpeakerUpdate(value){if(this.metadata.isActiveSpeaker!==value){this.metadata.isActiveSpeaker=value;this.metadata.lastActiveSpeakerUpdateTimestamp=getCurrentTimestamp();}}setCodecParameters(parameters){this.munger.setCodecParameters(parameters);}setRtxCodecParameters(parameters){this.munger.setRtxCodecParameters(parameters);}}ReceiveOnlyTransceiver.rid='1';var events={exports:{}};var R=typeof Reflect==='object'?Reflect:null;var ReflectApply=R&&typeof R.apply==='function'?R.apply:function ReflectApply(target,receiver,args){return Function.prototype.apply.call(target,receiver,args);};var ReflectOwnKeys;if(R&&typeof R.ownKeys==='function'){ReflectOwnKeys=R.ownKeys;}else if(Object.getOwnPropertySymbols){ReflectOwnKeys=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));};}else {ReflectOwnKeys=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target);};}function ProcessEmitWarning(warning){if(console&&console.warn)console.warn(warning);}var NumberIsNaN=Number.isNaN||function NumberIsNaN(value){return value!==value;};function EventEmitter$1(){EventEmitter$1.init.call(this);}events.exports=EventEmitter$1;events.exports.once=once$1;// Backwards-compat with node 0.10.x
EventEmitter$1.EventEmitter=EventEmitter$1;EventEmitter$1.prototype._events=undefined;EventEmitter$1.prototype._eventsCount=0;EventEmitter$1.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners=10;function checkListener(listener){if(typeof listener!=='function'){throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof listener);}}Object.defineProperty(EventEmitter$1,'defaultMaxListeners',{enumerable:true,get:function get(){return defaultMaxListeners;},set:function set(arg){if(typeof arg!=='number'||arg<0||NumberIsNaN(arg)){throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+arg+'.');}defaultMaxListeners=arg;}});EventEmitter$1.init=function(){if(this._events===undefined||this._events===Object.getPrototypeOf(this)._events){this._events=Object.create(null);this._eventsCount=0;}this._maxListeners=this._maxListeners||undefined;};// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter$1.prototype.setMaxListeners=function setMaxListeners(n){if(typeof n!=='number'||n<0||NumberIsNaN(n)){throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+'.');}this._maxListeners=n;return this;};function _getMaxListeners(that){if(that._maxListeners===undefined)return EventEmitter$1.defaultMaxListeners;return that._maxListeners;}EventEmitter$1.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners(this);};EventEmitter$1.prototype.emit=function emit(type){var args=[];for(var i=1;i<arguments.length;i++){args.push(arguments[i]);}var doError=type==='error';var events=this._events;if(events!==undefined)doError=doError&&events.error===undefined;else if(!doError)return false;// If there is no 'error' event listener then throw.
if(doError){var er;if(args.length>0)er=args[0];if(er instanceof Error){// Note: The comments on the `throw` lines are intentional, they show
// up in Node's output if this results in an unhandled exception.
throw er;// Unhandled 'error' event
}// At least give some kind of context to the user
var err=new Error('Unhandled error.'+(er?' ('+er.message+')':''));err.context=er;throw err;// Unhandled 'error' event
}var handler=events[type];if(handler===undefined)return false;if(typeof handler==='function'){ReflectApply(handler,this,args);}else {var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i){ReflectApply(listeners[i],this,args);}}return true;};function _addListener(target,type,listener,prepend){var m;var events;var existing;checkListener(listener);events=target._events;if(events===undefined){events=target._events=Object.create(null);target._eventsCount=0;}else {// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(events.newListener!==undefined){target.emit('newListener',type,listener.listener?listener.listener:listener);// Re-assign `events` because a newListener handler could have caused the
// this._events to be assigned to a new object
events=target._events;}existing=events[type];}if(existing===undefined){// Optimize the case of one listener. Don't need the extra array object.
existing=events[type]=listener;++target._eventsCount;}else {if(typeof existing==='function'){// Adding the second element, need to change to array.
existing=events[type]=prepend?[listener,existing]:[existing,listener];// If we've already got an array, just append.
}else if(prepend){existing.unshift(listener);}else {existing.push(listener);}// Check for listener leak
m=_getMaxListeners(target);if(m>0&&existing.length>m&&!existing.warned){existing.warned=true;// No error code for this since it is a Warning
// eslint-disable-next-line no-restricted-syntax
var w=new Error('Possible EventEmitter memory leak detected. '+existing.length+' '+String(type)+' listeners '+'added. Use emitter.setMaxListeners() to '+'increase limit');w.name='MaxListenersExceededWarning';w.emitter=target;w.type=type;w.count=existing.length;ProcessEmitWarning(w);}}return target;}EventEmitter$1.prototype.addListener=function addListener(type,listener){return _addListener(this,type,listener,false);};EventEmitter$1.prototype.on=EventEmitter$1.prototype.addListener;EventEmitter$1.prototype.prependListener=function prependListener(type,listener){return _addListener(this,type,listener,true);};function onceWrapper(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;if(arguments.length===0)return this.listener.call(this.target);return this.listener.apply(this.target,arguments);}}function _onceWrap(target,type,listener){var state={fired:false,wrapFn:undefined,target:target,type:type,listener:listener};var wrapped=onceWrapper.bind(state);wrapped.listener=listener;state.wrapFn=wrapped;return wrapped;}EventEmitter$1.prototype.once=function once(type,listener){checkListener(listener);this.on(type,_onceWrap(this,type,listener));return this;};EventEmitter$1.prototype.prependOnceListener=function prependOnceListener(type,listener){checkListener(listener);this.prependListener(type,_onceWrap(this,type,listener));return this;};// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter$1.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;checkListener(listener);events=this._events;if(events===undefined)return this;list=events[type];if(list===undefined)return this;if(list===listener||list.listener===listener){if(--this._eventsCount===0)this._events=Object.create(null);else {delete events[type];if(events.removeListener)this.emit('removeListener',type,list.listener||listener);}}else if(typeof list!=='function'){position=-1;for(i=list.length-1;i>=0;i--){if(list[i]===listener||list[i].listener===listener){originalListener=list[i].listener;position=i;break;}}if(position<0)return this;if(position===0)list.shift();else {spliceOne(list,position);}if(list.length===1)events[type]=list[0];if(events.removeListener!==undefined)this.emit('removeListener',type,originalListener||listener);}return this;};EventEmitter$1.prototype.off=EventEmitter$1.prototype.removeListener;EventEmitter$1.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events,i;events=this._events;if(events===undefined)return this;// not listening for removeListener, no need to emit
if(events.removeListener===undefined){if(arguments.length===0){this._events=Object.create(null);this._eventsCount=0;}else if(events[type]!==undefined){if(--this._eventsCount===0)this._events=Object.create(null);else delete events[type];}return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){var keys=Object.keys(events);var key;for(i=0;i<keys.length;++i){key=keys[i];if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events=Object.create(null);this._eventsCount=0;return this;}listeners=events[type];if(typeof listeners==='function'){this.removeListener(type,listeners);}else if(listeners!==undefined){// LIFO order
for(i=listeners.length-1;i>=0;i--){this.removeListener(type,listeners[i]);}}return this;};function _listeners(target,type,unwrap){var events=target._events;if(events===undefined)return [];var evlistener=events[type];if(evlistener===undefined)return [];if(typeof evlistener==='function')return unwrap?[evlistener.listener||evlistener]:[evlistener];return unwrap?unwrapListeners(evlistener):arrayClone(evlistener,evlistener.length);}EventEmitter$1.prototype.listeners=function listeners(type){return _listeners(this,type,true);};EventEmitter$1.prototype.rawListeners=function rawListeners(type){return _listeners(this,type,false);};EventEmitter$1.listenerCount=function(emitter,type){if(typeof emitter.listenerCount==='function'){return emitter.listenerCount(type);}else {return listenerCount.call(emitter,type);}};EventEmitter$1.prototype.listenerCount=listenerCount;function listenerCount(type){var events=this._events;if(events!==undefined){var evlistener=events[type];if(typeof evlistener==='function'){return 1;}else if(evlistener!==undefined){return evlistener.length;}}return 0;}EventEmitter$1.prototype.eventNames=function eventNames(){return this._eventsCount>0?ReflectOwnKeys(this._events):[];};function arrayClone(arr,n){var copy=new Array(n);for(var i=0;i<n;++i){copy[i]=arr[i];}return copy;}function spliceOne(list,index){for(;index+1<list.length;index++){list[index]=list[index+1];}list.pop();}function unwrapListeners(arr){var ret=new Array(arr.length);for(var i=0;i<ret.length;++i){ret[i]=arr[i].listener||arr[i];}return ret;}function once$1(emitter,name){return new Promise(function(resolve,reject){function errorListener(err){emitter.removeListener(name,resolver);reject(err);}function resolver(){if(typeof emitter.removeListener==='function'){emitter.removeListener('error',errorListener);}resolve([].slice.call(arguments));}eventTargetAgnosticAddListener(emitter,name,resolver,{once:true});if(name!=='error'){addErrorHandlerIfEventEmitter(emitter,errorListener,{once:true});}});}function addErrorHandlerIfEventEmitter(emitter,handler,flags){if(typeof emitter.on==='function'){eventTargetAgnosticAddListener(emitter,'error',handler,flags);}}function eventTargetAgnosticAddListener(emitter,name,listener,flags){if(typeof emitter.on==='function'){if(flags.once){emitter.once(name,listener);}else {emitter.on(name,listener);}}else if(typeof emitter.addEventListener==='function'){// EventTarget does not have `error` event semantics like Node
// EventEmitters, we do not listen for `error` events here.
emitter.addEventListener(name,function wrapListener(arg){// IE does not have builtin `{ once: true }` support so we
// have to do it manually.
if(flags.once){emitter.removeEventListener(name,wrapListener);}listener(arg);});}else {throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof emitter);}}class EventEmitter extends events.exports.EventEmitter{}class TypedEvent{constructor(){this.emitter=new EventEmitter();}on(handler){this.emitter.on('event',handler);}once(handler){this.emitter.once('event',handler);}off(handler){this.emitter.off('event',handler);}emit(){for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}this.emitter.emit('event',...args);}}/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */function initialParams(fn){return function(){for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}var callback=args.pop();return fn.call(this,args,callback);};}/* istanbul ignore file */var hasQueueMicrotask=typeof queueMicrotask==='function'&&queueMicrotask;var hasSetImmediate=typeof setImmediate==='function'&&setImmediate;var hasNextTick=typeof browser$1==='object'&&typeof browser$1.nextTick==='function';function fallback(fn){setTimeout(fn,0);}function wrap(defer){return function(fn){for(var _len6=arguments.length,args=new Array(_len6>1?_len6-1:0),_key6=1;_key6<_len6;_key6++){args[_key6-1]=arguments[_key6];}return defer(()=>fn(...args));};}var _defer;if(hasQueueMicrotask){_defer=queueMicrotask;}else if(hasSetImmediate){_defer=setImmediate;}else if(hasNextTick){_defer=browser$1.nextTick;}else {_defer=fallback;}var setImmediate$1=wrap(_defer);/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */function asyncify(func){if(isAsync(func)){return function(){for(var _len7=arguments.length,args=new Array(_len7),_key7=0;_key7<_len7;_key7++){args[_key7]=arguments[_key7];}var callback=args.pop();var promise=func.apply(this,args);return handlePromise(promise,callback);};}return initialParams(function(args,callback){var result;try{result=func.apply(this,args);}catch(e){return callback(e);}// if result is Promise object
if(result&&typeof result.then==='function'){return handlePromise(result,callback);}else {callback(null,result);}});}function handlePromise(promise,callback){return promise.then(value=>{invokeCallback(callback,null,value);},err=>{invokeCallback(callback,err&&err.message?err:new Error(err));});}function invokeCallback(callback,error,value){try{callback(error,value);}catch(err){setImmediate$1(e=>{throw e;},err);}}function isAsync(fn){return fn[Symbol.toStringTag]==='AsyncFunction';}function isAsyncGenerator(fn){return fn[Symbol.toStringTag]==='AsyncGenerator';}function isAsyncIterable(obj){return typeof obj[Symbol.asyncIterator]==='function';}function wrapAsync(asyncFn){if(typeof asyncFn!=='function')throw new Error('expected a function');return isAsync(asyncFn)?asyncify(asyncFn):asyncFn;}// conditionally promisify a function.
// only return a promise if a callback is omitted
function awaitify(asyncFn){var arity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:asyncFn.length;if(!arity)throw new Error('arity is undefined');function awaitable(){for(var _len8=arguments.length,args=new Array(_len8),_key8=0;_key8<_len8;_key8++){args[_key8]=arguments[_key8];}if(typeof args[arity-1]==='function'){return asyncFn.apply(this,args);}return new Promise((resolve,reject)=>{args[arity-1]=function(err){if(err)return reject(err);for(var _len9=arguments.length,cbArgs=new Array(_len9>1?_len9-1:0),_key9=1;_key9<_len9;_key9++){cbArgs[_key9-1]=arguments[_key9];}resolve(cbArgs.length>1?cbArgs:cbArgs[0]);};asyncFn.apply(this,args);});}return awaitable;}function _asyncMap(eachfn,arr,iteratee,callback){arr=arr||[];var results=[];var counter=0;var _iteratee=wrapAsync(iteratee);return eachfn(arr,(value,_,iterCb)=>{var index=counter++;_iteratee(value,(err,v)=>{results[index]=v;iterCb(err);});},err=>{callback(err,results);});}function isArrayLike(value){return value&&typeof value.length==='number'&&value.length>=0&&value.length%1===0;}// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
var breakLoop={};function once(fn){function wrapper(){if(fn===null)return;var callFn=fn;fn=null;for(var _len10=arguments.length,args=new Array(_len10),_key10=0;_key10<_len10;_key10++){args[_key10]=arguments[_key10];}callFn.apply(this,args);}Object.assign(wrapper,fn);return wrapper;}function getIterator(coll){return coll[Symbol.iterator]&&coll[Symbol.iterator]();}function createArrayIterator(coll){var i=-1;var len=coll.length;return function next(){return ++i<len?{value:coll[i],key:i}:null;};}function createES2015Iterator(iterator){var i=-1;return function next(){var item=iterator.next();if(item.done)return null;i++;return {value:item.value,key:i};};}function createObjectIterator(obj){var okeys=obj?Object.keys(obj):[];var i=-1;var len=okeys.length;return function next(){var key=okeys[++i];if(key==='__proto__'){return next();}return i<len?{value:obj[key],key}:null;};}function createIterator(coll){if(isArrayLike(coll)){return createArrayIterator(coll);}var iterator=getIterator(coll);return iterator?createES2015Iterator(iterator):createObjectIterator(coll);}function onlyOnce(fn){return function(){if(fn===null)throw new Error("Callback was already called.");var callFn=fn;fn=null;for(var _len11=arguments.length,args=new Array(_len11),_key11=0;_key11<_len11;_key11++){args[_key11]=arguments[_key11];}callFn.apply(this,args);};}// for async generators
function asyncEachOfLimit(generator,limit,iteratee,callback){var done=false;var canceled=false;var awaiting=false;var running=0;var idx=0;function replenish(){//console.log('replenish')
if(running>=limit||awaiting||done)return;//console.log('replenish awaiting')
awaiting=true;generator.next().then(_ref6=>{var{value,done:iterDone}=_ref6;//console.log('got value', value)
if(canceled||done)return;awaiting=false;if(iterDone){done=true;if(running<=0){//console.log('done nextCb')
callback(null);}return;}running++;iteratee(value,idx,iterateeCallback);idx++;replenish();}).catch(handleError);}function iterateeCallback(err,result){//console.log('iterateeCallback')
running-=1;if(canceled)return;if(err)return handleError(err);if(err===false){done=true;canceled=true;return;}if(result===breakLoop||done&&running<=0){done=true;//console.log('done iterCb')
return callback(null);}replenish();}function handleError(err){if(canceled)return;awaiting=false;done=true;callback(err);}replenish();}var eachOfLimit=limit=>{return (obj,iteratee,callback)=>{callback=once(callback);if(limit<=0){throw new RangeError('concurrency limit cannot be less than 1');}if(!obj){return callback(null);}if(isAsyncGenerator(obj)){return asyncEachOfLimit(obj,limit,iteratee,callback);}if(isAsyncIterable(obj)){return asyncEachOfLimit(obj[Symbol.asyncIterator](),limit,iteratee,callback);}var nextElem=createIterator(obj);var done=false;var canceled=false;var running=0;var looping=false;function iterateeCallback(err,value){if(canceled)return;running-=1;if(err){done=true;callback(err);}else if(err===false){done=true;canceled=true;}else if(value===breakLoop||done&&running<=0){done=true;return callback(null);}else if(!looping){replenish();}}function replenish(){looping=true;while(running<limit&&!done){var elem=nextElem();if(elem===null){done=true;if(running<=0){callback(null);}return;}running+=1;iteratee(elem.value,elem.key,onlyOnce(iterateeCallback));}looping=false;}replenish();};};/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */function eachOfLimit$1(coll,limit,iteratee,callback){return eachOfLimit(limit)(coll,wrapAsync(iteratee),callback);}var eachOfLimit$2=awaitify(eachOfLimit$1,4);// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll,iteratee,callback){callback=once(callback);var index=0,completed=0,{length}=coll,canceled=false;if(length===0){callback(null);}function iteratorCallback(err,value){if(err===false){canceled=true;}if(canceled===true)return;if(err){callback(err);}else if(++completed===length||value===breakLoop){callback(null);}}for(;index<length;index++){iteratee(coll[index],index,onlyOnce(iteratorCallback));}}// a generic version of eachOf which can handle array, object, and iterator cases.
function eachOfGeneric(coll,iteratee,callback){return eachOfLimit$2(coll,Infinity,iteratee,callback);}/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dev.json is a file containing a valid json object config for dev environment
 * // dev.json is a file containing a valid json object config for test environment
 * // prod.json is a file containing a valid json object config for prod environment
 * // invalid.json is a file with a malformed json object
 *
 * let configs = {}; //global variable
 * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};
 * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};
 *
 * // asynchronous function that reads a json file and parses the contents as json object
 * function parseFile(file, key, callback) {
 *     fs.readFile(file, "utf8", function(err, data) {
 *         if (err) return calback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }
 *
 * // Using callbacks
 * async.forEachOf(validConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *     } else {
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *         // JSON parse error exception
 *     } else {
 *         console.log(configs);
 *     }
 * });
 *
 * // Using Promises
 * async.forEachOf(validConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 *     // configs is now a map of JSON data, e.g.
 *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 * }).catch( err => {
 *     console.error(err);
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 * }).catch( err => {
 *     console.error(err);
 *     // JSON parse error exception
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.forEachOf(validConfigFileMap, parseFile);
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * //Error handing
 * async () => {
 *     try {
 *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);
 *         console.log(configs);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // JSON parse error exception
 *     }
 * }
 *
 */function eachOf(coll,iteratee,callback){var eachOfImplementation=isArrayLike(coll)?eachOfArrayLike:eachOfGeneric;return eachOfImplementation(coll,wrapAsync(iteratee),callback);}var eachOf$1=awaitify(eachOf,3);/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callbacks
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.map(fileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(results);
 *     }
 * });
 *
 * // Using Promises
 * async.map(fileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now an array of the file size in bytes for each file, e.g.
 *     // [ 1000, 2000, 3000]
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.map(fileList, getFileSizeInBytes);
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.map(withMissingFileList, getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */function map(coll,iteratee,callback){return _asyncMap(eachOf$1,coll,iteratee,callback);}var map$1=awaitify(map,3);/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */function eachOfSeries(coll,iteratee,callback){return eachOfLimit$2(coll,1,iteratee,callback);}var eachOfSeries$1=awaitify(eachOfSeries,3);/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */function mapSeries(coll,iteratee,callback){return _asyncMap(eachOfSeries$1,coll,iteratee,callback);}awaitify(mapSeries,3);// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
class DLL{constructor(){this.head=this.tail=null;this.length=0;}removeLink(node){if(node.prev)node.prev.next=node.next;else this.head=node.next;if(node.next)node.next.prev=node.prev;else this.tail=node.prev;node.prev=node.next=null;this.length-=1;return node;}empty(){while(this.head){this.shift();}return this;}insertAfter(node,newNode){newNode.prev=node;newNode.next=node.next;if(node.next)node.next.prev=newNode;else this.tail=newNode;node.next=newNode;this.length+=1;}insertBefore(node,newNode){newNode.prev=node.prev;newNode.next=node;if(node.prev)node.prev.next=newNode;else this.head=newNode;node.prev=newNode;this.length+=1;}unshift(node){if(this.head)this.insertBefore(this.head,node);else setInitial(this,node);}push(node){if(this.tail)this.insertAfter(this.tail,node);else setInitial(this,node);}shift(){return this.head&&this.removeLink(this.head);}pop(){return this.tail&&this.removeLink(this.tail);}toArray(){return [...this];}*[Symbol.iterator](){var cur=this.head;while(cur){yield cur.data;cur=cur.next;}}remove(testFn){var curr=this.head;while(curr){var{next}=curr;if(testFn(curr)){this.removeLink(curr);}curr=next;}return this;}}function setInitial(dll,node){dll.length=1;dll.head=dll.tail=node;}function queue(worker,concurrency,payload){if(concurrency==null){concurrency=1;}else if(concurrency===0){throw new RangeError('Concurrency must not be zero');}var _worker=wrapAsync(worker);var numRunning=0;var workersList=[];var events={error:[],drain:[],saturated:[],unsaturated:[],empty:[]};function on(event,handler){events[event].push(handler);}function once(event,handler){var handleAndRemove=function handleAndRemove(){off(event,handleAndRemove);handler(...arguments);};events[event].push(handleAndRemove);}function off(event,handler){if(!event)return Object.keys(events).forEach(ev=>events[ev]=[]);if(!handler)return events[event]=[];events[event]=events[event].filter(ev=>ev!==handler);}function trigger(event){for(var _len12=arguments.length,args=new Array(_len12>1?_len12-1:0),_key12=1;_key12<_len12;_key12++){args[_key12-1]=arguments[_key12];}events[event].forEach(handler=>handler(...args));}var processingScheduled=false;function _insert(data,insertAtFront,rejectOnError,callback){if(callback!=null&&typeof callback!=='function'){throw new Error('task callback must be a function');}q.started=true;var res,rej;function promiseCallback(err){// we don't care about the error, let the global error handler
// deal with it
if(err)return rejectOnError?rej(err):res();for(var _len13=arguments.length,args=new Array(_len13>1?_len13-1:0),_key13=1;_key13<_len13;_key13++){args[_key13-1]=arguments[_key13];}if(args.length<=1)return res(args[0]);res(args);}var item=q._createTaskItem(data,rejectOnError?promiseCallback:callback||promiseCallback);if(insertAtFront){q._tasks.unshift(item);}else {q._tasks.push(item);}if(!processingScheduled){processingScheduled=true;setImmediate$1(()=>{processingScheduled=false;q.process();});}if(rejectOnError||!callback){return new Promise((resolve,reject)=>{res=resolve;rej=reject;});}}function _createCB(tasks){return function(err){numRunning-=1;for(var _len14=arguments.length,args=new Array(_len14>1?_len14-1:0),_key14=1;_key14<_len14;_key14++){args[_key14-1]=arguments[_key14];}for(var i=0,l=tasks.length;i<l;i++){var task=tasks[i];var index=workersList.indexOf(task);if(index===0){workersList.shift();}else if(index>0){workersList.splice(index,1);}task.callback(err,...args);if(err!=null){trigger('error',err,task.data);}}if(numRunning<=q.concurrency-q.buffer){trigger('unsaturated');}if(q.idle()){trigger('drain');}q.process();};}function _maybeDrain(data){if(data.length===0&&q.idle()){// call drain immediately if there are no tasks
setImmediate$1(()=>trigger('drain'));return true;}return false;}var eventMethod=name=>handler=>{if(!handler){return new Promise((resolve,reject)=>{once(name,(err,data)=>{if(err)return reject(err);resolve(data);});});}off(name);on(name,handler);};var isProcessing=false;var q={_tasks:new DLL(),_createTaskItem(data,callback){return {data,callback};},*[Symbol.iterator](){yield*q._tasks[Symbol.iterator]();},concurrency,payload,buffer:concurrency/4,started:false,paused:false,push(data,callback){if(Array.isArray(data)){if(_maybeDrain(data))return;return data.map(datum=>_insert(datum,false,false,callback));}return _insert(data,false,false,callback);},pushAsync(data,callback){if(Array.isArray(data)){if(_maybeDrain(data))return;return data.map(datum=>_insert(datum,false,true,callback));}return _insert(data,false,true,callback);},kill(){off();q._tasks.empty();},unshift(data,callback){if(Array.isArray(data)){if(_maybeDrain(data))return;return data.map(datum=>_insert(datum,true,false,callback));}return _insert(data,true,false,callback);},unshiftAsync(data,callback){if(Array.isArray(data)){if(_maybeDrain(data))return;return data.map(datum=>_insert(datum,true,true,callback));}return _insert(data,true,true,callback);},remove(testFn){q._tasks.remove(testFn);},process(){// Avoid trying to start too many processing operations. This can occur
// when callbacks resolve synchronously (#1267).
if(isProcessing){return;}isProcessing=true;while(!q.paused&&numRunning<q.concurrency&&q._tasks.length){var tasks=[],data=[];var l=q._tasks.length;if(q.payload)l=Math.min(l,q.payload);for(var i=0;i<l;i++){var node=q._tasks.shift();tasks.push(node);workersList.push(node);data.push(node.data);}numRunning+=1;if(q._tasks.length===0){trigger('empty');}if(numRunning===q.concurrency){trigger('saturated');}var cb=onlyOnce(_createCB(tasks));_worker(data,cb);}isProcessing=false;},length(){return q._tasks.length;},running(){return numRunning;},workersList(){return workersList;},idle(){return q._tasks.length+numRunning===0;},pause(){q.paused=true;},resume(){if(q.paused===false){return;}q.paused=false;setImmediate$1(q.process);}};// define these as fixed properties, so people get useful errors when updating
Object.defineProperties(q,{saturated:{writable:false,value:eventMethod('saturated')},unsaturated:{writable:false,value:eventMethod('unsaturated')},empty:{writable:false,value:eventMethod('empty')},drain:{writable:false,value:eventMethod('drain')},error:{writable:false,value:eventMethod('error')}});return q;}/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee completes with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];
 *
 * // asynchronous function that computes the file size in bytes
 * // file size is added to the memoized value, then returned
 * function getFileSizeInBytes(memo, file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, memo + stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(result);
 *     }
 * });
 *
 * // Using Promises
 * async.reduce(fileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 *     // 6000
 *     // which is the sum of the file sizes of the three files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */function reduce(coll,memo,iteratee,callback){callback=once(callback);var _iteratee=wrapAsync(iteratee);return eachOfSeries$1(coll,(x,i,iterCb)=>{_iteratee(memo,x,(err,v)=>{memo=v;iterCb(err);});},err=>callback(err,memo));}awaitify(reduce,4);/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */function mapLimit(coll,limit,iteratee,callback){return _asyncMap(eachOfLimit(limit),coll,iteratee,callback);}var mapLimit$1=awaitify(mapLimit,4);/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapLimit
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */function concatLimit(coll,limit,iteratee,callback){var _iteratee=wrapAsync(iteratee);return mapLimit$1(coll,limit,(val,iterCb)=>{_iteratee(val,function(err){if(err)return iterCb(err);for(var _len15=arguments.length,args=new Array(_len15>1?_len15-1:0),_key15=1;_key15<_len15;_key15++){args[_key15-1]=arguments[_key15];}return iterCb(err,args);});},(err,mapResults)=>{var result=[];for(var i=0;i<mapResults.length;i++){if(mapResults[i]){result=result.concat(...mapResults[i]);}}return callback(err,result);});}var concatLimit$1=awaitify(concatLimit,4);/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. The results array will be returned in
 * the original order of `coll` passed to the `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @alias flatMap
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * let directoryList = ['dir1','dir2','dir3'];
 * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];
 *
 * // Using callbacks
 * async.concat(directoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *    }
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *        // [ Error: ENOENT: no such file or directory ]
 *        // since dir4 does not exist
 *    } else {
 *        console.log(results);
 *    }
 * });
 *
 * // Using Promises
 * async.concat(directoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 * }).catch(err => {
 *      console.log(err);
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 * }).catch(err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4 does not exist
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.concat(directoryList, fs.readdir);
 *         console.log(results);
 *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *     } catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.concat(withMissingDirectoryList, fs.readdir);
 *         console.log(results);
 *     } catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4 does not exist
 *     }
 * }
 *
 */function concat(coll,iteratee,callback){return concatLimit$1(coll,Infinity,iteratee,callback);}awaitify(concat,3);/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapSeries
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */function concatSeries(coll,iteratee,callback){return concatLimit$1(coll,1,iteratee,callback);}awaitify(concatSeries,3);function _createTester(check,getResult){return (eachfn,arr,_iteratee,cb)=>{var testPassed=false;var testResult;var iteratee=wrapAsync(_iteratee);eachfn(arr,(value,_,callback)=>{iteratee(value,(err,result)=>{if(err||err===false)return callback(err);if(check(result)&&!testResult){testPassed=true;testResult=getResult(true,value);return callback(null,breakLoop);}callback();});},err=>{if(err)return cb(err);cb(null,testPassed?testResult:getResult(false));});};}/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // dir1/file1.txt
 *        // result now equals the first file in the list that exists
 *    }
 *);
 *
 * // Using Promises
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)
 * .then(result => {
 *     console.log(result);
 *     // dir1/file1.txt
 *     // result now equals the first file in the list that exists
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);
 *         console.log(result);
 *         // dir1/file1.txt
 *         // result now equals the file in the list that exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */function detect(coll,iteratee,callback){return _createTester(bool=>bool,(res,item)=>item)(eachOf$1,coll,iteratee,callback);}awaitify(detect,3);/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 */function detectLimit(coll,limit,iteratee,callback){return _createTester(bool=>bool,(res,item)=>item)(eachOfLimit(limit),coll,iteratee,callback);}awaitify(detectLimit,4);/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 */function detectSeries(coll,iteratee,callback){return _createTester(bool=>bool,(res,item)=>item)(eachOfLimit(1),coll,iteratee,callback);}awaitify(detectSeries,3);/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */function doWhilst(iteratee,test,callback){callback=onlyOnce(callback);var _fn=wrapAsync(iteratee);var _test=wrapAsync(test);var results;function next(err){if(err)return callback(err);if(err===false)return;for(var _len16=arguments.length,args=new Array(_len16>1?_len16-1:0),_key16=1;_key16<_len16;_key16++){args[_key16-1]=arguments[_key16];}results=args;_test(...args,check);}function check(err,truth){if(err)return callback(err);if(err===false)return;if(!truth)return callback(null,...results);_fn(next);}return check(null,true);}awaitify(doWhilst,3);function _withoutIndex(iteratee){return (value,index,callback)=>iteratee(value,callback);}/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];
 * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];
 *
 * // asynchronous function that deletes a file
 * const deleteFile = function(file, callback) {
 *     fs.unlink(file, callback);
 * };
 *
 * // Using callbacks
 * async.each(fileList, deleteFile, function(err) {
 *     if( err ) {
 *         console.log(err);
 *     } else {
 *         console.log('All files have been deleted successfully');
 *     }
 * });
 *
 * // Error Handling
 * async.each(withMissingFileList, deleteFile, function(err){
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using Promises
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         await async.each(files, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         await async.each(withMissingFileList, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4/file2.txt does not exist
 *         // dir1/file1.txt could have been deleted
 *     }
 * }
 *
 */function eachLimit(coll,iteratee,callback){return eachOf$1(coll,_withoutIndex(wrapAsync(iteratee)),callback);}awaitify(eachLimit,3);/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */function eachLimit$1(coll,limit,iteratee,callback){return eachOfLimit(limit)(coll,_withoutIndex(wrapAsync(iteratee)),callback);}var eachLimit$2=awaitify(eachLimit$1,4);/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item
 * in series and therefore the iteratee functions will complete in order.

 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */function eachSeries(coll,iteratee,callback){return eachLimit$2(coll,1,iteratee,callback);}var eachSeries$1=awaitify(eachSeries,3);/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */function ensureAsync(fn){if(isAsync(fn))return fn;return function(){for(var _len17=arguments.length,args=new Array(_len17),_key17=0;_key17<_len17;_key17++){args[_key17]=arguments[_key17];}var callback=args.pop();var sync=true;args.push(function(){for(var _len18=arguments.length,innerArgs=new Array(_len18),_key18=0;_key18<_len18;_key18++){innerArgs[_key18]=arguments[_key18];}if(sync){setImmediate$1(()=>callback(...innerArgs));}else {callback(...innerArgs);}});fn.apply(this,args);sync=false;};}/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.every(fileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * });
 *
 * async.every(withMissingFileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * });
 *
 * // Using Promises
 * async.every(fileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.every(withMissingFileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.every(fileList, fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.every(withMissingFileList, fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since NOT every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */function every(coll,iteratee,callback){return _createTester(bool=>!bool,res=>!res)(eachOf$1,coll,iteratee,callback);}awaitify(every,3);/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */function everyLimit(coll,limit,iteratee,callback){return _createTester(bool=>!bool,res=>!res)(eachOfLimit(limit),coll,iteratee,callback);}awaitify(everyLimit,4);/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */function everySeries(coll,iteratee,callback){return _createTester(bool=>!bool,res=>!res)(eachOfSeries$1,coll,iteratee,callback);}awaitify(everySeries,3);function filterArray(eachfn,arr,iteratee,callback){var truthValues=new Array(arr.length);eachfn(arr,(x,index,iterCb)=>{iteratee(x,(err,v)=>{truthValues[index]=!!v;iterCb(err);});},err=>{if(err)return callback(err);var results=[];for(var i=0;i<arr.length;i++){if(truthValues[i])results.push(arr[i]);}callback(null,results);});}function filterGeneric(eachfn,coll,iteratee,callback){var results=[];eachfn(coll,(x,index,iterCb)=>{iteratee(x,(err,v)=>{if(err)return iterCb(err);if(v){results.push({index,value:x});}iterCb(err);});},err=>{if(err)return callback(err);callback(null,results.sort((a,b)=>a.index-b.index).map(v=>v.value));});}function _filter(eachfn,coll,iteratee,callback){var filter=isArrayLike(coll)?filterArray:filterGeneric;return filter(eachfn,coll,wrapAsync(iteratee),callback);}/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.filter(files, fileExists, function(err, results) {
 *    if(err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *        // results is now an array of the existing files
 *    }
 * });
 *
 * // Using Promises
 * async.filter(files, fileExists)
 * .then(results => {
 *     console.log(results);
 *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *     // results is now an array of the existing files
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.filter(files, fileExists);
 *         console.log(results);
 *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *         // results is now an array of the existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */function filter(coll,iteratee,callback){return _filter(eachOf$1,coll,iteratee,callback);}awaitify(filter,3);/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 */function filterLimit(coll,limit,iteratee,callback){return _filter(eachOfLimit(limit),coll,iteratee,callback);}awaitify(filterLimit,4);/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 * @returns {Promise} a promise, if no callback provided
 */function filterSeries(coll,iteratee,callback){return _filter(eachOfSeries$1,coll,iteratee,callback);}awaitify(filterSeries,3);/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @returns {Promise} a promise that rejects if an error occurs and an errback
 * is not passed
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */function forever(fn,errback){var done=onlyOnce(errback);var task=wrapAsync(ensureAsync(fn));function next(err){if(err)return done(err);if(err===false)return;task(next);}return next();}awaitify(forever,2);/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */function groupByLimit(coll,limit,iteratee,callback){var _iteratee=wrapAsync(iteratee);return mapLimit$1(coll,limit,(val,iterCb)=>{_iteratee(val,(err,key)=>{if(err)return iterCb(err);return iterCb(err,{key,val});});},(err,mapResults)=>{var result={};// from MDN, handle object having an `hasOwnProperty` prop
var{hasOwnProperty}=Object.prototype;for(var i=0;i<mapResults.length;i++){if(mapResults[i]){var{key}=mapResults[i];var{val}=mapResults[i];if(hasOwnProperty.call(result,key)){result[key].push(val);}else {result[key]=[val];}}}return callback(err,result);});}awaitify(groupByLimit,4);/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */function mapValuesLimit(obj,limit,iteratee,callback){callback=once(callback);var newObj={};var _iteratee=wrapAsync(iteratee);return eachOfLimit(limit)(obj,(val,key,next)=>{_iteratee(val,key,(err,result)=>{if(err)return next(err);newObj[key]=result;next(err);});},err=>callback(err,newObj));}awaitify(mapValuesLimit,4);if(hasNextTick){browser$1.nextTick;}else if(hasSetImmediate){setImmediate;}else;awaitify((eachfn,tasks,callback)=>{var results=isArrayLike(tasks)?[]:{};eachfn(tasks,(task,key,taskCb)=>{wrapAsync(task)(function(err){for(var _len19=arguments.length,result=new Array(_len19>1?_len19-1:0),_key19=1;_key19<_len19;_key19++){result[_key19-1]=arguments[_key19];}if(result.length<2){[result]=result;}results[key]=result;taskCb(err);});},err=>callback(err,results));},3);/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Iterable} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {number} payload - an integer that specifies how many items are
 * passed to the worker function at a time. only applies if this is a
 * [cargo]{@link module:ControlFlow.cargo} object
 * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns
 * a promise that rejects if an error occurs.
 * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns
 * a promise that rejects if an error occurs.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a function that sets a callback that is
 * called when the number of running workers hits the `concurrency` limit, and
 * further tasks will be queued.  If the callback is omitted, `q.saturated()`
 * returns a promise for the next occurrence.
 * @property {Function} unsaturated - a function that sets a callback that is
 * called when the number of running workers is less than the `concurrency` &
 * `buffer` limits, and further tasks will not be queued. If the callback is
 * omitted, `q.unsaturated()` returns a promise for the next occurrence.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a function that sets a callback that is called
 * when the last item from the `queue` is given to a `worker`. If the callback
 * is omitted, `q.empty()` returns a promise for the next occurrence.
 * @property {Function} drain - a function that sets a callback that is called
 * when the last item from the `queue` has returned from the `worker`. If the
 * callback is omitted, `q.drain()` returns a promise for the next occurrence.
 * @property {Function} error - a function that sets a callback that is called
 * when a task errors. Has the signature `function(error, task)`. If the
 * callback is omitted, `error()` returns a promise that rejects on the next
 * error.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 *
 * @example
 * const q = async.queue(worker, 2)
 * q.push(item1)
 * q.push(item2)
 * q.push(item3)
 * // queues are iterable, spread into an array to inspect
 * const items = [...q] // [item1, item2, item3]
 * // or use for of
 * for (let item of q) {
 *     console.log(item)
 * }
 *
 * q.drain(() => {
 *     console.log('all done')
 * })
 * // or
 * await q.drain()
 */ /**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain(function() {
 *     console.log('all items have been processed');
 * });
 * // or await the end
 * await q.drain()
 *
 * // assign an error callback
 * q.error(function(err, task) {
 *     console.error('task experienced an error');
 * });
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * // callback is optional
 * q.push({name: 'bar'});
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */function queue$1(worker,concurrency){var _worker=wrapAsync(worker);return queue((items,cb)=>{_worker(items[0],cb);},concurrency,1);}/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */function race(tasks,callback){callback=once(callback);if(!Array.isArray(tasks))return callback(new TypeError('First argument to race must be an array of functions'));if(!tasks.length)return callback();for(var i=0,l=tasks.length;i<l;i++){wrapAsync(tasks[i])(callback);}}awaitify(race,2);function reject(eachfn,arr,_iteratee,callback){var iteratee=wrapAsync(_iteratee);return _filter(eachfn,arr,(value,cb)=>{iteratee(value,(err,v)=>{cb(err,!v);});},callback);}/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.reject(fileList, fileExists, function(err, results) {
 *    // [ 'dir3/file6.txt' ]
 *    // results now equals an array of the non-existing files
 * });
 *
 * // Using Promises
 * async.reject(fileList, fileExists)
 * .then( results => {
 *     console.log(results);
 *     // [ 'dir3/file6.txt' ]
 *     // results now equals an array of the non-existing files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.reject(fileList, fileExists);
 *         console.log(results);
 *         // [ 'dir3/file6.txt' ]
 *         // results now equals an array of the non-existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */function reject$1(coll,iteratee,callback){return reject(eachOf$1,coll,iteratee,callback);}awaitify(reject$1,3);/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */function rejectLimit(coll,limit,iteratee,callback){return reject(eachOfLimit(limit),coll,iteratee,callback);}awaitify(rejectLimit,4);/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */function rejectSeries(coll,iteratee,callback){return reject(eachOfSeries$1,coll,iteratee,callback);}awaitify(rejectSeries,3);/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // true
 *        // result is true since some file in the list exists
 *    }
 *);
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // false
 *        // result is false since none of the files exists
 *    }
 *);
 *
 * // Using Promises
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since some file in the list exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since none of the files exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since some file in the list exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since none of the files exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */function some(coll,iteratee,callback){return _createTester(Boolean,res=>res)(eachOf$1,coll,iteratee,callback);}awaitify(some,3);/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */function someLimit(coll,limit,iteratee,callback){return _createTester(Boolean,res=>res)(eachOfLimit(limit),coll,iteratee,callback);}awaitify(someLimit,4);/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */function someSeries(coll,iteratee,callback){return _createTester(Boolean,res=>res)(eachOfSeries$1,coll,iteratee,callback);}awaitify(someSeries,3);/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback passed
 * @example
 *
 * // bigfile.txt is a file that is 251100 bytes in size
 * // mediumfile.txt is a file that is 11000 bytes in size
 * // smallfile.txt is a file that is 121 bytes in size
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) return callback(getFileSizeErr);
 *         callback(null, fileSize);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // descending order
 * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) {
 *             return callback(getFileSizeErr);
 *         }
 *         callback(null, fileSize * -1);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']
 *         }
 *     }
 * );
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *             // [ Error: ENOENT: no such file or directory ]
 *         } else {
 *             console.log(results);
 *         }
 *     }
 * );
 *
 * // Using Promises
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now the original array of files sorted by
 *     // file size (ascending by default), e.g.
 *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * (async () => {
 *     try {
 *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *         // results is now the original array of files sorted by
 *         // file size (ascending by default), e.g.
 *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * })();
 *
 * // Error handling
 * async () => {
 *     try {
 *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */function sortBy(coll,iteratee,callback){var _iteratee=wrapAsync(iteratee);return map$1(coll,(x,iterCb)=>{_iteratee(x,(err,criteria)=>{if(err)return iterCb(err);iterCb(err,{value:x,criteria});});},(err,results)=>{if(err)return callback(err);callback(null,results.sort(comparator).map(v=>v.value));});function comparator(left,right){var a=left.criteria,b=right.criteria;return a<b?-1:a>b?1:0;}}awaitify(sortBy,3);/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */function tryEach(tasks,callback){var error=null;var result;return eachSeries$1(tasks,(task,taskCb)=>{wrapAsync(task)(function(err){if(err===false)return taskCb(err);for(var _len20=arguments.length,args=new Array(_len20>1?_len20-1:0),_key20=1;_key20<_len20;_key20++){args[_key20-1]=arguments[_key20];}if(args.length<2){[result]=args;}else {result=args;}error=err;taskCb(err?null:{});});},()=>callback(error,result));}awaitify(tryEach);/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function test(cb) { cb(null, count < 5); },
 *     function iter(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */function whilst(test,iteratee,callback){callback=onlyOnce(callback);var _fn=wrapAsync(iteratee);var _test=wrapAsync(test);var results=[];function next(err){if(err)return callback(err);for(var _len21=arguments.length,rest=new Array(_len21>1?_len21-1:0),_key21=1;_key21<_len21;_key21++){rest[_key21-1]=arguments[_key21];}results=rest;if(err===false)return;_test(check);}function check(err,truth){if(err)return callback(err);if(err===false)return;if(!truth)return callback(null,...results);_fn(next);}return _test(check);}awaitify(whilst,3);/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */function waterfall(tasks,callback){callback=once(callback);if(!Array.isArray(tasks))return callback(new Error('First argument to waterfall must be an array of functions'));if(!tasks.length)return callback();var taskIndex=0;function nextTask(args){var task=wrapAsync(tasks[taskIndex++]);task(...args,onlyOnce(next));}function next(err){if(err===false)return;for(var _len22=arguments.length,args=new Array(_len22>1?_len22-1:0),_key22=1;_key22<_len22;_key22++){args[_key22-1]=arguments[_key22];}if(err||taskIndex===tasks.length){return callback(err,...args);}nextTask(args);}nextTask([]);}awaitify(waterfall);function processTasks(task,finishedCallback){return __awaiter$1(this,void 0,void 0,function*(){try{yield task();finishedCallback();}catch(e){finishedCallback(e);}});}class AsyncQueue{constructor(){this.queue=queue$1(processTasks,1);}push(task){return this.queue.pushAsync(task);}empty(){return this.queue.empty();}}var NOISE_REDUCTION_KIND='noise-reduction-effect';var VIRTUAL_BACKGROUND_KIND='virtual-background-effect';var isNoiseReductionEffect=effect=>{return (effect===null||effect===void 0?void 0:effect.kind)===NOISE_REDUCTION_KIND;};var isVirtualBackgroundEffect=effect=>{return (effect===null||effect===void 0?void 0:effect.kind)===VIRTUAL_BACKGROUND_KIND;};var OfferAnswerType;(function(OfferAnswerType){OfferAnswerType[OfferAnswerType["LocalOnly"]=0]="LocalOnly";OfferAnswerType[OfferAnswerType["Remote"]=1]="Remote";})(OfferAnswerType||(OfferAnswerType={}));class SendOnlyTransceiver extends Transceiver{constructor(config){super(config);this.rtxEnabled=false;this.dtxDisabled=true;this.streamMuteStateChange=new TypedEvent();this.streamReadyStateChanged=new TypedEvent();this.streamPublishStateChange=new TypedEvent();this.negotiationNeeded=new TypedEvent();this.namedMediaGroupsChange=new TypedEvent();this.requestedIdEncodingParamsMap=new Map();this.updateSendParametersQueue=new AsyncQueue();this.sourceStateOverrideChange=new TypedEvent();this.metadata={lastRequestedUpdateTimestampsMap:new Map()};this.munger=config.munger;this.csi=config.csi;this.direction='sendrecv';this.handleTrackChange=this.handleTrackChange.bind(this);this.handleStreamConstraintsChange=this.handleStreamConstraintsChange.bind(this);this.handleStreamMuteStateChange=this.handleStreamMuteStateChange.bind(this);this.handleStreamEnded=this.handleStreamEnded.bind(this);}replaceSenderSource(stream){var _a,_b;return __awaiter$1(this,void 0,void 0,function*(){var trackOrNull=(_a=stream===null||stream===void 0?void 0:stream.outputStream.getTracks()[0])!==null&&_a!==void 0?_a:null;if(((_b=this.sender.track)===null||_b===void 0?void 0:_b.id)!==(trackOrNull===null||trackOrNull===void 0?void 0:trackOrNull.id)){yield this.sender.replaceTrack(trackOrNull);if(trackOrNull){logger.log("Sender source for ".concat(this.mediaType," replaced with track ID ").concat(trackOrNull.id));}else {logger.log("Sender source for ".concat(this.mediaType," set to null, sender stopped"));}}});}handleTrackChange(){return __awaiter$1(this,void 0,void 0,function*(){if(this.requested){yield this.replaceSenderSource(this.publishedStream);}});}handleStreamConstraintsChange(){return __awaiter$1(this,void 0,void 0,function*(){yield this.updateSendParameters(this.requestedIdEncodingParamsMap);});}handleStreamMuteStateChange(){this.streamMuteStateChange.emit();}handleStreamEnded(){this.streamReadyStateChanged.emit();}get requested(){return this.requestedIdEncodingParamsMap.size>0;}replaceTransceiver(newRtcRtpTransceiver){var _super=Object.create(null,{replaceTransceiver:{get:()=>super.replaceTransceiver}});return __awaiter$1(this,void 0,void 0,function*(){_super.replaceTransceiver.call(this,newRtcRtpTransceiver);newRtcRtpTransceiver.direction=this.direction;if(this.requested){yield this.replaceSenderSource(this.publishedStream);}});}replacePublishedStream(newStream){return __awaiter$1(this,void 0,void 0,function*(){var oldStream=this.publishedStream;oldStream===null||oldStream===void 0?void 0:oldStream.off(exports.LocalStreamEventNames.OutputTrackChange,this.handleTrackChange);oldStream===null||oldStream===void 0?void 0:oldStream.off(exports.LocalStreamEventNames.ConstraintsChange,this.handleStreamConstraintsChange);oldStream===null||oldStream===void 0?void 0:oldStream.off(exports.LocalStreamEventNames.UserMuteStateChange,this.handleStreamMuteStateChange);oldStream===null||oldStream===void 0?void 0:oldStream.off(exports.LocalStreamEventNames.SystemMuteStateChange,this.handleStreamMuteStateChange);oldStream===null||oldStream===void 0?void 0:oldStream.off(exports.StreamEventNames.Ended,this.handleStreamEnded);if(this.requested){yield this.replaceSenderSource(newStream);}this.publishedStream=newStream;newStream===null||newStream===void 0?void 0:newStream.on(exports.LocalStreamEventNames.OutputTrackChange,this.handleTrackChange);newStream===null||newStream===void 0?void 0:newStream.on(exports.LocalStreamEventNames.ConstraintsChange,this.handleStreamConstraintsChange);newStream===null||newStream===void 0?void 0:newStream.on(exports.LocalStreamEventNames.UserMuteStateChange,this.handleStreamMuteStateChange);newStream===null||newStream===void 0?void 0:newStream.on(exports.LocalStreamEventNames.SystemMuteStateChange,this.handleStreamMuteStateChange);newStream===null||newStream===void 0?void 0:newStream.on(exports.StreamEventNames.Ended,this.handleStreamEnded);if(!oldStream&&newStream||oldStream&&!newStream){this.streamPublishStateChange.emit();}if(oldStream&&newStream){if(oldStream.muted!==newStream.muted){this.streamMuteStateChange.emit();}if(oldStream.readyState!==newStream.readyState){this.streamReadyStateChanged.emit();}}});}setNamedMediaGroups(namedMediaGroups){if(this.mediaType!==exports.MediaType.AudioMain){logErrorAndThrow(exports.WcmeErrorType.SET_NMG_FAILED,"Named media groups can only be set for audio.");}this.namedMediaGroups=namedMediaGroups;this.namedMediaGroupsChange.emit();}publishStream(stream){return this.replacePublishedStream(stream);}unpublishStream(){return this.replacePublishedStream();}get active(){return this._rtcRtpTransceiver.direction==='sendrecv';}set active(enabled){this.direction=enabled?'sendrecv':'inactive';this._rtcRtpTransceiver.direction=this.direction;if(this._rtcRtpTransceiver.direction!==this._rtcRtpTransceiver.currentDirection){this.negotiationNeeded.emit(OfferAnswerType.Remote);}}getStats(){return __awaiter$1(this,void 0,void 0,function*(){var statsMap=new Map();var statsReport=yield this.sender.getStats();statsReport.forEach((stats,key)=>{var _a,_b,_c,_d,_e;if(stats.type==='outbound-rtp'){stats.mid=this.mid;stats.csi=this.csi;stats.sourceState=this.currentSourceState;stats.calliopeMediaType=this.mediaType;var senderId=this.munger.getSenderIds().find(id=>id.ssrc===stats.ssrc);if(senderId){var encodingIndex=this.getEncodingIndexForStreamId(senderId);var encodingParams=this.requestedIdEncodingParamsMap.get(encodingIndex);stats.requestedBitrate=encodingParams===null||encodingParams===void 0?void 0:encodingParams.maxPayloadBitsPerSecond;stats.requestedFrameSize=encodingParams===null||encodingParams===void 0?void 0:encodingParams.maxFs;stats.isRequested=!!encodingParams;stats.lastRequestedUpdateTimestamp=this.metadata.lastRequestedUpdateTimestampsMap.get(encodingIndex);}var effect=(_b=(_a=this.publishedStream)===null||_a===void 0?void 0:_a.getEffects())===null||_b===void 0?void 0:_b[0];if(effect===null||effect===void 0?void 0:effect.isEnabled){if(isNoiseReductionEffect(effect)){stats.effect={kind:effect.kind,noiseReductionMode:'LOW_POWER'};}else if(isVirtualBackgroundEffect(effect)){stats.effect={kind:effect.kind,virtualBackgroundMode:(_c=effect.options)===null||_c===void 0?void 0:_c.mode};}else {stats.effect={kind:effect.kind};}}var trackSettings=(_d=this.publishedStream)===null||_d===void 0?void 0:_d.getSettings();if(trackSettings===null||trackSettings===void 0?void 0:trackSettings.frameRate){stats.targetFrameRate=trackSettings===null||trackSettings===void 0?void 0:trackSettings.frameRate;}}else if(stats.type==='media-source'){stats.calliopeMediaType=this.mediaType;stats.trackLabel=(_e=this.publishedStream)===null||_e===void 0?void 0:_e.label;}statsMap.set(key,stats);});return statsMap;});}updateSendParameters(requestedIdEncodingParamsMap){return __awaiter$1(this,void 0,void 0,function*(){return this.updateSendParametersQueue.push(()=>__awaiter$1(this,void 0,void 0,function*(){var sendParameters=this.sender.getParameters();sendParameters.encodings.forEach((encoding,index)=>{var _a,_b;var encodingParams=requestedIdEncodingParamsMap.get(index);encoding.active=!!encodingParams;if(encodingParams){var{maxPayloadBitsPerSecond,maxFs,maxWidth,maxHeight}=encodingParams;var scaleDownRatio=getScaleDownRatio((_a=this.publishedStream)===null||_a===void 0?void 0:_a.getSettings().width,(_b=this.publishedStream)===null||_b===void 0?void 0:_b.getSettings().height,maxFs,maxWidth,maxHeight);if(maxPayloadBitsPerSecond!==undefined&&maxPayloadBitsPerSecond>=0){encoding.maxBitrate=maxPayloadBitsPerSecond;}if(scaleDownRatio!==undefined&&scaleDownRatio>=1.0){encoding.scaleResolutionDownBy=scaleDownRatio;}}});yield this.sender.setParameters(sendParameters);logger.log("Sender parameters for ".concat(this.mediaType," set to ").concat(JSON.stringify(sendParameters)));var timestamp=getCurrentTimestamp();requestedIdEncodingParamsMap.forEach((_,index)=>{if(!this.requestedIdEncodingParamsMap.has(index)){this.metadata.lastRequestedUpdateTimestampsMap.set(index,timestamp);}});this.requestedIdEncodingParamsMap.forEach((_,index)=>{if(!requestedIdEncodingParamsMap.has(index)){this.metadata.lastRequestedUpdateTimestampsMap.set(index,timestamp);}});var oldRequested=this.requested;var newRequested=requestedIdEncodingParamsMap.size>0;this.requestedIdEncodingParamsMap=requestedIdEncodingParamsMap;if(oldRequested!==newRequested){yield this.replaceSenderSource(newRequested?this.publishedStream:null);}}));});}isSimulcastEnabled(){var params=this.sender.getParameters();return params.encodings.length>1;}mungeLocalDescription(mediaDescription){this.munger.mungeLocalDescription(mediaDescription,{simulcastEnabled:this.isSimulcastEnabled(),rtxEnabled:this.rtxEnabled,twccDisabled:this.twccDisabled,forceSoftwareEncoder:this.mediaType===exports.MediaType.VideoSlides&&(BrowserInfo.isWindows()||BrowserInfo.isMac())&&(BrowserInfo.isChrome()||BrowserInfo.isEdge())});}mungeLocalDescriptionForRemoteServer(mediaDescription){var mungeOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{injectDummyCandidates:true};this.munger.mungeLocalDescriptionForRemoteServer(mediaDescription,getMediaContent(this.mediaType),this.csi,mungeOptions);}mungeRemoteDescription(mediaDescription){this.munger.mungeRemoteDescription(mediaDescription,{dtxDisabled:this.dtxDisabled});}get senderIds(){return this.munger.getSenderIds();}get numActiveSimulcastLayers(){var _a;if(getMediaFamily(this.mediaType)===exports.MediaFamily.Video){return (_a=this.publishedStream)===null||_a===void 0?void 0:_a.getNumActiveSimulcastLayers();}return this.publishedStream?0:undefined;}getEncodingIndexForStreamId(id){return this.munger.getEncodingIndexForStreamId(id);}resetSdpMunger(){this.munger.reset();}setCodecParameters(parameters){this.munger.setCodecParameters(parameters);this.negotiationNeeded.emit(OfferAnswerType.LocalOnly);}deleteCodecParameters(parameters){this.munger.deleteCodecParameters(parameters);this.negotiationNeeded.emit(OfferAnswerType.LocalOnly);}setSourceStateOverride(state){if(getMediaFamily(this.mediaType)!==exports.MediaFamily.Video){logErrorAndThrow(exports.WcmeErrorType.SET_SOURCE_STATE_OVERRIDE_FAILED,"Source state can only be overridden for video.");}this.sourceStateOverride=state;this.sourceStateOverrideChange.emit();}get currentSourceState(){if(getMediaFamily(this.mediaType)!==exports.MediaFamily.Video){return undefined;}if(this.sourceStateOverride){return this.sourceStateOverride;}if(!this.publishedStream){return 'no source';}if(this.publishedStream.muted){return 'avatar';}return 'live';}}class SendSlot{constructor(sendTransceiver){this.sendTransceiver=sendTransceiver;}publishStream(stream){return __awaiter$1(this,void 0,void 0,function*(){if(stream===this.sendTransceiver.publishedStream){return Promise.resolve();}return this.sendTransceiver.publishStream(stream);});}unpublishStream(){return __awaiter$1(this,void 0,void 0,function*(){if(!this.sendTransceiver.publishedStream){return Promise.resolve();}return this.sendTransceiver.unpublishStream();});}setNamedMediaGroups(namedMediaGroups){this.sendTransceiver.setNamedMediaGroups(namedMediaGroups);}clearNamedMediaGroups(){this.setNamedMediaGroups([]);}get active(){return this.sendTransceiver.active;}set active(active){this.sendTransceiver.active=active;}setCodecParameters(parameters){return __awaiter$1(this,void 0,void 0,function*(){this.sendTransceiver.setCodecParameters(parameters);});}deleteCodecParameters(parameters){return __awaiter$1(this,void 0,void 0,function*(){this.sendTransceiver.deleteCodecParameters(parameters);});}setSourceStateOverride(state){this.sendTransceiver.setSourceStateOverride(state);}clearSourceStateOverride(){this.sendTransceiver.setSourceStateOverride(undefined);}}var organizeTransceiverStats=(sendTransceivers,recvTransceivers,peerConnectionStats)=>__awaiter$1(void 0,void 0,void 0,function*(){var result={audio:{senders:[],receivers:[]},video:{senders:[],receivers:[]},screenShareAudio:{senders:[],receivers:[]},screenShareVideo:{senders:[],receivers:[]}};yield Promise.all([...sendTransceivers.entries()].map(_ref7=>{var[mediaType,transceiver]=_ref7;return __awaiter$1(void 0,void 0,void 0,function*(){var _a;var item={report:yield transceiver.getStats(),mid:transceiver.mid,csi:transceiver.csi,currentDirection:'sendonly',localTrackLabel:(_a=transceiver.publishedStream)===null||_a===void 0?void 0:_a.label};if(peerConnectionStats&&peerConnectionStats.id){item.report.set(peerConnectionStats.id,peerConnectionStats);}if(mediaType===exports.MediaType.AudioMain){result.audio.senders.push(item);}if(mediaType===exports.MediaType.VideoMain){result.video.senders.push(item);}if(mediaType===exports.MediaType.AudioSlides){result.screenShareAudio.senders.push(item);}if(mediaType===exports.MediaType.VideoSlides){result.screenShareVideo.senders.push(item);}});}));yield Promise.all([...recvTransceivers.entries()].map(_ref8=>{var[mediaType,transceivers]=_ref8;return __awaiter$1(void 0,void 0,void 0,function*(){return Promise.all(transceivers.map(t=>__awaiter$1(void 0,void 0,void 0,function*(){var _b;var item={report:yield t.getStats(),csi:t.receiveSlot.currentRxCsi,currentDirection:'recvonly',localTrackLabel:(_b=t.receiveSlot.stream.getTracks()[0])===null||_b===void 0?void 0:_b.label};if(peerConnectionStats&&peerConnectionStats.id){item.report.set(peerConnectionStats.id,peerConnectionStats);}if(mediaType===exports.MediaType.AudioMain){result.audio.receivers.push(item);}if(mediaType===exports.MediaType.VideoMain){result.video.receivers.push(item);}if(mediaType===exports.MediaType.AudioSlides){result.screenShareAudio.receivers.push(item);}if(mediaType===exports.MediaType.VideoSlides){result.screenShareVideo.receivers.push(item);}})));});}));return result;});function toMediaStreamTrackKind(mediaType){return [exports.MediaType.VideoMain,exports.MediaType.VideoSlides].includes(mediaType)?exports.MediaStreamTrackKind.Video:exports.MediaStreamTrackKind.Audio;}function webRtcVideoContentHintToJmpVideoContentHint(hint){if(hint==='motion'){return 'motion';}if(hint==='detail'){return 'sharpness';}return undefined;}var MultistreamConnectionEventNames;(function(MultistreamConnectionEventNames){MultistreamConnectionEventNames["VideoSourceCountUpdate"]="video-source-count-update";MultistreamConnectionEventNames["AudioSourceCountUpdate"]="audio-source-count-update";MultistreamConnectionEventNames["ActiveSpeakerNotification"]="active-speaker-notification";MultistreamConnectionEventNames["PeerConnectionStateUpdate"]="peer-connection-state-update";MultistreamConnectionEventNames["IceConnectionStateUpdate"]="ice-connection-state-update";MultistreamConnectionEventNames["IceGatheringStateUpdate"]="ice-gathering-state-update";MultistreamConnectionEventNames["NegotiationNeeded"]="negotiation-needed";MultistreamConnectionEventNames["CreateOfferOnSuccess"]="createofferonsuccess";MultistreamConnectionEventNames["CreateAnswerOnSuccess"]="createansweronsuccess";MultistreamConnectionEventNames["SetLocalDescriptionOnSuccess"]="setlocaldescriptiononsuccess";MultistreamConnectionEventNames["SetRemoteDescriptionOnSuccess"]="setremotedescriptiononsuccess";MultistreamConnectionEventNames["IceCandidate"]="icecandidate";MultistreamConnectionEventNames["IceCandidateError"]="icecandidateerror";})(MultistreamConnectionEventNames||(MultistreamConnectionEventNames={}));var defaultMultistreamConnectionOptions={disableSimulcast:BrowserInfo.isFirefox(),bundlePolicy:'max-compat',iceServers:undefined,iceTransportPolicy:'all',disableContentSimulcast:true,disableAudioTwcc:true,doFullIce:BrowserInfo.isFirefox(),stopIceGatheringAfterFirstRelayCandidate:false,disableAudioMainDtx:true,metricsCallback:()=>{}};class MultistreamConnection extends EventEmitter$2{constructor(){var userOptions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};super();this.sendTransceivers=new Map();this.recvTransceivers=new Map();this.jmpSessions=new Map();this.pendingJmpTasks=[];this.overuseUpdateCallback=()=>{};this.midPredictor=new MidPredictor();this.offerAnswerQueue=new AsyncQueue();this.currentCreateOfferId=0;this.metadata={isMediaBypassEdge:false};this.options=Object.assign(Object.assign({},defaultMultistreamConnectionOptions),userOptions);logger.info("Creating multistream connection with options ".concat(JSON.stringify(this.options)));this.metricsCallback=this.options.metricsCallback;this.initializePeerConnection();this.overuseStateManager=new OveruseStateManager(overuseState=>this.overuseUpdateCallback(overuseState));this.overuseStateManager.start();this.statsManager=new StatsManager(()=>this.pc.getStats(),stats=>this.preProcessStats(stats));var mainSceneId=generateSceneId();var slidesSceneId=generateSceneId();var videoMainEncodingOptions=this.getVideoEncodingOptions(exports.MediaContent.Main);var videoSlidesEncodingOptions=this.getVideoEncodingOptions(exports.MediaContent.Slides);this.createSendTransceiver(exports.MediaType.VideoMain,mainSceneId,videoMainEncodingOptions);this.createSendTransceiver(exports.MediaType.AudioMain,mainSceneId);this.createSendTransceiver(exports.MediaType.VideoSlides,slidesSceneId,videoSlidesEncodingOptions);this.createSendTransceiver(exports.MediaType.AudioSlides,slidesSceneId);}initializePeerConnection(){this.pc=new PeerConnection({iceServers:this.options.iceServers,bundlePolicy:this.options.bundlePolicy,iceTransportPolicy:this.options.iceTransportPolicy});this.propagatePeerConnectionEvents();this.attachMetricsObserver();this.createDataChannel();}propagatePeerConnectionEvents(){this.pc.on(PeerConnection.Events.PeerConnectionStateChange,state=>{this.emit(MultistreamConnectionEventNames.PeerConnectionStateUpdate,state);});this.pc.on(PeerConnection.Events.IceConnectionStateChange,state=>{this.emit(MultistreamConnectionEventNames.IceConnectionStateUpdate,state);});this.pc.on(PeerConnection.Events.CreateOfferOnSuccess,description=>{this.emit(MultistreamConnectionEventNames.CreateOfferOnSuccess,description);});this.pc.on(PeerConnection.Events.CreateAnswerOnSuccess,description=>{this.emit(MultistreamConnectionEventNames.CreateAnswerOnSuccess,description);});this.pc.on(PeerConnection.Events.SetLocalDescriptionOnSuccess,description=>{this.emit(MultistreamConnectionEventNames.SetLocalDescriptionOnSuccess,description);});this.pc.on(PeerConnection.Events.SetRemoteDescriptionOnSuccess,description=>{this.emit(MultistreamConnectionEventNames.SetRemoteDescriptionOnSuccess,description);});this.pc.on(PeerConnection.Events.IceGatheringStateChange,()=>{this.emit(MultistreamConnectionEventNames.IceGatheringStateUpdate,this.getIceGatheringState());});this.pc.on(PeerConnection.Events.IceCandidate,candidate=>{this.emit(MultistreamConnectionEventNames.IceCandidate,candidate);});this.pc.on(PeerConnection.Events.IceCandidateError,error=>{this.emit(MultistreamConnectionEventNames.IceCandidateError,error);});}getConnectionState(){return this.pc.getConnectionState();}getPeerConnectionState(){return this.pc.getPeerConnectionState();}getIceConnectionState(){return this.pc.getIceConnectionState();}getCurrentConnectionType(){return this.pc.getCurrentConnectionType();}getIceGatheringState(){return this.pc.iceGatheringState;}getVideoEncodingOptions(content){var enabledSimulcast=content===exports.MediaContent.Main?!this.options.disableSimulcast:!this.options.disableContentSimulcast;return enabledSimulcast?[{scaleResolutionDownBy:4,active:false},{scaleResolutionDownBy:2,active:false},{active:false}]:[{active:false}];}createSendTransceiver(mediaType,sceneId,sendEncodingsOptions){var rtcRtpTransceiver;try{rtcRtpTransceiver=this.pc.addTransceiver(toMediaStreamTrackKind(mediaType),{direction:'sendrecv',sendEncodings:sendEncodingsOptions});}catch(e){logger.error("addTransceiver failed due to : ".concat(e));throw e;}var mid=this.midPredictor.getNextMid(mediaType);var csi=generateCsi(getMediaFamily(mediaType),sceneId);var munger=new EgressSdpMunger();var transceiver=new SendOnlyTransceiver({rtcRtpTransceiver,mid,mediaType,munger,csi});if(getMediaFamily(mediaType)===exports.MediaFamily.Video){transceiver.rtxEnabled=true;transceiver.setCodecParameters({'max-mbps':"".concat(defaultMaxVideoEncodeMbps),'max-fs':"".concat(defaultMaxVideoEncodeFrameSize)});}transceiver.twccDisabled=getMediaFamily(mediaType)===exports.MediaFamily.Audio?this.options.disableAudioTwcc:false;transceiver.dtxDisabled=mediaType!==exports.MediaType.AudioMain||this.options.disableAudioMainDtx;transceiver.active=false;transceiver.streamMuteStateChange.on(()=>{this.sendSourceAdvertisement(mediaType);this.sendMediaRequestStatus(mediaType);});transceiver.streamPublishStateChange.on(()=>{this.sendSourceAdvertisement(mediaType);this.sendMediaRequestStatus(mediaType);});transceiver.streamReadyStateChanged.on(()=>{this.sendSourceAdvertisement(mediaType);this.sendMediaRequestStatus(mediaType);});transceiver.negotiationNeeded.on(offerAnswerType=>{if(offerAnswerType===OfferAnswerType.Remote){this.emit(MultistreamConnectionEventNames.NegotiationNeeded);}else if(this.pc.getRemoteDescription()){this.queueLocalOfferAnswer();}});transceiver.namedMediaGroupsChange.on(()=>{this.sendSourceAdvertisement(mediaType);});transceiver.sourceStateOverrideChange.on(()=>{this.sendMediaRequestStatus(mediaType);});this.sendTransceivers.set(mediaType,transceiver);this.createJmpSession(mediaType);}createSendSlot(mediaType){var active=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var transceiver=this.getSendTransceiverOrThrow(mediaType);transceiver.active=active;return new SendSlot(transceiver);}createJmpSession(mediaType){var jmpSession=new JmpSession(getMediaFamily(mediaType),getMediaContent(mediaType));jmpSession.setTxCallback(jmpMessage=>{var _a;if(((_a=this.dataChannel)===null||_a===void 0?void 0:_a.readyState)!=='open'){logger.error("DataChannel not created or not connected. Unable to send JMP message.");return;}var homerMsg=new HomerMsg(HomerMsgType.Multistream,jmpMessage);var serializedHomerMsg=JSON.stringify(homerMsg);try{logger.info("Sending JMP message: ".concat(serializedHomerMsg));this.dataChannel.send(serializedHomerMsg);}catch(err){var{bufferedAmount,readyState}=this.dataChannel;var{sctp}=this.pc.getUnderlyingRTCPeerConnection();var{maxMessageSize,state}=sctp||{};logErrorAndThrow(exports.WcmeErrorType.DATA_CHANNEL_SEND_FAILED,"Sending JMP message failed with error: ".concat(err,",\nMessage size: ").concat(serializedHomerMsg.length,",\nData Channel State: ").concat(readyState,",\nData Channel Buffered amount: ").concat(bufferedAmount,",\nSCTP State: ").concat(state,",\nSCTP Max Message Size: ").concat(maxMessageSize));}});var prevNumTotalSources=0;var prevNumLiveSources=0;jmpSession.on(JmpSessionEvents.SourceAdvertisementReceived,data=>{logger.log("SourceAdvertisement received: ".concat(JSON.stringify(data)));if(data.numTotalSources!==prevNumTotalSources||data.numLiveSources!==prevNumLiveSources){prevNumTotalSources=data.numTotalSources;prevNumLiveSources=data.numLiveSources;var eventName=getMediaFamily(mediaType)===exports.MediaFamily.Video?MultistreamConnectionEventNames.VideoSourceCountUpdate:MultistreamConnectionEventNames.AudioSourceCountUpdate;this.emit(eventName,data.numTotalSources,data.numLiveSources,getMediaContent(mediaType));}else {logger.log('Number of sources was unchanged, ignoring message');}});jmpSession.on(JmpSessionEvents.MediaRequestStatusReceived,data=>{logger.log("MediaRequestStatus received: ".concat(JSON.stringify(data)));data.streamStates.forEach(s=>{if(!isValidSsrcStreamId(s.id)){logger.error("Received MediaRequestStatus with non-SSRC based stream ID, which is currently not supported: ".concat(JSON.stringify(s.id)));return;}var receiveSlot=this.getReceiveSlotById(s.id);if(!receiveSlot){logger.warn("Got MediaRequestStatus for unknown receive slot: ".concat(JSON.stringify(s.id)));return;}if(!receiveSlot._isRequested){logger.info("MediaRequestStatus ignored due to transceiver's receive slot unrequested: ".concat(JSON.stringify(s.id)," csi ").concat(s.csi));return;}receiveSlot._updateSource(s.state,s.csi);});});jmpSession.on(JmpSessionEvents.MediaRequestReceived,data=>{logger.log("MediaRequest received: ".concat(JSON.stringify(data)));this.updateRequestedStreams(mediaType,data.requests).then(()=>{if(getMediaFamily(mediaType)===exports.MediaFamily.Video){this.sendMediaRequestStatus(mediaType);}});});jmpSession.on(JmpSessionEvents.ActiveSpeaker,data=>{this.emit(MultistreamConnectionEventNames.ActiveSpeakerNotification,data.csis);this.recvTransceivers.forEach(transceivers=>{transceivers.forEach(t=>{var{currentRxCsi}=t.receiveSlot;if(currentRxCsi!==undefined){var isActiveSpeaker=data.csis.some(activeCsi=>(activeCsi&0xfffffffe)===(currentRxCsi&0xfffffffe));t.handleActiveSpeakerUpdate(isActiveSpeaker);}});});});this.jmpSessions.set(mediaType,jmpSession);}updateRequestedStreams(mediaType,requests){var sendTransceiver=this.getSendTransceiverOrThrow(mediaType);var mediaFamily=getMediaFamily(mediaType);var requestedIdEncodingParamsMap=new Map();var rsRequests=requests.filter(r=>isValidReceiverSelectedInfo(r.policySpecificInfo));if(rsRequests.length!==requests.length){logger.warn('Ignoring non-receiver-selected requests');}rsRequests.forEach(_ref9=>{var{ids,policySpecificInfo,codecInfos,maxPayloadBitsPerSecond}=_ref9;var _a,_b,_c;if(ids.length>1){logErrorAndThrow(exports.WcmeErrorType.INVALID_STREAM_REQUEST,"Stream request cannot have more than one ID.");}if(ids.length===0){return;}if(sendTransceiver.csi!==policySpecificInfo.csi){logger.warn('csi in the StreamRequest does not match');return;}var id=ids[0];var codecInfo=codecInfos[0];if(!isValidSsrcStreamId(id)){logger.warn("".concat(mediaType,": The stream ID is not a valid SsrcStreamId: ").concat(JSON.stringify(id)));return;}var streamIdsMatched=sendTransceiver.senderIds.some(validId=>areStreamIdsEqual(id,validId));if(streamIdsMatched){var encodingIndex=sendTransceiver.getEncodingIndexForStreamId(id);if(encodingIndex!==-1){var encodingParams={maxPayloadBitsPerSecond};if(mediaFamily===exports.MediaFamily.Video){encodingParams.maxFs=(_a=codecInfo===null||codecInfo===void 0?void 0:codecInfo.h264)===null||_a===void 0?void 0:_a.maxFs;encodingParams.maxWidth=(_b=codecInfo===null||codecInfo===void 0?void 0:codecInfo.h264)===null||_b===void 0?void 0:_b.maxWidth;encodingParams.maxHeight=(_c=codecInfo===null||codecInfo===void 0?void 0:codecInfo.h264)===null||_c===void 0?void 0:_c.maxHeight;}requestedIdEncodingParamsMap.set(encodingIndex,encodingParams);}else {logger.warn("".concat(mediaType,": Unable to get encoding index for stream ID: ").concat(JSON.stringify(id)));}}else {logger.warn("".concat(mediaType,": Unable to find matching stream ID for requested ID: ").concat(JSON.stringify(id)));}});return sendTransceiver.updateSendParameters(requestedIdEncodingParamsMap);}createDataChannel(){var dataChannel=this.pc.createDataChannel('datachannel',{ordered:false,maxRetransmits:0});dataChannel.onopen=event=>{logger.info('DataChannel opened:',JSON.stringify(event));[...this.sendTransceivers.keys()].forEach(mediaType=>{this.sendSourceAdvertisement(mediaType);});logger.info("Flushing pending JMP task queue");this.pendingJmpTasks.forEach(t=>t());this.pendingJmpTasks=[];};dataChannel.onmessage=e=>{var parsed;try{parsed=JSON.parse(e.data);}catch(err){logger.error("Error parsing datachannel JSON: ".concat(err));return;}logger.debug('DataChannel got msg:',e.data);var homerMsg=HomerMsg.fromJson(parsed);if(!homerMsg){logger.error("Received invalid datachannel message: ".concat(e));return;}var jmpMsg=homerMsg.payload;if(!isValidJmpMsg(jmpMsg)){logger.error("Received invalid JMP msg: ".concat(JSON.stringify(jmpMsg)));return;}var mediaType=getMediaType(jmpMsg.mediaFamily,jmpMsg.mediaContent);var jmpSession=this.jmpSessions.get(mediaType);if(!jmpSession){logger.error("Unable to find JMP session for media type ".concat(mediaType,"."));return;}jmpSession.receive(jmpMsg);};dataChannel.onclose=event=>{logger.info('DataChannel closed:',JSON.stringify(event));};dataChannel.onerror=event=>{logger.info('DataChannel error:',JSON.stringify(event));};this.dataChannel=dataChannel;}close(){this.sendTransceivers.forEach(t=>t.close());this.recvTransceivers.forEach(recvTransceivers=>{recvTransceivers.forEach(t=>t.close());});this.jmpSessions.forEach(jmpSession=>jmpSession.close());this.pc.close();}sendMediaRequestStatus(mediaType){var _a;if(getMediaFamily(mediaType)!==exports.MediaFamily.Video){return;}if(!this.getSendTransceiverOrThrow(mediaType).requested){return;}var streamStates=this.getVideoStreamStates(getMediaContent(mediaType));var task=()=>{var _a;(_a=this.jmpSessions.get(mediaType))===null||_a===void 0?void 0:_a.sendMediaRequestStatus(streamStates);};if(((_a=this.dataChannel)===null||_a===void 0?void 0:_a.readyState)==='open'){task();}else {this.pendingJmpTasks.push(task);}}sendSourceAdvertisement(mediaType){var _a,_b,_c;var transceiver=this.getSendTransceiverOrThrow(mediaType);var numLiveSources=((_a=transceiver.publishedStream)===null||_a===void 0?void 0:_a.muted)===false&&((_b=transceiver.publishedStream)===null||_b===void 0?void 0:_b.readyState)==='live'?1:0;var task;if(getMediaFamily(mediaType)===exports.MediaFamily.Video){var sources=this.getVideoStreamStates(getMediaContent(mediaType));if(sources===null){return;}var contentHint;if(transceiver.publishedStream&&mediaType===exports.MediaType.VideoSlides){contentHint=transceiver.publishedStream.contentHint;}task=()=>{var _a;(_a=this.jmpSessions.get(mediaType))===null||_a===void 0?void 0:_a.sendSourceAdvertisement(1,numLiveSources,[],webRtcVideoContentHintToJmpVideoContentHint(contentHint));};}else {task=()=>{var _a;return (_a=this.jmpSessions.get(mediaType))===null||_a===void 0?void 0:_a.sendSourceAdvertisement(1,numLiveSources,mediaType===exports.MediaType.AudioMain?transceiver.namedMediaGroups:[]);};}if(((_c=this.dataChannel)===null||_c===void 0?void 0:_c.readyState)==='open'){task();}else {this.pendingJmpTasks.push(task);}}getVideoStreamStates(mediaContent){var sendTransceiver=this.getSendTransceiverOrThrow(getMediaType(exports.MediaFamily.Video,mediaContent));return sendTransceiver.senderIds.map(id=>({id,state:sendTransceiver.currentSourceState,csi:sendTransceiver.csi}));}createReceiveTransceiver(mediaType){var rtcRtpTransceiver=this.pc.addTransceiver(toMediaStreamTrackKind(mediaType),{direction:'recvonly'});var mid=this.midPredictor.getNextMid(mediaType);var munger=new IngressSdpMunger();var recvOnlyTransceiver=new ReceiveOnlyTransceiver({rtcRtpTransceiver,mid,mediaType,munger});if(getMediaFamily(mediaType)===exports.MediaFamily.Video){recvOnlyTransceiver.setCodecParameters({'sps-pps-idr-in-keyframe':'1'});recvOnlyTransceiver.setRtxCodecParameters({'rtx-time':mediaType===exports.MediaType.VideoMain?defaultVideoMainRtxTime:defaultVideoSlidesRtxTime});}recvOnlyTransceiver.twccDisabled=getMediaFamily(mediaType)===exports.MediaFamily.Audio?this.options.disableAudioTwcc:false;this.recvTransceivers.set(mediaType,[...(this.recvTransceivers.get(mediaType)||[]),recvOnlyTransceiver]);return recvOnlyTransceiver;}createReceiveSlot(mediaType){return __awaiter$1(this,void 0,void 0,function*(){return (yield this.createReceiveSlots(mediaType,1))[0];});}createReceiveSlots(mediaType){var count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;return __awaiter$1(this,void 0,void 0,function*(){return new Promise(createReceiveSlotsResolve=>{this.offerAnswerQueue.push(()=>__awaiter$1(this,void 0,void 0,function*(){var createdReceiveOnlyTransceivers=[];for(var i=0;i<count;i++){var recvOnlyTransceiver=this.createReceiveTransceiver(mediaType);createdReceiveOnlyTransceivers.push(recvOnlyTransceiver);}if(this.pc.getRemoteDescription()){yield this.doLocalOfferAnswer();}var receiveSlots=createdReceiveOnlyTransceivers.map(transceiver=>transceiver.receiveSlot);createReceiveSlotsResolve(receiveSlots);}));});});}getIngressPayloadType(mediaType,mimeType){var _a,_b,_c;var requestedMediaCodecType=mimeType.split('/')[1];var requestedMid=(_a=this.sendTransceivers.get(mediaType))===null||_a===void 0?void 0:_a.mid;var parsedOffer=parse$1((_b=this.pc.getLocalDescription())===null||_b===void 0?void 0:_b.sdp);var parsedAnswer=parse$1((_c=this.pc.getRemoteDescription())===null||_c===void 0?void 0:_c.sdp);var senderCodecs=parsedAnswer.avMedia.filter(media=>requestedMid===media.mid).map(media=>[...media.codecs.values()]).flat().filter(ci=>ci.name===requestedMediaCodecType);var receiverCodecs=parsedOffer.avMedia.filter(media=>requestedMid===media.mid).map(media=>[...media.codecs.values()]).flat().filter(ci=>ci.name===requestedMediaCodecType);if(!senderCodecs||!receiverCodecs||senderCodecs.length===0||receiverCodecs.length===0){logErrorAndThrow(exports.WcmeErrorType.GET_PAYLOAD_TYPE_FAILED,"Sender codecs or receiver codecs is undefined or empty.");}var senderCodec=senderCodecs[0];var targetCodec=receiverCodecs.find(receiverCodec=>{return areCodecsCompatible(senderCodec,receiverCodec);});if(!targetCodec||!targetCodec.pt){logErrorAndThrow(exports.WcmeErrorType.GET_PAYLOAD_TYPE_FAILED,"Cannot find matching receiver codec for the given mediaType/mimeType.");}return targetCodec.pt;}waitForIceGatheringComplete(){return __awaiter$1(this,void 0,void 0,function*(){return new Promise(resolve=>{if(this.pc.iceGatheringState==='complete'){resolve();}else {this.pc.on(PeerConnection.Events.IceCandidate,candidate=>{if(candidate.candidate===null||this.options.stopIceGatheringAfterFirstRelayCandidate&&candidate.candidate.type==='relay'){resolve();}});this.pc.on(PeerConnection.Events.IceGatheringStateChange,()=>{if(this.pc.iceGatheringState==='complete'){resolve();}});}});});}createOffer(){return __awaiter$1(this,void 0,void 0,function*(){if(!this.pc.getLocalDescription()){this.midPredictor.allocateMidForDatachannel();}if(this.setAnswerResolve){logger.info('Canceling previous offer since setAnswer was never called for it');this.setAnswerResolve();this.setAnswerResolve=undefined;}var createOfferId=++this.currentCreateOfferId;return new Promise((createOfferResolve,createOfferReject)=>{this.offerAnswerQueue.push(()=>__awaiter$1(this,void 0,void 0,function*(){var _a;try{var offer=yield this.pc.createOffer();if(!offer.sdp){logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED,'SDP not found in offer.');}offer.sdp=this.preProcessLocalOffer(offer.sdp);yield this.pc.setLocalDescription(offer).then(()=>__awaiter$1(this,void 0,void 0,function*(){logger.info('this.pc.setLocalDescription() resolved');})).catch(error=>{var _a;logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED,"Error: ".concat(error,". SDP: ").concat(maskIp((_a=offer.sdp)!==null&&_a!==void 0?_a:'')));});if(this.options.doFullIce){yield this.waitForIceGatheringComplete();}var sdpToSend=this.prepareLocalOfferForRemoteServer((_a=this.pc.getLocalDescription())===null||_a===void 0?void 0:_a.sdp);createOfferResolve({type:'offer',sdp:sdpToSend});if(this.currentCreateOfferId>createOfferId){logger.log('Canceling previous offer since createOffer was called while it was being created');}else {yield new Promise(setAnswerResolve=>{this.setAnswerResolve=setAnswerResolve;});}}catch(error){createOfferReject(error);}}));});});}setAnswer(answer){return __awaiter$1(this,void 0,void 0,function*(){var sdp=this.preProcessRemoteAnswer(answer);if(!this.setAnswerResolve){logErrorAndThrow(exports.WcmeErrorType.SET_ANSWER_FAILED,"Call to setAnswer without having previously called createOffer.");}logger.info('calling this.pc.setRemoteDescription()');return this.pc.setRemoteDescription({type:'answer',sdp}).then(()=>__awaiter$1(this,void 0,void 0,function*(){logger.info('this.pc.setRemoteDescription() resolved');if(this.setAnswerResolve){this.setAnswerResolve();this.setAnswerResolve=undefined;}else {logger.debug("setAnswerResolve function was cleared between setAnswer and result of setRemoteDescription");}})).catch(error=>{logErrorAndThrow(exports.WcmeErrorType.SET_ANSWER_FAILED,"Error: ".concat(error,". SDP: ").concat(maskIp(answer)));});});}doLocalOfferAnswer(){var _a;return __awaiter$1(this,void 0,void 0,function*(){var offer=yield this.pc.createOffer();if(!offer.sdp){logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED,'SDP not found in offer.');}offer.sdp=this.preProcessLocalOffer(offer.sdp);yield this.pc.setLocalDescription(offer).then(()=>__awaiter$1(this,void 0,void 0,function*(){logger.info('this.pc.setLocalDescription() resolved');})).catch(error=>{var _a;logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED,"Error: ".concat(error,". SDP: ").concat(maskIp((_a=offer.sdp)!==null&&_a!==void 0?_a:'')));});var answer=this.preProcessRemoteAnswer((_a=this.pc.getRemoteDescription())===null||_a===void 0?void 0:_a.sdp);return this.pc.setRemoteDescription({type:'answer',sdp:answer}).then(()=>__awaiter$1(this,void 0,void 0,function*(){logger.info('this.pc.setRemoteDescription() resolved');})).catch(error=>{logErrorAndThrow(exports.WcmeErrorType.CREATE_OFFER_FAILED,"Error: ".concat(error,". SDP: ").concat(maskIp(answer)));});});}queueLocalOfferAnswer(){return __awaiter$1(this,void 0,void 0,function*(){return this.offerAnswerQueue.push(()=>__awaiter$1(this,void 0,void 0,function*(){yield this.doLocalOfferAnswer();}));});}preProcessLocalOffer(offer){var parsedOffer=parse$1(offer);parsedOffer.avMedia.filter(av=>av.direction==='recvonly').forEach(av=>{var recvTransceiver=this.getRecvTransceiverByMidOrThrow(av.mid);recvTransceiver.mungeLocalDescription(av);});parsedOffer.avMedia.filter(av=>av.direction==='sendrecv'||av.direction==='inactive').forEach(av=>{var sendTransceiver=this.getSendTransceiverByMidOrThrow(av.mid);sendTransceiver.mungeLocalDescription(av);});if(BrowserInfo.isFirefox()){setupBundle(parsedOffer,this.options.bundlePolicy,this.midPredictor.getMidMap());}return parsedOffer.toString();}prepareLocalOfferForRemoteServer(offer){var parsedOffer=parse$1(offer);var shouldInjectDummyCandidates=()=>{if(!this.options.doFullIce){return true;}return !hasIceCandidates(parsedOffer);};var mungeOptions={injectDummyCandidates:shouldInjectDummyCandidates()};parsedOffer.avMedia.filter(av=>av.direction==='sendrecv'||av.direction==='inactive').forEach(av=>{var sendTransceiver=this.getSendTransceiverByMidOrThrow(av.mid);sendTransceiver.mungeLocalDescriptionForRemoteServer(av,mungeOptions);});if(mungeOptions.injectDummyCandidates){parsedOffer.media.filter(media=>media instanceof ApplicationMediaDescription$1).forEach(media=>{injectDummyCandidates(media);});}if(BrowserInfo.isFirefox()&&this.options.doFullIce){var iceCandidates=this.pc.getIceCandidates();parsedOffer.media.forEach(media=>{media.iceInfo.candidates=[];iceCandidates.forEach(iceCandidate=>{var candidateLine=CandidateLine$1.fromSdpLine(iceCandidate.candidate.toString());if(candidateLine){media.addLine(candidateLine);}});});}if(BrowserInfo.isFirefox()){setupBundle(parsedOffer,this.options.bundlePolicy,this.midPredictor.getMidMap());if(this.options.bundlePolicy==='max-bundle'){parsedOffer.media.forEach((media,index)=>{if(index>0){media.port=parsedOffer.media[0].port;}});}}filterRecvOnlyMediaDescriptions(parsedOffer);return parsedOffer.toString();}preProcessRemoteAnswer(answer){var _a,_b;var parsedAnswer=parse$1(answer);var parsedOffer=parse$1((_a=this.pc.getLocalDescription())===null||_a===void 0?void 0:_a.sdp);matchMediaDescriptionsInAnswer(parsedOffer,parsedAnswer);parsedAnswer.avMedia.filter(av=>av.direction==='sendonly').forEach(av=>{var recvTransceiver=this.getRecvTransceiverByMidOrThrow(av.mid);recvTransceiver.mungeRemoteDescription(av);});parsedAnswer.avMedia.filter(av=>av.direction==='sendrecv'||av.direction==='recvonly').forEach(av=>{var sendTransceiver=this.getSendTransceiverByMidOrThrow(av.mid);sendTransceiver.mungeRemoteDescription(av);});parsedAnswer.media.filter(media=>media instanceof ApplicationMediaDescription$1).forEach(media=>{if(retainCandidatesByTransportType(media,['udp','tcp'])){logger.log("Some unsupported remote candidates have been removed from mid ".concat(media.mid));}});if(BrowserInfo.isFirefox()){setupBundle(parsedAnswer,this.options.bundlePolicy,this.midPredictor.getMidMap());}if((_b=parsedAnswer.session.information)===null||_b===void 0?void 0:_b.info){this.metadata.isMediaBypassEdge=!parsedAnswer.session.information.info.includes('linus');}return parsedAnswer.toString();}getSendTransceiverOrThrow(mediaType){var sendTransceiver=this.sendTransceivers.get(mediaType);if(!sendTransceiver){logErrorAndThrow(exports.WcmeErrorType.GET_TRANSCEIVER_FAILED,"Unable to find send transceiver for media type ".concat(mediaType,"."));}return sendTransceiver;}getSendTransceiverByMidOrThrow(mid){var transceiver=[...this.sendTransceivers.values()].find(t=>t.mid===mid);if(!transceiver){logErrorAndThrow(exports.WcmeErrorType.GET_TRANSCEIVER_FAILED,"Unable to find send transceiver with MID ".concat(mid,"."));}return transceiver;}getRecvTransceiverByMidOrThrow(mid){var transceiver=[...this.recvTransceivers.values()].flat().find(t=>t.mid===mid);if(!transceiver){logErrorAndThrow(exports.WcmeErrorType.GET_TRANSCEIVER_FAILED,"Unable to find recv transceiver with MID ".concat(mid,"."));}return transceiver;}requestMedia(mediaType,streamRequests){var _a;var task=()=>{var _a;var jmpSession=this.jmpSessions.get(mediaType);if(!jmpSession){logger.error("Unable to find jmp session for ".concat(mediaType));return;}var requestedReceiveSlotIds=[];streamRequests.forEach(request=>{if(request.receiveSlots.length===0){logger.error('Stream request ids cannot be empty.');return;}request.receiveSlots.forEach(slot=>{if(!slot.id){logger.error('Running stream request task, but ReceiveSlot ID is missing.');}if(!requestedReceiveSlotIds.some(id=>areStreamIdsEqual(id,slot.id))){requestedReceiveSlotIds.push(slot.id);}else {logger.error("Stream id duplicate found ".concat(JSON.stringify(slot.id),"."));}});});jmpSession.sendRequests(streamRequests.map(sr=>sr._toJmpStreamRequest()));(_a=this.recvTransceivers.get(mediaType))===null||_a===void 0?void 0:_a.forEach(transceiver=>{if(requestedReceiveSlotIds.some(id=>areStreamIdsEqual(id,transceiver.receiveSlot.id))){var relevantRequest=streamRequests.find(request=>request.receiveSlots.some(slot=>areStreamIdsEqual(slot.id,transceiver.receiveSlot.id)));transceiver.handleRequested(relevantRequest);}else {transceiver.handleUnrequested();}});};if(((_a=this.dataChannel)===null||_a===void 0?void 0:_a.readyState)==='open'){task();}else {this.pendingJmpTasks.push(task);}}renewPeerConnection(userOptions){var _a;return __awaiter$1(this,void 0,void 0,function*(){(_a=this.pc)===null||_a===void 0?void 0:_a.close();try{if(userOptions){this.options=Object.assign(Object.assign({},this.options),yield userOptions);}}catch(error){logErrorAndThrow(exports.WcmeErrorType.RENEW_PEER_CONNECTION_FAILED,"Error while awaiting user options: ".concat(error));}logger.info("Renewing multistream connection with options ".concat(JSON.stringify(this.options)));this.midPredictor.reset();this.initializePeerConnection();var mainSceneId=generateSceneId();var slidesSceneId=generateSceneId();this.sendTransceivers.forEach((transceiver,mediaType)=>{var _a;var mediaContent=getMediaContent(mediaType);var sceneId=mediaContent===exports.MediaContent.Main?mainSceneId:slidesSceneId;var mid=this.midPredictor.getNextMid(mediaType);transceiver.replaceTransceiver(this.pc.addTransceiver(toMediaStreamTrackKind(mediaType),{direction:'sendrecv',sendEncodings:getMediaFamily(mediaType)===exports.MediaFamily.Video?this.getVideoEncodingOptions(mediaContent):undefined}));transceiver.mid=mid;transceiver.csi=generateCsi(getMediaFamily(mediaType),sceneId);transceiver.resetSdpMunger();(_a=this.jmpSessions.get(mediaType))===null||_a===void 0?void 0:_a.close();this.createJmpSession(mediaType);});this.recvTransceivers.forEach((transceivers,mediaType)=>{transceivers.forEach(t=>{var mid=this.midPredictor.getNextMid(mediaType);t.replaceTransceiver(this.pc.addTransceiver(toMediaStreamTrackKind(mediaType),{direction:'recvonly'}));t.mid=mid;});});});}getReceiveSlotById(id){return [...this.recvTransceivers.values()].flat().map(transceiver=>transceiver.receiveSlot).find(receiveSlot=>{var receiveSlotId=receiveSlot.id||{};return Object.keys(receiveSlotId).length===Object.keys(id).length&&Object.keys(receiveSlotId).every(key=>Object.prototype.hasOwnProperty.call(id,key)&&receiveSlotId[key]===id[key]);});}getStats(){return this.statsManager.getStats();}getTransceiverStats(){return __awaiter$1(this,void 0,void 0,function*(){var stats=yield this.getStats();var peerConnectionStats=[...stats.values()].find(stat=>stat.type==='peer-connection');return organizeTransceiverStats(this.sendTransceivers,this.recvTransceivers,peerConnectionStats);});}preProcessStats(stats){return __awaiter$1(this,void 0,void 0,function*(){stats.forEach(stat=>{if(stat.type==='peer-connection'){stat.isMediaBypassEdge=this.metadata.isMediaBypassEdge;}});yield Promise.all([...this.sendTransceivers.values()].map(transceiver=>__awaiter$1(this,void 0,void 0,function*(){(yield transceiver.getStats()).forEach(senderStats=>{if(senderStats.type==='outbound-rtp'||senderStats.type==='media-source'){stats.set(senderStats.id,senderStats);}});})));yield Promise.all([...this.recvTransceivers.values()].map(transceivers=>__awaiter$1(this,void 0,void 0,function*(){yield Promise.all(transceivers.map(transceiver=>__awaiter$1(this,void 0,void 0,function*(){(yield transceiver.getStats()).forEach(receiverStats=>{if(receiverStats.type==='inbound-rtp'){stats.set(receiverStats.id,receiverStats);}});})));})));});}attachMetricsObserver(){this.forceStatsReport=rtcStats_1(this.pc.getUnderlyingRTCPeerConnection(),data=>this.metricsCallback(data),5000,stats=>this.preProcessStats(stats)).forceStatsReport;}forceRtcMetricsCallback(){var _a;return (_a=this.forceStatsReport)===null||_a===void 0?void 0:_a.call(this);}setOveruseUpdateCallback(callback){this.overuseUpdateCallback=callback;}getCsiByMediaType(mediaType){var _a;return (_a=this.sendTransceivers.get(mediaType))===null||_a===void 0?void 0:_a.csi;}getAllCsis(){return {audioMain:this.getCsiByMediaType(exports.MediaType.AudioMain),audioSlides:this.getCsiByMediaType(exports.MediaType.AudioSlides),videoMain:this.getCsiByMediaType(exports.MediaType.VideoMain),videoSlides:this.getCsiByMediaType(exports.MediaType.VideoSlides)};}}class StreamRequest{constructor(policy,policySpecificInfo,receiveSlots,maxPayloadBitsPerSecond){var codecInfos=arguments.length>4&&arguments[4]!==undefined?arguments[4]:[];this.policy=policy;this.policySpecificInfo=policySpecificInfo;this.receiveSlots=receiveSlots;this.maxPayloadBitsPerSecond=maxPayloadBitsPerSecond;this.codecInfos=codecInfos;}_toJmpStreamRequest(){return new StreamRequest$1(this.policy,this.policySpecificInfo,this.receiveSlots.map(rs=>rs.id),this.maxPayloadBitsPerSecond,this.codecInfos);}}

var defaultLogger = {
  info: function info() {
    return console.info(...arguments);
  },
  log: function log() {
    return console.log(...arguments);
  },
  error: function error() {
    return console.error(...arguments);
  },
  warn: function warn() {
    return console.warn(...arguments);
  },
  trace: function trace() {
    return console.trace(...arguments);
  },
  debug: function debug() {
    return console.debug(...arguments);
  }
};
var currentLogger = defaultLogger;
var getLogger = () => currentLogger;
var configureWcmeLogger = debugId => {
  var logger = getLogger();
  setLogHandler((messages, context) => {
    var logMessages = Array.from(messages).map(message => typeof message === 'object' ? JSON.stringify(message) : message);
    logMessages.unshift("".concat(debugId || '', ":[").concat(context.name, "]"));
    switch (context.level.name) {
      case 'TRACE':
        logger.trace(...logMessages);
        break;
      case 'DEBUG':
        logger.debug(...logMessages);
        break;
      case 'INFO':
        logger.info(...logMessages);
        break;
      case 'WARN':
        logger.warn(...logMessages);
        break;
      case 'ERROR':
        logger.error(...logMessages);
        break;
    }
  });
};
var setLogger = newLogger => {
  if (newLogger) {
    currentLogger = newLogger;
  } else {
    currentLogger = defaultLogger;
  }
  configureWcmeLogger();
};
var getErrorDescription = error => {
  return error ? error.stack ? "".concat(error.message, ": ").concat(error.stack) : "".concat(error) : '';
};

var NUM = '\\d+';
var SDP_TOKEN = "[!#$%&'*+\\-.^_`{|}~a-zA-Z0-9]+";
var ANY_NON_WS = '\\S+';
var SP = '\\s';
var REST = '.+';
class Line {}
var _a$5;
class BandwidthLine extends Line {
  constructor(bandwidthType, bandwidth) {
    super();
    this.bandwidthType = bandwidthType;
    this.bandwidth = bandwidth;
  }
  static fromSdpLine(line) {
    if (!BandwidthLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(BandwidthLine.regex);
    var bandwidthType = tokens[1];
    var bandwidth = parseInt(tokens[2], 10);
    return new BandwidthLine(bandwidthType, bandwidth);
  }
  toSdpLine() {
    return "b=".concat(this.bandwidthType, ":").concat(this.bandwidth);
  }
}
_a$5 = BandwidthLine;
BandwidthLine.BW_TYPE_REGEX = 'CT|AS|TIAS';
BandwidthLine.regex = new RegExp("^(".concat(_a$5.BW_TYPE_REGEX, "):(").concat(NUM, ")"));
class BundleGroupLine extends Line {
  constructor(mids) {
    super();
    this.mids = mids;
  }
  static fromSdpLine(line) {
    if (!BundleGroupLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(BundleGroupLine.regex);
    var mids = tokens[1].split(' ');
    return new BundleGroupLine(mids);
  }
  toSdpLine() {
    return "a=group:BUNDLE ".concat(this.mids.join(' '));
  }
}
BundleGroupLine.regex = new RegExp("^group:BUNDLE (".concat(REST, ")"));
var _a$4;
class CandidateLine extends Line {
  constructor(foundation, componentId, transport, priority, connectionAddress, port, candidateType, relAddr, relPort, candidateExtensions) {
    super();
    this.foundation = foundation;
    this.componentId = componentId;
    this.transport = transport;
    this.priority = priority;
    this.connectionAddress = connectionAddress;
    this.port = port;
    this.candidateType = candidateType;
    this.relAddr = relAddr;
    this.relPort = relPort;
    this.candidateExtensions = candidateExtensions;
  }
  static fromSdpLine(line) {
    if (!CandidateLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(CandidateLine.regex);
    var foundation = tokens[1];
    var componentId = parseInt(tokens[2], 10);
    var transport = tokens[3];
    var priority = parseInt(tokens[4], 10);
    var connectionAddress = tokens[5];
    var port = parseInt(tokens[6], 10);
    var candidateType = tokens[7];
    var relAddr = tokens[8];
    var relPort = tokens[9] ? parseInt(tokens[9], 10) : undefined;
    var candidateExtensions = tokens[10];
    return new CandidateLine(foundation, componentId, transport, priority, connectionAddress, port, candidateType, relAddr, relPort, candidateExtensions);
  }
  toSdpLine() {
    var str = '';
    str += "a=candidate:".concat(this.foundation, " ").concat(this.componentId, " ").concat(this.transport, " ").concat(this.priority, " ").concat(this.connectionAddress, " ").concat(this.port, " typ ").concat(this.candidateType);
    if (this.relAddr) {
      str += " raddr ".concat(this.relAddr);
    }
    if (this.relPort) {
      str += " rport ".concat(this.relPort);
    }
    if (this.candidateExtensions) {
      str += " ".concat(this.candidateExtensions);
    }
    return str;
  }
}
_a$4 = CandidateLine;
CandidateLine.ICE_CHARS = "[a-zA-Z0-9+/]+";
CandidateLine.regex = new RegExp("^candidate:(".concat(_a$4.ICE_CHARS, ") (").concat(NUM, ") (").concat(ANY_NON_WS, ") (").concat(NUM, ") (").concat(ANY_NON_WS, ") (").concat(NUM, ") typ (").concat(ANY_NON_WS, ")(?: raddr (").concat(ANY_NON_WS, "))?(?: rport (").concat(NUM, "))?(?: (").concat(REST, "))?"));
class ConnectionLine extends Line {
  constructor(netType, addrType, ipAddr) {
    super();
    this.netType = netType;
    this.addrType = addrType;
    this.ipAddr = ipAddr;
  }
  static fromSdpLine(line) {
    if (!ConnectionLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(ConnectionLine.regex);
    var netType = tokens[1];
    var addrType = tokens[2];
    var ipAddr = tokens[3];
    return new ConnectionLine(netType, addrType, ipAddr);
  }
  toSdpLine() {
    return "c=".concat(this.netType, " ").concat(this.addrType, " ").concat(this.ipAddr);
  }
}
ConnectionLine.regex = new RegExp("^(".concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ")"));
class ContentLine extends Line {
  constructor(values) {
    super();
    this.values = values;
  }
  static fromSdpLine(line) {
    if (!ContentLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(ContentLine.regex);
    var values = tokens[1].split(',');
    return new ContentLine(values);
  }
  toSdpLine() {
    return "a=content:".concat(this.values.join(','));
  }
}
ContentLine.regex = new RegExp("^content:(".concat(REST, ")$"));
class DirectionLine extends Line {
  constructor(direction) {
    super();
    this.direction = direction;
  }
  static fromSdpLine(line) {
    if (!DirectionLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(DirectionLine.regex);
    var direction = tokens[1];
    return new DirectionLine(direction);
  }
  toSdpLine() {
    return "a=".concat(this.direction);
  }
}
DirectionLine.regex = /^(sendrecv|sendonly|recvonly|inactive)$/;
var _a$3;
class ExtMapLine extends Line {
  constructor(id, uri, direction, extensionAttributes) {
    super();
    this.id = id;
    this.uri = uri;
    this.direction = direction;
    this.extensionAttributes = extensionAttributes;
  }
  static fromSdpLine(line) {
    if (!ExtMapLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(ExtMapLine.regex);
    var id = parseInt(tokens[1], 10);
    var direction = tokens[2];
    var uri = tokens[3];
    var extensionAttributes = tokens[4];
    return new ExtMapLine(id, uri, direction, extensionAttributes);
  }
  toSdpLine() {
    var str = '';
    str += "a=extmap:".concat(this.id);
    if (this.direction) {
      str += "/".concat(this.direction);
    }
    str += " ".concat(this.uri);
    if (this.extensionAttributes) {
      str += " ".concat(this.extensionAttributes);
    }
    return str;
  }
}
_a$3 = ExtMapLine;
ExtMapLine.EXTMAP_DIRECTION = "sendonly|recvonly|sendrecv|inactive";
ExtMapLine.regex = new RegExp("^extmap:(".concat(NUM, ")(?:/(").concat(_a$3.EXTMAP_DIRECTION, "))? (").concat(ANY_NON_WS, ")(?: (").concat(REST, "))?"));
class FingerprintLine extends Line {
  constructor(fingerprint) {
    super();
    this.fingerprint = fingerprint;
  }
  static fromSdpLine(line) {
    if (!FingerprintLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(FingerprintLine.regex);
    var fingerprint = tokens[1];
    return new FingerprintLine(fingerprint);
  }
  toSdpLine() {
    return "a=fingerprint:".concat(this.fingerprint);
  }
}
FingerprintLine.regex = new RegExp("^fingerprint:(".concat(REST, ")"));
function parseFmtpParams(fmtpParams) {
  fmtpParams = fmtpParams.replace(/^a=fmtp:\d+\x20/, '');
  var fmtpObj = new Map();
  if (/^\d+([,/-]\d+)+$/.test(fmtpParams)) {
    fmtpObj.set(fmtpParams, undefined);
    return fmtpObj;
  }
  fmtpParams.split(';').forEach(param => {
    var paramArr = param && param.split('=');
    if (paramArr.length !== 2 || !paramArr[0] || !paramArr[1]) {
      throw new Error("Fmtp params is invalid with ".concat(fmtpParams));
    }
    fmtpObj.set(paramArr[0], paramArr[1]);
  });
  return fmtpObj;
}
class FmtpLine extends Line {
  constructor(payloadType, params) {
    super();
    this.payloadType = payloadType;
    this.params = params;
  }
  static fromSdpLine(line) {
    if (!FmtpLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(FmtpLine.regex);
    var payloadType = parseInt(tokens[1], 10);
    var params = tokens[2];
    return new FmtpLine(payloadType, parseFmtpParams(params));
  }
  toSdpLine() {
    var fmtParams = Array.from(this.params.keys()).map(key => {
      if (this.params.get(key) !== undefined) {
        return "".concat(key, "=").concat(this.params.get(key));
      }
      return "".concat(key);
    }).join(';');
    return "a=fmtp:".concat(this.payloadType, " ").concat(fmtParams);
  }
}
FmtpLine.regex = new RegExp("^fmtp:(".concat(NUM, ") (").concat(REST, ")"));
class IceOptionsLine extends Line {
  constructor(options) {
    super();
    this.options = options;
  }
  static fromSdpLine(line) {
    if (!IceOptionsLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(IceOptionsLine.regex);
    var options = tokens[1].split(' ');
    return new IceOptionsLine(options);
  }
  toSdpLine() {
    return "a=ice-options:".concat(this.options.join(' '));
  }
}
IceOptionsLine.regex = new RegExp("^ice-options:(".concat(REST, ")$"));
class IcePwdLine extends Line {
  constructor(pwd) {
    super();
    this.pwd = pwd;
  }
  static fromSdpLine(line) {
    if (!IcePwdLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(IcePwdLine.regex);
    var pwd = tokens[1];
    return new IcePwdLine(pwd);
  }
  toSdpLine() {
    return "a=ice-pwd:".concat(this.pwd);
  }
}
IcePwdLine.regex = new RegExp("^ice-pwd:(".concat(ANY_NON_WS, ")$"));
class IceUfragLine extends Line {
  constructor(ufrag) {
    super();
    this.ufrag = ufrag;
  }
  static fromSdpLine(line) {
    if (!IceUfragLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(IceUfragLine.regex);
    var ufrag = tokens[1];
    return new IceUfragLine(ufrag);
  }
  toSdpLine() {
    return "a=ice-ufrag:".concat(this.ufrag);
  }
}
IceUfragLine.regex = new RegExp("^ice-ufrag:(".concat(ANY_NON_WS, ")$"));
class MaxMessageSizeLine extends Line {
  constructor(maxMessageSize) {
    super();
    this.maxMessageSize = maxMessageSize;
  }
  static fromSdpLine(line) {
    if (!MaxMessageSizeLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(MaxMessageSizeLine.regex);
    var maxMessageSize = parseInt(tokens[1], 10);
    return new MaxMessageSizeLine(maxMessageSize);
  }
  toSdpLine() {
    return "a=max-message-size:".concat(this.maxMessageSize);
  }
}
MaxMessageSizeLine.regex = new RegExp("^max-message-size:(".concat(NUM, ")"));
var _a$2;
class MediaLine extends Line {
  constructor(type, port, protocol, formats) {
    super();
    this.type = type;
    this.port = port;
    this.protocol = protocol;
    this.formats = formats;
  }
  static fromSdpLine(line) {
    if (!MediaLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(MediaLine.regex);
    var type = tokens[1];
    var port = parseInt(tokens[2], 10);
    var protocol = tokens[3];
    var formats = tokens[4].split(' ');
    return new MediaLine(type, port, protocol, formats);
  }
  toSdpLine() {
    return "m=".concat(this.type, " ").concat(this.port, " ").concat(this.protocol, " ").concat(this.formats.join(' '));
  }
}
_a$2 = MediaLine;
MediaLine.MEDIA_TYPE = 'audio|video|application';
MediaLine.regex = new RegExp("^(".concat(_a$2.MEDIA_TYPE, ") (").concat(NUM, ") (").concat(ANY_NON_WS, ") (").concat(REST, ")"));
class MidLine extends Line {
  constructor(mid) {
    super();
    this.mid = mid;
  }
  static fromSdpLine(line) {
    if (!MidLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(MidLine.regex);
    var mid = tokens[1];
    return new MidLine(mid);
  }
  toSdpLine() {
    return "a=mid:".concat(this.mid);
  }
}
MidLine.regex = new RegExp("^mid:(".concat(ANY_NON_WS, ")$"));
class OriginLine extends Line {
  constructor(username, sessionId, sessionVersion, netType, addrType, ipAddr) {
    super();
    this.username = username;
    this.sessionId = sessionId;
    this.sessionVersion = sessionVersion;
    this.netType = netType;
    this.addrType = addrType;
    this.ipAddr = ipAddr;
  }
  static fromSdpLine(line) {
    if (!OriginLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(OriginLine.regex);
    var username = tokens[1];
    var sessionId = tokens[2];
    var sessionVersion = parseInt(tokens[3], 10);
    var netType = tokens[4];
    var addrType = tokens[5];
    var ipAddr = tokens[6];
    return new OriginLine(username, sessionId, sessionVersion, netType, addrType, ipAddr);
  }
  toSdpLine() {
    return "o=".concat(this.username, " ").concat(this.sessionId, " ").concat(this.sessionVersion, " ").concat(this.netType, " ").concat(this.addrType, " ").concat(this.ipAddr);
  }
}
OriginLine.regex = new RegExp("^(".concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ") (").concat(NUM, ") (").concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ")"));
var _a$1;
class RidLine extends Line {
  constructor(id, direction, params) {
    super();
    this.id = id;
    this.direction = direction;
    this.params = params;
  }
  static fromSdpLine(line) {
    if (!RidLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(RidLine.regex);
    var id = tokens[1];
    var direction = tokens[2];
    var params = tokens[3];
    return new RidLine(id, direction, params);
  }
  toSdpLine() {
    var str = '';
    str += "a=rid:".concat(this.id, " ").concat(this.direction);
    if (this.params) {
      str += " ".concat(this.params);
    }
    return str;
  }
}
_a$1 = RidLine;
RidLine.RID_ID = "[\\w-]+";
RidLine.RID_DIRECTION = "\\bsend\\b|\\brecv\\b";
RidLine.regex = new RegExp("^rid:(".concat(_a$1.RID_ID, ") (").concat(_a$1.RID_DIRECTION, ")(?:").concat(SP, "(").concat(REST, "))?"));
class RtcpMuxLine extends Line {
  static fromSdpLine(line) {
    if (!RtcpMuxLine.regex.test(line)) {
      return undefined;
    }
    return new RtcpMuxLine();
  }
  toSdpLine() {
    return "a=rtcp-mux";
  }
}
RtcpMuxLine.regex = /^rtcp-mux$/;
class RtcpFbLine extends Line {
  constructor(payloadType, feedback) {
    super();
    this.payloadType = payloadType;
    this.feedback = feedback;
  }
  static fromSdpLine(line) {
    if (!RtcpFbLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(RtcpFbLine.regex);
    var payloadType = parseInt(tokens[1], 10);
    var feedback = tokens[2];
    return new RtcpFbLine(payloadType, feedback);
  }
  toSdpLine() {
    return "a=rtcp-fb:".concat(this.payloadType, " ").concat(this.feedback);
  }
}
RtcpFbLine.regex = new RegExp("^rtcp-fb:(".concat(NUM, ") (").concat(REST, ")"));
var _a$6;
class RtpMapLine extends Line {
  constructor(payloadType, encodingName, clockRate, encodingParams) {
    super();
    this.payloadType = payloadType;
    this.encodingName = encodingName;
    this.clockRate = clockRate;
    this.encodingParams = encodingParams;
  }
  static fromSdpLine(line) {
    if (!RtpMapLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(RtpMapLine.regex);
    var payloadType = parseInt(tokens[1], 10);
    var encodingName = tokens[2];
    var clockRate = parseInt(tokens[3], 10);
    var encodingParams = tokens[4];
    return new RtpMapLine(payloadType, encodingName, clockRate, encodingParams);
  }
  toSdpLine() {
    var str = '';
    str += "a=rtpmap:".concat(this.payloadType, " ").concat(this.encodingName, "/").concat(this.clockRate);
    if (this.encodingParams) {
      str += "/".concat(this.encodingParams);
    }
    return str;
  }
}
_a$6 = RtpMapLine;
RtpMapLine.NON_SLASH_TOKEN = '[^\\s/]+';
RtpMapLine.regex = new RegExp("^rtpmap:(".concat(NUM, ") (").concat(_a$6.NON_SLASH_TOKEN, ")/(").concat(_a$6.NON_SLASH_TOKEN, ")(?:/(").concat(_a$6.NON_SLASH_TOKEN, "))?"));
class SctpPortLine extends Line {
  constructor(port) {
    super();
    this.port = port;
  }
  static fromSdpLine(line) {
    if (!SctpPortLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(SctpPortLine.regex);
    var port = parseInt(tokens[1], 10);
    return new SctpPortLine(port);
  }
  toSdpLine() {
    return "a=sctp-port:".concat(this.port);
  }
}
SctpPortLine.regex = new RegExp("^sctp-port:(".concat(NUM, ")"));
class SessionInformationLine extends Line {
  constructor(info) {
    super();
    this.info = info;
  }
  static fromSdpLine(line) {
    if (!SessionInformationLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(SessionInformationLine.regex);
    var info = tokens[1];
    return new SessionInformationLine(info);
  }
  toSdpLine() {
    return "i=".concat(this.info);
  }
}
SessionInformationLine.regex = new RegExp("(".concat(REST, ")"));
class SessionNameLine extends Line {
  constructor(name) {
    super();
    this.name = name;
  }
  static fromSdpLine(line) {
    if (!SessionNameLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(SessionNameLine.regex);
    var name = tokens[1];
    return new SessionNameLine(name);
  }
  toSdpLine() {
    return "s=".concat(this.name);
  }
}
SessionNameLine.regex = new RegExp("^(".concat(REST, ")"));
class SetupLine extends Line {
  constructor(setup) {
    super();
    this.setup = setup;
  }
  static fromSdpLine(line) {
    if (!SetupLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(SetupLine.regex);
    var setup = tokens[1];
    return new SetupLine(setup);
  }
  toSdpLine() {
    return "a=setup:".concat(this.setup);
  }
}
SetupLine.regex = /^setup:(actpass|active|passive)$/;
class SimulcastLayer {
  constructor(id, paused) {
    this.id = id;
    this.paused = paused;
  }
  toString() {
    return this.paused ? "~".concat(this.id) : this.id;
  }
}
class SimulcastLayerList {
  constructor() {
    this.layers = [];
  }
  addLayer(layer) {
    this.layers.push([layer]);
  }
  addLayerWithAlternatives(alternatives) {
    this.layers.push(alternatives);
  }
  get length() {
    return this.layers.length;
  }
  get(index) {
    return this.layers[index];
  }
  static fromString(str) {
    var layerList = new SimulcastLayerList();
    var tokens = str.split(';');
    if (tokens.length === 1 && !tokens[0].trim()) {
      throw new Error('simulcast stream list empty');
    }
    tokens.forEach(token => {
      if (!token) {
        throw new Error('simulcast layer list empty');
      }
      var ridTokens = token.split(',');
      var layers = [];
      ridTokens.forEach(ridToken => {
        if (!ridToken || ridToken === '~') {
          throw new Error('rid empty');
        }
        var paused = ridToken[0] === '~';
        var rid = paused ? ridToken.substring(1) : ridToken;
        layers.push(new SimulcastLayer(rid, paused));
      });
      layerList.addLayerWithAlternatives(layers);
    });
    return layerList;
  }
  toString() {
    return this.layers.map(altArray => altArray.map(v => v.toString()).join(',')).join(';');
  }
}
class SimulcastLine extends Line {
  constructor(sendLayers, recvLayers) {
    super();
    this.sendLayers = sendLayers;
    this.recvLayers = recvLayers;
  }
  static fromSdpLine(line) {
    if (!SimulcastLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(SimulcastLine.regex);
    var bidirectional = tokens[3] && tokens[4];
    var firstDirection = tokens[1];
    var layerList1 = SimulcastLayerList.fromString(tokens[2]);
    var layerList2 = new SimulcastLayerList();
    if (bidirectional) {
      var secondDirection = tokens[3];
      if (firstDirection === secondDirection) {
        return undefined;
      }
      layerList2 = SimulcastLayerList.fromString(tokens[4]);
    }
    var sendLayerList;
    var recvLayerList;
    if (firstDirection === 'send') {
      sendLayerList = layerList1;
      recvLayerList = layerList2;
    } else {
      sendLayerList = layerList2;
      recvLayerList = layerList1;
    }
    return new SimulcastLine(sendLayerList, recvLayerList);
  }
  toSdpLine() {
    var str = 'a=simulcast:';
    if (this.sendLayers.length) {
      str += "send ".concat(this.sendLayers.toString());
      if (this.recvLayers.length) {
        str += " ";
      }
    }
    if (this.recvLayers.length) {
      str += "recv ".concat(this.recvLayers.toString());
    }
    return str;
  }
}
SimulcastLine.regex = new RegExp("^simulcast:(send|recv) (".concat(ANY_NON_WS, ")(?: (send|recv) (").concat(ANY_NON_WS, "))?"));
class SsrcLine extends Line {
  constructor(ssrcId, attribute) {
    var attributeValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    var attributeData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    super();
    this.ssrcId = ssrcId;
    this.attribute = attribute;
    this.attributeValue = attributeValue;
    this.attributeData = attributeData;
  }
  static fromSdpLine(line) {
    if (!SsrcLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(SsrcLine.regex);
    var ssrcId = parseInt(tokens[1], 10);
    var attribute = tokens[2];
    var attributeValue = tokens[3];
    var attributeData = tokens[4];
    return new SsrcLine(ssrcId, attribute, attributeValue, attributeData);
  }
  toSdpLine() {
    var str = "a=ssrc:".concat(this.ssrcId, " ").concat(this.attribute);
    if (this.attributeValue) {
      str += ":".concat(this.attributeValue);
    }
    if (this.attributeData) {
      str += " ".concat(this.attributeData);
    }
    return str;
  }
}
SsrcLine.regex = new RegExp("^ssrc:(".concat(NUM, ") (").concat(SDP_TOKEN, ")(?::(").concat(SDP_TOKEN, ")?(?: (").concat(ANY_NON_WS, "))?)?$"));
class SsrcGroupLine extends Line {
  constructor(semantics, ssrcs) {
    super();
    this.semantics = semantics;
    this.ssrcs = ssrcs;
  }
  static fromSdpLine(line) {
    if (!SsrcGroupLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(SsrcGroupLine.regex);
    var semantics = tokens[1];
    var ssrcs = tokens[2].split(' ').map(ssrcStr => parseInt(ssrcStr, 10));
    return new SsrcGroupLine(semantics, ssrcs);
  }
  toSdpLine() {
    return "a=ssrc-group:".concat(this.semantics, " ").concat(this.ssrcs.join(' '));
  }
}
SsrcGroupLine.regex = new RegExp("^ssrc-group:(SIM|FID|FEC) ((?:".concat(NUM).concat(SP, "*)+)"));
class TimingLine extends Line {
  constructor(startTime, stopTime) {
    super();
    this.startTime = startTime;
    this.stopTime = stopTime;
  }
  static fromSdpLine(line) {
    if (!TimingLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(TimingLine.regex);
    var startTime = parseInt(tokens[1], 10);
    var stopTime = parseInt(tokens[2], 10);
    return new TimingLine(startTime, stopTime);
  }
  toSdpLine() {
    return "t=".concat(this.startTime, " ").concat(this.stopTime);
  }
}
TimingLine.regex = new RegExp("^(".concat(NUM, ") (").concat(NUM, ")"));
class VersionLine extends Line {
  constructor(version) {
    super();
    this.version = version;
  }
  static fromSdpLine(line) {
    if (!VersionLine.regex.test(line)) {
      return undefined;
    }
    var tokens = line.match(VersionLine.regex);
    var version = parseInt(tokens[1], 10);
    return new VersionLine(version);
  }
  toSdpLine() {
    return "v=".concat(this.version);
  }
}
VersionLine.regex = new RegExp("^(".concat(NUM, ")$"));
class UnknownLine extends Line {
  constructor(value) {
    super();
    this.value = value;
  }
  static fromSdpLine(line) {
    var tokens = line.match(UnknownLine.regex);
    var value = tokens[1];
    return new UnknownLine(value);
  }
  toSdpLine() {
    return "".concat(this.value);
  }
}
UnknownLine.regex = new RegExp("(".concat(REST, ")"));
class IceInfo {
  constructor() {
    this.candidates = [];
  }
  addLine(line) {
    if (line instanceof IceUfragLine) {
      this.ufrag = line;
      return true;
    }
    if (line instanceof IcePwdLine) {
      this.pwd = line;
      return true;
    }
    if (line instanceof IceOptionsLine) {
      this.options = line;
      return true;
    }
    if (line instanceof CandidateLine) {
      this.candidates.push(line);
      return true;
    }
    return false;
  }
  toLines() {
    var lines = [];
    if (this.ufrag) {
      lines.push(this.ufrag);
    }
    if (this.pwd) {
      lines.push(this.pwd);
    }
    if (this.options) {
      lines.push(this.options);
    }
    this.candidates.forEach(candidate => lines.push(candidate));
    return lines;
  }
}
class MediaDescription {
  constructor(type, port, protocol) {
    this.iceInfo = new IceInfo();
    this.otherLines = [];
    this.type = type;
    this.port = port;
    this.protocol = protocol;
  }
  findOtherLine(ty) {
    return this.otherLines.find(line => line instanceof ty);
  }
  addLine(line) {
    if (line instanceof BundleGroupLine) {
      throw new Error("Error: bundle group line not allowed in media description");
    }
    if (line instanceof BandwidthLine) {
      this.bandwidth = line;
      return true;
    }
    if (line instanceof MidLine) {
      this.mid = line.mid;
      return true;
    }
    if (line instanceof FingerprintLine) {
      this.fingerprint = line.fingerprint;
      return true;
    }
    if (line instanceof SetupLine) {
      this.setup = line.setup;
      return true;
    }
    if (line instanceof ConnectionLine) {
      this.connection = line;
      return true;
    }
    if (line instanceof ContentLine) {
      this.content = line;
      return true;
    }
    return this.iceInfo.addLine(line);
  }
}
class ApplicationMediaDescription extends MediaDescription {
  constructor(mediaLine) {
    super(mediaLine.type, mediaLine.port, mediaLine.protocol);
    this.fmts = [];
    this.fmts = mediaLine.formats;
  }
  toLines() {
    var lines = [];
    lines.push(new MediaLine(this.type, this.port, this.protocol, this.fmts));
    if (this.connection) {
      lines.push(this.connection);
    }
    if (this.bandwidth) {
      lines.push(this.bandwidth);
    }
    lines.push(...this.iceInfo.toLines());
    if (this.fingerprint) {
      lines.push(new FingerprintLine(this.fingerprint));
    }
    if (this.setup) {
      lines.push(new SetupLine(this.setup));
    }
    if (this.mid) {
      lines.push(new MidLine(this.mid));
    }
    if (this.content) {
      lines.push(this.content);
    }
    if (this.sctpPort) {
      lines.push(new SctpPortLine(this.sctpPort));
    }
    if (this.maxMessageSize) {
      lines.push(new MaxMessageSizeLine(this.maxMessageSize));
    }
    lines.push(...this.otherLines);
    return lines;
  }
  addLine(line) {
    if (super.addLine(line)) {
      return true;
    }
    if (line instanceof MediaLine) {
      throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');
    }
    if (line instanceof SctpPortLine) {
      this.sctpPort = line.port;
      return true;
    }
    if (line instanceof MaxMessageSizeLine) {
      this.maxMessageSize = line.maxMessageSize;
      return true;
    }
    this.otherLines.push(line);
    return true;
  }
}
class CodecInfo {
  constructor(pt) {
    this.fmtParams = new Map();
    this.feedback = [];
    this.pt = pt;
  }
  addLine(line) {
    if (line instanceof RtpMapLine) {
      this.name = line.encodingName;
      this.clockRate = line.clockRate;
      this.encodingParams = line.encodingParams;
      return true;
    }
    if (line instanceof FmtpLine) {
      this.fmtParams = new Map([...Array.from(this.fmtParams.entries()), ...Array.from(line.params.entries())]);
      if (line.params.has('apt')) {
        var apt = line.params.get('apt');
        this.primaryCodecPt = parseInt(apt, 10);
      }
      return true;
    }
    if (line instanceof RtcpFbLine) {
      this.feedback.push(line.feedback);
      return true;
    }
    return false;
  }
  toLines() {
    var lines = [];
    if (this.name && this.clockRate) {
      lines.push(new RtpMapLine(this.pt, this.name, this.clockRate, this.encodingParams));
    }
    this.feedback.forEach(fb => {
      lines.push(new RtcpFbLine(this.pt, fb));
    });
    if (this.fmtParams.size > 0) {
      lines.push(new FmtpLine(this.pt, this.fmtParams));
    }
    return lines;
  }
}
class AvMediaDescription extends MediaDescription {
  constructor(mediaLine) {
    super(mediaLine.type, mediaLine.port, mediaLine.protocol);
    this.pts = [];
    this.extMaps = new Map();
    this.rids = [];
    this.codecs = new Map();
    this.rtcpMux = false;
    this.ssrcs = [];
    this.ssrcGroups = [];
    this.pts = mediaLine.formats.map(fmt => {
      return parseInt(fmt, 10);
    });
    this.pts.forEach(pt => this.codecs.set(pt, new CodecInfo(pt)));
  }
  toLines() {
    var lines = [];
    lines.push(new MediaLine(this.type, this.port, this.protocol, this.pts.map(pt => "".concat(pt))));
    if (this.connection) {
      lines.push(this.connection);
    }
    if (this.bandwidth) {
      lines.push(this.bandwidth);
    }
    lines.push(...this.iceInfo.toLines());
    if (this.fingerprint) {
      lines.push(new FingerprintLine(this.fingerprint));
    }
    if (this.setup) {
      lines.push(new SetupLine(this.setup));
    }
    if (this.mid) {
      lines.push(new MidLine(this.mid));
    }
    if (this.rtcpMux) {
      lines.push(new RtcpMuxLine());
    }
    if (this.content) {
      lines.push(this.content);
    }
    this.extMaps.forEach(extMap => lines.push(extMap));
    this.rids.forEach(rid => lines.push(rid));
    if (this.simulcast) {
      lines.push(this.simulcast);
    }
    if (this.direction) {
      lines.push(new DirectionLine(this.direction));
    }
    this.codecs.forEach(codec => lines.push(...codec.toLines()));
    lines.push(...this.ssrcs);
    lines.push(...this.ssrcGroups);
    lines.push(...this.otherLines);
    return lines;
  }
  addLine(line) {
    if (super.addLine(line)) {
      return true;
    }
    if (line instanceof MediaLine) {
      throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');
    }
    if (line instanceof DirectionLine) {
      this.direction = line.direction;
      return true;
    }
    if (line instanceof ExtMapLine) {
      if (this.extMaps.has(line.id)) {
        throw new Error("Tried to extension with duplicate ID: an extension already exists with ID ".concat(line.id));
      }
      this.extMaps.set(line.id, line);
      return true;
    }
    if (line instanceof RidLine) {
      this.rids.push(line);
      return true;
    }
    if (line instanceof RtcpMuxLine) {
      this.rtcpMux = true;
      return true;
    }
    if (line instanceof SimulcastLine) {
      this.simulcast = line;
      return true;
    }
    if (line instanceof RtpMapLine || line instanceof FmtpLine || line instanceof RtcpFbLine) {
      var codec = this.codecs.get(line.payloadType);
      if (!codec) {
        throw new Error("Error: got line for unknown codec: ".concat(line.toSdpLine()));
      }
      codec.addLine(line);
      return true;
    }
    if (line instanceof SsrcLine) {
      this.ssrcs.push(line);
      return true;
    }
    if (line instanceof SsrcGroupLine) {
      this.ssrcGroups.push(line);
      return true;
    }
    this.otherLines.push(line);
    return true;
  }
  getCodecByPt(pt) {
    return this.codecs.get(pt);
  }
  removePt(pt) {
    var associatedPts = [...this.codecs.values()].filter(ci => ci.primaryCodecPt === pt).map(ci => ci.pt);
    var allPtsToRemove = [pt, ...associatedPts];
    allPtsToRemove.forEach(ptToRemove => {
      this.codecs.delete(ptToRemove);
    });
    this.pts = this.pts.filter(existingPt => allPtsToRemove.indexOf(existingPt) === -1);
  }
  addExtension(_ref) {
    var {
      uri,
      direction,
      attributes,
      id
    } = _ref;
    var getFirstFreeId = () => {
      var freeId = 1;
      for (;;) {
        if (!this.extMaps.has(freeId)) {
          break;
        }
        freeId += 1;
      }
      return freeId;
    };
    var extId = id || getFirstFreeId();
    if (this.extMaps.has(extId)) {
      throw new Error("Extension with ID ".concat(id, " already exists"));
    }
    if (extId === 0) {
      throw new Error("Extension ID 0 is reserved");
    }
    this.extMaps.set(extId, new ExtMapLine(extId, uri, direction, attributes));
  }
}
class SessionDescription {
  constructor() {
    this.groups = [];
    this.otherLines = [];
  }
  addLine(line) {
    if (line instanceof VersionLine) {
      this.version = line;
      return true;
    }
    if (line instanceof OriginLine) {
      this.origin = line;
      return true;
    }
    if (line instanceof SessionNameLine) {
      this.sessionName = line;
      return true;
    }
    if (line instanceof SessionInformationLine) {
      this.information = line;
      return true;
    }
    if (line instanceof TimingLine) {
      this.timing = line;
      return true;
    }
    if (line instanceof ConnectionLine) {
      this.connection = line;
      return true;
    }
    if (line instanceof BandwidthLine) {
      this.bandwidth = line;
      return true;
    }
    if (line instanceof BundleGroupLine) {
      this.groups.push(line);
      return true;
    }
    this.otherLines.push(line);
    return true;
  }
  toLines() {
    var lines = [];
    if (this.version) {
      lines.push(this.version);
    }
    if (this.origin) {
      lines.push(this.origin);
    }
    if (this.sessionName) {
      lines.push(this.sessionName);
    }
    if (this.information) {
      lines.push(this.information);
    }
    if (this.connection) {
      lines.push(this.connection);
    }
    if (this.bandwidth) {
      lines.push(this.bandwidth);
    }
    if (this.timing) {
      lines.push(this.timing);
    }
    if (this.groups) {
      lines.push(...this.groups);
    }
    lines.push(...this.otherLines);
    return lines;
  }
}
class Sdp {
  constructor() {
    this.session = new SessionDescription();
    this.media = [];
  }
  get avMedia() {
    return this.media.filter(mi => mi instanceof AvMediaDescription);
  }
  toString() {
    var lines = [];
    lines.push(...this.session.toLines());
    this.media.forEach(m => lines.push(...m.toLines()));
    return "".concat(lines.map(l => l.toSdpLine()).join('\r\n'), "\r\n");
  }
}
class Grammar {
  constructor() {
    this.parsers = new Map();
  }
  addParser(lineType, parser) {
    var parsers = this.parsers.get(lineType) || [];
    parsers.push(parser);
    this.parsers.set(lineType, parsers);
  }
  getParsers(lineType) {
    return this.parsers.get(lineType) || [];
  }
}
class SdpGrammar extends Grammar {
  constructor() {
    super();
    this.addParser('v', VersionLine.fromSdpLine);
    this.addParser('o', OriginLine.fromSdpLine);
    this.addParser('c', ConnectionLine.fromSdpLine);
    this.addParser('i', SessionInformationLine.fromSdpLine);
    this.addParser('m', MediaLine.fromSdpLine);
    this.addParser('s', SessionNameLine.fromSdpLine);
    this.addParser('t', TimingLine.fromSdpLine);
    this.addParser('b', BandwidthLine.fromSdpLine);
    this.addParser('a', RtpMapLine.fromSdpLine);
    this.addParser('a', RtcpFbLine.fromSdpLine);
    this.addParser('a', FmtpLine.fromSdpLine);
    this.addParser('a', DirectionLine.fromSdpLine);
    this.addParser('a', ExtMapLine.fromSdpLine);
    this.addParser('a', MidLine.fromSdpLine);
    this.addParser('a', IceUfragLine.fromSdpLine);
    this.addParser('a', IcePwdLine.fromSdpLine);
    this.addParser('a', IceOptionsLine.fromSdpLine);
    this.addParser('a', FingerprintLine.fromSdpLine);
    this.addParser('a', SetupLine.fromSdpLine);
    this.addParser('a', SctpPortLine.fromSdpLine);
    this.addParser('a', MaxMessageSizeLine.fromSdpLine);
    this.addParser('a', RtcpMuxLine.fromSdpLine);
    this.addParser('a', BundleGroupLine.fromSdpLine);
    this.addParser('a', ContentLine.fromSdpLine);
    this.addParser('a', RidLine.fromSdpLine);
    this.addParser('a', CandidateLine.fromSdpLine);
    this.addParser('a', SimulcastLine.fromSdpLine);
    this.addParser('a', SsrcLine.fromSdpLine);
    this.addParser('a', SsrcGroupLine.fromSdpLine);
  }
}
var DefaultSdpGrammar = new SdpGrammar();
function isValidLine(line) {
  return line.length > 2;
}
function parseToModel(lines) {
  var sdp = new Sdp();
  var currBlock = sdp.session;
  lines.forEach(l => {
    if (l instanceof MediaLine) {
      var mediaInfo;
      if (l.type === 'audio' || l.type === 'video') {
        mediaInfo = new AvMediaDescription(l);
      } else if (l.type === 'application') {
        mediaInfo = new ApplicationMediaDescription(l);
      } else {
        throw new Error("Unhandled media type: ".concat(l.type));
      }
      sdp.media.push(mediaInfo);
      currBlock = mediaInfo;
    } else {
      currBlock.addLine(l);
    }
  });
  return sdp;
}
function parseToLines(sdp, grammar) {
  var lines = [];
  sdp.split(/(\r\n|\r|\n)/).filter(isValidLine).forEach(l => {
    var lineType = l[0];
    var lineValue = l.slice(2);
    var parsers = grammar.getParsers(lineType);
    for (var parser of parsers) {
      var _result = parser(lineValue);
      if (_result) {
        lines.push(_result);
        return;
      }
    }
    var result = UnknownLine.fromSdpLine(l);
    lines.push(result);
  });
  return lines;
}
function parse(sdp) {
  var grammar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultSdpGrammar;
  var lines = parseToLines(sdp, grammar);
  var parsed = parseToModel(lines);
  return parsed;
}

function getLocalTrackInfo(kind, direction, localTrack) {
  return {
    trackOrKind: localTrack || kind,
    direction
  };
}
function hasH264Codec(mediaLine) {
  for (var codec of mediaLine.codecs.values()) {
    var _codec$name;
    if (((_codec$name = codec.name) === null || _codec$name === void 0 ? void 0 : _codec$name.toUpperCase()) === 'H264') {
      return true;
    }
  }
  return false;
}
function checkSdpForErrors(options, sdp) {
  if (!sdp) {
    return new Error('SDP is missing');
  }
  var parsedSdp = parse(sdp);
  for (var mediaLine of parsedSdp.avMedia) {
    if (!mediaLine.iceInfo.candidates.length) {
      return new IceGatheringError("ice candidates missing for m-line with mid=".concat(mediaLine.mid));
    }
    if (!options.allowPort0 && mediaLine.port === 0) {
      return new SdpError("Found invalid port number 0 at m-line with mid=".concat(mediaLine.mid));
    }
    if (!mediaLine.iceInfo.pwd || !mediaLine.iceInfo.ufrag) {
      return new IceGatheringError("ice ufrag and password not found for m-line with mid=".concat(mediaLine.mid));
    }
    if (options.requireH264 && mediaLine.type === 'video' && !hasH264Codec(mediaLine)) {
      return new SdpError("H264 codec is missing for video media description with mid=".concat(mediaLine.mid));
    }
  }
  return false;
}
function convertCLineToIPv4(sdp) {
  var convertConnectionProp = connection => {
    if ((connection === null || connection === void 0 ? void 0 : connection.addrType) === 'IP6') {
      connection.addrType = 'IP4';
      connection.ipAddr = '0.0.0.0';
    }
  };
  convertConnectionProp(sdp.session.connection);
  sdp.media.forEach(media => {
    convertConnectionProp(media.connection);
  });
}
function convertPort9to0(sdp) {
  sdp.media.forEach(media => {
    if (media.port === 9) {
      media.port = 0;
    }
  });
}
function setContentSlides(sdp) {
  var videoMediaDescriptions = sdp.avMedia.filter(media => media.type === 'video');
  if (videoMediaDescriptions.length === 2) {
    videoMediaDescriptions[1].addLine(new ContentLine(['slides']));
  }
}
class AnyLine extends Line {
  constructor(value) {
    super();
    _defineProperty(this, "value", void 0);
    this.value = value;
  }
  static fromSdpLine() {
    return undefined;
  }
  toSdpLine() {
    return "a=".concat(this.value);
  }
}
function addBandwidthLimits(sdp, limits) {
  sdp.avMedia.forEach(media => {
    if (media.type === 'audio') {
      media.addLine(new BandwidthLine('TIAS', limits.audio));
    } else if (media.type === 'video') {
      media.addLine(new BandwidthLine('TIAS', limits.video));
    }
  });
}
function addPeriodicKeyframes(sdp, value) {
  sdp.avMedia.forEach(media => {
    if (media.type === 'video') {
      media.addLine(new AnyLine("periodic-keyframes:".concat(value)));
    }
  });
}
function disableExtmap(sdp) {
  sdp.avMedia.forEach(media => {
    media.extMaps.clear();
  });
}
function updateH264fmtpParams(sdp, paramsToUpdate) {
  sdp.avMedia.forEach(media => {
    if (media.type === 'video') {
      media.codecs.forEach(codec => {
        var _codec$name2;
        if (((_codec$name2 = codec.name) === null || _codec$name2 === void 0 ? void 0 : _codec$name2.toUpperCase()) === 'H264') {
          paramsToUpdate.forEach((value, key) => codec.fmtParams.set(key, value));
        }
      });
    }
  });
}
function adjustH264Profile(sdp, maxFsValue) {
  var maxFsForProfileLevel = {
    10: 99,
    11: 396,
    12: 396,
    13: 396,
    20: 396,
    21: 792,
    22: 1620,
    30: 1620,
    31: 3600,
    32: 5120,
    40: 8192,
    41: 8192,
    42: 8704,
    50: 22080,
    51: 36864,
    52: 36864,
    60: 139264,
    61: 139264,
    62: 139264
  };
  var framesPerSecond = 30;
  sdp.avMedia.forEach(media => {
    if (media.type === 'video') {
      media.codecs.forEach(codec => {
        var _codec$name3;
        if (((_codec$name3 = codec.name) === null || _codec$name3 === void 0 ? void 0 : _codec$name3.toUpperCase()) === 'H264') {
          var profileLevelIdValue = codec.fmtParams.get('profile-level-id');
          if (profileLevelIdValue) {
            var profile = profileLevelIdValue.substring(0, 4).toLowerCase();
            var levelId = parseInt(profileLevelIdValue.substring(4, 6), 16);
            if (!maxFsForProfileLevel[levelId]) {
              throw new Error("found unsupported h264 profile level id value in the SDP: ".concat(levelId));
            }
            if (maxFsForProfileLevel[levelId] === maxFsValue) {
              return;
            }
            if (maxFsForProfileLevel[levelId] < maxFsValue) {
              codec.fmtParams.set('max-fs', "".concat(maxFsValue));
              codec.fmtParams.set('max-mbps', "".concat(maxFsValue * framesPerSecond));
              return;
            }
            var newLevelId = Object.keys(maxFsForProfileLevel).reverse().find(key => maxFsForProfileLevel[key] === maxFsValue);
            if (newLevelId) {
              var newLevelIdHex = parseInt(newLevelId, 10).toString(16);
              codec.fmtParams.set('profile-level-id', "".concat(profile).concat(newLevelIdHex));
              codec.fmtParams.set('max-mbps', "".concat(maxFsValue * framesPerSecond));
              return;
            }
            throw new Error("unsupported maxFsValue: ".concat(maxFsValue));
          }
        }
      });
    }
  });
}
function disableRtx(sdp) {
  sdp.avMedia.forEach(media => {
    var payloadTypesToRemove = [];
    media.codecs.forEach((codec, codecPt) => {
      if (codec.name === 'rtx' && codec.primaryCodecPt) {
        payloadTypesToRemove.push(codecPt);
      }
    });
    payloadTypesToRemove.forEach(pt => media.codecs.delete(pt));
    media.pts = media.pts.filter(pt => !payloadTypesToRemove.includes(pt));
  });
}
function copyClineToSession(sdp) {
  var mediaDescriptionWithCline = sdp.media.find(media => media.connection);
  if (mediaDescriptionWithCline) {
    sdp.session.connection = mediaDescriptionWithCline.connection;
  }
}
function mungeLocalSdpForBrowser(config, sdp) {
  var parsedSdp = parse(sdp);
  if (config.disableRtx) {
    disableRtx(parsedSdp);
  }
  return parsedSdp.toString();
}
function mungeLocalSdp(config, sdp) {
  var parsedSdp = parse(sdp);
  if (config.convertCLineToIPv4) {
    convertCLineToIPv4(parsedSdp);
  }
  if (config.bandwidthLimits) {
    addBandwidthLimits(parsedSdp, config.bandwidthLimits);
  }
  if (config.periodicKeyframes) {
    addPeriodicKeyframes(parsedSdp, config.periodicKeyframes);
  }
  if (config.convertPort9to0) {
    convertPort9to0(parsedSdp);
  }
  if (config.addContentSlides) {
    setContentSlides(parsedSdp);
  }
  if (config.disableExtmap) {
    disableExtmap(parsedSdp);
  }
  if (config.h264MaxFs) {
    adjustH264Profile(parsedSdp, config.h264MaxFs);
  }
  if (config.copyClineToSessionLevel) {
    copyClineToSession(parsedSdp);
  }
  return parsedSdp.toString();
}
function setStartBitrate(sdp, startBitrate) {
  updateH264fmtpParams(sdp, new Map([['x-google-start-bitrate', startBitrate.toString()]]));
}
function removeXtlsIceCandidates(sdp) {
  sdp.media.forEach(media => {
    media.iceInfo.candidates = media.iceInfo.candidates.filter(candidate => candidate.transport.toLowerCase() !== 'xtls');
  });
}
function mungeRemoteSdp(config, sdp) {
  var parsedSdp = parse(sdp);
  if (config.startBitrate) {
    setStartBitrate(parsedSdp, config.startBitrate);
  }
  if (config.disableExtmap) {
    disableExtmap(parsedSdp);
  }
  removeXtlsIceCandidates(parsedSdp);
  return parsedSdp.toString();
}

exports.MediaConnectionEventNames = void 0;
(function (MediaConnectionEventNames) {
  MediaConnectionEventNames["ICE_GATHERING_STATE_CHANGED"] = "iceGatheringState:changed";
  MediaConnectionEventNames["PEER_CONNECTION_STATE_CHANGED"] = "peerConnectionState:changed";
  MediaConnectionEventNames["ICE_CONNECTION_STATE_CHANGED"] = "iceConnectionState:changed";
  MediaConnectionEventNames["REMOTE_TRACK_ADDED"] = "remoteTrack:added";
  MediaConnectionEventNames["ROAP_MESSAGE_TO_SEND"] = "roap:messageToSend";
  MediaConnectionEventNames["ROAP_STARTED"] = "roap:started";
  MediaConnectionEventNames["ROAP_FAILURE"] = "roap:failure";
  MediaConnectionEventNames["ROAP_DONE"] = "roap:done";
  MediaConnectionEventNames["DTMF_TONE_CHANGED"] = "dtmfTone:changed";
  MediaConnectionEventNames["ACTIVE_SPEAKERS_CHANGED"] = "activeSpeakers:changed";
  MediaConnectionEventNames["VIDEO_SOURCES_COUNT_CHANGED"] = "videoSourcesCount:changed";
  MediaConnectionEventNames["AUDIO_SOURCES_COUNT_CHANGED"] = "audioSourcesCount:changed";
  MediaConnectionEventNames["REMOTE_SDP_ANSWER_PROCESSED"] = "remoteSdpAnswer:processed";
  MediaConnectionEventNames["REMOTE_SDP_OFFER_PROCESSED"] = "remoteSdpOffer:processed";
  MediaConnectionEventNames["LOCAL_SDP_OFFER_GENERATED"] = "localSdpOffer:processed";
  MediaConnectionEventNames["LOCAL_SDP_ANSWER_GENERATED"] = "localSdpAnswer:processed";
  MediaConnectionEventNames["ICE_CANDIDATE"] = "iceCandidate";
  MediaConnectionEventNames["ICE_CANDIDATE_ERROR"] = "iceCandidate:error";
})(exports.MediaConnectionEventNames || (exports.MediaConnectionEventNames = {}));
exports.RemoteTrackType = void 0;
(function (RemoteTrackType) {
  RemoteTrackType["AUDIO"] = "audio";
  RemoteTrackType["VIDEO"] = "video";
  RemoteTrackType["SCREENSHARE_VIDEO"] = "screenShareVideo";
})(exports.RemoteTrackType || (exports.RemoteTrackType = {}));
exports.ErrorType = void 0;
(function (ErrorType) {
  ErrorType["DOUBLECONFLICT"] = "DOUBLECONFLICT";
  ErrorType["CONFLICT"] = "CONFLICT";
  ErrorType["FAILED"] = "FAILED";
  ErrorType["INVALID_STATE"] = "INVALID_STATE";
  ErrorType["NOMATCH"] = "NOMATCH";
  ErrorType["OUT_OF_ORDER"] = "OUT_OF_ORDER";
  ErrorType["REFUSED"] = "REFUSED";
  ErrorType["RETRY"] = "RETRY";
  ErrorType["TIMEOUT"] = "TIMEOUT";
})(exports.ErrorType || (exports.ErrorType = {}));

function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var localTrackTypes = [{
  type: 'audio',
  kind: 'audio'
}, {
  type: 'video',
  kind: 'video'
}, {
  type: 'screenShareVideo',
  kind: 'video'
}];
class MediaConnection extends EventEmitter$5 {
  constructor(mediaConnectionConfig, options) {
    var metricsCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};
    var debugId = arguments.length > 3 ? arguments[3] : undefined;
    super();
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "pc", void 0);
    _defineProperty(this, "localTracks", void 0);
    _defineProperty(this, "transceivers", void 0);
    _defineProperty(this, "mediaDirection", void 0);
    _defineProperty(this, "remoteQualityLevel", void 0);
    _defineProperty(this, "metricsCallback", void 0);
    _defineProperty(this, "forceStatsReport", void 0);
    this.config = mediaConnectionConfig;
    this.metricsCallback = metricsCallback;
    this.mediaDirection = _objectSpread$8({}, options.direction);
    this.localTracks = _objectSpread$8({}, options.localTracks);
    this.remoteQualityLevel = options.remoteQualityLevel;
    this.id = debugId || 'MediaConnection';
    this.transceivers = {};
    this.pc = new window.RTCPeerConnection({
      iceServers: this.config.iceServers,
      bundlePolicy: 'max-compat'
    });
    this.forceStatsReport = rtcStats_1$1(this.pc, data => this.metricsCallback(data), 5000).forceStatsReport;
    this.pc.ontrack = this.onTrack.bind(this);
    this.pc.oniceconnectionstatechange = this.onIceConnectionStateChange.bind(this);
    this.pc.onconnectionstatechange = this.onPeerConnectionStateChange.bind(this);
    this.pc.addEventListener('icecandidate', event => {
      this.emit(exports.MediaConnectionEventNames.ICE_CANDIDATE, {
        candidate: event.candidate
      });
    });
    this.pc.addEventListener('icecandidateerror', event => {
      this.emit(exports.MediaConnectionEventNames.ICE_CANDIDATE_ERROR, {
        error: event
      });
    });
  }
  log(action, description) {
    getLogger().info("".concat(this.id, ":").concat(action, " ").concat(description));
  }
  warn(action, description) {
    getLogger().warn("".concat(this.id, ":").concat(action, " ").concat(description));
  }
  error(action, description, error) {
    getLogger().error("".concat(this.id, ":").concat(action, " ").concat(description, " ").concat(getErrorDescription(error)));
  }
  createTransceivers() {
    localTrackTypes.forEach(_ref => {
      var {
        type,
        kind
      } = _ref;
      var trackType = type;
      var transceiverType = type;
      var trackInfo = getLocalTrackInfo(kind, this.mediaDirection[trackType], this.localTracks[trackType]);
      if (!this.config.skipInactiveTransceivers || trackInfo.direction !== 'inactive') {
        this.transceivers[transceiverType] = this.pc.addTransceiver(trackInfo.trackOrKind, {
          direction: trackInfo.direction
        });
      }
    });
    this.setupTransceiverListeners();
  }
  initializeTransceivers(incomingOffer) {
    if (this.pc.getTransceivers().length > 0) {
      this.error('initiateOffer()', 'SDP negotiation already started');
      throw new Error('SDP negotiation already started');
    }
    if (incomingOffer) {
      this.addLocalTracks();
    } else {
      this.createTransceivers();
    }
  }
  close() {
    this.pc.close();
    this.pc.ontrack = null;
    this.pc.oniceconnectionstatechange = null;
    this.pc.onconnectionstatechange = null;
    this.pc.onicegatheringstatechange = null;
    this.pc.onicecandidate = null;
    this.pc.onicecandidateerror = null;
  }
  getConfig() {
    return this.config;
  }
  getMetricsCallback() {
    return this.metricsCallback;
  }
  getSendReceiveOptions() {
    return {
      localTracks: this.localTracks,
      direction: this.mediaDirection,
      remoteQualityLevel: this.remoteQualityLevel
    };
  }
  updateRemoteQualityLevel(newValue) {
    if (newValue !== this.remoteQualityLevel) {
      this.remoteQualityLevel = newValue;
      return true;
    }
    return false;
  }
  updateTransceivers(options) {
    var newOfferNeeded = false;
    this.mediaDirection.audio = options.direction.audio;
    this.mediaDirection.video = options.direction.video;
    this.mediaDirection.screenShareVideo = options.direction.screenShareVideo;
    this.identifyTransceivers();
    localTrackTypes.forEach(_ref2 => {
      var {
        type,
        kind
      } = _ref2;
      var trackType = type;
      var transceiverType = type;
      var track = options.localTracks[trackType];
      var transceiver = this.transceivers[transceiverType];
      if (track !== undefined && track !== this.localTracks[trackType]) {
        this.localTracks[trackType] = track;
        if (transceiver) {
          this.log('updateTransceivers()', "replacing sender track on \"".concat(type, "\" transceiver"));
          transceiver.sender.replaceTrack(track);
        }
      }
      if (transceiver) {
        var trackInfo = getLocalTrackInfo(kind, this.mediaDirection[trackType], this.localTracks[trackType]);
        if (transceiver.direction !== trackInfo.direction) {
          this.log('updateTransceivers()', "updating direction to ".concat(trackInfo.direction, " on \"").concat(type, "\" transceiver"));
          transceiver.direction = trackInfo.direction;
          newOfferNeeded = true;
        }
      }
    });
    return newOfferNeeded;
  }
  updateLocalTracks(tracks) {
    return this.updateTransceivers({
      localTracks: tracks,
      direction: _objectSpread$8({}, this.mediaDirection)
    });
  }
  updateDirection(direction) {
    return this.updateTransceivers({
      localTracks: this.localTracks,
      direction
    });
  }
  update(options) {
    var sdpNegotiationNeeded = false;
    if (this.updateRemoteQualityLevel(options.remoteQualityLevel)) {
      sdpNegotiationNeeded = true;
    }
    if (this.updateTransceivers(options)) {
      sdpNegotiationNeeded = true;
    }
    return sdpNegotiationNeeded;
  }
  getPeerConnectionState() {
    return this.pc.connectionState;
  }
  getIceConnectionState() {
    return this.pc.iceConnectionState;
  }
  getConnectionState() {
    var mediaConnectionState = this.evaluateMediaConnectionState();
    this.log('getConnectionState()', "called, returning ".concat(mediaConnectionState));
    return mediaConnectionState;
  }
  getIceGatheringState() {
    return this.pc.iceGatheringState;
  }
  getStats() {
    return this.pc.getStats();
  }
  getTransceiverStats() {
    var _this = this;
    return _asyncToGenerator(function* () {
      var result = {
        audio: {
          senders: [],
          receivers: []
        },
        video: {
          senders: [],
          receivers: []
        },
        screenShareAudio: {
          senders: [],
          receivers: []
        },
        screenShareVideo: {
          senders: [],
          receivers: []
        }
      };
      var _loop = function* _loop(type) {
        var transceiver = _this.transceivers[type];
        if (transceiver) {
          yield transceiver.sender.getStats().then(statsReport => {
            var _transceiver$sender, _transceiver$sender$t;
            result[type].senders.push({
              report: statsReport,
              currentDirection: transceiver.currentDirection,
              localTrackLabel: (_transceiver$sender = transceiver.sender) === null || _transceiver$sender === void 0 ? void 0 : (_transceiver$sender$t = _transceiver$sender.track) === null || _transceiver$sender$t === void 0 ? void 0 : _transceiver$sender$t.label
            });
          });
          yield transceiver.receiver.getStats().then(statsReport => {
            var _transceiver$sender2, _transceiver$sender2$;
            result[type].receivers.push({
              report: statsReport,
              currentDirection: transceiver.currentDirection,
              localTrackLabel: (_transceiver$sender2 = transceiver.sender) === null || _transceiver$sender2 === void 0 ? void 0 : (_transceiver$sender2$ = _transceiver$sender2.track) === null || _transceiver$sender2$ === void 0 ? void 0 : _transceiver$sender2$.label
            });
          });
        }
      };
      for (var {
        type
      } of localTrackTypes) {
        yield* _loop(type);
      }
      return result;
    })();
  }
  insertDTMF(tones, duration, interToneGap) {
    if (!this.transceivers.audio) {
      throw new Error('audio transceiver missing');
    }
    if (!this.transceivers.audio.sender) {
      throw new Error('this.transceivers.audio.sender is null');
    }
    if (!this.transceivers.audio.sender.dtmf) {
      throw new Error('this.transceivers.audio.sender.dtmf is null');
    }
    this.transceivers.audio.sender.dtmf.insertDTMF(tones.toUpperCase(), duration, interToneGap);
  }
  setupTransceiverListeners() {
    var _this$transceivers$au, _this$transceivers$au2;
    if ((_this$transceivers$au = this.transceivers.audio) !== null && _this$transceivers$au !== void 0 && (_this$transceivers$au2 = _this$transceivers$au.sender) !== null && _this$transceivers$au2 !== void 0 && _this$transceivers$au2.dtmf) {
      this.transceivers.audio.sender.dtmf.ontonechange = this.onToneChange.bind(this);
    }
  }
  onToneChange(event) {
    this.log('onToneChange()', "emitting Event.DTMF_TONE_CHANGED with tone=\"".concat(event.tone, "\""));
    this.emit(exports.MediaConnectionEventNames.DTMF_TONE_CHANGED, {
      tone: event.tone
    });
  }
  identifyTransceivers() {
    if (!this.transceivers.audio && !this.transceivers.video && !this.transceivers.screenShareVideo) {
      var transceivers = this.pc.getTransceivers();
      this.log('identifyTransceivers()', "transceivers.length=".concat(transceivers.length));
      transceivers.forEach((transceiver, idx) => {
        this.log('identifyTransceivers()', "transceiver[".concat(idx, "].mid=").concat(transceiver.mid));
      });
      [this.transceivers.audio, this.transceivers.video, this.transceivers.screenShareVideo] = transceivers;
      this.setupTransceiverListeners();
    }
  }
  onTrack(event) {
    var _event$transceiver, _this$transceivers$au3, _this$transceivers$au4, _this$transceivers$au5, _this$transceivers$vi, _this$transceivers$vi2, _this$transceivers$vi3, _this$transceivers$sc, _this$transceivers$sc2, _this$transceivers$sc3;
    this.log('onTrack()', "callback called: event=".concat(JSON.stringify(event)));
    var MEDIA_ID = {
      AUDIO_TRACK: '0',
      VIDEO_TRACK: '1',
      SHARE_TRACK: '2'
    };
    var {
      track
    } = event;
    var trackMediaID = null;
    this.identifyTransceivers();
    if ((_event$transceiver = event.transceiver) !== null && _event$transceiver !== void 0 && _event$transceiver.mid) {
      this.log('onTrack()', 'identifying track by event.transceiver.mid');
      trackMediaID = event.transceiver.mid;
    } else if (track.id === ((_this$transceivers$au3 = this.transceivers.audio) === null || _this$transceivers$au3 === void 0 ? void 0 : (_this$transceivers$au4 = _this$transceivers$au3.receiver) === null || _this$transceivers$au4 === void 0 ? void 0 : (_this$transceivers$au5 = _this$transceivers$au4.track) === null || _this$transceivers$au5 === void 0 ? void 0 : _this$transceivers$au5.id)) {
      trackMediaID = MEDIA_ID.AUDIO_TRACK;
    } else if (track.id === ((_this$transceivers$vi = this.transceivers.video) === null || _this$transceivers$vi === void 0 ? void 0 : (_this$transceivers$vi2 = _this$transceivers$vi.receiver) === null || _this$transceivers$vi2 === void 0 ? void 0 : (_this$transceivers$vi3 = _this$transceivers$vi2.track) === null || _this$transceivers$vi3 === void 0 ? void 0 : _this$transceivers$vi3.id)) {
      trackMediaID = MEDIA_ID.VIDEO_TRACK;
    } else if (track.id === ((_this$transceivers$sc = this.transceivers.screenShareVideo) === null || _this$transceivers$sc === void 0 ? void 0 : (_this$transceivers$sc2 = _this$transceivers$sc.receiver) === null || _this$transceivers$sc2 === void 0 ? void 0 : (_this$transceivers$sc3 = _this$transceivers$sc2.track) === null || _this$transceivers$sc3 === void 0 ? void 0 : _this$transceivers$sc3.id)) {
      trackMediaID = MEDIA_ID.SHARE_TRACK;
    } else {
      trackMediaID = null;
    }
    this.log('onTrack()', "trackMediaID=".concat(trackMediaID));
    switch (trackMediaID) {
      case MEDIA_ID.AUDIO_TRACK:
        this.log('onTrack()', 'emitting Event.REMOTE_TRACK_ADDED with type=AUDIO');
        this.emit(exports.MediaConnectionEventNames.REMOTE_TRACK_ADDED, {
          type: exports.RemoteTrackType.AUDIO,
          track
        });
        break;
      case MEDIA_ID.VIDEO_TRACK:
        this.log('onTrack()', 'emitting Event.REMOTE_TRACK_ADDED with type=VIDEO');
        this.emit(exports.MediaConnectionEventNames.REMOTE_TRACK_ADDED, {
          type: exports.RemoteTrackType.VIDEO,
          track
        });
        break;
      case MEDIA_ID.SHARE_TRACK:
        this.log('onTrack()', 'emitting Event.REMOTE_TRACK_ADDED with type=SCREENSHARE_VIDEO');
        this.emit(exports.MediaConnectionEventNames.REMOTE_TRACK_ADDED, {
          type: exports.RemoteTrackType.SCREENSHARE_VIDEO,
          track
        });
        break;
      default:
        {
          this.error('onTrack()', "failed to match remote track media id: ".concat(trackMediaID));
        }
    }
  }
  addLocalTracks() {
    this.log('addLocalTracks()', "adding tracks ".concat(JSON.stringify(this.localTracks)));
    if (this.localTracks.audio) {
      this.pc.addTrack(this.localTracks.audio);
    }
    if (this.localTracks.video) {
      this.pc.addTrack(this.localTracks.video);
    }
    if (this.localTracks.screenShareVideo) {
      this.pc.addTrack(this.localTracks.screenShareVideo);
    }
  }
  onPeerConnectionStateChange() {
    this.log('onPeerConnectionStateChange()', "callback called: peerConnectionState=".concat(this.pc.connectionState));
    this.emit(exports.MediaConnectionEventNames.PEER_CONNECTION_STATE_CHANGED, {
      state: this.pc.connectionState
    });
  }
  onIceConnectionStateChange() {
    this.log('onIceConnectionStateChange()', "callback called: iceConnectionState=".concat(this.pc.iceConnectionState));
    this.emit(exports.MediaConnectionEventNames.ICE_CONNECTION_STATE_CHANGED, {
      state: this.pc.iceConnectionState
    });
  }
  evaluateMediaConnectionState() {
    var rtcPcConnectionState = this.pc.connectionState;
    var iceState = this.pc.iceConnectionState;
    var connectionStates = [rtcPcConnectionState, iceState];
    var mediaConnectionState;
    if (connectionStates.some(value => value === 'closed')) {
      mediaConnectionState = exports.ConnectionState.Closed;
    } else if (connectionStates.some(value => value === 'failed')) {
      mediaConnectionState = exports.ConnectionState.Failed;
    } else if (connectionStates.some(value => value === 'disconnected')) {
      mediaConnectionState = exports.ConnectionState.Disconnected;
    } else if (connectionStates.every(value => value === 'connected' || value === 'completed')) {
      mediaConnectionState = exports.ConnectionState.Connected;
    } else if (connectionStates.every(value => value === 'new')) {
      mediaConnectionState = exports.ConnectionState.New;
    } else {
      mediaConnectionState = exports.ConnectionState.Connecting;
    }
    this.log('evaluateConnectionState', "iceConnectionState=".concat(iceState, " rtcPcConnectionState=").concat(rtcPcConnectionState, " => mediaConnectionState=").concat(mediaConnectionState));
    return mediaConnectionState;
  }
  createSdpMungingConfig() {
    if (this.remoteQualityLevel) {
      var maxFsValues = {
        LOW: 1620,
        MEDIUM: 3600,
        HIGH: 8192
      };
      if (!maxFsValues[this.remoteQualityLevel]) {
        throw new Error("invalid value for receiveOptions.remoteQualityLevel: ".concat(this.remoteQualityLevel));
      }
      if (this.config.sdpMunging.h264MaxFs) {
        this.warn('createSdpMungingConfig', 'conflict: both config.sdpMunging.h264MaxFs and receiveOptions.remoteQualityLevel are set, remoteQualityLevel will override the config');
      }
      return _objectSpread$8(_objectSpread$8({}, this.config.sdpMunging), {}, {
        h264MaxFs: maxFsValues[this.remoteQualityLevel]
      });
    }
    return this.config.sdpMunging;
  }
  createLocalOffer() {
    var sdpMungingConfig = this.createSdpMungingConfig();
    return this.pc.createOffer().then(description => {
      this.log('createLocalOffer', 'local SDP offer created');
      var mungedDescription = {
        type: description.type,
        sdp: mungeLocalSdpForBrowser(sdpMungingConfig, (description === null || description === void 0 ? void 0 : description.sdp) || '')
      };
      return this.pc.setLocalDescription(mungedDescription);
    }).then(() => this.waitForIceCandidates()).then(() => {
      var _this$pc$localDescrip;
      var mungedSdp = mungeLocalSdp(sdpMungingConfig, ((_this$pc$localDescrip = this.pc.localDescription) === null || _this$pc$localDescrip === void 0 ? void 0 : _this$pc$localDescrip.sdp) || '');
      this.emit(exports.MediaConnectionEventNames.LOCAL_SDP_OFFER_GENERATED);
      return {
        sdp: mungedSdp
      };
    }).catch(error => {
      if (error instanceof IceGatheringError || error instanceof SdpError) {
        throw error;
      } else {
        throw new SdpOfferCreationError("createLocalOffer() failure: ".concat(error.message), {
          cause: error
        });
      }
    });
  }
  handleRemoteOffer(sdp) {
    this.log('handleRemoteOffer', 'called');
    if (!sdp) {
      return Promise.reject(new SdpOfferHandlingError('SDP missing'));
    }
    var mungedRemoteSdp = mungeRemoteSdp(this.config.sdpMunging, sdp);
    var sdpMungingConfig = this.createSdpMungingConfig();
    return this.pc.setRemoteDescription(new window.RTCSessionDescription({
      type: 'offer',
      sdp: mungedRemoteSdp
    })).then(() => this.emit(exports.MediaConnectionEventNames.REMOTE_SDP_OFFER_PROCESSED)).then(() => this.pc.createAnswer()).then(answer => {
      var mungedAnswer = {
        type: answer.type,
        sdp: mungeLocalSdpForBrowser(sdpMungingConfig, (answer === null || answer === void 0 ? void 0 : answer.sdp) || '')
      };
      return this.pc.setLocalDescription(mungedAnswer);
    }).then(() => this.waitForIceCandidates()).then(() => {
      var _this$pc$localDescrip2;
      var mungedLocalSdp = mungeLocalSdp(sdpMungingConfig, ((_this$pc$localDescrip2 = this.pc.localDescription) === null || _this$pc$localDescrip2 === void 0 ? void 0 : _this$pc$localDescrip2.sdp) || '');
      this.emit(exports.MediaConnectionEventNames.LOCAL_SDP_ANSWER_GENERATED);
      return {
        sdp: mungedLocalSdp
      };
    }).catch(error => {
      if (error instanceof IceGatheringError || error instanceof SdpError) {
        throw error;
      } else {
        throw new SdpOfferHandlingError("handleRemoteOffer() failure: ".concat(error.message), {
          cause: error
        });
      }
    });
  }
  handleRemoteAnswer(sdp) {
    this.log('handleRemoteAnswer', 'called');
    if (!sdp) {
      return Promise.reject(new SdpAnswerHandlingError('SDP answer missing'));
    }
    var mungedRemoteSdp = mungeRemoteSdp(this.config.sdpMunging, sdp);
    return this.pc.setRemoteDescription(new window.RTCSessionDescription({
      type: 'answer',
      sdp: mungedRemoteSdp
    })).then(result => {
      this.emit(exports.MediaConnectionEventNames.REMOTE_SDP_ANSWER_PROCESSED);
      return result;
    }).catch(error => {
      throw new SdpAnswerHandlingError("handleRemoteAnswer() failure: ".concat(error.message), {
        cause: error
      });
    });
  }
  waitForIceCandidates() {
    return new Promise((resolve, reject) => {
      var startTime = performance.now();
      var done = false;
      var timeoutId;
      var runSdpCheckForErrors = () => {
        var _this$pc$localDescrip3;
        return checkSdpForErrors({
          allowPort0: !!this.config.sdpMunging.convertPort9to0,
          requireH264: !!this.config.requireH264
        }, (_this$pc$localDescrip3 = this.pc.localDescription) === null || _this$pc$localDescrip3 === void 0 ? void 0 : _this$pc$localDescrip3.sdp);
      };
      var doneGatheringIceCandidates = () => {
        if (!done) {
          var milliseconds = performance.now() - startTime;
          this.log('waitForIceCandidates()', "checking SDP...");
          var sdpError = runSdpCheckForErrors();
          if (sdpError) {
            var _this$pc$localDescrip4;
            this.error('waitForIceCandidates()', "SDP not valid after waiting: \"".concat(sdpError.message, "\", sdp=").concat((_this$pc$localDescrip4 = this.pc.localDescription) === null || _this$pc$localDescrip4 === void 0 ? void 0 : _this$pc$localDescrip4.sdp));
            reject(sdpError);
          }
          this.log('waitForIceCandidates()', "It took ".concat(milliseconds, " milliseconds to gather ice candidates"));
          if (timeoutId !== undefined) {
            clearTimeout(timeoutId);
          }
          done = true;
          this.pc.onicegatheringstatechange = null;
          this.pc.onicecandidate = null;
          this.pc.onicecandidateerror = null;
          resolve();
        }
      };
      if (this.pc.iceGatheringState === 'complete' && runSdpCheckForErrors() === false) {
        this.log('waitForIceCandidates()', 'iceGatheringState is already "complete" and local SDP is valid');
        resolve();
        return;
      }
      this.log('waitForIceCandidates()', 'waiting for ICE candidates to be gathered...');
      if (this.config.iceCandidatesTimeout) {
        timeoutId = setTimeout(() => {
          if (!done) {
            this.log('waitForIceCandidates()', "timeout of ".concat(this.config.iceCandidatesTimeout, " milliseconds reached"));
            doneGatheringIceCandidates();
          }
        }, this.config.iceCandidatesTimeout);
      }
      this.pc.onicegatheringstatechange = () => {
        this.log('waitForIceCandidates()', "iceGatheringState changed to ".concat(this.pc.iceGatheringState));
        this.emit(exports.MediaConnectionEventNames.ICE_GATHERING_STATE_CHANGED, {
          state: this.pc.iceGatheringState
        });
        if (this.pc.iceGatheringState === 'complete') {
          doneGatheringIceCandidates();
        }
      };
      this.pc.onicecandidate = evt => {
        if (evt.candidate === null) {
          this.log('waitForIceCandidates()', 'evt.candidate === null received');
          doneGatheringIceCandidates();
        } else {
          var _evt$candidate, _evt$candidate2;
          this.log('waitForIceCandidates()', "ICE Candidate(".concat((_evt$candidate = evt.candidate) === null || _evt$candidate === void 0 ? void 0 : _evt$candidate.sdpMLineIndex, "): ").concat((_evt$candidate2 = evt.candidate) === null || _evt$candidate2 === void 0 ? void 0 : _evt$candidate2.candidate));
        }
      };
      this.pc.onicecandidateerror = evt => {
        var event = evt;
        this.warn('waitForIceCandidates()', "onicecandidateerror: address=".concat(event.address, " errorCode=").concat(event.errorCode, ", errorText=").concat(event.errorText, ", url=").concat(event.url));
      };
    });
  }
  forceRtcMetricsCallback() {
    var _this$forceStatsRepor;
    (_this$forceStatsRepor = this.forceStatsReport) === null || _this$forceStatsRepor === void 0 ? void 0 : _this$forceStatsRepor.call(this);
  }
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

var logDisabled_ = true;
var deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  var match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  var nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    var wrappedCallback = e => {
      var modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);
  };
  var nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    var unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);
  };
  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get() {
      return this['_on' + eventNameToWrap];
    },
    set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}
function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}
function log$1() {
  if (typeof window === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  var result = {
    browser: null,
    version: null
  };

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }
  var {
    navigator
  } = window;
  if (navigator.mozGetUserMedia) {
    // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
    // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else {
    // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }
  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }
  return Object.keys(data).reduce(function (accumulator, key) {
    var isObj = isObject(data[key]);
    var value = isObj ? compactObject(data[key]) : data[key];
    var isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, {
      [key]: value
    });
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(name => {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(id => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  var filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  var trackStats = [];
  result.forEach(value => {
    if (value.type === 'track' && value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(trackStat => {
    result.forEach(stats => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
var logging = log$1;
function shimGetUserMedia$2(window, browserDetails) {
  var navigator = window && window.navigator;
  if (!navigator.mediaDevices) {
    return;
  }
  var constraintsToChrome_ = function constraintsToChrome_(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(key => {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = typeof c[key] === 'object' ? c[key] : {
        ideal: c[key]
      };
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function oldname_(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return name === 'deviceId' ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(mix => {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };
  var shimConstraints_ = function shimConstraints_(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      var remap = function remap(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      var face = constraints.video.facingMode;
      face = face && (typeof face === 'object' ? face : {
        ideal: face
      });
      var getSupportedFacingModeLies = browserDetails.version < 66;
      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        var matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices().then(devices => {
            devices = devices.filter(d => d.kind === 'videoinput');
            var dev = devices.find(d => matches.some(match => d.label.toLowerCase().includes(match)));
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }

            if (dev) {
              constraints.video.deviceId = face.exact ? {
                exact: dev.deviceId
              } : {
                ideal: dev.deviceId
              };
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };
  var shimError_ = function shimError_(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };
  var getUserMedia_ = function getUserMedia_(constraints, onSuccess, onError) {
    shimConstraints_(constraints, c => {
      navigator.webkitGetUserMedia(c, onSuccess, e => {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function (cs) {
      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
        if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(track => {
            track.stop();
          });
          throw new DOMException('', 'NotFoundError');
        }
        return stream;
      }, e => Promise.reject(shimError_(e))));
    };
  }
}

/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

function shimGetDisplayMedia$1(window, getSourceId) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    return getSourceId(constraints).then(sourceId => {
      var widthSpecified = constraints.video && constraints.video.width;
      var heightSpecified = constraints.video && constraints.video.height;
      var frameRateSpecified = constraints.video && constraints.video.frameRate;
      constraints.video = {
        mandatory: {
          chromeMediaSource: 'desktop',
          chromeMediaSourceId: sourceId,
          maxFrameRate: frameRateSpecified || 3
        }
      };
      if (widthSpecified) {
        constraints.video.mandatory.maxWidth = widthSpecified;
      }
      if (heightSpecified) {
        constraints.video.mandatory.maxHeight = heightSpecified;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    });
  };
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}
function shimOnTrack$1(window) {
  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get() {
        return this._ontrack;
      },
      set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      if (!this._ontrackpoly) {
        this._ontrackpoly = e => {
          // onaddstream does not fire when a track is added to an existing
          // stream. But stream.onaddtrack is implemented so we use that.
          e.stream.addEventListener('addtrack', te => {
            var receiver;
            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = this.getReceivers().find(r => r.track && r.track.id === te.track.id);
            } else {
              receiver = {
                track: te.track
              };
            }
            var event = new Event('track');
            event.track = te.track;
            event.receiver = receiver;
            event.transceiver = {
              receiver
            };
            event.streams = [e.stream];
            this.dispatchEvent(event);
          });
          e.stream.getTracks().forEach(track => {
            var receiver;
            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = this.getReceivers().find(r => r.track && r.track.id === track.id);
            } else {
              receiver = {
                track
              };
            }
            var event = new Event('track');
            event.track = track;
            event.receiver = receiver;
            event.transceiver = {
              receiver
            };
            event.streams = [e.stream];
            this.dispatchEvent(event);
          });
        };
        this.addEventListener('addstream', this._ontrackpoly);
      }
      return origSetRemoteDescription.apply(this, arguments);
    };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    wrapPeerConnectionEvent(window, 'track', e => {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver', {
          value: {
            receiver: e.receiver
          }
        });
      }
      return e;
    });
  }
}
function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (typeof window === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {
    var shimSenderWithDtmf = function shimSenderWithDtmf(pc, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };

      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        var sender = origAddTrack.apply(this, arguments);
        if (!sender) {
          sender = shimSenderWithDtmf(this, track);
          this._senders.push(sender);
        }
        return sender;
      };
      var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        origRemoveTrack.apply(this, arguments);
        var idx = this._senders.indexOf(sender);
        if (idx !== -1) {
          this._senders.splice(idx, 1);
        }
      };
    }
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      this._senders = this._senders || [];
      origRemoveStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        var sender = this._senders.find(s => s.track === track);
        if (sender) {
          // remove sender
          this._senders.splice(this._senders.indexOf(sender), 1);
        }
      });
    };
  } else if (typeof window === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      var senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}
function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    var [selector, onSucc, onErr] = arguments;

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }
    var fixChromeStats_ = function fixChromeStats_(response) {
      var standardReport = {};
      var reports = response.result();
      reports.forEach(report => {
        var standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(name => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });
      return standardReport;
    };

    // shim getStats with maplike support
    var makeMapStats = function makeMapStats(stats) {
      return new Map(Object.keys(stats).map(key => [key, stats[key]]));
    };
    if (arguments.length >= 2) {
      var successCallbackWrapper_ = function successCallbackWrapper_(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };
      return origGetStats.apply(this, [successCallbackWrapper_, selector]);
    }

    // promise-support
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [function (response) {
        resolve(makeMapStats(fixChromeStats_(response)));
      }, reject]);
    }).then(onSucc, onErr);
  };
}
function shimSenderReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      var sender = this;
      return this._pc.getStats().then(result =>
      /* Note: this will include stats of all senders that
       *   send a track with the same id as sender.track as
       *   it is not possible to identify the RTCRtpSender.
       */
      filterStats(result, sender.track, true));
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        var receivers = origGetReceivers.apply(this, []);
        receivers.forEach(receiver => receiver._pc = this);
        return receivers;
      };
    }
    wrapPeerConnectionEvent(window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      var receiver = this;
      return this._pc.getStats().then(result => filterStats(result, receiver.track, false));
    };
  }
  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  var origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
      var track = arguments[0];
      var sender;
      var receiver;
      var err;
      this.getSenders().forEach(s => {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(r => {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || sender && receiver) {
        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    return Object.keys(this._shimmedLocalStreams).map(streamId => this._shimmedLocalStreams[streamId][0]);
  };
  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (!stream) {
      return origAddTrack.apply(this, arguments);
    }
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    var sender = origAddTrack.apply(this, arguments);
    if (!this._shimmedLocalStreams[stream.id]) {
      this._shimmedLocalStreams[stream.id] = [stream, sender];
    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
      this._shimmedLocalStreams[stream.id].push(sender);
    }
    return sender;
  };
  var origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    stream.getTracks().forEach(track => {
      var alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    var existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    var newSenders = this.getSenders().filter(newSender => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };
  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    delete this._shimmedLocalStreams[stream.id];
    return origRemoveStream.apply(this, arguments);
  };
  var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    if (sender) {
      Object.keys(this._shimmedLocalStreams).forEach(streamId => {
        var idx = this._shimmedLocalStreams[streamId].indexOf(sender);
        if (idx !== -1) {
          this._shimmedLocalStreams[streamId].splice(idx, 1);
        }
        if (this._shimmedLocalStreams[streamId].length === 1) {
          delete this._shimmedLocalStreams[streamId];
        }
      });
    }
    return origRemoveTrack.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrack(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  var origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    var nativeStreams = origGetLocalStreams.apply(this);
    this._reverseStreams = this._reverseStreams || {};
    return nativeStreams.map(stream => this._reverseStreams[stream.id]);
  };
  var origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    stream.getTracks().forEach(track => {
      var alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      var newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };
  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
    delete this._streams[stream.id];
  };
  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }
    var streams = [].slice.call(arguments, 1);
    if (streams.length !== 1 || !streams[0].getTracks().find(t => t === track)) {
      // this is not fully correct but all we can manage without
      // [[associated MediaStreams]] internal slot.
      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');
    }
    var alreadyExists = this.getSenders().find(s => s.track === track);
    if (alreadyExists) {
      throw new DOMException('Track already exists.', 'InvalidAccessError');
    }
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    var oldStream = this._streams[stream.id];
    if (oldStream) {
      // this is using odd Chrome behaviour, use with caution:
      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
      // Note: we rely on the high-level addTrack/dtmf shim to
      // create the sender with a dtmf sender.
      oldStream.addTrack(track);

      // Trigger ONN async.
      Promise.resolve().then(() => {
        this.dispatchEvent(new Event('negotiationneeded'));
      });
    } else {
      var newStream = new window.MediaStream([track]);
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      this.addStream(newStream);
    }
    return this.getSenders().find(s => s.track === track);
  };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    var sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      var externalStream = pc._reverseStreams[internalId];
      var internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    var sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      var externalStream = pc._reverseStreams[internalId];
      var internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function (method) {
    var nativeMethod = window.RTCPeerConnection.prototype[method];
    var methodObj = {
      [method]() {
        var args = arguments;
        var isLegacyCall = arguments.length && typeof arguments[0] === 'function';
        if (isLegacyCall) {
          return nativeMethod.apply(this, [description => {
            var desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          }, err => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          }, arguments[2]]);
        }
        return nativeMethod.apply(this, arguments).then(description => replaceInternalStreamId(this, description));
      }
    };
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });
  var origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    if (!arguments.length || !arguments[0].type) {
      return origSetLocalDescription.apply(this, arguments);
    }
    arguments[0] = replaceExternalStreamId(this, arguments[0]);
    return origSetLocalDescription.apply(this, arguments);
  };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  var origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {
    get() {
      var description = origLocalDescription.get.apply(this);
      if (description.type === '') {
        return description;
      }
      return replaceInternalStreamId(this, description);
    }
  });
  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }
    // We can not yet check for sender instanceof RTCRtpSender
    // since we shim RTPSender. So we check if sender._pc is set.
    if (!sender._pc) {
      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');
    }
    var isLocal = sender._pc === this;
    if (!isLocal) {
      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');
    }

    // Search for the native stream the senders track belongs to.
    this._streams = this._streams || {};
    var stream;
    Object.keys(this._streams).forEach(streamid => {
      var hasTrack = this._streams[streamid].getTracks().find(track => sender.track === track);
      if (hasTrack) {
        stream = this._streams[streamid];
      }
    });
    if (stream) {
      if (stream.getTracks().length === 1) {
        // if this is the last track of the stream, remove the stream. This
        // takes care of any shimmed _senders.
        this.removeStream(this._reverseStreams[stream.id]);
      } else {
        // relying on the same odd chrome behaviour as above.
        stream.removeTrack(sender.track);
      }
      this.dispatchEvent(new Event('negotiationneeded'));
    }
  };
}
function shimPeerConnection$1(window, browserDetails) {
  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = {
        [method]() {
          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
          return nativeMethod.apply(this, arguments);
        }
      };
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window, browserDetails) {
  wrapPeerConnectionEvent(window, 'negotiationneeded', e => {
    var pc = e.target;
    if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}

var chromeShim = /*#__PURE__*/Object.freeze({
  __proto__: null,
  shimMediaStream: shimMediaStream,
  shimOnTrack: shimOnTrack$1,
  shimGetSendersWithDtmf: shimGetSendersWithDtmf,
  shimGetStats: shimGetStats,
  shimSenderReceiverGetStats: shimSenderReceiverGetStats,
  shimAddTrackRemoveTrackWithNative: shimAddTrackRemoveTrackWithNative,
  shimAddTrackRemoveTrack: shimAddTrackRemoveTrack,
  shimPeerConnection: shimPeerConnection$1,
  fixNegotiationNeeded: fixNegotiationNeeded,
  shimGetUserMedia: shimGetUserMedia$2,
  shimGetDisplayMedia: shimGetDisplayMedia$1
});

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
function shimGetUserMedia$1(window, browserDetails) {
  var navigator = window && window.navigator;
  var MediaStreamTrack = window && window.MediaStreamTrack;
  navigator.getUserMedia = function (constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    var remap = function remap(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };
    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function (c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };
    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function () {
        var obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }
    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function (c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}

/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    if (!(constraints && constraints.video)) {
      var err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');
      err.name = 'NotFoundError';
      // from https://heycam.github.io/webidl/#idl-DOMException-error-names
      err.code = 8;
      return Promise.reject(err);
    }
    if (constraints.video === true) {
      constraints.video = {
        mediaSource: preferredMediaSource
      };
    } else {
      constraints.video.mediaSource = preferredMediaSource;
    }
    return window.navigator.mediaDevices.getUserMedia(constraints);
  };
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {
          receiver: this.receiver
        };
      }
    });
  }
}
function shimPeerConnection(window, browserDetails) {
  if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }

  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }
  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = {
        [method]() {
          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
          return nativeMethod.apply(this, arguments);
        }
      };
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
  var modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };
  var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    var [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null]).then(stats => {
      if (browserDetails.version < 53 && !onSucc) {
        // Shim only promise getStats with spec-hyphens in type names
        // Leave callback version alone; misc old uses of forEach before Map
        try {
          stats.forEach(stat => {
            stat.type = modernStatsTypes[stat.type] || stat.type;
          });
        } catch (e) {
          if (e.name !== 'TypeError') {
            throw e;
          }
          // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
          stats.forEach((stat, i) => {
            stats.set(i, Object.assign({}, stat, {
              type: modernStatsTypes[stat.type] || stat.type
            }));
          });
        }
      }
      return stats;
    }).then(onSucc, onErr);
  };
}
function shimSenderGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      var senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
  }
  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      var sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
  };
}
function shimReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      var receivers = origGetReceivers.apply(this, []);
      receivers.forEach(receiver => receiver._pc = this);
      return receivers;
    };
  }
  wrapPeerConnectionEvent(window, 'track', e => {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}
function shimRemoveStream(window) {
  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    deprecated('removeStream', 'removeTrack');
    this.getSenders().forEach(sender => {
      if (sender.track && stream.getTracks().includes(sender.track)) {
        this.removeTrack(sender);
      }
    });
  };
}
function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}
function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
      this.setParametersPromises = [];
      // WebIDL input coercion and validation
      var sendEncodings = arguments[1] && arguments[1].sendEncodings;
      if (sendEncodings === undefined) {
        sendEncodings = [];
      }
      sendEncodings = [...sendEncodings];
      var shouldPerformCheck = sendEncodings.length > 0;
      if (shouldPerformCheck) {
        // If sendEncodings params are provided, validate grammar
        sendEncodings.forEach(encodingParam => {
          if ('rid' in encodingParam) {
            var ridRegex = /^[a-z0-9]{0,16}$/i;
            if (!ridRegex.test(encodingParam.rid)) {
              throw new TypeError('Invalid RID value provided.');
            }
          }
          if ('scaleResolutionDownBy' in encodingParam) {
            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
              throw new RangeError('scale_resolution_down_by must be >= 1.0');
            }
          }
          if ('maxFramerate' in encodingParam) {
            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
              throw new RangeError('max_framerate must be >= 0.0');
            }
          }
        });
      }
      var transceiver = origAddTransceiver.apply(this, arguments);
      if (shouldPerformCheck) {
        // Check if the init options were applied. If not we do this in an
        // asynchronous way and save the promise reference in a global object.
        // This is an ugly hack, but at the same time is way more robust than
        // checking the sender parameters before and after the createOffer
        // Also note that after the createoffer we are not 100% sure that
        // the params were asynchronously applied so we might miss the
        // opportunity to recreate offer.
        var {
          sender
        } = transceiver;
        var params = sender.getParameters();
        if (!('encodings' in params) ||
        // Avoid being fooled by patched getParameters() below.
        params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
          params.encodings = sendEncodings;
          sender.sendEncodings = sendEncodings;
          this.setParametersPromises.push(sender.setParameters(params).then(() => {
            delete sender.sendEncodings;
          }).catch(() => {
            delete sender.sendEncodings;
          }));
        }
      }
      return transceiver;
    };
  }
}
function shimGetParameters(window) {
  if (!(typeof window === 'object' && window.RTCRtpSender)) {
    return;
  }
  var origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters = function getParameters() {
      var params = origGetParameters.apply(this, arguments);
      if (!('encodings' in params)) {
        params.encodings = [].concat(this.sendEncodings || [{}]);
      }
      return params;
    };
  }
}
function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(() => {
        return origCreateOffer.apply(this, arguments);
      }).finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(() => {
        return origCreateAnswer.apply(this, arguments);
      }).finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}

var firefoxShim = /*#__PURE__*/Object.freeze({
  __proto__: null,
  shimOnTrack: shimOnTrack,
  shimPeerConnection: shimPeerConnection,
  shimSenderGetStats: shimSenderGetStats,
  shimReceiverGetStats: shimReceiverGetStats,
  shimRemoveStream: shimRemoveStream,
  shimRTCDataChannel: shimRTCDataChannel,
  shimAddTransceiver: shimAddTransceiver,
  shimGetParameters: shimGetParameters,
  shimCreateOffer: shimCreateOffer,
  shimCreateAnswer: shimCreateAnswer,
  shimGetUserMedia: shimGetUserMedia$1,
  shimGetDisplayMedia: shimGetDisplayMedia
});

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
function shimLocalStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      return this._localStreams;
    };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    var _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(track => _addTrack.call(this, track, stream));
      stream.getVideoTracks().forEach(track => _addTrack.call(this, track, stream));
    };
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {
      for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        streams[_key - 1] = arguments[_key];
      }
      if (streams) {
        streams.forEach(stream => {
          if (!this._localStreams) {
            this._localStreams = [stream];
          } else if (!this._localStreams.includes(stream)) {
            this._localStreams.push(stream);
          }
        });
      }
      return _addTrack.apply(this, arguments);
    };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      var index = this._localStreams.indexOf(stream);
      if (index === -1) {
        return;
      }
      this._localStreams.splice(index, 1);
      var tracks = stream.getTracks();
      this.getSenders().forEach(sender => {
        if (tracks.includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
  }
}
function shimRemoteStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
      return this._remoteStreams ? this._remoteStreams : [];
    };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get() {
        return this._onaddstream;
      },
      set(f) {
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = e => {
          e.streams.forEach(stream => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            var event = new Event('addstream');
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      var pc = this;
      if (!this._onaddstreampoly) {
        this.addEventListener('track', this._onaddstreampoly = function (e) {
          e.streams.forEach(stream => {
            if (!pc._remoteStreams) {
              pc._remoteStreams = [];
            }
            if (pc._remoteStreams.indexOf(stream) >= 0) {
              return;
            }
            pc._remoteStreams.push(stream);
            var event = new Event('addstream');
            event.stream = stream;
            pc.dispatchEvent(event);
          });
        });
      }
      return origSetRemoteDescription.apply(pc, arguments);
    };
  }
}
function shimCallbacksAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  var prototype = window.RTCPeerConnection.prototype;
  var origCreateOffer = prototype.createOffer;
  var origCreateAnswer = prototype.createAnswer;
  var setLocalDescription = prototype.setLocalDescription;
  var setRemoteDescription = prototype.setRemoteDescription;
  var addIceCandidate = prototype.addIceCandidate;
  prototype.createOffer = function createOffer(successCallback, failureCallback) {
    var options = arguments.length >= 2 ? arguments[2] : arguments[0];
    var promise = origCreateOffer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
    var options = arguments.length >= 2 ? arguments[2] : arguments[0];
    var promise = origCreateAnswer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  var withCallback = function withCallback(description, successCallback, failureCallback) {
    var promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;
  withCallback = function withCallback(description, successCallback, failureCallback) {
    var promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;
  withCallback = function withCallback(candidate, successCallback, failureCallback) {
    var promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}
function shimGetUserMedia(window) {
  var navigator = window && window.navigator;
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    var mediaDevices = navigator.mediaDevices;
    var _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = constraints => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }
  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
    }.bind(navigator);
  }
}
function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({}, constraints, {
      video: compactObject(constraints.video)
    });
  }
  return constraints;
}
function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  var OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
    if (pcConfig && pcConfig.iceServers) {
      var newIceServers = [];
      for (var i = 0; i < pcConfig.iceServers.length; i++) {
        var server = pcConfig.iceServers[i];
        if (!server.hasOwnProperty('urls') && server.hasOwnProperty('url')) {
          deprecated('RTCIceServer.url', 'RTCIceServer.urls');
          server = JSON.parse(JSON.stringify(server));
          server.urls = server.url;
          delete server.url;
          newIceServers.push(server);
        } else {
          newIceServers.push(pcConfig.iceServers[i]);
        }
      }
      pcConfig.iceServers = newIceServers;
    }
    return new OrigPeerConnection(pcConfig, pcConstraints);
  };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}
function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {
          receiver: this.receiver
        };
      }
    });
  }
}
function shimCreateOfferLegacy(window) {
  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
    if (offerOptions) {
      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
      }
      var audioTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'audio');
      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
        if (audioTransceiver.direction === 'sendrecv') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('sendonly');
          } else {
            audioTransceiver.direction = 'sendonly';
          }
        } else if (audioTransceiver.direction === 'recvonly') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('inactive');
          } else {
            audioTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
        this.addTransceiver('audio', {
          direction: 'recvonly'
        });
      }
      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
      }
      var videoTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'video');
      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
        if (videoTransceiver.direction === 'sendrecv') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('sendonly');
          } else {
            videoTransceiver.direction = 'sendonly';
          }
        } else if (videoTransceiver.direction === 'recvonly') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('inactive');
          } else {
            videoTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
        this.addTransceiver('video', {
          direction: 'recvonly'
        });
      }
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimAudioContext(window) {
  if (typeof window !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}

var safariShim = /*#__PURE__*/Object.freeze({
  __proto__: null,
  shimLocalStreamsAPI: shimLocalStreamsAPI,
  shimRemoteStreamsAPI: shimRemoteStreamsAPI,
  shimCallbacksAPI: shimCallbacksAPI,
  shimGetUserMedia: shimGetUserMedia,
  shimConstraints: shimConstraints,
  shimRTCIceServerUrls: shimRTCIceServerUrls,
  shimTrackEventTransceiver: shimTrackEventTransceiver,
  shimCreateOfferLegacy: shimCreateOfferLegacy,
  shimAudioContext: shimAudioContext
});

var sdp$1 = {exports: {}};

/* eslint-env node */
(function (module) {

  // SDP helpers.
  var SDPUtils = {};

  // Generate an alphanumeric identifier for cname or mids.
  // TODO: use UUIDs instead? https://gist.github.com/jed/982883
  SDPUtils.generateIdentifier = function () {
    return Math.random().toString(36).substr(2, 10);
  };

  // The RTCP CNAME used by all peerconnections from the same JS.
  SDPUtils.localCName = SDPUtils.generateIdentifier();

  // Splits SDP into lines, dealing with both CRLF and LF.
  SDPUtils.splitLines = function (blob) {
    return blob.trim().split('\n').map(line => line.trim());
  };
  // Splits SDP into sessionpart and mediasections. Ensures CRLF.
  SDPUtils.splitSections = function (blob) {
    var parts = blob.split('\nm=');
    return parts.map((part, index) => (index > 0 ? 'm=' + part : part).trim() + '\r\n');
  };

  // Returns the session description.
  SDPUtils.getDescription = function (blob) {
    var sections = SDPUtils.splitSections(blob);
    return sections && sections[0];
  };

  // Returns the individual media sections.
  SDPUtils.getMediaSections = function (blob) {
    var sections = SDPUtils.splitSections(blob);
    sections.shift();
    return sections;
  };

  // Returns lines that start with a certain prefix.
  SDPUtils.matchPrefix = function (blob, prefix) {
    return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
  };

  // Parses an ICE candidate line. Sample input:
  // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
  // rport 55996"
  // Input can be prefixed with a=.
  SDPUtils.parseCandidate = function (line) {
    var parts;
    // Parse both variants.
    if (line.indexOf('a=candidate:') === 0) {
      parts = line.substring(12).split(' ');
    } else {
      parts = line.substring(10).split(' ');
    }
    var candidate = {
      foundation: parts[0],
      component: {
        1: 'rtp',
        2: 'rtcp'
      }[parts[1]] || parts[1],
      protocol: parts[2].toLowerCase(),
      priority: parseInt(parts[3], 10),
      ip: parts[4],
      address: parts[4],
      // address is an alias for ip.
      port: parseInt(parts[5], 10),
      // skip parts[6] == 'typ'
      type: parts[7]
    };
    for (var i = 8; i < parts.length; i += 2) {
      switch (parts[i]) {
        case 'raddr':
          candidate.relatedAddress = parts[i + 1];
          break;
        case 'rport':
          candidate.relatedPort = parseInt(parts[i + 1], 10);
          break;
        case 'tcptype':
          candidate.tcpType = parts[i + 1];
          break;
        case 'ufrag':
          candidate.ufrag = parts[i + 1]; // for backward compatibility.
          candidate.usernameFragment = parts[i + 1];
          break;
        default:
          // extension handling, in particular ufrag. Don't overwrite.
          if (candidate[parts[i]] === undefined) {
            candidate[parts[i]] = parts[i + 1];
          }
          break;
      }
    }
    return candidate;
  };

  // Translates a candidate object into SDP candidate attribute.
  // This does not include the a= prefix!
  SDPUtils.writeCandidate = function (candidate) {
    var sdp = [];
    sdp.push(candidate.foundation);
    var component = candidate.component;
    if (component === 'rtp') {
      sdp.push(1);
    } else if (component === 'rtcp') {
      sdp.push(2);
    } else {
      sdp.push(component);
    }
    sdp.push(candidate.protocol.toUpperCase());
    sdp.push(candidate.priority);
    sdp.push(candidate.address || candidate.ip);
    sdp.push(candidate.port);
    var type = candidate.type;
    sdp.push('typ');
    sdp.push(type);
    if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {
      sdp.push('raddr');
      sdp.push(candidate.relatedAddress);
      sdp.push('rport');
      sdp.push(candidate.relatedPort);
    }
    if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
      sdp.push('tcptype');
      sdp.push(candidate.tcpType);
    }
    if (candidate.usernameFragment || candidate.ufrag) {
      sdp.push('ufrag');
      sdp.push(candidate.usernameFragment || candidate.ufrag);
    }
    return 'candidate:' + sdp.join(' ');
  };

  // Parses an ice-options line, returns an array of option tags.
  // Sample input:
  // a=ice-options:foo bar
  SDPUtils.parseIceOptions = function (line) {
    return line.substr(14).split(' ');
  };

  // Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
  // a=rtpmap:111 opus/48000/2
  SDPUtils.parseRtpMap = function (line) {
    var parts = line.substr(9).split(' ');
    var parsed = {
      payloadType: parseInt(parts.shift(), 10) // was: id
    };

    parts = parts[0].split('/');
    parsed.name = parts[0];
    parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
    parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
    // legacy alias, got renamed back to channels in ORTC.
    parsed.numChannels = parsed.channels;
    return parsed;
  };

  // Generates a rtpmap line from RTCRtpCodecCapability or
  // RTCRtpCodecParameters.
  SDPUtils.writeRtpMap = function (codec) {
    var pt = codec.payloadType;
    if (codec.preferredPayloadType !== undefined) {
      pt = codec.preferredPayloadType;
    }
    var channels = codec.channels || codec.numChannels || 1;
    return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\r\n';
  };

  // Parses a extmap line (headerextension from RFC 5285). Sample input:
  // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
  // a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
  SDPUtils.parseExtmap = function (line) {
    var parts = line.substr(9).split(' ');
    return {
      id: parseInt(parts[0], 10),
      direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
      uri: parts[1]
    };
  };

  // Generates an extmap line from RTCRtpHeaderExtensionParameters or
  // RTCRtpHeaderExtension.
  SDPUtils.writeExtmap = function (headerExtension) {
    return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + '\r\n';
  };

  // Parses a fmtp line, returns dictionary. Sample input:
  // a=fmtp:96 vbr=on;cng=on
  // Also deals with vbr=on; cng=on
  SDPUtils.parseFmtp = function (line) {
    var parsed = {};
    var kv;
    var parts = line.substr(line.indexOf(' ') + 1).split(';');
    for (var j = 0; j < parts.length; j++) {
      kv = parts[j].trim().split('=');
      parsed[kv[0].trim()] = kv[1];
    }
    return parsed;
  };

  // Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
  SDPUtils.writeFmtp = function (codec) {
    var line = '';
    var pt = codec.payloadType;
    if (codec.preferredPayloadType !== undefined) {
      pt = codec.preferredPayloadType;
    }
    if (codec.parameters && Object.keys(codec.parameters).length) {
      var params = [];
      Object.keys(codec.parameters).forEach(param => {
        if (codec.parameters[param] !== undefined) {
          params.push(param + '=' + codec.parameters[param]);
        } else {
          params.push(param);
        }
      });
      line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
    }
    return line;
  };

  // Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
  // a=rtcp-fb:98 nack rpsi
  SDPUtils.parseRtcpFb = function (line) {
    var parts = line.substr(line.indexOf(' ') + 1).split(' ');
    return {
      type: parts.shift(),
      parameter: parts.join(' ')
    };
  };

  // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
  SDPUtils.writeRtcpFb = function (codec) {
    var lines = '';
    var pt = codec.payloadType;
    if (codec.preferredPayloadType !== undefined) {
      pt = codec.preferredPayloadType;
    }
    if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
      // FIXME: special handling for trr-int?
      codec.rtcpFeedback.forEach(fb => {
        lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\r\n';
      });
    }
    return lines;
  };

  // Parses a RFC 5576 ssrc media attribute. Sample input:
  // a=ssrc:3735928559 cname:something
  SDPUtils.parseSsrcMedia = function (line) {
    var sp = line.indexOf(' ');
    var parts = {
      ssrc: parseInt(line.substr(7, sp - 7), 10)
    };
    var colon = line.indexOf(':', sp);
    if (colon > -1) {
      parts.attribute = line.substr(sp + 1, colon - sp - 1);
      parts.value = line.substr(colon + 1);
    } else {
      parts.attribute = line.substr(sp + 1);
    }
    return parts;
  };

  // Parse a ssrc-group line (see RFC 5576). Sample input:
  // a=ssrc-group:semantics 12 34
  SDPUtils.parseSsrcGroup = function (line) {
    var parts = line.substr(13).split(' ');
    return {
      semantics: parts.shift(),
      ssrcs: parts.map(ssrc => parseInt(ssrc, 10))
    };
  };

  // Extracts the MID (RFC 5888) from a media section.
  // Returns the MID or undefined if no mid line was found.
  SDPUtils.getMid = function (mediaSection) {
    var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
    if (mid) {
      return mid.substr(6);
    }
  };

  // Parses a fingerprint line for DTLS-SRTP.
  SDPUtils.parseFingerprint = function (line) {
    var parts = line.substr(14).split(' ');
    return {
      algorithm: parts[0].toLowerCase(),
      // algorithm is case-sensitive in Edge.
      value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.
    };
  };

  // Extracts DTLS parameters from SDP media section or sessionpart.
  // FIXME: for consistency with other functions this should only
  //   get the fingerprint line as input. See also getIceParameters.
  SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {
    var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');
    // Note: a=setup line is ignored since we use the 'auto' role in Edge.
    return {
      role: 'auto',
      fingerprints: lines.map(SDPUtils.parseFingerprint)
    };
  };

  // Serializes DTLS parameters to SDP.
  SDPUtils.writeDtlsParameters = function (params, setupType) {
    var sdp = 'a=setup:' + setupType + '\r\n';
    params.fingerprints.forEach(fp => {
      sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
    });
    return sdp;
  };

  // Parses a=crypto lines into
  //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
  SDPUtils.parseCryptoLine = function (line) {
    var parts = line.substr(9).split(' ');
    return {
      tag: parseInt(parts[0], 10),
      cryptoSuite: parts[1],
      keyParams: parts[2],
      sessionParams: parts.slice(3)
    };
  };
  SDPUtils.writeCryptoLine = function (parameters) {
    return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\r\n';
  };

  // Parses the crypto key parameters into
  //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
  SDPUtils.parseCryptoKeyParams = function (keyParams) {
    if (keyParams.indexOf('inline:') !== 0) {
      return null;
    }
    var parts = keyParams.substr(7).split('|');
    return {
      keyMethod: 'inline',
      keySalt: parts[0],
      lifeTime: parts[1],
      mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
      mkiLength: parts[2] ? parts[2].split(':')[1] : undefined
    };
  };
  SDPUtils.writeCryptoKeyParams = function (keyParams) {
    return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');
  };

  // Extracts all SDES parameters.
  SDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {
    var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');
    return lines.map(SDPUtils.parseCryptoLine);
  };

  // Parses ICE information from SDP media section or sessionpart.
  // FIXME: for consistency with other functions this should only
  //   get the ice-ufrag and ice-pwd lines as input.
  SDPUtils.getIceParameters = function (mediaSection, sessionpart) {
    var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];
    var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];
    if (!(ufrag && pwd)) {
      return null;
    }
    return {
      usernameFragment: ufrag.substr(12),
      password: pwd.substr(10)
    };
  };

  // Serializes ICE parameters to SDP.
  SDPUtils.writeIceParameters = function (params) {
    var sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' + 'a=ice-pwd:' + params.password + '\r\n';
    if (params.iceLite) {
      sdp += 'a=ice-lite\r\n';
    }
    return sdp;
  };

  // Parses the SDP media section and returns RTCRtpParameters.
  SDPUtils.parseRtpParameters = function (mediaSection) {
    var description = {
      codecs: [],
      headerExtensions: [],
      fecMechanisms: [],
      rtcp: []
    };
    var lines = SDPUtils.splitLines(mediaSection);
    var mline = lines[0].split(' ');
    for (var i = 3; i < mline.length; i++) {
      // find all codecs from mline[3..]
      var pt = mline[i];
      var rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];
      if (rtpmapline) {
        var codec = SDPUtils.parseRtpMap(rtpmapline);
        var fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');
        // Only the first a=fmtp:<pt> is considered.
        codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
        codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);
        description.codecs.push(codec);
        // parse FEC mechanisms from rtpmap lines.
        switch (codec.name.toUpperCase()) {
          case 'RED':
          case 'ULPFEC':
            description.fecMechanisms.push(codec.name.toUpperCase());
            break;
        }
      }
    }
    SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
      description.headerExtensions.push(SDPUtils.parseExtmap(line));
    });
    // FIXME: parse rtcp.
    return description;
  };

  // Generates parts of the SDP media section describing the capabilities /
  // parameters.
  SDPUtils.writeRtpDescription = function (kind, caps) {
    var sdp = '';

    // Build the mline.
    sdp += 'm=' + kind + ' ';
    sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
    sdp += ' UDP/TLS/RTP/SAVPF ';
    sdp += caps.codecs.map(codec => {
      if (codec.preferredPayloadType !== undefined) {
        return codec.preferredPayloadType;
      }
      return codec.payloadType;
    }).join(' ') + '\r\n';
    sdp += 'c=IN IP4 0.0.0.0\r\n';
    sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

    // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
    caps.codecs.forEach(codec => {
      sdp += SDPUtils.writeRtpMap(codec);
      sdp += SDPUtils.writeFmtp(codec);
      sdp += SDPUtils.writeRtcpFb(codec);
    });
    var maxptime = 0;
    caps.codecs.forEach(codec => {
      if (codec.maxptime > maxptime) {
        maxptime = codec.maxptime;
      }
    });
    if (maxptime > 0) {
      sdp += 'a=maxptime:' + maxptime + '\r\n';
    }
    if (caps.headerExtensions) {
      caps.headerExtensions.forEach(extension => {
        sdp += SDPUtils.writeExtmap(extension);
      });
    }
    // FIXME: write fecMechanisms.
    return sdp;
  };

  // Parses the SDP media section and returns an array of
  // RTCRtpEncodingParameters.
  SDPUtils.parseRtpEncodingParameters = function (mediaSection) {
    var encodingParameters = [];
    var description = SDPUtils.parseRtpParameters(mediaSection);
    var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
    var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

    // filter a=ssrc:... cname:, ignore PlanB-msid
    var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(parts => parts.attribute === 'cname');
    var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
    var secondarySsrc;
    var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(line => {
      var parts = line.substr(17).split(' ');
      return parts.map(part => parseInt(part, 10));
    });
    if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
      secondarySsrc = flows[0][1];
    }
    description.codecs.forEach(codec => {
      if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
        var encParam = {
          ssrc: primarySsrc,
          codecPayloadType: parseInt(codec.parameters.apt, 10)
        };
        if (primarySsrc && secondarySsrc) {
          encParam.rtx = {
            ssrc: secondarySsrc
          };
        }
        encodingParameters.push(encParam);
        if (hasRed) {
          encParam = JSON.parse(JSON.stringify(encParam));
          encParam.fec = {
            ssrc: primarySsrc,
            mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
          };
          encodingParameters.push(encParam);
        }
      }
    });
    if (encodingParameters.length === 0 && primarySsrc) {
      encodingParameters.push({
        ssrc: primarySsrc
      });
    }

    // we support both b=AS and b=TIAS but interpret AS as TIAS.
    var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
    if (bandwidth.length) {
      if (bandwidth[0].indexOf('b=TIAS:') === 0) {
        bandwidth = parseInt(bandwidth[0].substr(7), 10);
      } else if (bandwidth[0].indexOf('b=AS:') === 0) {
        // use formula from JSEP to convert b=AS to TIAS value.
        bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;
      } else {
        bandwidth = undefined;
      }
      encodingParameters.forEach(params => {
        params.maxBitrate = bandwidth;
      });
    }
    return encodingParameters;
  };

  // parses http://draft.ortc.org/#rtcrtcpparameters*
  SDPUtils.parseRtcpParameters = function (mediaSection) {
    var rtcpParameters = {};

    // Gets the first SSRC. Note that with RTX there might be multiple
    // SSRCs.
    var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(obj => obj.attribute === 'cname')[0];
    if (remoteSsrc) {
      rtcpParameters.cname = remoteSsrc.value;
      rtcpParameters.ssrc = remoteSsrc.ssrc;
    }

    // Edge uses the compound attribute instead of reducedSize
    // compound is !reducedSize
    var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
    rtcpParameters.reducedSize = rsize.length > 0;
    rtcpParameters.compound = rsize.length === 0;

    // parses the rtcp-mux attrіbute.
    // Note that Edge does not support unmuxed RTCP.
    var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
    rtcpParameters.mux = mux.length > 0;
    return rtcpParameters;
  };
  SDPUtils.writeRtcpParameters = function (rtcpParameters) {
    var sdp = '';
    if (rtcpParameters.reducedSize) {
      sdp += 'a=rtcp-rsize\r\n';
    }
    if (rtcpParameters.mux) {
      sdp += 'a=rtcp-mux\r\n';
    }
    if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
      sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\r\n';
    }
    return sdp;
  };

  // parses either a=msid: or a=ssrc:... msid lines and returns
  // the id of the MediaStream and MediaStreamTrack.
  SDPUtils.parseMsid = function (mediaSection) {
    var parts;
    var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
    if (spec.length === 1) {
      parts = spec[0].substr(7).split(' ');
      return {
        stream: parts[0],
        track: parts[1]
      };
    }
    var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(msidParts => msidParts.attribute === 'msid');
    if (planB.length > 0) {
      parts = planB[0].value.split(' ');
      return {
        stream: parts[0],
        track: parts[1]
      };
    }
  };

  // SCTP
  // parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
  // to draft-ietf-mmusic-sctp-sdp-05
  SDPUtils.parseSctpDescription = function (mediaSection) {
    var mline = SDPUtils.parseMLine(mediaSection);
    var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
    var maxMessageSize;
    if (maxSizeLine.length > 0) {
      maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
    }
    if (isNaN(maxMessageSize)) {
      maxMessageSize = 65536;
    }
    var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
    if (sctpPort.length > 0) {
      return {
        port: parseInt(sctpPort[0].substr(12), 10),
        protocol: mline.fmt,
        maxMessageSize
      };
    }
    var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
    if (sctpMapLines.length > 0) {
      var parts = sctpMapLines[0].substr(10).split(' ');
      return {
        port: parseInt(parts[0], 10),
        protocol: parts[1],
        maxMessageSize
      };
    }
  };

  // SCTP
  // outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
  // support by now receiving in this format, unless we originally parsed
  // as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
  // protocol of DTLS/SCTP -- without UDP/ or TCP/)
  SDPUtils.writeSctpDescription = function (media, sctp) {
    var output = [];
    if (media.protocol !== 'DTLS/SCTP') {
      output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctp-port:' + sctp.port + '\r\n'];
    } else {
      output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'];
    }
    if (sctp.maxMessageSize !== undefined) {
      output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
    }
    return output.join('');
  };

  // Generate a session ID for SDP.
  // https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
  // recommends using a cryptographically random +ve 64-bit value
  // but right now this should be acceptable and within the right range
  SDPUtils.generateSessionId = function () {
    return Math.random().toString().substr(2, 21);
  };

  // Write boiler plate for start of SDP
  // sessId argument is optional - if not supplied it will
  // be generated randomly
  // sessVersion is optional and defaults to 2
  // sessUser is optional and defaults to 'thisisadapterortc'
  SDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {
    var sessionId;
    var version = sessVer !== undefined ? sessVer : 2;
    if (sessId) {
      sessionId = sessId;
    } else {
      sessionId = SDPUtils.generateSessionId();
    }
    var user = sessUser || 'thisisadapterortc';
    // FIXME: sess-id should be an NTP timestamp.
    return 'v=0\r\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\r\n' + 's=-\r\n' + 't=0 0\r\n';
  };

  // Gets the direction from the mediaSection or the sessionpart.
  SDPUtils.getDirection = function (mediaSection, sessionpart) {
    // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
    var lines = SDPUtils.splitLines(mediaSection);
    for (var i = 0; i < lines.length; i++) {
      switch (lines[i]) {
        case 'a=sendrecv':
        case 'a=sendonly':
        case 'a=recvonly':
        case 'a=inactive':
          return lines[i].substr(2);
        // FIXME: What should happen here?
      }
    }

    if (sessionpart) {
      return SDPUtils.getDirection(sessionpart);
    }
    return 'sendrecv';
  };
  SDPUtils.getKind = function (mediaSection) {
    var lines = SDPUtils.splitLines(mediaSection);
    var mline = lines[0].split(' ');
    return mline[0].substr(2);
  };
  SDPUtils.isRejected = function (mediaSection) {
    return mediaSection.split(' ', 2)[1] === '0';
  };
  SDPUtils.parseMLine = function (mediaSection) {
    var lines = SDPUtils.splitLines(mediaSection);
    var parts = lines[0].substr(2).split(' ');
    return {
      kind: parts[0],
      port: parseInt(parts[1], 10),
      protocol: parts[2],
      fmt: parts.slice(3).join(' ')
    };
  };
  SDPUtils.parseOLine = function (mediaSection) {
    var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
    var parts = line.substr(2).split(' ');
    return {
      username: parts[0],
      sessionId: parts[1],
      sessionVersion: parseInt(parts[2], 10),
      netType: parts[3],
      addressType: parts[4],
      address: parts[5]
    };
  };

  // a very naive interpretation of a valid SDP.
  SDPUtils.isValidSDP = function (blob) {
    if (typeof blob !== 'string' || blob.length === 0) {
      return false;
    }
    var lines = SDPUtils.splitLines(blob);
    for (var i = 0; i < lines.length; i++) {
      if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
        return false;
      }
      // TODO: check the modifier a bit more.
    }

    return true;
  };

  // Expose public methods.
  {
    module.exports = SDPUtils;
  }
})(sdp$1);
var SDPUtils = sdp$1.exports;

var sdp = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  'default': SDPUtils
}, [sdp$1.exports]);

/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {
    return;
  }
  var NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substr(2);
    }
    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      var nativeCandidate = new NativeRTCIceCandidate(args);
      var parsedCandidate = SDPUtils.parseCandidate(args.candidate);
      var augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate);

      // Add a serializer that does not serialize the extra attributes.
      augmentedCandidate.toJSON = function toJSON() {
        return {
          candidate: augmentedCandidate.candidate,
          sdpMid: augmentedCandidate.sdpMid,
          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
          usernameFragment: augmentedCandidate.usernameFragment
        };
      };
      return augmentedCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  wrapPeerConnectionEvent(window, 'icecandidate', e => {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}
function shimMaxMessageSize(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }
  var sctpInDescription = function sctpInDescription(description) {
    if (!description || !description.sdp) {
      return false;
    }
    var sections = SDPUtils.splitSections(description.sdp);
    sections.shift();
    return sections.some(mediaSection => {
      var mLine = SDPUtils.parseMLine(mediaSection);
      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };
  var getRemoteFirefoxVersion = function getRemoteFirefoxVersion(description) {
    // TODO: Is there a better solution for detecting Firefox?
    var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    var version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };
  var getCanSendMaxMessageSize = function getCanSendMaxMessageSize(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    var canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };
  var getMaxMessageSize = function getMaxMessageSize(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    var maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }
    var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substr(19), 10);
    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };
  var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
    this._sctp = null;
    // Chrome decided to not expose .sctp in plan-b mode.
    // As usual, adapter.js has to do an 'ugly worakaround'
    // to cover up the mess.
    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
      var {
        sdpSemantics
      } = this.getConfiguration();
      if (sdpSemantics === 'plan-b') {
        Object.defineProperty(this, 'sctp', {
          get() {
            return typeof this._sctp === 'undefined' ? null : this._sctp;
          },
          enumerable: true,
          configurable: true
        });
      }
    }
    if (sctpInDescription(arguments[0])) {
      // Check if the remote is FF.
      var isFirefox = getRemoteFirefoxVersion(arguments[0]);

      // Get the maximum message size the local peer is capable of sending
      var canSendMMS = getCanSendMaxMessageSize(isFirefox);

      // Get the maximum message size of the remote peer.
      var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

      // Determine final maximum message size
      var maxMessageSize;
      if (canSendMMS === 0 && remoteMMS === 0) {
        maxMessageSize = Number.POSITIVE_INFINITY;
      } else if (canSendMMS === 0 || remoteMMS === 0) {
        maxMessageSize = Math.max(canSendMMS, remoteMMS);
      } else {
        maxMessageSize = Math.min(canSendMMS, remoteMMS);
      }

      // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
      // attribute.
      var sctp = {};
      Object.defineProperty(sctp, 'maxMessageSize', {
        get() {
          return maxMessageSize;
        }
      });
      this._sctp = sctp;
    }
    return origSetRemoteDescription.apply(this, arguments);
  };
}
function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    var origDataChannelSend = dc.send;
    dc.send = function send() {
      var data = arguments[0];
      var length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
    var dataChannel = origCreateDataChannel.apply(this, arguments);
    wrapDcSend(dataChannel, this);
    return dataChannel;
  };
  wrapPeerConnectionEvent(window, 'datachannel', e => {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}

/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
  ['setLocalDescription', 'setRemoteDescription'].forEach(method => {
    var origMethod = proto[method];
    proto[method] = function () {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = e => {
          var pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            var newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}
function removeExtmapAllowMixed(window, browserDetails) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  var nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      var sdp = desc.sdp.split('\n').filter(line => {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
      // Safari enforces read-only-ness of RTCSessionDescription fields.
      if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {
        arguments[0] = new window.RTCSessionDescription({
          type: desc.type,
          sdp
        });
      } else {
        desc.sdp = sdp;
      }
    }
    return nativeSRD.apply(this, arguments);
  };
}
function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
  // Support for addIceCandidate(null or undefined)
  // as well as addIceCandidate({candidate: "", ...})
  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
  // Note: must be called before other polyfills which change the signature.
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;
  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
    if (!arguments[0]) {
      if (arguments[1]) {
        arguments[1].apply(null);
      }
      return Promise.resolve();
    }
    // Firefox 68+ emits and processes {candidate: "", ...}, ignore
    // in older versions.
    // Native support for ignoring exists for Chrome M77+.
    // Safari ignores as well, exact version unknown but works in the same
    // version that also ignores addIceCandidate(null).
    if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {
      return Promise.resolve();
    }
    return nativeAddIceCandidate.apply(this, arguments);
  };
}

// Note: Make sure to call this ahead of APIs that modify
// setLocalDescription.length
function shimParameterlessSetLocalDescription(window, browserDetails) {
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  var nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    var desc = arguments[0] || {};
    if (typeof desc !== 'object' || desc.type && desc.sdp) {
      return nativeSetLocalDescription.apply(this, arguments);
    }
    // The remaining steps should technically happen when SLD comes off the
    // RTCPeerConnection's operations chain (not ahead of going on it), but
    // this is too difficult to shim. Instead, this shim only covers the
    // common case where the operations chain is empty. This is imperfect, but
    // should cover many cases. Rationale: Even if we can't reduce the glare
    // window to zero on imperfect implementations, there's value in tapping
    // into the perfect negotiation pattern that several browsers support.
    desc = {
      type: desc.type,
      sdp: desc.sdp
    };
    if (!desc.type) {
      switch (this.signalingState) {
        case 'stable':
        case 'have-local-offer':
        case 'have-remote-pranswer':
          desc.type = 'offer';
          break;
        default:
          desc.type = 'answer';
          break;
      }
    }
    if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {
      return nativeSetLocalDescription.apply(this, [desc]);
    }
    var func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
    return func.apply(this).then(d => nativeSetLocalDescription.apply(this, [d]));
  };
}

var commonShim = /*#__PURE__*/Object.freeze({
  __proto__: null,
  shimRTCIceCandidate: shimRTCIceCandidate,
  shimMaxMessageSize: shimMaxMessageSize,
  shimSendThrowTypeError: shimSendThrowTypeError,
  shimConnectionState: shimConnectionState,
  removeExtmapAllowMixed: removeExtmapAllowMixed,
  shimAddIceCandidateNullOrEmpty: shimAddIceCandidateNullOrEmpty,
  shimParameterlessSetLocalDescription: shimParameterlessSetLocalDescription
});

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

// Shimming starts here.
function adapterFactory() {
  var {
    window
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    shimChrome: true,
    shimFirefox: true,
    shimSafari: true
  };
  // Utils.
  var logging = log$1;
  var browserDetails = detectBrowser(window);
  var adapter = {
    browserDetails,
    commonShim,
    extractVersion: extractVersion,
    disableLog: disableLog,
    disableWarnings: disableWarnings,
    // Expose sdp as a convenience. For production apps include directly.
    sdp
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!chromeShim || !shimPeerConnection$1 || !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = chromeShim;

      // Must be called before shimPeerConnection.
      shimAddIceCandidateNullOrEmpty(window, browserDetails);
      shimParameterlessSetLocalDescription(window);
      shimGetUserMedia$2(window, browserDetails);
      shimMediaStream(window);
      shimPeerConnection$1(window, browserDetails);
      shimOnTrack$1(window);
      shimAddTrackRemoveTrack(window, browserDetails);
      shimGetSendersWithDtmf(window);
      shimGetStats(window);
      shimSenderReceiverGetStats(window);
      fixNegotiationNeeded(window, browserDetails);
      shimRTCIceCandidate(window);
      shimConnectionState(window);
      shimMaxMessageSize(window, browserDetails);
      shimSendThrowTypeError(window);
      removeExtmapAllowMixed(window, browserDetails);
      break;
    case 'firefox':
      if (!firefoxShim || !shimPeerConnection || !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = firefoxShim;

      // Must be called before shimPeerConnection.
      shimAddIceCandidateNullOrEmpty(window, browserDetails);
      shimParameterlessSetLocalDescription(window);
      shimGetUserMedia$1(window, browserDetails);
      shimPeerConnection(window, browserDetails);
      shimOnTrack(window);
      shimRemoveStream(window);
      shimSenderGetStats(window);
      shimReceiverGetStats(window);
      shimRTCDataChannel(window);
      shimAddTransceiver(window);
      shimGetParameters(window);
      shimCreateOffer(window);
      shimCreateAnswer(window);
      shimRTCIceCandidate(window);
      shimConnectionState(window);
      shimMaxMessageSize(window, browserDetails);
      shimSendThrowTypeError(window);
      break;
    case 'safari':
      if (!safariShim || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = safariShim;

      // Must be called before shimCallbackAPI.
      shimAddIceCandidateNullOrEmpty(window, browserDetails);
      shimParameterlessSetLocalDescription(window);
      shimRTCIceServerUrls(window);
      shimCreateOfferLegacy(window);
      shimCallbacksAPI(window);
      shimLocalStreamsAPI(window);
      shimRemoteStreamsAPI(window);
      shimTrackEventTransceiver(window);
      shimGetUserMedia(window);
      shimAudioContext(window);
      shimRTCIceCandidate(window);
      shimMaxMessageSize(window, browserDetails);
      shimSendThrowTypeError(window);
      removeExtmapAllowMixed(window, browserDetails);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }
  return adapter;
}

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
adapterFactory({
  window: typeof window === 'undefined' ? undefined : window
});

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return _assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

var ActionTypes;
(function (ActionTypes) {
  ActionTypes["Start"] = "xstate.start";
  ActionTypes["Stop"] = "xstate.stop";
  ActionTypes["Raise"] = "xstate.raise";
  ActionTypes["Send"] = "xstate.send";
  ActionTypes["Cancel"] = "xstate.cancel";
  ActionTypes["NullEvent"] = "";
  ActionTypes["Assign"] = "xstate.assign";
  ActionTypes["After"] = "xstate.after";
  ActionTypes["DoneState"] = "done.state";
  ActionTypes["DoneInvoke"] = "done.invoke";
  ActionTypes["Log"] = "xstate.log";
  ActionTypes["Init"] = "xstate.init";
  ActionTypes["Invoke"] = "xstate.invoke";
  ActionTypes["ErrorExecution"] = "error.execution";
  ActionTypes["ErrorCommunication"] = "error.communication";
  ActionTypes["ErrorPlatform"] = "error.platform";
  ActionTypes["ErrorCustom"] = "xstate.error";
  ActionTypes["Update"] = "xstate.update";
  ActionTypes["Pure"] = "xstate.pure";
  ActionTypes["Choose"] = "xstate.choose";
})(ActionTypes || (ActionTypes = {}));
var SpecialTargets;
(function (SpecialTargets) {
  SpecialTargets["Parent"] = "#_parent";
  SpecialTargets["Internal"] = "#_internal";
})(SpecialTargets || (SpecialTargets = {}));

var start$1 = ActionTypes.Start;
var stop$1 = ActionTypes.Stop;
var raise$1 = ActionTypes.Raise;
var send$1 = ActionTypes.Send;
var cancel$1 = ActionTypes.Cancel;
var nullEvent = ActionTypes.NullEvent;
var assign$2 = ActionTypes.Assign;
ActionTypes.After;
ActionTypes.DoneState;
var log = ActionTypes.Log;
var init = ActionTypes.Init;
var invoke = ActionTypes.Invoke;
ActionTypes.ErrorExecution;
var errorPlatform = ActionTypes.ErrorPlatform;
var error$1 = ActionTypes.ErrorCustom;
var update = ActionTypes.Update;
var choose = ActionTypes.Choose;
var pure = ActionTypes.Pure;

var STATE_DELIMITER = '.';
var EMPTY_ACTIVITY_MAP = {};
var DEFAULT_GUARD_TYPE = 'xstate.guard';
var TARGETLESS_KEY = '';

var IS_PRODUCTION = browser$1.env.NODE_ENV === 'production';

var _a;
function matchesState(parentStateId, childStateId, delimiter) {
  if (delimiter === void 0) {
    delimiter = STATE_DELIMITER;
  }
  var parentStateValue = toStateValue(parentStateId, delimiter);
  var childStateValue = toStateValue(childStateId, delimiter);
  if (isString(childStateValue)) {
    if (isString(parentStateValue)) {
      return childStateValue === parentStateValue;
    } // Parent more specific than child

    return false;
  }
  if (isString(parentStateValue)) {
    return parentStateValue in childStateValue;
  }
  return Object.keys(parentStateValue).every(function (key) {
    if (!(key in childStateValue)) {
      return false;
    }
    return matchesState(parentStateValue[key], childStateValue[key]);
  });
}
function getEventType(event) {
  try {
    return isString(event) || typeof event === 'number' ? "".concat(event) : event.type;
  } catch (e) {
    throw new Error('Events must be strings or objects with a string event.type property.');
  }
}
function toStatePath(stateId, delimiter) {
  try {
    if (isArray(stateId)) {
      return stateId;
    }
    return stateId.toString().split(delimiter);
  } catch (e) {
    throw new Error("'".concat(stateId, "' is not a valid state path."));
  }
}
function isStateLike(state) {
  return typeof state === 'object' && 'value' in state && 'context' in state && 'event' in state && '_event' in state;
}
function toStateValue(stateValue, delimiter) {
  if (isStateLike(stateValue)) {
    return stateValue.value;
  }
  if (isArray(stateValue)) {
    return pathToStateValue(stateValue);
  }
  if (typeof stateValue !== 'string') {
    return stateValue;
  }
  var statePath = toStatePath(stateValue, delimiter);
  return pathToStateValue(statePath);
}
function pathToStateValue(statePath) {
  if (statePath.length === 1) {
    return statePath[0];
  }
  var value = {};
  var marker = value;
  for (var i = 0; i < statePath.length - 1; i++) {
    if (i === statePath.length - 2) {
      marker[statePath[i]] = statePath[i + 1];
    } else {
      marker[statePath[i]] = {};
      marker = marker[statePath[i]];
    }
  }
  return value;
}
function mapValues(collection, iteratee) {
  var result = {};
  var collectionKeys = Object.keys(collection);
  for (var i = 0; i < collectionKeys.length; i++) {
    var key = collectionKeys[i];
    result[key] = iteratee(collection[key], key, collection, i);
  }
  return result;
}
function mapFilterValues(collection, iteratee, predicate) {
  var e_1, _a;
  var result = {};
  try {
    for (var _b = __values(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var item = collection[key];
      if (!predicate(item)) {
        continue;
      }
      result[key] = iteratee(item, key, collection);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
  return result;
}
/**
 * Retrieves a value at the given path.
 * @param props The deep path to the prop of the desired value
 */

var path = function path(props) {
  return function (object) {
    var e_2, _a;
    var result = object;
    try {
      for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
        var prop = props_1_1.value;
        result = result[prop];
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
      } finally {
        if (e_2) throw e_2.error;
      }
    }
    return result;
  };
};
/**
 * Retrieves a value at the given path via the nested accessor prop.
 * @param props The deep path to the prop of the desired value
 */

function nestedPath(props, accessorProp) {
  return function (object) {
    var e_3, _a;
    var result = object;
    try {
      for (var props_2 = __values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
        var prop = props_2_1.value;
        result = result[accessorProp][prop];
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);
      } finally {
        if (e_3) throw e_3.error;
      }
    }
    return result;
  };
}
function toStatePaths(stateValue) {
  if (!stateValue) {
    return [[]];
  }
  if (isString(stateValue)) {
    return [[stateValue]];
  }
  var result = flatten(Object.keys(stateValue).map(function (key) {
    var subStateValue = stateValue[key];
    if (typeof subStateValue !== 'string' && (!subStateValue || !Object.keys(subStateValue).length)) {
      return [[key]];
    }
    return toStatePaths(stateValue[key]).map(function (subPath) {
      return [key].concat(subPath);
    });
  }));
  return result;
}
function flatten(array) {
  var _a;
  return (_a = []).concat.apply(_a, __spreadArray([], __read(array), false));
}
function toArrayStrict(value) {
  if (isArray(value)) {
    return value;
  }
  return [value];
}
function toArray(value) {
  if (value === undefined) {
    return [];
  }
  return toArrayStrict(value);
}
function mapContext(mapper, context, _event) {
  var e_5, _a;
  if (isFunction(mapper)) {
    return mapper(context, _event.data);
  }
  var result = {};
  try {
    for (var _b = __values(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var subMapper = mapper[key];
      if (isFunction(subMapper)) {
        result[key] = subMapper(context, _event.data);
      } else {
        result[key] = subMapper;
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_5) throw e_5.error;
    }
  }
  return result;
}
function isBuiltInEvent(eventType) {
  return /^(done|error)\./.test(eventType);
}
function isPromiseLike(value) {
  if (value instanceof Promise) {
    return true;
  } // Check if shape matches the Promise/A+ specification for a "thenable".

  if (value !== null && (isFunction(value) || typeof value === 'object') && isFunction(value.then)) {
    return true;
  }
  return false;
}
function isBehavior(value) {
  return value !== null && typeof value === 'object' && 'transition' in value && typeof value.transition === 'function';
}
function partition(items, predicate) {
  var e_6, _a;
  var _b = __read([[], []], 2),
    truthy = _b[0],
    falsy = _b[1];
  try {
    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
      var item = items_1_1.value;
      if (predicate(item)) {
        truthy.push(item);
      } else {
        falsy.push(item);
      }
    }
  } catch (e_6_1) {
    e_6 = {
      error: e_6_1
    };
  } finally {
    try {
      if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
    } finally {
      if (e_6) throw e_6.error;
    }
  }
  return [truthy, falsy];
}
function updateHistoryStates(hist, stateValue) {
  return mapValues(hist.states, function (subHist, key) {
    if (!subHist) {
      return undefined;
    }
    var subStateValue = (isString(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);
    if (!subStateValue) {
      return undefined;
    }
    return {
      current: subStateValue,
      states: updateHistoryStates(subHist, subStateValue)
    };
  });
}
function updateHistoryValue(hist, stateValue) {
  return {
    current: stateValue,
    states: updateHistoryStates(hist, stateValue)
  };
}
function updateContext(context, _event, assignActions, state) {
  if (!IS_PRODUCTION) {
    warn(!!context, 'Attempting to update undefined context');
  }
  var updatedContext = context ? assignActions.reduce(function (acc, assignAction) {
    var e_7, _a;
    var assignment = assignAction.assignment;
    var meta = {
      state: state,
      action: assignAction,
      _event: _event
    };
    var partialUpdate = {};
    if (isFunction(assignment)) {
      partialUpdate = assignment(acc, _event.data, meta);
    } else {
      try {
        for (var _b = __values(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          var propAssignment = assignment[key];
          partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_7) throw e_7.error;
        }
      }
    }
    return Object.assign({}, acc, partialUpdate);
  }, context) : context;
  return updatedContext;
} // tslint:disable-next-line:no-empty

var warn = function warn() {};
if (!IS_PRODUCTION) {
  warn = function warn(condition, message) {
    var error = condition instanceof Error ? condition : undefined;
    if (!error && condition) {
      return;
    }
    if (console !== undefined) {
      var args = ["Warning: ".concat(message)];
      if (error) {
        args.push(error);
      } // tslint:disable-next-line:no-console

      console.warn.apply(console, args);
    }
  };
}
function isArray(value) {
  return Array.isArray(value);
} // tslint:disable-next-line:ban-types

function isFunction(value) {
  return typeof value === 'function';
}
function isString(value) {
  return typeof value === 'string';
}
function toGuard(condition, guardMap) {
  if (!condition) {
    return undefined;
  }
  if (isString(condition)) {
    return {
      type: DEFAULT_GUARD_TYPE,
      name: condition,
      predicate: guardMap ? guardMap[condition] : undefined
    };
  }
  if (isFunction(condition)) {
    return {
      type: DEFAULT_GUARD_TYPE,
      name: condition.name,
      predicate: condition
    };
  }
  return condition;
}
function isObservable(value) {
  try {
    return 'subscribe' in value && isFunction(value.subscribe);
  } catch (e) {
    return false;
  }
}
var symbolObservable = /*#__PURE__*/function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages

(_a = {}, _a[symbolObservable] = function () {
  return this;
}, _a[Symbol.observable] = function () {
  return this;
}, _a);
function isMachine(value) {
  return !!value && '__xstatenode' in value;
}
function isActor$1(value) {
  return !!value && typeof value.send === 'function';
}
function toEventObject(event, payload // id?: TEvent['type']
) {
  if (isString(event) || typeof event === 'number') {
    return _assign({
      type: event
    }, payload);
  }
  return event;
}
function toSCXMLEvent(event, scxmlEvent) {
  if (!isString(event) && '$$type' in event && event.$$type === 'scxml') {
    return event;
  }
  var eventObject = toEventObject(event);
  return _assign({
    name: eventObject.type,
    data: eventObject,
    $$type: 'scxml',
    type: 'external'
  }, scxmlEvent);
}
function toTransitionConfigArray(event, configLike) {
  var transitions = toArrayStrict(configLike).map(function (transitionLike) {
    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string' || isMachine(transitionLike)) {
      return {
        target: transitionLike,
        event: event
      };
    }
    return _assign(_assign({}, transitionLike), {
      event: event
    });
  });
  return transitions;
}
function normalizeTarget(target) {
  if (target === undefined || target === TARGETLESS_KEY) {
    return undefined;
  }
  return toArray(target);
}
function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
  if (!IS_PRODUCTION) {
    var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : '';
    if (originalError === currentError) {
      // tslint:disable-next-line:no-console
      console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
    } else {
      var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : ''; // tslint:disable-next-line:no-console

      console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
    }
  }
}
function evaluateGuard(machine, guard, context, _event, state) {
  var guards = machine.options.guards;
  var guardMeta = {
    state: state,
    cond: guard,
    _event: _event
  }; // TODO: do not hardcode!

  if (guard.type === DEFAULT_GUARD_TYPE) {
    return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);
  }
  var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];
  if (!condFn) {
    throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
  }
  return condFn(context, _event.data, guardMeta);
}
function toInvokeSource$1(src) {
  if (typeof src === 'string') {
    return {
      type: src
    };
  }
  return src;
}
function toObserver(nextHandler, errorHandler, completionHandler) {
  var noop = function noop() {};
  var isObserver = typeof nextHandler === 'object';
  var self = isObserver ? nextHandler : null;
  return {
    next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),
    error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),
    complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)
  };
}
function createInvokeId(stateNodeId, index) {
  return "".concat(stateNodeId, ":invocation[").concat(index, "]");
}

var initEvent = /*#__PURE__*/toSCXMLEvent({
  type: init
});
function getActionFunction(actionType, actionFunctionMap) {
  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;
}
function toActionObject(action, actionFunctionMap) {
  var actionObject;
  if (isString(action) || typeof action === 'number') {
    var exec = getActionFunction(action, actionFunctionMap);
    if (isFunction(exec)) {
      actionObject = {
        type: action,
        exec: exec
      };
    } else if (exec) {
      actionObject = exec;
    } else {
      actionObject = {
        type: action,
        exec: undefined
      };
    }
  } else if (isFunction(action)) {
    actionObject = {
      // Convert action to string if unnamed
      type: action.name || action.toString(),
      exec: action
    };
  } else {
    var exec = getActionFunction(action.type, actionFunctionMap);
    if (isFunction(exec)) {
      actionObject = _assign(_assign({}, action), {
        exec: exec
      });
    } else if (exec) {
      var actionType = exec.type || action.type;
      actionObject = _assign(_assign(_assign({}, exec), action), {
        type: actionType
      });
    } else {
      actionObject = action;
    }
  }
  return actionObject;
}
var toActionObjects = function toActionObjects(action, actionFunctionMap) {
  if (!action) {
    return [];
  }
  var actions = isArray(action) ? action : [action];
  return actions.map(function (subAction) {
    return toActionObject(subAction, actionFunctionMap);
  });
};
function toActivityDefinition(action) {
  var actionObject = toActionObject(action);
  return _assign(_assign({
    id: isString(action) ? action : actionObject.id
  }, actionObject), {
    type: actionObject.type
  });
}
/**
 * Raises an event. This places the event in the internal event queue, so that
 * the event is immediately consumed by the machine in the current step.
 *
 * @param eventType The event to raise.
 */

function raise(event) {
  if (!isString(event)) {
    return send(event, {
      to: SpecialTargets.Internal
    });
  }
  return {
    type: raise$1,
    event: event
  };
}
function resolveRaise(action) {
  return {
    type: raise$1,
    _event: toSCXMLEvent(action.event)
  };
}
/**
 * Sends an event. This returns an action that will be read by an interpreter to
 * send the event in the next step, after the current step is finished executing.
 *
 * @param event The event to send.
 * @param options Options to pass into the send event:
 *  - `id` - The unique send event identifier (used with `cancel()`).
 *  - `delay` - The number of milliseconds to delay the sending of the event.
 *  - `to` - The target of this event (by default, the machine the event was sent from).
 */

function send(event, options) {
  return {
    to: options ? options.to : undefined,
    type: send$1,
    event: isFunction(event) ? event : toEventObject(event),
    delay: options ? options.delay : undefined,
    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)
  };
}
function resolveSend(action, ctx, _event, delaysMap) {
  var meta = {
    _event: _event
  }; // TODO: helper function for resolving Expr

  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;
  if (isString(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }
  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;
  return _assign(_assign({}, action), {
    to: resolvedTarget,
    _event: resolvedEvent,
    event: resolvedEvent.data,
    delay: resolvedDelay
  });
}
var resolveLog = function resolveLog(action, ctx, _event) {
  return _assign(_assign({}, action), {
    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {
      _event: _event
    })
  });
};
/**
 * Cancels an in-flight `send(...)` action. A canceled sent action will not
 * be executed, nor will its event be sent, unless it has already been sent
 * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).
 *
 * @param sendId The `id` of the `send(...)` action to cancel.
 */

var cancel = function cancel(sendId) {
  return {
    type: cancel$1,
    sendId: sendId
  };
};
/**
 * Starts an activity.
 *
 * @param activity The activity to start.
 */

function start(activity) {
  var activityDef = toActivityDefinition(activity);
  return {
    type: ActionTypes.Start,
    activity: activityDef,
    exec: undefined
  };
}
/**
 * Stops an activity.
 *
 * @param actorRef The activity to stop.
 */

function stop(actorRef) {
  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);
  return {
    type: ActionTypes.Stop,
    activity: activity,
    exec: undefined
  };
}
function resolveStop(action, context, _event) {
  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;
  var resolvedActorRef = typeof actorRefOrString === 'string' ? {
    id: actorRefOrString
  } : actorRefOrString;
  var actionObject = {
    type: ActionTypes.Stop,
    activity: resolvedActorRef
  };
  return actionObject;
}
/**
 * Updates the current context of the machine.
 *
 * @param assignment An object that represents the partial context to update.
 */

var assign$1 = function assign(assignment) {
  return {
    type: assign$2,
    assignment: assignment
  };
};
/**
 * Returns an event type that represents an implicit event that
 * is sent after the specified `delay`.
 *
 * @param delayRef The delay in milliseconds
 * @param id The state node ID where this event is handled
 */

function after(delayRef, id) {
  var idSuffix = id ? "#".concat(id) : '';
  return "".concat(ActionTypes.After, "(").concat(delayRef, ")").concat(idSuffix);
}
/**
 * Returns an event that represents that a final state node
 * has been reached in the parent state node.
 *
 * @param id The final state node's parent state node `id`
 * @param data The data to pass into the event
 */

function done(id, data) {
  var type = "".concat(ActionTypes.DoneState, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };
  eventObject.toString = function () {
    return type;
  };
  return eventObject;
}
/**
 * Returns an event that represents that an invoked service has terminated.
 *
 * An invoked service is terminated when it has reached a top-level final state node,
 * but not when it is canceled.
 *
 * @param id The final state node ID
 * @param data The data to pass into the event
 */

function doneInvoke(id, data) {
  var type = "".concat(ActionTypes.DoneInvoke, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };
  eventObject.toString = function () {
    return type;
  };
  return eventObject;
}
function error(id, data) {
  var type = "".concat(ActionTypes.ErrorPlatform, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };
  eventObject.toString = function () {
    return type;
  };
  return eventObject;
}
function resolveActions(machine, currentState, currentContext, _event, actions, predictableExec, preserveActionOrder) {
  if (preserveActionOrder === void 0) {
    preserveActionOrder = false;
  }
  var _a = __read(preserveActionOrder ? [[], actions] : partition(actions, function (action) {
      return action.type === assign$2;
    }), 2),
    assignActions = _a[0],
    otherActions = _a[1];
  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;
  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;
  var resolvedActions = flatten(otherActions.map(function (actionObject) {
    var _a;
    switch (actionObject.type) {
      case raise$1:
        {
          return resolveRaise(actionObject);
        }
      case send$1:
        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init

        if (!IS_PRODUCTION) {
          // warn after resolving as we can create better contextual message here
          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number',
          // tslint:disable-next-line:max-line-length
          "No delay reference for delay expression '".concat(actionObject.delay, "' was found on machine '").concat(machine.id, "'"));
        }
        if (sendAction.to !== SpecialTargets.Internal) {
          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(sendAction, updatedContext, _event);
        }
        return sendAction;
      case log:
        {
          var resolved = resolveLog(actionObject, updatedContext, _event);
          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
          return resolved;
        }
      case choose:
        {
          var chooseAction = actionObject;
          var matchedActions = (_a = chooseAction.conds.find(function (condition) {
            var guard = toGuard(condition.cond, machine.options.guards);
            return !guard || evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);
          })) === null || _a === void 0 ? void 0 : _a.actions;
          if (!matchedActions) {
            return [];
          }
          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),
            resolvedActionsFromChoose = _b[0],
            resolvedContextFromChoose = _b[1];
          updatedContext = resolvedContextFromChoose;
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          return resolvedActionsFromChoose;
        }
      case pure:
        {
          var matchedActions = actionObject.get(updatedContext, _event.data);
          if (!matchedActions) {
            return [];
          }
          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),
            resolvedActionsFromPure = _c[0],
            resolvedContext = _c[1];
          updatedContext = resolvedContext;
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          return resolvedActionsFromPure;
        }
      case stop$1:
        {
          var resolved = resolveStop(actionObject, updatedContext, _event);
          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
          return resolved;
        }
      case assign$2:
        {
          updatedContext = updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          break;
        }
      default:
        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);
        var exec_1 = resolvedActionObject.exec;
        if (predictableExec) {
          predictableExec(resolvedActionObject, updatedContext, _event);
        } else if (exec_1 && preservedContexts) {
          var contextIndex_1 = preservedContexts.length - 1;
          resolvedActionObject = _assign(_assign({}, resolvedActionObject), {
            exec: function exec(_ctx) {
              var args = [];
              for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
              }
              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));
            }
          });
        }
        return resolvedActionObject;
    }
  }).filter(function (a) {
    return !!a;
  }));
  return [resolvedActions, updatedContext];
}

/**
 * Maintains a stack of the current service in scope.
 * This is used to provide the correct service to spawn().
 */
var provide = function provide(service, fn) {
  var result = fn(service);
  return result;
};

function createNullActor(id) {
  var _a;
  return _a = {
    id: id,
    send: function send() {
      return void 0;
    },
    subscribe: function subscribe() {
      return {
        unsubscribe: function unsubscribe() {
          return void 0;
        }
      };
    },
    getSnapshot: function getSnapshot() {
      return undefined;
    },
    toJSON: function toJSON() {
      return {
        id: id
      };
    }
  }, _a[symbolObservable] = function () {
    return this;
  }, _a;
}
/**
 * Creates a deferred actor that is able to be invoked given the provided
 * invocation information in its `.meta` value.
 *
 * @param invokeDefinition The meta information needed to invoke the actor.
 */

function createInvocableActor(invokeDefinition, machine, context, _event) {
  var _a;
  var invokeSrc = toInvokeSource$1(invokeDefinition.src);
  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];
  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;
  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore

  tempActor.meta = invokeDefinition;
  return tempActor;
}
function createDeferredActor(entity, id, data) {
  var tempActor = createNullActor(id); // @ts-ignore

  tempActor.deferred = true;
  if (isMachine(entity)) {
    // "mute" the existing service scope so potential spawned actors within the `.initialState` stay deferred here
    var initialState_1 = tempActor.state = provide(undefined, function () {
      return (data ? entity.withContext(data) : entity).initialState;
    });
    tempActor.getSnapshot = function () {
      return initialState_1;
    };
  }
  return tempActor;
}
function isActor(item) {
  try {
    return typeof item.send === 'function';
  } catch (e) {
    return false;
  }
}
function isSpawnedActor(item) {
  return isActor(item) && 'id' in item;
} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now

function toActorRef(actorRefLike) {
  var _a;
  return _assign((_a = {
    subscribe: function subscribe() {
      return {
        unsubscribe: function unsubscribe() {
          return void 0;
        }
      };
    },
    id: 'anonymous',
    getSnapshot: function getSnapshot() {
      return undefined;
    }
  }, _a[symbolObservable] = function () {
    return this;
  }, _a), actorRefLike);
}

var isLeafNode = function isLeafNode(stateNode) {
  return stateNode.type === 'atomic' || stateNode.type === 'final';
};
function getAllChildren(stateNode) {
  return Object.keys(stateNode.states).map(function (key) {
    return stateNode.states[key];
  });
}
function getChildren(stateNode) {
  return getAllChildren(stateNode).filter(function (sn) {
    return sn.type !== 'history';
  });
}
function getAllStateNodes(stateNode) {
  var stateNodes = [stateNode];
  if (isLeafNode(stateNode)) {
    return stateNodes;
  }
  return stateNodes.concat(flatten(getChildren(stateNode).map(getAllStateNodes)));
}
function getConfiguration(prevStateNodes, stateNodes) {
  var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
  var prevConfiguration = new Set(prevStateNodes);
  var prevAdjList = getAdjList(prevConfiguration);
  var configuration = new Set(stateNodes);
  try {
    // add all ancestors
    for (var configuration_1 = __values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
      var s = configuration_1_1.value;
      var m = s.parent;
      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
  var adjList = getAdjList(configuration);
  try {
    // add descendants
    for (var configuration_2 = __values(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
      var s = configuration_2_1.value; // if previously active, add existing child nodes

      if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {
        if (prevAdjList.get(s)) {
          prevAdjList.get(s).forEach(function (sn) {
            return configuration.add(sn);
          });
        } else {
          s.initialStateNodes.forEach(function (sn) {
            return configuration.add(sn);
          });
        }
      } else {
        if (s.type === 'parallel') {
          try {
            for (var _e = (e_3 = void 0, __values(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
              var child = _f.value;
              if (!configuration.has(child)) {
                configuration.add(child);
                if (prevAdjList.get(child)) {
                  prevAdjList.get(child).forEach(function (sn) {
                    return configuration.add(sn);
                  });
                } else {
                  child.initialStateNodes.forEach(function (sn) {
                    return configuration.add(sn);
                  });
                }
              }
            }
          } catch (e_3_1) {
            e_3 = {
              error: e_3_1
            };
          } finally {
            try {
              if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
        }
      }
    }
  } catch (e_2_1) {
    e_2 = {
      error: e_2_1
    };
  } finally {
    try {
      if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);
    } finally {
      if (e_2) throw e_2.error;
    }
  }
  try {
    // add all ancestors
    for (var configuration_3 = __values(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
      var s = configuration_3_1.value;
      var m = s.parent;
      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);
    } finally {
      if (e_4) throw e_4.error;
    }
  }
  return configuration;
}
function getValueFromAdj(baseNode, adjList) {
  var childStateNodes = adjList.get(baseNode);
  if (!childStateNodes) {
    return {}; // todo: fix?
  }

  if (baseNode.type === 'compound') {
    var childStateNode = childStateNodes[0];
    if (childStateNode) {
      if (isLeafNode(childStateNode)) {
        return childStateNode.key;
      }
    } else {
      return {};
    }
  }
  var stateValue = {};
  childStateNodes.forEach(function (csn) {
    stateValue[csn.key] = getValueFromAdj(csn, adjList);
  });
  return stateValue;
}
function getAdjList(configuration) {
  var e_5, _a;
  var adjList = new Map();
  try {
    for (var configuration_4 = __values(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
      var s = configuration_4_1.value;
      if (!adjList.has(s)) {
        adjList.set(s, []);
      }
      if (s.parent) {
        if (!adjList.has(s.parent)) {
          adjList.set(s.parent, []);
        }
        adjList.get(s.parent).push(s);
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);
    } finally {
      if (e_5) throw e_5.error;
    }
  }
  return adjList;
}
function getValue(rootNode, configuration) {
  var config = getConfiguration([rootNode], configuration);
  return getValueFromAdj(rootNode, getAdjList(config));
}
function has(iterable, item) {
  if (Array.isArray(iterable)) {
    return iterable.some(function (member) {
      return member === item;
    });
  }
  if (iterable instanceof Set) {
    return iterable.has(item);
  }
  return false; // TODO: fix
}

function nextEvents(configuration) {
  return __spreadArray([], __read(new Set(flatten(__spreadArray([], __read(configuration.map(function (sn) {
    return sn.ownEvents;
  })), false)))), false);
}
function isInFinalState(configuration, stateNode) {
  if (stateNode.type === 'compound') {
    return getChildren(stateNode).some(function (s) {
      return s.type === 'final' && has(configuration, s);
    });
  }
  if (stateNode.type === 'parallel') {
    return getChildren(stateNode).every(function (sn) {
      return isInFinalState(configuration, sn);
    });
  }
  return false;
}
function getMeta(configuration) {
  if (configuration === void 0) {
    configuration = [];
  }
  return configuration.reduce(function (acc, stateNode) {
    if (stateNode.meta !== undefined) {
      acc[stateNode.id] = stateNode.meta;
    }
    return acc;
  }, {});
}
function getTagsFromConfiguration(configuration) {
  return new Set(flatten(configuration.map(function (sn) {
    return sn.tags;
  })));
}

function stateValuesEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (a === undefined || b === undefined) {
    return false;
  }
  if (isString(a) || isString(b)) {
    return a === b;
  }
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  return aKeys.length === bKeys.length && aKeys.every(function (key) {
    return stateValuesEqual(a[key], b[key]);
  });
}
function isStateConfig(state) {
  if (typeof state !== 'object' || state === null) {
    return false;
  }
  return 'value' in state && '_event' in state;
}
function bindActionToState(action, state) {
  var exec = action.exec;
  var boundAction = _assign(_assign({}, action), {
    exec: exec !== undefined ? function () {
      return exec(state.context, state.event, {
        action: action,
        state: state,
        _event: state._event
      });
    } : undefined
  });
  return boundAction;
}
var State = /*#__PURE__*/

/** @class */
function () {
  /**
   * Creates a new State instance.
   * @param value The state value
   * @param context The extended state
   * @param historyValue The tree representing historical values of the state nodes
   * @param history The previous state
   * @param actions An array of action objects to execute as side-effects
   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).
   * @param meta
   * @param events Internal event queue. Should be empty with run-to-completion semantics.
   * @param configuration
   */
  function State(config) {
    var _this = this;
    var _a;
    this.actions = [];
    this.activities = EMPTY_ACTIVITY_MAP;
    this.meta = {};
    this.events = [];
    this.value = config.value;
    this.context = config.context;
    this._event = config._event;
    this._sessionid = config._sessionid;
    this.event = this._event.data;
    this.historyValue = config.historyValue;
    this.history = config.history;
    this.actions = config.actions || [];
    this.activities = config.activities || EMPTY_ACTIVITY_MAP;
    this.meta = getMeta(config.configuration);
    this.events = config.events || [];
    this.matches = this.matches.bind(this);
    this.toStrings = this.toStrings.bind(this);
    this.configuration = config.configuration;
    this.transitions = config.transitions;
    this.children = config.children;
    this.done = !!config.done;
    this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();
    this.machine = config.machine;
    Object.defineProperty(this, 'nextEvents', {
      get: function get() {
        return nextEvents(_this.configuration);
      }
    });
  }
  /**
   * Creates a new State instance for the given `stateValue` and `context`.
   * @param stateValue
   * @param context
   */

  State.from = function (stateValue, context) {
    if (stateValue instanceof State) {
      if (stateValue.context !== context) {
        return new State({
          value: stateValue.value,
          context: context,
          _event: stateValue._event,
          _sessionid: null,
          historyValue: stateValue.historyValue,
          history: stateValue.history,
          actions: [],
          activities: stateValue.activities,
          meta: {},
          events: [],
          configuration: [],
          transitions: [],
          children: {}
        });
      }
      return stateValue;
    }
    var _event = initEvent;
    return new State({
      value: stateValue,
      context: context,
      _event: _event,
      _sessionid: null,
      historyValue: undefined,
      history: undefined,
      actions: [],
      activities: undefined,
      meta: undefined,
      events: [],
      configuration: [],
      transitions: [],
      children: {}
    });
  };
  /**
   * Creates a new State instance for the given `config`.
   * @param config The state config
   */

  State.create = function (config) {
    return new State(config);
  };
  /**
   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).
   * @param stateValue
   * @param context
   */

  State.inert = function (stateValue, context) {
    if (stateValue instanceof State) {
      if (!stateValue.actions.length) {
        return stateValue;
      }
      var _event = initEvent;
      return new State({
        value: stateValue.value,
        context: context,
        _event: _event,
        _sessionid: null,
        historyValue: stateValue.historyValue,
        history: stateValue.history,
        activities: stateValue.activities,
        configuration: stateValue.configuration,
        transitions: [],
        children: {}
      });
    }
    return State.from(stateValue, context);
  };
  /**
   * Returns an array of all the string leaf state node paths.
   * @param stateValue
   * @param delimiter The character(s) that separate each subpath in the string state node path.
   */

  State.prototype.toStrings = function (stateValue, delimiter) {
    var _this = this;
    if (stateValue === void 0) {
      stateValue = this.value;
    }
    if (delimiter === void 0) {
      delimiter = '.';
    }
    if (isString(stateValue)) {
      return [stateValue];
    }
    var valueKeys = Object.keys(stateValue);
    return valueKeys.concat.apply(valueKeys, __spreadArray([], __read(valueKeys.map(function (key) {
      return _this.toStrings(stateValue[key], delimiter).map(function (s) {
        return key + delimiter + s;
      });
    })), false));
  };
  State.prototype.toJSON = function () {
    var _a = this;
    _a.configuration;
    _a.transitions;
    var tags = _a.tags;
    _a.machine;
    var jsonValues = __rest(_a, ["configuration", "transitions", "tags", "machine"]);
    return _assign(_assign({}, jsonValues), {
      tags: Array.from(tags)
    });
  };
  State.prototype.matches = function (parentStateValue) {
    return matchesState(parentStateValue, this.value);
  };
  /**
   * Whether the current state configuration has a state node with the specified `tag`.
   * @param tag
   */

  State.prototype.hasTag = function (tag) {
    return this.tags.has(tag);
  };
  /**
   * Determines whether sending the `event` will cause a non-forbidden transition
   * to be selected, even if the transitions have no actions nor
   * change the state value.
   *
   * @param event The event to test
   * @returns Whether the event will cause a transition
   */

  State.prototype.can = function (event) {
    var _a;
    if (IS_PRODUCTION) {
      warn(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
    }
    var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);
    return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) &&
    // Check that at least one transition is not forbidden
    transitionData.transitions.some(function (t) {
      return t.target !== undefined || t.actions.length;
    });
  };
  return State;
}();

var defaultOptions = {
  deferEvents: false
};
var Scheduler = /*#__PURE__*/

/** @class */
function () {
  function Scheduler(options) {
    this.processingEvent = false;
    this.queue = [];
    this.initialized = false;
    this.options = _assign(_assign({}, defaultOptions), options);
  }
  Scheduler.prototype.initialize = function (callback) {
    this.initialized = true;
    if (callback) {
      if (!this.options.deferEvents) {
        this.schedule(callback);
        return;
      }
      this.process(callback);
    }
    this.flushEvents();
  };
  Scheduler.prototype.schedule = function (task) {
    if (!this.initialized || this.processingEvent) {
      this.queue.push(task);
      return;
    }
    if (this.queue.length !== 0) {
      throw new Error('Event queue should be empty when it is not processing events');
    }
    this.process(task);
    this.flushEvents();
  };
  Scheduler.prototype.clear = function () {
    this.queue = [];
  };
  Scheduler.prototype.flushEvents = function () {
    var nextCallback = this.queue.shift();
    while (nextCallback) {
      this.process(nextCallback);
      nextCallback = this.queue.shift();
    }
  };
  Scheduler.prototype.process = function (callback) {
    this.processingEvent = true;
    try {
      callback();
    } catch (e) {
      // there is no use to keep the future events
      // as the situation is not anymore the same
      this.clear();
      throw e;
    } finally {
      this.processingEvent = false;
    }
  };
  return Scheduler;
}();

var children = /*#__PURE__*/new Map();
var sessionIdIndex = 0;
var registry = {
  bookId: function bookId() {
    return "x:".concat(sessionIdIndex++);
  },
  register: function register(id, actor) {
    children.set(id, actor);
    return id;
  },
  get: function get(id) {
    return children.get(id);
  },
  free: function free(id) {
    children.delete(id);
  }
};

function getGlobal() {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global$1 !== 'undefined') {
    return global$1;
  }
  if (!IS_PRODUCTION) {
    console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');
  }
}
function getDevTools() {
  var global = getGlobal();
  if (global && '__xstate__' in global) {
    return global.__xstate__;
  }
  return undefined;
}
function registerService(service) {
  if (!getGlobal()) {
    return;
  }
  var devTools = getDevTools();
  if (devTools) {
    devTools.register(service);
  }
}

function spawnBehavior(behavior, options) {
  if (options === void 0) {
    options = {};
  }
  var state = behavior.initialState;
  var observers = new Set();
  var mailbox = [];
  var flushing = false;
  var flush = function flush() {
    if (flushing) {
      return;
    }
    flushing = true;
    while (mailbox.length > 0) {
      var event_1 = mailbox.shift();
      state = behavior.transition(state, event_1, actorCtx);
      observers.forEach(function (observer) {
        return observer.next(state);
      });
    }
    flushing = false;
  };
  var actor = toActorRef({
    id: options.id,
    send: function send(event) {
      mailbox.push(event);
      flush();
    },
    getSnapshot: function getSnapshot() {
      return state;
    },
    subscribe: function subscribe(next, handleError, complete) {
      var observer = toObserver(next, handleError, complete);
      observers.add(observer);
      observer.next(state);
      return {
        unsubscribe: function unsubscribe() {
          observers.delete(observer);
        }
      };
    }
  });
  var actorCtx = {
    parent: options.parent,
    self: actor,
    id: options.id || 'anonymous',
    observers: observers
  };
  state = behavior.start ? behavior.start(actorCtx) : state;
  return actor;
}

var DEFAULT_SPAWN_OPTIONS = {
  sync: false,
  autoForward: false
};
var InterpreterStatus;
(function (InterpreterStatus) {
  InterpreterStatus[InterpreterStatus["NotStarted"] = 0] = "NotStarted";
  InterpreterStatus[InterpreterStatus["Running"] = 1] = "Running";
  InterpreterStatus[InterpreterStatus["Stopped"] = 2] = "Stopped";
})(InterpreterStatus || (InterpreterStatus = {}));
var Interpreter = /*#__PURE__*/

/** @class */
function () {
  /**
   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.
   *
   * @param machine The machine to be interpreted
   * @param options Interpreter options
   */
  function Interpreter(machine, options) {
    var _this = this;
    if (options === void 0) {
      options = Interpreter.defaultOptions;
    }
    this.machine = machine;
    this.delayedEventsMap = {};
    this.listeners = new Set();
    this.contextListeners = new Set();
    this.stopListeners = new Set();
    this.doneListeners = new Set();
    this.eventListeners = new Set();
    this.sendListeners = new Set();
    /**
     * Whether the service is started.
     */

    this.initialized = false;
    this.status = InterpreterStatus.NotStarted;
    this.children = new Map();
    this.forwardTo = new Set();
    /**
     * Alias for Interpreter.prototype.start
     */

    this.init = this.start;
    /**
     * Sends an event to the running interpreter to trigger a transition.
     *
     * An array of events (batched) can be sent as well, which will send all
     * batched events to the running interpreter. The listeners will be
     * notified only **once** when all events are processed.
     *
     * @param event The event(s) to send
     */

    this.send = function (event, payload) {
      if (isArray(event)) {
        _this.batch(event);
        return _this.state;
      }
      var _event = toSCXMLEvent(toEventObject(event, payload));
      if (_this.status === InterpreterStatus.Stopped) {
        // do nothing
        if (!IS_PRODUCTION) {
          warn(false, "Event \"".concat(_event.name, "\" was sent to stopped service \"").concat(_this.machine.id, "\". This service has already reached its final state, and will not transition.\nEvent: ").concat(JSON.stringify(_event.data)));
        }
        return _this.state;
      }
      if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {
        throw new Error("Event \"".concat(_event.name, "\" was sent to uninitialized service \"").concat(_this.machine.id // tslint:disable-next-line:max-line-length
        , "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: ").concat(JSON.stringify(_event.data)));
      }
      _this.scheduler.schedule(function () {
        // Forward copy of event to child actors
        _this.forward(_event);
        var nextState = _this.nextState(_event);
        _this.update(nextState, _event);
      });
      return _this._state; // TODO: deprecate (should return void)
      // tslint:disable-next-line:semicolon
    };

    this.sendTo = function (event, to) {
      var isParent = _this.parent && (to === SpecialTargets.Parent || _this.parent.id === to);
      var target = isParent ? _this.parent : isString(to) ? _this.children.get(to) || registry.get(to) : isActor$1(to) ? to : undefined;
      if (!target) {
        if (!isParent) {
          throw new Error("Unable to send event to child '".concat(to, "' from service '").concat(_this.id, "'."));
        } // tslint:disable-next-line:no-console

        if (!IS_PRODUCTION) {
          warn(false, "Service '".concat(_this.id, "' has no parent: unable to send event ").concat(event.type));
        }
        return;
      }
      if ('machine' in target) {
        // perhaps those events should be rejected in the parent
        // but atm it doesn't have easy access to all of the information that is required to do it reliably
        if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target ||
        // we need to send events to the parent from exit handlers of a machine that reached its final state
        _this.state.done) {
          // Send SCXML events to machines
          target.send(_assign(_assign({}, event), {
            name: event.name === error$1 ? "".concat(error(_this.id)) : event.name,
            origin: _this.sessionId
          }));
        }
      } else {
        // Send normal events to other targets
        target.send(event.data);
      }
    };
    this._exec = function (action, context, _event, actionFunctionMap) {
      if (actionFunctionMap === void 0) {
        actionFunctionMap = _this.machine.options.actions;
      }
      var actionOrExec = action.exec || getActionFunction(action.type, actionFunctionMap);
      var exec = isFunction(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;
      if (exec) {
        try {
          return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {
            action: action,
            state: _this.state,
            _event: _event
          } : {
            action: action,
            _event: _event
          });
        } catch (err) {
          if (_this.parent) {
            _this.parent.send({
              type: 'xstate.error',
              data: err
            });
          }
          throw err;
        }
      }
      switch (action.type) {
        case send$1:
          var sendAction = action;
          if (typeof sendAction.delay === 'number') {
            _this.defer(sendAction);
            return;
          } else {
            if (sendAction.to) {
              _this.sendTo(sendAction._event, sendAction.to);
            } else {
              _this.send(sendAction._event);
            }
          }
          break;
        case cancel$1:
          _this.cancel(action.sendId);
          break;
        case start$1:
          {
            if (_this.status !== InterpreterStatus.Running) {
              return;
            }
            var activity = action.activity; // If the activity will be stopped right after it's started
            // (such as in transient states)
            // don't bother starting the activity.

            if (
            // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state
            !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {
              break;
            } // Invoked services

            if (activity.type === ActionTypes.Invoke) {
              var invokeSource = toInvokeSource$1(activity.src);
              var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;
              var id = activity.id,
                data = activity.data;
              if (!IS_PRODUCTION) {
                warn(!('forward' in activity),
                // tslint:disable-next-line:max-line-length
                "`forward` property is deprecated (found in invocation of '".concat(activity.src, "' in in machine '").concat(_this.machine.id, "'). ") + "Please use `autoForward` instead.");
              }
              var autoForward = 'autoForward' in activity ? activity.autoForward : !!activity.forward;
              if (!serviceCreator) {
                // tslint:disable-next-line:no-console
                if (!IS_PRODUCTION) {
                  warn(false, "No service found for invocation '".concat(activity.src, "' in machine '").concat(_this.machine.id, "'."));
                }
                return;
              }
              var resolvedData = data ? mapContext(data, context, _event) : undefined;
              if (typeof serviceCreator === 'string') {
                // TODO: warn
                return;
              }
              var source = isFunction(serviceCreator) ? serviceCreator(context, _event.data, {
                data: resolvedData,
                src: invokeSource,
                meta: activity.meta
              }) : serviceCreator;
              if (!source) {
                // TODO: warn?
                return;
              }
              var options = void 0;
              if (isMachine(source)) {
                source = resolvedData ? source.withContext(resolvedData) : source;
                options = {
                  autoForward: autoForward
                };
              }
              _this.spawn(source, id, options);
            } else {
              _this.spawnActivity(activity);
            }
            break;
          }
        case stop$1:
          {
            _this.stopChild(action.activity.id);
            break;
          }
        case log:
          var label = action.label,
            value = action.value;
          if (label) {
            _this.logger(label, value);
          } else {
            _this.logger(value);
          }
          break;
        default:
          if (!IS_PRODUCTION) {
            warn(false, "No implementation found for action type '".concat(action.type, "'"));
          }
          break;
      }
    };
    var resolvedOptions = _assign(_assign({}, Interpreter.defaultOptions), options);
    var clock = resolvedOptions.clock,
      logger = resolvedOptions.logger,
      parent = resolvedOptions.parent,
      id = resolvedOptions.id;
    var resolvedId = id !== undefined ? id : machine.id;
    this.id = resolvedId;
    this.logger = logger;
    this.clock = clock;
    this.parent = parent;
    this.options = resolvedOptions;
    this.scheduler = new Scheduler({
      deferEvents: this.options.deferEvents
    });
    this.sessionId = registry.bookId();
  }
  Object.defineProperty(Interpreter.prototype, "initialState", {
    get: function get() {
      var _this = this;
      if (this._initialState) {
        return this._initialState;
      }
      return provide(this, function () {
        _this._initialState = _this.machine.initialState;
        return _this._initialState;
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Interpreter.prototype, "state", {
    get: function get() {
      if (!IS_PRODUCTION) {
        warn(this.status !== InterpreterStatus.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first."));
      }
      return this._state;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Executes the actions of the given state, with that state's `context` and `event`.
   *
   * @param state The state whose actions will be executed
   * @param actionsConfig The action implementations to use
   */

  Interpreter.prototype.execute = function (state, actionsConfig) {
    var e_1, _a;
    try {
      for (var _b = __values(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
        var action = _c.value;
        this.exec(action, state, actionsConfig);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };
  Interpreter.prototype.update = function (state, _event) {
    var e_2, _a, e_3, _b, e_4, _c, e_5, _d;
    var _this = this; // Attach session ID to state

    state._sessionid = this.sessionId; // Update state

    this._state = state; // Execute actions

    if ((!this.machine.config.predictableActionArguments ||
    // this is currently required to execute initial actions as the `initialState` gets cached
    // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns
    _event === initEvent) && this.options.execute) {
      this.execute(this.state);
    } // Update children

    this.children.forEach(function (child) {
      _this.state.children[child.id] = child;
    }); // Dev tools

    if (this.devTools) {
      this.devTools.send(_event.data, state);
    } // Execute listeners

    if (state.event) {
      try {
        for (var _e = __values(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
          var listener = _f.value;
          listener(state.event);
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    }
    try {
      for (var _g = __values(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
        var listener = _h.value;
        listener(state, state.event);
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
      } finally {
        if (e_3) throw e_3.error;
      }
    }
    try {
      for (var _j = __values(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
        var contextListener = _k.value;
        contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
      } finally {
        if (e_4) throw e_4.error;
      }
    }
    if (this.state.done) {
      // get final child state node
      var finalChildStateNode = state.configuration.find(function (sn) {
        return sn.type === 'final' && sn.parent === _this.machine;
      });
      var doneData = finalChildStateNode && finalChildStateNode.doneData ? mapContext(finalChildStateNode.doneData, state.context, _event) : undefined;
      try {
        for (var _l = __values(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
          var listener = _m.value;
          listener(doneInvoke(this.id, doneData));
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
        } finally {
          if (e_5) throw e_5.error;
        }
      }
      this._stop();
    }
  };
  /*
   * Adds a listener that is notified whenever a state transition happens. The listener is called with
   * the next state and the event object that caused the state transition.
   *
   * @param listener The state listener
   */

  Interpreter.prototype.onTransition = function (listener) {
    this.listeners.add(listener); // Send current state to listener

    if (this.status === InterpreterStatus.Running) {
      listener(this.state, this.state.event);
    }
    return this;
  };
  Interpreter.prototype.subscribe = function (nextListenerOrObserver, _,
  // TODO: error listener
  completeListener) {
    var _this = this;
    var observer = toObserver(nextListenerOrObserver, _, completeListener);
    this.listeners.add(observer.next); // Send current state to listener

    if (this.status !== InterpreterStatus.NotStarted) {
      observer.next(this.state);
    }
    var completeOnce = function completeOnce() {
      _this.doneListeners.delete(completeOnce);
      _this.stopListeners.delete(completeOnce);
      observer.complete();
    };
    if (this.status === InterpreterStatus.Stopped) {
      observer.complete();
    } else {
      this.onDone(completeOnce);
      this.onStop(completeOnce);
    }
    return {
      unsubscribe: function unsubscribe() {
        _this.listeners.delete(observer.next);
        _this.doneListeners.delete(completeOnce);
        _this.stopListeners.delete(completeOnce);
      }
    };
  };
  /**
   * Adds an event listener that is notified whenever an event is sent to the running interpreter.
   * @param listener The event listener
   */

  Interpreter.prototype.onEvent = function (listener) {
    this.eventListeners.add(listener);
    return this;
  };
  /**
   * Adds an event listener that is notified whenever a `send` event occurs.
   * @param listener The event listener
   */

  Interpreter.prototype.onSend = function (listener) {
    this.sendListeners.add(listener);
    return this;
  };
  /**
   * Adds a context listener that is notified whenever the state context changes.
   * @param listener The context listener
   */

  Interpreter.prototype.onChange = function (listener) {
    this.contextListeners.add(listener);
    return this;
  };
  /**
   * Adds a listener that is notified when the machine is stopped.
   * @param listener The listener
   */

  Interpreter.prototype.onStop = function (listener) {
    this.stopListeners.add(listener);
    return this;
  };
  /**
   * Adds a state listener that is notified when the statechart has reached its final state.
   * @param listener The state listener
   */

  Interpreter.prototype.onDone = function (listener) {
    this.doneListeners.add(listener);
    return this;
  };
  /**
   * Removes a listener.
   * @param listener The listener to remove
   */

  Interpreter.prototype.off = function (listener) {
    this.listeners.delete(listener);
    this.eventListeners.delete(listener);
    this.sendListeners.delete(listener);
    this.stopListeners.delete(listener);
    this.doneListeners.delete(listener);
    this.contextListeners.delete(listener);
    return this;
  };
  /**
   * Starts the interpreter from the given state, or the initial state.
   * @param initialState The state to start the statechart from
   */

  Interpreter.prototype.start = function (initialState) {
    var _this = this;
    if (this.status === InterpreterStatus.Running) {
      // Do not restart the service if it is already started
      return this;
    } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)
    // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call
    // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions
    // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)

    this.machine._init();
    registry.register(this.sessionId, this);
    this.initialized = true;
    this.status = InterpreterStatus.Running;
    var resolvedState = initialState === undefined ? this.initialState : provide(this, function () {
      return isStateConfig(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(State.from(initialState, _this.machine.context));
    });
    if (this.options.devTools) {
      this.attachDev();
    }
    this.scheduler.initialize(function () {
      _this.update(resolvedState, initEvent);
    });
    return this;
  };
  Interpreter.prototype._stop = function () {
    var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;
    try {
      for (var _f = __values(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
        var listener = _g.value;
        this.listeners.delete(listener);
      }
    } catch (e_6_1) {
      e_6 = {
        error: e_6_1
      };
    } finally {
      try {
        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
      } finally {
        if (e_6) throw e_6.error;
      }
    }
    try {
      for (var _h = __values(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
        var listener = _j.value; // call listener, then remove

        listener();
        this.stopListeners.delete(listener);
      }
    } catch (e_7_1) {
      e_7 = {
        error: e_7_1
      };
    } finally {
      try {
        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
      } finally {
        if (e_7) throw e_7.error;
      }
    }
    try {
      for (var _k = __values(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
        var listener = _l.value;
        this.contextListeners.delete(listener);
      }
    } catch (e_8_1) {
      e_8 = {
        error: e_8_1
      };
    } finally {
      try {
        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
      } finally {
        if (e_8) throw e_8.error;
      }
    }
    try {
      for (var _m = __values(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
        var listener = _o.value;
        this.doneListeners.delete(listener);
      }
    } catch (e_9_1) {
      e_9 = {
        error: e_9_1
      };
    } finally {
      try {
        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
      } finally {
        if (e_9) throw e_9.error;
      }
    }
    if (!this.initialized) {
      // Interpreter already stopped; do nothing
      return this;
    }
    this.initialized = false;
    this.status = InterpreterStatus.Stopped;
    this._initialState = undefined;
    try {
      // we are going to stop within the current sync frame
      // so we can safely just cancel this here as nothing async should be fired anyway
      for (var _p = __values(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {
        var key = _q.value;
        this.clock.clearTimeout(this.delayedEventsMap[key]);
      }
    } catch (e_10_1) {
      e_10 = {
        error: e_10_1
      };
    } finally {
      try {
        if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
      } finally {
        if (e_10) throw e_10.error;
      }
    } // clear everything that might be enqueued

    this.scheduler.clear();
    this.scheduler = new Scheduler({
      deferEvents: this.options.deferEvents
    });
  };
  /**
   * Stops the interpreter and unsubscribe all listeners.
   *
   * This will also notify the `onStop` listeners.
   */

  Interpreter.prototype.stop = function () {
    // TODO: add warning for stopping non-root interpreters
    var _this = this; // grab the current scheduler as it will be replaced in _stop

    var scheduler = this.scheduler;
    this._stop(); // let what is currently processed to be finished

    scheduler.schedule(function () {
      // it feels weird to handle this here but we need to handle this even slightly "out of band"
      var _event = toSCXMLEvent({
        type: 'xstate.stop'
      });
      var nextState = provide(_this, function () {
        var exitActions = flatten(__spreadArray([], __read(_this.state.configuration), false).sort(function (a, b) {
          return b.order - a.order;
        }).map(function (stateNode) {
          return toActionObjects(stateNode.onExit, _this.machine.options.actions);
        }));
        var _a = __read(resolveActions(_this.machine, _this.state, _this.state.context, _event, exitActions, _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2),
          resolvedActions = _a[0],
          updatedContext = _a[1];
        var newState = new State({
          value: _this.state.value,
          context: updatedContext,
          _event: _event,
          _sessionid: _this.sessionId,
          historyValue: undefined,
          history: _this.state,
          actions: resolvedActions.filter(function (action) {
            return action.type !== raise$1 && (action.type !== send$1 || !!action.to && action.to !== SpecialTargets.Internal);
          }),
          activities: {},
          events: [],
          configuration: [],
          transitions: [],
          children: {},
          done: _this.state.done,
          tags: _this.state.tags,
          machine: _this.machine
        });
        newState.changed = true;
        return newState;
      });
      _this.update(nextState, _event); // TODO: think about converting those to actions
      // Stop all children

      _this.children.forEach(function (child) {
        if (isFunction(child.stop)) {
          child.stop();
        }
      });
      _this.children.clear();
      registry.free(_this.sessionId);
    });
    return this;
  };
  Interpreter.prototype.batch = function (events) {
    var _this = this;
    if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {
      // tslint:disable-next-line:no-console
      if (!IS_PRODUCTION) {
        warn(false, "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\" and are deferred. Make sure .start() is called for this service.\nEvent: ").concat(JSON.stringify(event)));
      }
    } else if (this.status !== InterpreterStatus.Running) {
      throw new Error(
      // tslint:disable-next-line:max-line-length
      "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options."));
    }
    this.scheduler.schedule(function () {
      var e_11, _a;
      var nextState = _this.state;
      var batchChanged = false;
      var batchedActions = [];
      var _loop_1 = function _loop_1(event_1) {
        var _event = toSCXMLEvent(event_1);
        _this.forward(_event);
        nextState = provide(_this, function () {
          return _this.machine.transition(nextState, _event);
        });
        batchedActions.push.apply(batchedActions, __spreadArray([], __read(nextState.actions.map(function (a) {
          return bindActionToState(a, nextState);
        })), false));
        batchChanged = batchChanged || !!nextState.changed;
      };
      try {
        for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
          var event_1 = events_1_1.value;
          _loop_1(event_1);
        }
      } catch (e_11_1) {
        e_11 = {
          error: e_11_1
        };
      } finally {
        try {
          if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
        } finally {
          if (e_11) throw e_11.error;
        }
      }
      nextState.changed = batchChanged;
      nextState.actions = batchedActions;
      _this.update(nextState, toSCXMLEvent(events[events.length - 1]));
    });
  };
  /**
   * Returns a send function bound to this interpreter instance.
   *
   * @param event The event to be sent by the sender.
   */

  Interpreter.prototype.sender = function (event) {
    return this.send.bind(this, event);
  };
  Interpreter.prototype._nextState = function (event) {
    var _this = this;
    var _event = toSCXMLEvent(event);
    if (_event.name.indexOf(errorPlatform) === 0 && !this.state.nextEvents.some(function (nextEvent) {
      return nextEvent.indexOf(errorPlatform) === 0;
    })) {
      throw _event.data.data;
    }
    var nextState = provide(this, function () {
      return _this.machine.transition(_this.state, _event, undefined, _this.machine.config.predictableActionArguments ? _this._exec : undefined);
    });
    return nextState;
  };
  /**
   * Returns the next state given the interpreter's current state and the event.
   *
   * This is a pure method that does _not_ update the interpreter's state.
   *
   * @param event The event to determine the next state
   */

  Interpreter.prototype.nextState = function (event) {
    return this._nextState(event);
  };
  Interpreter.prototype.forward = function (event) {
    var e_12, _a;
    try {
      for (var _b = __values(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
        var id = _c.value;
        var child = this.children.get(id);
        if (!child) {
          throw new Error("Unable to forward event '".concat(event, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(id, "'."));
        }
        child.send(event);
      }
    } catch (e_12_1) {
      e_12 = {
        error: e_12_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_12) throw e_12.error;
      }
    }
  };
  Interpreter.prototype.defer = function (sendAction) {
    var _this = this;
    this.delayedEventsMap[sendAction.id] = this.clock.setTimeout(function () {
      if (sendAction.to) {
        _this.sendTo(sendAction._event, sendAction.to);
      } else {
        _this.send(sendAction._event);
      }
    }, sendAction.delay);
  };
  Interpreter.prototype.cancel = function (sendId) {
    this.clock.clearTimeout(this.delayedEventsMap[sendId]);
    delete this.delayedEventsMap[sendId];
  };
  Interpreter.prototype.exec = function (action, state, actionFunctionMap) {
    if (actionFunctionMap === void 0) {
      actionFunctionMap = this.machine.options.actions;
    }
    this._exec(action, state.context, state._event, actionFunctionMap);
  };
  Interpreter.prototype.removeChild = function (childId) {
    var _a;
    this.children.delete(childId);
    this.forwardTo.delete(childId); // this.state might not exist at the time this is called,
    // such as when a child is added then removed while initializing the state

    (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];
  };
  Interpreter.prototype.stopChild = function (childId) {
    var child = this.children.get(childId);
    if (!child) {
      return;
    }
    this.removeChild(childId);
    if (isFunction(child.stop)) {
      child.stop();
    }
  };
  Interpreter.prototype.spawn = function (entity, name, options) {
    if (this.status !== InterpreterStatus.Running) {
      return createDeferredActor(entity, name);
    }
    if (isPromiseLike(entity)) {
      return this.spawnPromise(Promise.resolve(entity), name);
    } else if (isFunction(entity)) {
      return this.spawnCallback(entity, name);
    } else if (isSpawnedActor(entity)) {
      return this.spawnActor(entity, name);
    } else if (isObservable(entity)) {
      return this.spawnObservable(entity, name);
    } else if (isMachine(entity)) {
      return this.spawnMachine(entity, _assign(_assign({}, options), {
        id: name
      }));
    } else if (isBehavior(entity)) {
      return this.spawnBehavior(entity, name);
    } else {
      throw new Error("Unable to spawn entity \"".concat(name, "\" of type \"").concat(typeof entity, "\"."));
    }
  };
  Interpreter.prototype.spawnMachine = function (machine, options) {
    var _this = this;
    if (options === void 0) {
      options = {};
    }
    var childService = new Interpreter(machine, _assign(_assign({}, this.options), {
      parent: this,
      id: options.id || machine.id
    }));
    var resolvedOptions = _assign(_assign({}, DEFAULT_SPAWN_OPTIONS), options);
    if (resolvedOptions.sync) {
      childService.onTransition(function (state) {
        _this.send(update, {
          state: state,
          id: childService.id
        });
      });
    }
    var actor = childService;
    this.children.set(childService.id, actor);
    if (resolvedOptions.autoForward) {
      this.forwardTo.add(childService.id);
    }
    childService.onDone(function (doneEvent) {
      _this.removeChild(childService.id);
      _this.send(toSCXMLEvent(doneEvent, {
        origin: childService.id
      }));
    }).start();
    return actor;
  };
  Interpreter.prototype.spawnBehavior = function (behavior, id) {
    var actorRef = spawnBehavior(behavior, {
      id: id,
      parent: this
    });
    this.children.set(id, actorRef);
    return actorRef;
  };
  Interpreter.prototype.spawnPromise = function (promise, id) {
    var _a;
    var _this = this;
    var canceled = false;
    var resolvedData;
    promise.then(function (response) {
      if (!canceled) {
        resolvedData = response;
        _this.removeChild(id);
        _this.send(toSCXMLEvent(doneInvoke(id, response), {
          origin: id
        }));
      }
    }, function (errorData) {
      if (!canceled) {
        _this.removeChild(id);
        var errorEvent = error(id, errorData);
        try {
          // Send "error.platform.id" to this (parent).
          _this.send(toSCXMLEvent(errorEvent, {
            origin: id
          }));
        } catch (error) {
          reportUnhandledExceptionOnInvocation(errorData, error, id);
          if (_this.devTools) {
            _this.devTools.send(errorEvent, _this.state);
          }
          if (_this.machine.strict) {
            // it would be better to always stop the state machine if unhandled
            // exception/promise rejection happens but because we don't want to
            // break existing code so enforce it on strict mode only especially so
            // because documentation says that onError is optional
            _this.stop();
          }
        }
      }
    });
    var actor = (_a = {
      id: id,
      send: function send() {
        return void 0;
      },
      subscribe: function subscribe(next, handleError, complete) {
        var observer = toObserver(next, handleError, complete);
        var unsubscribed = false;
        promise.then(function (response) {
          if (unsubscribed) {
            return;
          }
          observer.next(response);
          if (unsubscribed) {
            return;
          }
          observer.complete();
        }, function (err) {
          if (unsubscribed) {
            return;
          }
          observer.error(err);
        });
        return {
          unsubscribe: function unsubscribe() {
            return unsubscribed = true;
          }
        };
      },
      stop: function stop() {
        canceled = true;
      },
      toJSON: function toJSON() {
        return {
          id: id
        };
      },
      getSnapshot: function getSnapshot() {
        return resolvedData;
      }
    }, _a[symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };
  Interpreter.prototype.spawnCallback = function (callback, id) {
    var _a;
    var _this = this;
    var canceled = false;
    var receivers = new Set();
    var listeners = new Set();
    var emitted;
    var receive = function receive(e) {
      emitted = e;
      listeners.forEach(function (listener) {
        return listener(e);
      });
      if (canceled) {
        return;
      }
      _this.send(toSCXMLEvent(e, {
        origin: id
      }));
    };
    var callbackStop;
    try {
      callbackStop = callback(receive, function (newListener) {
        receivers.add(newListener);
      });
    } catch (err) {
      this.send(error(id, err));
    }
    if (isPromiseLike(callbackStop)) {
      // it turned out to be an async function, can't reliably check this before calling `callback`
      // because transpiled async functions are not recognizable
      return this.spawnPromise(callbackStop, id);
    }
    var actor = (_a = {
      id: id,
      send: function send(event) {
        return receivers.forEach(function (receiver) {
          return receiver(event);
        });
      },
      subscribe: function subscribe(next) {
        var observer = toObserver(next);
        listeners.add(observer.next);
        return {
          unsubscribe: function unsubscribe() {
            listeners.delete(observer.next);
          }
        };
      },
      stop: function stop() {
        canceled = true;
        if (isFunction(callbackStop)) {
          callbackStop();
        }
      },
      toJSON: function toJSON() {
        return {
          id: id
        };
      },
      getSnapshot: function getSnapshot() {
        return emitted;
      }
    }, _a[symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };
  Interpreter.prototype.spawnObservable = function (source, id) {
    var _a;
    var _this = this;
    var emitted;
    var subscription = source.subscribe(function (value) {
      emitted = value;
      _this.send(toSCXMLEvent(value, {
        origin: id
      }));
    }, function (err) {
      _this.removeChild(id);
      _this.send(toSCXMLEvent(error(id, err), {
        origin: id
      }));
    }, function () {
      _this.removeChild(id);
      _this.send(toSCXMLEvent(doneInvoke(id), {
        origin: id
      }));
    });
    var actor = (_a = {
      id: id,
      send: function send() {
        return void 0;
      },
      subscribe: function subscribe(next, handleError, complete) {
        return source.subscribe(next, handleError, complete);
      },
      stop: function stop() {
        return subscription.unsubscribe();
      },
      getSnapshot: function getSnapshot() {
        return emitted;
      },
      toJSON: function toJSON() {
        return {
          id: id
        };
      }
    }, _a[symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };
  Interpreter.prototype.spawnActor = function (actor, name) {
    this.children.set(name, actor);
    return actor;
  };
  Interpreter.prototype.spawnActivity = function (activity) {
    var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;
    if (!implementation) {
      if (!IS_PRODUCTION) {
        warn(false, "No implementation found for activity '".concat(activity.type, "'"));
      } // tslint:disable-next-line:no-console

      return;
    } // Start implementation

    var dispose = implementation(this.state.context, activity);
    this.spawnEffect(activity.id, dispose);
  };
  Interpreter.prototype.spawnEffect = function (id, dispose) {
    var _a;
    this.children.set(id, (_a = {
      id: id,
      send: function send() {
        return void 0;
      },
      subscribe: function subscribe() {
        return {
          unsubscribe: function unsubscribe() {
            return void 0;
          }
        };
      },
      stop: dispose || undefined,
      getSnapshot: function getSnapshot() {
        return undefined;
      },
      toJSON: function toJSON() {
        return {
          id: id
        };
      }
    }, _a[symbolObservable] = function () {
      return this;
    }, _a));
  };
  Interpreter.prototype.attachDev = function () {
    var global = getGlobal();
    if (this.options.devTools && global) {
      if (global.__REDUX_DEVTOOLS_EXTENSION__) {
        var devToolsOptions = typeof this.options.devTools === 'object' ? this.options.devTools : undefined;
        this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect(_assign(_assign({
          name: this.id,
          autoPause: true,
          stateSanitizer: function stateSanitizer(state) {
            return {
              value: state.value,
              context: state.context,
              actions: state.actions
            };
          }
        }, devToolsOptions), {
          features: _assign({
            jump: false,
            skip: false
          }, devToolsOptions ? devToolsOptions.features : undefined)
        }), this.machine);
        this.devTools.init(this.state);
      } // add XState-specific dev tooling hook

      registerService(this);
    }
  };
  Interpreter.prototype.toJSON = function () {
    return {
      id: this.id
    };
  };
  Interpreter.prototype[symbolObservable] = function () {
    return this;
  };
  Interpreter.prototype.getSnapshot = function () {
    if (this.status === InterpreterStatus.NotStarted) {
      return this.initialState;
    }
    return this._state;
  };
  /**
   * The default interpreter options:
   *
   * - `clock` uses the global `setTimeout` and `clearTimeout` functions
   * - `logger` uses the global `console.log()` method
   */

  Interpreter.defaultOptions = {
    execute: true,
    deferEvents: true,
    clock: {
      setTimeout: function (_setTimeout) {
        function setTimeout(_x, _x2) {
          return _setTimeout.apply(this, arguments);
        }
        setTimeout.toString = function () {
          return _setTimeout.toString();
        };
        return setTimeout;
      }(function (fn, ms) {
        return setTimeout(fn, ms);
      }),
      clearTimeout: function (_clearTimeout) {
        function clearTimeout(_x3) {
          return _clearTimeout.apply(this, arguments);
        }
        clearTimeout.toString = function () {
          return _clearTimeout.toString();
        };
        return clearTimeout;
      }(function (id) {
        return clearTimeout(id);
      })
    },
    logger: /*#__PURE__*/console.log.bind(console),
    devTools: false
  };
  Interpreter.interpret = interpret;
  return Interpreter;
}();
/**
 * Creates a new Interpreter instance for the given machine with the provided options, if any.
 *
 * @param machine The machine to interpret
 * @param options Interpreter options
 */

function interpret(machine, options) {
  var interpreter = new Interpreter(machine, options);
  return interpreter;
}

function toInvokeSource(src) {
  if (typeof src === 'string') {
    var simpleSrc = {
      type: src
    };
    simpleSrc.toString = function () {
      return src;
    }; // v4 compat - TODO: remove in v5

    return simpleSrc;
  }
  return src;
}
function toInvokeDefinition(invokeConfig) {
  return _assign(_assign({
    type: invoke
  }, invokeConfig), {
    toJSON: function toJSON() {
      invokeConfig.onDone;
      invokeConfig.onError;
      var invokeDef = __rest(invokeConfig, ["onDone", "onError"]);
      return _assign(_assign({}, invokeDef), {
        type: invoke,
        src: toInvokeSource(invokeConfig.src)
      });
    }
  });
}

var NULL_EVENT = '';
var STATE_IDENTIFIER = '#';
var WILDCARD = '*';
var EMPTY_OBJECT = {};
var isStateId = function isStateId(str) {
  return str[0] === STATE_IDENTIFIER;
};
var createDefaultOptions = function createDefaultOptions() {
  return {
    actions: {},
    guards: {},
    services: {},
    activities: {},
    delays: {}
  };
};
var validateArrayifiedTransitions = function validateArrayifiedTransitions(stateNode, event, transitions) {
  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {
    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));
  });
  var eventText = event === NULL_EVENT ? 'the transient event' : "event '".concat(event, "'");
  warn(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
};
var StateNode = /*#__PURE__*/

/** @class */
function () {
  function StateNode(
  /**
   * The raw config used to create the machine.
   */
  config, options,
  /**
   * The initial extended state
   */
  _context,
  // TODO: this is unsafe, but we're removing it in v5 anyway
  _stateInfo) {
    var _this = this;
    if (_context === void 0) {
      _context = 'context' in config ? config.context : undefined;
    }
    var _a;
    this.config = config;
    this._context = _context;
    /**
     * The order this state node appears. Corresponds to the implicit SCXML document order.
     */

    this.order = -1;
    this.__xstatenode = true;
    this.__cache = {
      events: undefined,
      relativeValue: new Map(),
      initialStateValue: undefined,
      initialState: undefined,
      on: undefined,
      transitions: undefined,
      candidates: {},
      delayedTransitions: undefined
    };
    this.idMap = {};
    this.tags = [];
    this.options = Object.assign(createDefaultOptions(), options);
    this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
    this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';
    this.machine = this.parent ? this.parent.machine : this;
    this.path = this.parent ? this.parent.path.concat(this.key) : [];
    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);
    this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);
    this.version = this.parent ? this.parent.version : this.config.version;
    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');
    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};
    this.description = this.config.description;
    if (!IS_PRODUCTION) {
      warn(!('parallel' in this.config), "The \"parallel\" property is deprecated and will be removed in version 4.1. ".concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
    }
    this.initial = this.config.initial;
    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {
      var _a;
      var stateNode = new StateNode(stateConfig, {}, undefined, {
        parent: _this,
        key: key
      });
      Object.assign(_this.idMap, _assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));
      return stateNode;
    }) : EMPTY_OBJECT; // Document order

    var order = 0;
    function dfs(stateNode) {
      var e_1, _a;
      stateNode.order = order++;
      try {
        for (var _b = __values(getAllChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var child = _c.value;
          dfs(child);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }
    dfs(this); // History config

    this.history = this.config.history === true ? 'shallow' : this.config.history || false;
    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {
      var event = _a.event;
      return event === NULL_EVENT;
    }) : NULL_EVENT in this.config.on);
    this.strict = !!this.config.strict; // TODO: deprecate (entry)

    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {
      return toActionObject(action);
    }); // TODO: deprecate (exit)

    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {
      return toActionObject(action);
    });
    this.meta = this.config.meta;
    this.doneData = this.type === 'final' ? this.config.data : undefined;
    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {
      var _a, _b;
      if (isMachine(invokeConfig)) {
        var invokeId = createInvokeId(_this.id, i);
        _this.machine.options.services = _assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);
        return toInvokeDefinition({
          src: invokeId,
          id: invokeId
        });
      } else if (isString(invokeConfig.src)) {
        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
        return toInvokeDefinition(_assign(_assign({}, invokeConfig), {
          id: invokeId,
          src: invokeConfig.src
        }));
      } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {
        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
        _this.machine.options.services = _assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
        return toInvokeDefinition(_assign(_assign({
          id: invokeId
        }, invokeConfig), {
          src: invokeId
        }));
      } else {
        var invokeSource = invokeConfig.src;
        return toInvokeDefinition(_assign(_assign({
          id: createInvokeId(_this.id, i)
        }, invokeConfig), {
          src: invokeSource
        }));
      }
    });
    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {
      return toActivityDefinition(activity);
    });
    this.transition = this.transition.bind(this);
    this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once
    // state node getters are deprecated
    // if (!this.parent) {
    //   this._init();
    // }
  }

  StateNode.prototype._init = function () {
    if (this.__cache.transitions) {
      return;
    }
    getAllStateNodes(this).forEach(function (stateNode) {
      return stateNode.on;
    });
  };
  /**
   * Clones this state machine with custom options and context.
   *
   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.
   * @param context Custom context (will override predefined context)
   */

  StateNode.prototype.withConfig = function (options, context) {
    var _a = this.options,
      actions = _a.actions,
      activities = _a.activities,
      guards = _a.guards,
      services = _a.services,
      delays = _a.delays;
    return new StateNode(this.config, {
      actions: _assign(_assign({}, actions), options.actions),
      activities: _assign(_assign({}, activities), options.activities),
      guards: _assign(_assign({}, guards), options.guards),
      services: _assign(_assign({}, services), options.services),
      delays: _assign(_assign({}, delays), options.delays)
    }, context !== null && context !== void 0 ? context : this.context);
  };
  /**
   * Clones this state machine with custom context.
   *
   * @param context Custom context (will override predefined context, not recursive)
   */

  StateNode.prototype.withContext = function (context) {
    return new StateNode(this.config, this.options, context);
  };
  Object.defineProperty(StateNode.prototype, "context", {
    get: function get() {
      return isFunction(this._context) ? this._context() : this._context;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "definition", {
    /**
     * The well-structured state node definition.
     */
    get: function get() {
      return {
        id: this.id,
        key: this.key,
        version: this.version,
        context: this.context,
        type: this.type,
        initial: this.initial,
        history: this.history,
        states: mapValues(this.states, function (state) {
          return state.definition;
        }),
        on: this.on,
        transitions: this.transitions,
        entry: this.onEntry,
        exit: this.onExit,
        activities: this.activities || [],
        meta: this.meta,
        order: this.order || -1,
        data: this.doneData,
        invoke: this.invoke,
        description: this.description,
        tags: this.tags
      };
    },
    enumerable: false,
    configurable: true
  });
  StateNode.prototype.toJSON = function () {
    return this.definition;
  };
  Object.defineProperty(StateNode.prototype, "on", {
    /**
     * The mapping of events to transitions.
     */
    get: function get() {
      if (this.__cache.on) {
        return this.__cache.on;
      }
      var transitions = this.transitions;
      return this.__cache.on = transitions.reduce(function (map, transition) {
        map[transition.eventType] = map[transition.eventType] || [];
        map[transition.eventType].push(transition);
        return map;
      }, {});
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "after", {
    get: function get() {
      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "transitions", {
    /**
     * All the transitions that can be taken from this state node.
     */
    get: function get() {
      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
    },
    enumerable: false,
    configurable: true
  });
  StateNode.prototype.getCandidates = function (eventName) {
    if (this.__cache.candidates[eventName]) {
      return this.__cache.candidates[eventName];
    }
    var transient = eventName === NULL_EVENT;
    var candidates = this.transitions.filter(function (transition) {
      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions

      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
    });
    this.__cache.candidates[eventName] = candidates;
    return candidates;
  };
  /**
   * All delayed transitions from the config.
   */

  StateNode.prototype.getDelayedTransitions = function () {
    var _this = this;
    var afterConfig = this.config.after;
    if (!afterConfig) {
      return [];
    }
    var mutateEntryExit = function mutateEntryExit(delay, i) {
      var delayRef = isFunction(delay) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay;
      var eventType = after(delayRef, _this.id);
      _this.onEntry.push(send(eventType, {
        delay: delay
      }));
      _this.onExit.push(cancel(eventType));
      return eventType;
    };
    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {
      var eventType = mutateEntryExit(transition.delay, i);
      return _assign(_assign({}, transition), {
        event: eventType
      });
    }) : flatten(Object.keys(afterConfig).map(function (delay, i) {
      var configTransition = afterConfig[delay];
      var resolvedTransition = isString(configTransition) ? {
        target: configTransition
      } : configTransition;
      var resolvedDelay = !isNaN(+delay) ? +delay : delay;
      var eventType = mutateEntryExit(resolvedDelay, i);
      return toArray(resolvedTransition).map(function (transition) {
        return _assign(_assign({}, transition), {
          event: eventType,
          delay: resolvedDelay
        });
      });
    }));
    return delayedTransitions.map(function (delayedTransition) {
      var delay = delayedTransition.delay;
      return _assign(_assign({}, _this.formatTransition(delayedTransition)), {
        delay: delay
      });
    });
  };
  /**
   * Returns the state nodes represented by the current state value.
   *
   * @param state The state value or State instance
   */

  StateNode.prototype.getStateNodes = function (state) {
    var _a;
    var _this = this;
    if (!state) {
      return [];
    }
    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);
    if (isString(stateValue)) {
      var initialStateValue = this.getStateNode(stateValue).initial;
      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];
    }
    var subStateKeys = Object.keys(stateValue);
    var subStateNodes = [this];
    subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function (subStateKey) {
      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
    }))), false));
    return subStateNodes;
  };
  /**
   * Returns `true` if this state node explicitly handles the given event.
   *
   * @param event The event in question
   */

  StateNode.prototype.handles = function (event) {
    var eventType = getEventType(event);
    return this.events.includes(eventType);
  };
  /**
   * Resolves the given `state` to a new `State` instance relative to this machine.
   *
   * This ensures that `.events` and `.nextEvents` represent the correct values.
   *
   * @param state The state to resolve
   */

  StateNode.prototype.resolveState = function (state) {
    var stateFromConfig = state instanceof State ? state : State.create(state);
    var configuration = Array.from(getConfiguration([], this.getStateNodes(stateFromConfig.value)));
    return new State(_assign(_assign({}, stateFromConfig), {
      value: this.resolve(stateFromConfig.value),
      configuration: configuration,
      done: isInFinalState(configuration, this),
      tags: getTagsFromConfiguration(configuration),
      machine: this.machine
    }));
  };
  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {
    var stateNode = this.getStateNode(stateValue);
    var next = stateNode.next(state, _event);
    if (!next || !next.transitions.length) {
      return this.next(state, _event);
    }
    return next;
  };
  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {
    var subStateKeys = Object.keys(stateValue);
    var stateNode = this.getStateNode(subStateKeys[0]);
    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);
    if (!next || !next.transitions.length) {
      return this.next(state, _event);
    }
    return next;
  };
  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {
    var e_2, _a;
    var transitionMap = {};
    try {
      for (var _b = __values(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var subStateKey = _c.value;
        var subStateValue = stateValue[subStateKey];
        if (!subStateValue) {
          continue;
        }
        var subStateNode = this.getStateNode(subStateKey);
        var next = subStateNode._transition(subStateValue, state, _event);
        if (next) {
          transitionMap[subStateKey] = next;
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_2) throw e_2.error;
      }
    }
    var stateTransitions = Object.keys(transitionMap).map(function (key) {
      return transitionMap[key];
    });
    var enabledTransitions = flatten(stateTransitions.map(function (st) {
      return st.transitions;
    }));
    var willTransition = stateTransitions.some(function (st) {
      return st.transitions.length > 0;
    });
    if (!willTransition) {
      return this.next(state, _event);
    }
    var entryNodes = flatten(stateTransitions.map(function (t) {
      return t.entrySet;
    }));
    var configuration = flatten(Object.keys(transitionMap).map(function (key) {
      return transitionMap[key].configuration;
    }));
    return {
      transitions: enabledTransitions,
      entrySet: entryNodes,
      exitSet: flatten(stateTransitions.map(function (t) {
        return t.exitSet;
      })),
      configuration: configuration,
      source: state,
      actions: flatten(Object.keys(transitionMap).map(function (key) {
        return transitionMap[key].actions;
      }))
    };
  };
  StateNode.prototype._transition = function (stateValue, state, _event) {
    // leaf node
    if (isString(stateValue)) {
      return this.transitionLeafNode(stateValue, state, _event);
    } // hierarchical node

    if (Object.keys(stateValue).length === 1) {
      return this.transitionCompoundNode(stateValue, state, _event);
    } // orthogonal node

    return this.transitionParallelNode(stateValue, state, _event);
  };
  StateNode.prototype.getTransitionData = function (state, event) {
    return this._transition(state.value, state, toSCXMLEvent(event));
  };
  StateNode.prototype.next = function (state, _event) {
    var e_3, _a;
    var _this = this;
    var eventName = _event.name;
    var actions = [];
    var nextStateNodes = [];
    var selectedTransition;
    try {
      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var candidate = _c.value;
        var cond = candidate.cond,
          stateIn = candidate.in;
        var resolvedContext = state.context;
        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ?
        // Check if in state by ID
        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) :
        // Check if in state by relative grandparent
        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;
        var guardPassed = false;
        try {
          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);
        } catch (err) {
          throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
        }
        if (guardPassed && isInState) {
          if (candidate.target !== undefined) {
            nextStateNodes = candidate.target;
          }
          actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));
          selectedTransition = candidate;
          break;
        }
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_3) throw e_3.error;
      }
    }
    if (!selectedTransition) {
      return undefined;
    }
    if (!nextStateNodes.length) {
      return {
        transitions: [selectedTransition],
        entrySet: [],
        exitSet: [],
        configuration: state.value ? [this] : [],
        source: state,
        actions: actions
      };
    }
    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {
      return _this.getRelativeStateNodes(stateNode, state.historyValue);
    }));
    var isInternal = !!selectedTransition.internal;
    var reentryNodes = [];
    if (!isInternal) {
      nextStateNodes.forEach(function (targetNode) {
        reentryNodes.push.apply(reentryNodes, __spreadArray([], __read(_this.getExternalReentryNodes(targetNode)), false));
      });
    }
    return {
      transitions: [selectedTransition],
      entrySet: reentryNodes,
      exitSet: isInternal ? [] : [this],
      configuration: allNextStateNodes,
      source: state,
      actions: actions
    };
  };
  StateNode.prototype.getExternalReentryNodes = function (targetNode) {
    var nodes = [];
    var _a = __read(targetNode.order > this.order ? [targetNode, this] : [this, targetNode], 2),
      marker = _a[0],
      possibleAncestor = _a[1];
    while (marker && marker !== possibleAncestor) {
      nodes.push(marker);
      marker = marker.parent;
    }
    if (marker !== possibleAncestor) {
      // we never got to `possibleAncestor`, therefore the initial `marker` "escapes" it
      // it's in a different part of the tree so no states will be reentered for such an external transition
      return [];
    }
    nodes.push(possibleAncestor);
    return nodes;
  };
  StateNode.prototype.getActions = function (resolvedConfig, isDone, transition, currentContext, _event, prevState) {
    var e_4, _a, e_5, _b;
    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);
    try {
      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {
        var sn = resolvedConfig_1_1.value;
        if (!has(prevConfig, sn) || has(transition.entrySet, sn.parent)) {
          transition.entrySet.push(sn);
        }
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);
      } finally {
        if (e_4) throw e_4.error;
      }
    }
    try {
      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
        var sn = prevConfig_1_1.value;
        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {
          transition.exitSet.push(sn);
        }
      }
    } catch (e_5_1) {
      e_5 = {
        error: e_5_1
      };
    } finally {
      try {
        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);
      } finally {
        if (e_5) throw e_5.error;
      }
    }
    var doneEvents = flatten(transition.entrySet.map(function (sn) {
      var events = [];
      if (sn.type !== 'final') {
        return events;
      }
      var parent = sn.parent;
      if (!parent.parent) {
        return events;
      }
      events.push(done(sn.id, sn.doneData),
      // TODO: deprecate - final states should not emit done events for their own state.
      done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));
      var grandparent = parent.parent;
      if (grandparent.type === 'parallel') {
        if (getChildren(grandparent).every(function (parentNode) {
          return isInFinalState(transition.configuration, parentNode);
        })) {
          events.push(done(grandparent.id));
        }
      }
      return events;
    }));
    transition.exitSet.sort(function (a, b) {
      return b.order - a.order;
    });
    transition.entrySet.sort(function (a, b) {
      return a.order - b.order;
    });
    var entryStates = new Set(transition.entrySet);
    var exitStates = new Set(transition.exitSet);
    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {
        return __spreadArray(__spreadArray([], __read(stateNode.activities.map(function (activity) {
          return start(activity);
        })), false), __read(stateNode.onEntry), false);
      })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {
        return __spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function (activity) {
          return stop(activity);
        })), false);
      }))], 2),
      entryActions = _c[0],
      exitActions = _c[1];
    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);
    if (isDone) {
      var stopActions = toActionObjects(flatten(__spreadArray([], __read(resolvedConfig), false).sort(function (a, b) {
        return b.order - a.order;
      }).map(function (stateNode) {
        return stateNode.onExit;
      })), this.machine.options.actions).filter(function (action) {
        return action.type !== raise$1 && (action.type !== send$1 || !!action.to && action.to !== SpecialTargets.Internal);
      });
      return actions.concat(stopActions);
    }
    return actions;
  };
  /**
   * Determines the next state given the current `state` and sent `event`.
   *
   * @param state The current State instance or state value
   * @param event The event that was sent at the current state
   * @param context The current context (extended state) of the current state
   */

  StateNode.prototype.transition = function (state, event, context, exec) {
    if (state === void 0) {
      state = this.initialState;
    }
    var _event = toSCXMLEvent(event);
    var currentState;
    if (state instanceof State) {
      currentState = context === undefined ? state : this.resolveState(State.from(state, context));
    } else {
      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);
      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;
      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));
    }
    if (!IS_PRODUCTION && _event.name === WILDCARD) {
      throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD, "')"));
    }
    if (this.strict) {
      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {
        throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
      }
    }
    var stateTransition = this._transition(currentState.value, currentState, _event) || {
      transitions: [],
      configuration: [],
      entrySet: [],
      exitSet: [],
      source: currentState,
      actions: []
    };
    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));
    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;
    stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);
    return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);
  };
  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent, predictableExec) {
    var _a;
    var currentActions = state.actions;
    state = this.transition(state, _event, undefined, predictableExec); // Save original event to state
    // TODO: this should be the raised event! Delete in V5 (breaking)

    state._event = originalEvent;
    state.event = originalEvent.data;
    (_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions), false));
    return state;
  };
  StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, predictableExec, _event) {
    var e_6, _a;
    var _this = this;
    if (_event === void 0) {
      _event = initEvent;
    }
    var configuration = stateTransition.configuration; // Transition will "apply" if:
    // - this is the initial state (there is no current state)
    // - OR there are transitions

    var willTransition = !currentState || stateTransition.transitions.length > 0;
    var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
    var isDone = isInFinalState(resolvedConfiguration, this);
    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;
    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;
    var actions = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState);
    var activities = currentState ? _assign({}, currentState.activities) : {};
    try {
      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
        var action = actions_1_1.value;
        if (action.type === start$1) {
          activities[action.activity.id || action.activity.type] = action;
        } else if (action.type === stop$1) {
          activities[action.activity.id || action.activity.type] = false;
        }
      }
    } catch (e_6_1) {
      e_6 = {
        error: e_6_1
      };
    } finally {
      try {
        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
      } finally {
        if (e_6) throw e_6.error;
      }
    }
    var _b = __read(resolveActions(this, currentState, context, _event, actions, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2),
      resolvedActions = _b[0],
      updatedContext = _b[1];
    var _c = __read(partition(resolvedActions, function (action) {
        return action.type === raise$1 || action.type === send$1 && action.to === SpecialTargets.Internal;
      }), 2),
      raisedEvents = _c[0],
      nonRaisedActions = _c[1];
    var invokeActions = resolvedActions.filter(function (action) {
      var _a;
      return action.type === start$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;
    });
    var children = invokeActions.reduce(function (acc, action) {
      acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);
      return acc;
    }, currentState ? _assign({}, currentState.children) : {});
    var nextState = new State({
      value: resolvedStateValue || currentState.value,
      context: updatedContext,
      _event: _event,
      // Persist _sessionid between states
      _sessionid: currentState ? currentState._sessionid : null,
      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,
      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,
      actions: resolvedStateValue ? nonRaisedActions : [],
      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
      events: [],
      configuration: resolvedConfiguration,
      transitions: stateTransition.transitions,
      children: children,
      done: isDone,
      tags: getTagsFromConfiguration(resolvedConfiguration),
      machine: this
    });
    var didUpdateContext = context !== updatedContext;
    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks

    var history = nextState.history;
    if (history) {
      delete history.history;
    } // There are transient transitions if the machine is not in a final state
    // and if some of the state nodes have transient ("always") transitions.

    var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function (stateNode) {
      return stateNode._transient;
    })); // If there are no enabled transitions, check if there are transient transitions.
    // If there are transient transitions, continue checking for more transitions
    // because an transient transition should be triggered even if there are no
    // enabled transitions.
    //
    // If we're already working on an transient transition then stop to prevent an infinite loop.
    //
    // Otherwise, if there are no enabled nor transient transitions, we are done.

    if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {
      return nextState;
    }
    var maybeNextState = nextState;
    if (!isDone) {
      if (hasAlwaysTransitions) {
        maybeNextState = this.resolveRaisedTransition(maybeNextState, {
          type: nullEvent
        }, _event, predictableExec);
      }
      while (raisedEvents.length) {
        var raisedEvent = raisedEvents.shift();
        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);
      }
    } // Detect if state changed

    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);
    maybeNextState.changed = changed; // Preserve original history after raised events

    maybeNextState.history = history;
    return maybeNextState;
  };
  /**
   * Returns the child state node from its relative `stateKey`, or throws.
   */

  StateNode.prototype.getStateNode = function (stateKey) {
    if (isStateId(stateKey)) {
      return this.machine.getStateNodeById(stateKey);
    }
    if (!this.states) {
      throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
    }
    var result = this.states[stateKey];
    if (!result) {
      throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
    }
    return result;
  };
  /**
   * Returns the state node with the given `stateId`, or throws.
   *
   * @param stateId The state ID. The prefix "#" is removed.
   */

  StateNode.prototype.getStateNodeById = function (stateId) {
    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;
    if (resolvedStateId === this.id) {
      return this;
    }
    var stateNode = this.machine.idMap[resolvedStateId];
    if (!stateNode) {
      throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
    }
    return stateNode;
  };
  /**
   * Returns the relative state node from the given `statePath`, or throws.
   *
   * @param statePath The string or string array relative path to the state node.
   */

  StateNode.prototype.getStateNodeByPath = function (statePath) {
    if (typeof statePath === 'string' && isStateId(statePath)) {
      try {
        return this.getStateNodeById(statePath.slice(1));
      } catch (e) {// try individual paths
        // throw e;
      }
    }
    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();
    var currentStateNode = this;
    while (arrayStatePath.length) {
      var key = arrayStatePath.shift();
      if (!key.length) {
        break;
      }
      currentStateNode = currentStateNode.getStateNode(key);
    }
    return currentStateNode;
  };
  /**
   * Resolves a partial state value with its full representation in this machine.
   *
   * @param stateValue The partial state value to resolve.
   */

  StateNode.prototype.resolve = function (stateValue) {
    var _a;
    var _this = this;
    if (!stateValue) {
      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties
    }

    switch (this.type) {
      case 'parallel':
        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {
          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;
        });
      case 'compound':
        if (isString(stateValue)) {
          var subStateNode = this.getStateNode(stateValue);
          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {
            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;
          }
          return stateValue;
        }
        if (!Object.keys(stateValue).length) {
          return this.initialStateValue || {};
        }
        return mapValues(stateValue, function (subStateValue, subStateKey) {
          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;
        });
      default:
        return stateValue || EMPTY_OBJECT;
    }
  };
  StateNode.prototype.getResolvedPath = function (stateIdentifier) {
    if (isStateId(stateIdentifier)) {
      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];
      if (!stateNode) {
        throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
      }
      return stateNode.path;
    }
    return toStatePath(stateIdentifier, this.delimiter);
  };
  Object.defineProperty(StateNode.prototype, "initialStateValue", {
    get: function get() {
      var _a;
      if (this.__cache.initialStateValue) {
        return this.__cache.initialStateValue;
      }
      var initialStateValue;
      if (this.type === 'parallel') {
        initialStateValue = mapFilterValues(this.states, function (state) {
          return state.initialStateValue || EMPTY_OBJECT;
        }, function (stateNode) {
          return !(stateNode.type === 'history');
        });
      } else if (this.initial !== undefined) {
        if (!this.states[this.initial]) {
          throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
        }
        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);
      } else {
        // The finite state value of a machine without child states is just an empty object
        initialStateValue = {};
      }
      this.__cache.initialStateValue = initialStateValue;
      return this.__cache.initialStateValue;
    },
    enumerable: false,
    configurable: true
  });
  StateNode.prototype.getInitialState = function (stateValue, context) {
    this._init(); // TODO: this should be in the constructor (see note in constructor)

    var configuration = this.getStateNodes(stateValue);
    return this.resolveTransition({
      configuration: configuration,
      entrySet: __spreadArray([], __read(configuration), false),
      exitSet: [],
      transitions: [],
      source: undefined,
      actions: []
    }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);
  };
  Object.defineProperty(StateNode.prototype, "initialState", {
    /**
     * The initial State instance, which includes all actions to be executed from
     * entering the initial state.
     */
    get: function get() {
      var initialStateValue = this.initialStateValue;
      if (!initialStateValue) {
        throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
      }
      return this.getInitialState(initialStateValue);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "target", {
    /**
     * The target state value of the history state node, if it exists. This represents the
     * default state value to transition to if no history value exists yet.
     */
    get: function get() {
      var target;
      if (this.type === 'history') {
        var historyConfig = this.config;
        if (isString(historyConfig.target)) {
          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
        } else {
          target = historyConfig.target;
        }
      }
      return target;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Returns the leaf nodes from a state path relative to this state node.
   *
   * @param relativeStateId The relative state path to retrieve the state nodes
   * @param history The previous state to retrieve history
   * @param resolve Whether state nodes should resolve to initial child state nodes
   */

  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {
    if (resolve === void 0) {
      resolve = true;
    }
    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
  };
  Object.defineProperty(StateNode.prototype, "initialStateNodes", {
    get: function get() {
      var _this = this;
      if (isLeafNode(this)) {
        return [this];
      } // Case when state node is compound but no initial state is defined

      if (this.type === 'compound' && !this.initial) {
        if (!IS_PRODUCTION) {
          warn(false, "Compound state node '".concat(this.id, "' has no initial state."));
        }
        return [this];
      }
      var initialStateNodePaths = toStatePaths(this.initialStateValue);
      return flatten(initialStateNodePaths.map(function (initialPath) {
        return _this.getFromRelativePath(initialPath);
      }));
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Retrieves state nodes from a relative path to this state node.
   *
   * @param relativePath The relative path from this state node
   * @param historyValue
   */

  StateNode.prototype.getFromRelativePath = function (relativePath) {
    if (!relativePath.length) {
      return [this];
    }
    var _a = __read(relativePath),
      stateKey = _a[0],
      childStatePath = _a.slice(1);
    if (!this.states) {
      throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
    }
    var childStateNode = this.getStateNode(stateKey);
    if (childStateNode.type === 'history') {
      return childStateNode.resolveHistory();
    }
    if (!this.states[stateKey]) {
      throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
    }
    return this.states[stateKey].getFromRelativePath(childStatePath);
  };
  StateNode.prototype.historyValue = function (relativeStateValue) {
    if (!Object.keys(this.states).length) {
      return undefined;
    }
    return {
      current: relativeStateValue || this.initialStateValue,
      states: mapFilterValues(this.states, function (stateNode, key) {
        if (!relativeStateValue) {
          return stateNode.historyValue();
        }
        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];
        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
      }, function (stateNode) {
        return !stateNode.history;
      })
    };
  };
  /**
   * Resolves to the historical value(s) of the parent state node,
   * represented by state nodes.
   *
   * @param historyValue
   */

  StateNode.prototype.resolveHistory = function (historyValue) {
    var _this = this;
    if (this.type !== 'history') {
      return [this];
    }
    var parent = this.parent;
    if (!historyValue) {
      var historyTarget = this.target;
      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {
        return parent.getFromRelativePath(relativeChildPath);
      })) : parent.initialStateNodes;
    }
    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;
    if (isString(subHistoryValue)) {
      return [parent.getStateNode(subHistoryValue)];
    }
    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {
      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
    }));
  };
  Object.defineProperty(StateNode.prototype, "stateIds", {
    /**
     * All the state node IDs of this state node and its descendant state nodes.
     */
    get: function get() {
      var _this = this;
      var childStateIds = flatten(Object.keys(this.states).map(function (stateKey) {
        return _this.states[stateKey].stateIds;
      }));
      return [this.id].concat(childStateIds);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "events", {
    /**
     * All the event types accepted by this state node and its descendants.
     */
    get: function get() {
      var e_7, _a, e_8, _b;
      if (this.__cache.events) {
        return this.__cache.events;
      }
      var states = this.states;
      var events = new Set(this.ownEvents);
      if (states) {
        try {
          for (var _c = __values(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var stateId = _d.value;
            var state = states[stateId];
            if (state.states) {
              try {
                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                  var event_1 = _f.value;
                  events.add("".concat(event_1));
                }
              } catch (e_8_1) {
                e_8 = {
                  error: e_8_1
                };
              } finally {
                try {
                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                } finally {
                  if (e_8) throw e_8.error;
                }
              }
            }
          }
        } catch (e_7_1) {
          e_7 = {
            error: e_7_1
          };
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
          } finally {
            if (e_7) throw e_7.error;
          }
        }
      }
      return this.__cache.events = Array.from(events);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "ownEvents", {
    /**
     * All the events that have transitions directly from this state node.
     *
     * Excludes any inert events.
     */
    get: function get() {
      var events = new Set(this.transitions.filter(function (transition) {
        return !(!transition.target && !transition.actions.length && transition.internal);
      }).map(function (transition) {
        return transition.eventType;
      }));
      return Array.from(events);
    },
    enumerable: false,
    configurable: true
  });
  StateNode.prototype.resolveTarget = function (_target) {
    var _this = this;
    if (_target === undefined) {
      // an undefined target signals that the state node should not transition from that state when receiving that event
      return undefined;
    }
    return _target.map(function (target) {
      if (!isString(target)) {
        return target;
      }
      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,
      // do not include machine key on target

      if (isInternalTarget && !_this.parent) {
        return _this.getStateNodeByPath(target.slice(1));
      }
      var resolvedTarget = isInternalTarget ? _this.key + target : target;
      if (_this.parent) {
        try {
          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);
          return targetStateNode;
        } catch (err) {
          throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
        }
      } else {
        return _this.getStateNodeByPath(resolvedTarget);
      }
    });
  };
  StateNode.prototype.formatTransition = function (transitionConfig) {
    var _this = this;
    var normalizedTarget = normalizeTarget(transitionConfig.target);
    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {
      return isString(_target) && _target[0] === _this.delimiter;
    }) : true;
    var guards = this.machine.options.guards;
    var target = this.resolveTarget(normalizedTarget);
    var transition = _assign(_assign({}, transitionConfig), {
      actions: toActionObjects(toArray(transitionConfig.actions)),
      cond: toGuard(transitionConfig.cond, guards),
      target: target,
      source: this,
      internal: internal,
      eventType: transitionConfig.event,
      toJSON: function toJSON() {
        return _assign(_assign({}, transition), {
          target: transition.target ? transition.target.map(function (t) {
            return "#".concat(t.id);
          }) : undefined,
          source: "#".concat(_this.id)
        });
      }
    });
    return transition;
  };
  StateNode.prototype.formatTransitions = function () {
    var e_9, _a;
    var _this = this;
    var onConfig;
    if (!this.config.on) {
      onConfig = [];
    } else if (Array.isArray(this.config.on)) {
      onConfig = this.config.on;
    } else {
      var _b = this.config.on,
        _c = WILDCARD,
        _d = _b[_c],
        wildcardConfigs = _d === void 0 ? [] : _d,
        strictTransitionConfigs_1 = __rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
      onConfig = flatten(Object.keys(strictTransitionConfigs_1).map(function (key) {
        if (!IS_PRODUCTION && key === NULL_EVENT) {
          warn(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + "Please check the `on` configuration for \"#".concat(_this.id, "\"."));
        }
        var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);
        if (!IS_PRODUCTION) {
          validateArrayifiedTransitions(_this, key, transitionConfigArray);
        }
        return transitionConfigArray;
      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));
    }
    var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];
    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];
    if (!IS_PRODUCTION) {
      warn(!(this.config.onDone && !this.parent), "Root nodes cannot have an \".onDone\" transition. Please check the config of \"".concat(this.id, "\"."));
    }
    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {
      var settleTransitions = [];
      if (invokeDef.onDone) {
        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));
      }
      if (invokeDef.onError) {
        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)), false));
      }
      return settleTransitions;
    }));
    var delayedTransitions = this.after;
    var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function (transitionConfig) {
      return toArray(transitionConfig).map(function (transition) {
        return _this.formatTransition(transition);
      });
    }));
    try {
      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
        var delayedTransition = delayedTransitions_1_1.value;
        formattedTransitions.push(delayedTransition);
      }
    } catch (e_9_1) {
      e_9 = {
        error: e_9_1
      };
    } finally {
      try {
        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);
      } finally {
        if (e_9) throw e_9.error;
      }
    }
    return formattedTransitions;
  };
  return StateNode;
}();

var warned = false;
function createMachine(config, options) {
  if (!IS_PRODUCTION && !config.predictableActionArguments && !warned) {
    warned = true;
    console.warn('It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html');
  }
  return new StateNode(config, options);
}

var assign = assign$1;

function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var WEB_TIEBREAKER_VALUE = 0xfffffffe;
var MAX_RETRIES = 2;
var DEFAULT_IS_OK_IN_TRANSACTION = true;
var HEADER_NO_OK_IN_TRANSACTION = 'noOkInTransaction';
class Roap extends EventEmitter$5 {
  constructor(createLocalOfferCallback, handleRemoteOfferCallback, handleRemoteAnswerCallback, debugId, initialSeq) {
    super();
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "createLocalOfferCallback", void 0);
    _defineProperty(this, "handleRemoteOfferCallback", void 0);
    _defineProperty(this, "handleRemoteAnswerCallback", void 0);
    _defineProperty(this, "stateMachine", void 0);
    _defineProperty(this, "initiateOfferPromises", void 0);
    this.id = debugId || 'ROAP';
    this.createLocalOfferCallback = createLocalOfferCallback;
    this.handleRemoteOfferCallback = handleRemoteOfferCallback;
    this.handleRemoteAnswerCallback = handleRemoteAnswerCallback;
    this.initiateOfferPromises = [];
    var fsm = createMachine({
      tsTypes: {},
      schema: {
        context: {},
        events: {},
        services: {}
      },
      preserveActionOrder: true,
      id: 'roap',
      initial: 'idle',
      context: {
        seq: initialSeq || 0,
        pendingLocalOffer: false,
        isHandlingOfferRequest: false,
        retryCounter: 0,
        isOkInTransaction: DEFAULT_IS_OK_IN_TRANSACTION
      },
      states: {
        browserError: {
          onEntry: (context, event) => {
            this.error('FSM', "browserError state onEntry: context=".concat(JSON.stringify(context), ":"), event.data);
            this.emit(exports.MediaConnectionEventNames.ROAP_FAILURE, event.data);
          }
        },
        remoteError: {
          onEntry: (_, event) => {
            this.log('FSM', 'remoteError state onEntry called, emitting MediaConnectionEventNames.ROAP_FAILURE');
            this.emit(exports.MediaConnectionEventNames.ROAP_FAILURE, event.data);
          }
        },
        idle: {
          always: {
            cond: 'isPendingLocalOffer',
            actions: ['increaseSeq', 'sendStartedEvent'],
            target: 'creatingLocalOffer'
          },
          on: {
            INITIATE_OFFER: {
              actions: ['increaseSeq', 'sendStartedEvent'],
              target: 'creatingLocalOffer'
            },
            REMOTE_OFFER_ARRIVED: [{
              cond: 'isSameSeq',
              actions: 'sendOutOfOrderError'
            }, {
              actions: ['updateSeq', 'sendStartedEvent'],
              target: 'settingRemoteOffer'
            }],
            REMOTE_OFFER_REQUEST_ARRIVED: [{
              cond: 'isSameSeq',
              actions: 'sendOutOfOrderError'
            }, {
              actions: ['updateSeq', 'setOfferRequestFlag', 'sendStartedEvent'],
              target: 'creatingLocalOffer'
            }],
            REMOTE_ANSWER_ARRIVED: [{
              cond: 'isSameSeq',
              actions: 'sendRoapOKMessage'
            }, {
              actions: 'sendInvalidStateError'
            }],
            REMOTE_OK_ARRIVED: {
              actions: 'sendInvalidStateError'
            }
          }
        },
        creatingLocalOffer: {
          invoke: {
            src: 'createLocalOffer',
            onDone: [{
              cond: 'isPendingLocalOffer',
              target: 'creatingLocalOffer'
            }, {
              cond: 'isHandlingOfferRequest',
              actions: ['sendRoapOfferResponseMessage', 'resolvePendingInitiateOfferPromises'],
              target: 'waitingForAnswer'
            }, {
              actions: ['sendRoapOfferMessage', 'resolvePendingInitiateOfferPromises'],
              target: 'waitingForAnswer'
            }],
            onError: {
              actions: 'rejectPendingInitiateOfferPromises',
              target: 'browserError'
            }
          },
          onEntry: ['resetPendingLocalOffer'],
          on: {
            INITIATE_OFFER: {
              actions: 'enqueueNewOfferCreation'
            },
            REMOTE_OFFER_ARRIVED: [{
              actions: 'handleGlare'
            }],
            REMOTE_OFFER_REQUEST_ARRIVED: [{
              cond: 'isHandlingOfferRequest',
              actions: 'ignoreDuplicate'
            }, {
              actions: 'handleGlare'
            }],
            REMOTE_ANSWER_ARRIVED: {
              actions: 'sendInvalidStateError'
            },
            REMOTE_OK_ARRIVED: {
              actions: 'sendInvalidStateError'
            }
          }
        },
        waitingForAnswer: {
          on: {
            REMOTE_ANSWER_ARRIVED: [{
              actions: ['resetRetryCounter', 'updateSeq', 'updateIsOkInTransaction'],
              target: 'settingRemoteAnswer'
            }],
            INITIATE_OFFER: {
              actions: 'enqueueNewOfferCreation'
            },
            REMOTE_OFFER_ARRIVED: {
              actions: 'handleGlare'
            },
            REMOTE_OFFER_REQUEST_ARRIVED: [{
              cond: 'isHandlingOfferRequest',
              actions: 'ignoreDuplicate'
            }, {
              actions: 'handleGlare'
            }],
            REMOTE_OK_ARRIVED: {
              actions: 'sendInvalidStateError'
            },
            ERROR_ARRIVED: [{
              cond: 'shouldErrorTriggerOfferRetry',
              actions: ['increaseSeq', 'increaseRetryCounter'],
              target: 'creatingLocalOffer'
            }, {
              cond: 'isSameSeq',
              target: 'remoteError'
            }]
          }
        },
        settingRemoteAnswer: {
          invoke: {
            src: 'handleRemoteAnswer',
            onDone: [{
              cond: 'isOkInTransaction',
              actions: ['sendRoapOKMessage', 'resetOfferRequestFlag', 'sendDoneEvent'],
              target: 'idle'
            }, {
              actions: ['resetOfferRequestFlag', 'sendDoneEvent'],
              target: 'idle'
            }],
            onError: {
              actions: 'sendGenericError',
              target: 'browserError'
            }
          },
          on: {
            INITIATE_OFFER: {
              actions: 'enqueueNewOfferCreation'
            },
            REMOTE_OFFER_ARRIVED: [{
              cond: 'isOkInTransaction',
              actions: 'sendInvalidStateError'
            }, {
              actions: 'sendRetryStateError'
            }],
            REMOTE_OFFER_REQUEST_ARRIVED: [{
              cond: 'isOkInTransaction',
              actions: 'sendInvalidStateError'
            }, {
              actions: 'sendRetryStateError'
            }],
            REMOTE_ANSWER_ARRIVED: [{
              cond: 'isSameSeq',
              actions: 'ignoreDuplicate'
            }, {
              actions: 'sendInvalidStateError'
            }],
            REMOTE_OK_ARRIVED: {
              actions: 'sendInvalidStateError'
            }
          }
        },
        settingRemoteOffer: {
          invoke: {
            src: 'handleRemoteOffer',
            onDone: {
              actions: ['resetOkInTransaction', 'sendRoapAnswerMessage'],
              target: 'waitingForOK'
            },
            onError: {
              actions: 'sendGenericError',
              target: 'browserError'
            }
          },
          on: {
            INITIATE_OFFER: {
              actions: 'enqueueNewOfferCreation'
            },
            REMOTE_OFFER_ARRIVED: [{
              cond: 'isSameSeq',
              actions: 'ignoreDuplicate'
            }, {
              actions: 'sendRetryAfterError'
            }],
            REMOTE_OFFER_REQUEST_ARRIVED: {
              actions: 'sendInvalidStateError'
            },
            REMOTE_ANSWER_ARRIVED: {
              actions: 'sendInvalidStateError'
            },
            REMOTE_OK_ARRIVED: {
              actions: 'sendInvalidStateError'
            }
          }
        },
        waitingForOK: {
          on: {
            REMOTE_OK_ARRIVED: [{
              actions: ['updateSeq', 'sendDoneEvent'],
              target: 'idle'
            }],
            INITIATE_OFFER: {
              actions: 'enqueueNewOfferCreation'
            },
            REMOTE_OFFER_ARRIVED: [{
              cond: 'isSameSeq',
              actions: 'ignoreDuplicate'
            }, {
              actions: 'sendInvalidStateError'
            }],
            REMOTE_OFFER_REQUEST_ARRIVED: {
              actions: 'sendInvalidStateError'
            },
            REMOTE_ANSWER_ARRIVED: {
              actions: 'sendInvalidStateError'
            },
            ERROR_ARRIVED: {
              cond: 'isSameSeq',
              target: 'remoteError'
            }
          }
        }
      }
    }, {
      services: {
        createLocalOffer: () => this.createLocalOfferCallback(),
        handleRemoteAnswer: (_context, event) => this.handleRemoteAnswerCallback(event.sdp),
        handleRemoteOffer: (_context, event) => this.handleRemoteOfferCallback(event.sdp)
      },
      actions: {
        enqueueNewOfferCreation: assign(context => _objectSpread$7(_objectSpread$7({}, context), {}, {
          pendingLocalOffer: true
        })),
        resetPendingLocalOffer: assign(context => _objectSpread$7(_objectSpread$7({}, context), {}, {
          pendingLocalOffer: false
        })),
        increaseSeq: assign(context => _objectSpread$7(_objectSpread$7({}, context), {}, {
          seq: context.seq + 1
        })),
        updateSeq: assign((context, event) => _objectSpread$7(_objectSpread$7({}, context), {}, {
          seq: event.seq
        })),
        increaseRetryCounter: assign(context => _objectSpread$7(_objectSpread$7({}, context), {}, {
          retryCounter: context.retryCounter + 1
        })),
        resetRetryCounter: assign(context => _objectSpread$7(_objectSpread$7({}, context), {}, {
          retryCounter: 0
        })),
        setOfferRequestFlag: assign(context => _objectSpread$7(_objectSpread$7({}, context), {}, {
          isHandlingOfferRequest: true
        })),
        resetOfferRequestFlag: assign(context => _objectSpread$7(_objectSpread$7({}, context), {}, {
          isHandlingOfferRequest: false
        })),
        handleGlare: (_context, event) => {
          if (event.tieBreaker === WEB_TIEBREAKER_VALUE) {
            this.sendErrorMessage(event.seq, exports.ErrorType.DOUBLECONFLICT);
          } else {
            this.sendErrorMessage(event.seq, exports.ErrorType.CONFLICT);
          }
        },
        sendRoapOfferMessage: (context, event) => this.sendRoapOfferMessage(context.seq, event.data.sdp),
        sendRoapOfferResponseMessage: (context, event) => this.sendRoapOfferResponseMessage(context.seq, event.data.sdp),
        sendRoapOKMessage: context => this.sendRoapOkMessage(context.seq),
        sendRoapAnswerMessage: (context, event) => this.sendRoapAnswerMessage(context.seq, event.data.sdp),
        sendStartedEvent: () => this.sendStartedEvent(),
        sendDoneEvent: () => this.sendDoneEvent(),
        sendGenericError: context => this.sendErrorMessage(context.seq, exports.ErrorType.FAILED),
        sendInvalidStateError: (_context, event) => this.sendErrorMessage(event.seq, exports.ErrorType.INVALID_STATE),
        sendRetryStateError: (_context, event) => this.sendErrorMessage(event.seq, exports.ErrorType.RETRY),
        sendOutOfOrderError: (_context, event) => this.sendErrorMessage(event.seq, exports.ErrorType.OUT_OF_ORDER),
        sendRetryAfterError: (_context, event) => this.sendErrorMessage(event.seq, exports.ErrorType.FAILED, {
          retryAfter: Math.floor(Math.random() * 11)
        }),
        ignoreDuplicate: (_context, event) => this.log('FSM', "ignoring duplicate roap message ".concat(event.type, " with seq=").concat(event.seq)),
        resolvePendingInitiateOfferPromises: () => this.resolvePendingInitiateOfferPromises(),
        rejectPendingInitiateOfferPromises: (_context, event) => this.rejectPendingInitiateOfferPromises(event.data),
        updateIsOkInTransaction: assign((context, event) => {
          var _event$headers;
          return _objectSpread$7(_objectSpread$7({}, context), {}, {
            isOkInTransaction: !((_event$headers = event.headers) !== null && _event$headers !== void 0 && _event$headers.includes(HEADER_NO_OK_IN_TRANSACTION))
          });
        }),
        resetOkInTransaction: assign(context => _objectSpread$7(_objectSpread$7({}, context), {}, {
          isOkInTransaction: DEFAULT_IS_OK_IN_TRANSACTION
        }))
      },
      guards: {
        isPendingLocalOffer: context => context.pendingLocalOffer,
        isHandlingOfferRequest: context => context.isHandlingOfferRequest,
        isSameSeq: (context, event) => {
          if (event.seq === context.seq) {
            this.log('FSM', "incoming roap message seq is same as current context seq: ".concat(event.seq));
            return true;
          }
          return false;
        },
        shouldErrorTriggerOfferRetry: (context, event) => {
          var retryableErrorTypes = [exports.ErrorType.DOUBLECONFLICT, exports.ErrorType.INVALID_STATE, exports.ErrorType.OUT_OF_ORDER, exports.ErrorType.RETRY];
          if (retryableErrorTypes.includes(event.errorType)) {
            if (event.seq === context.seq && context.retryCounter < MAX_RETRIES) {
              this.log('FSM', "retryable error message received with matching seq and retryCounter ".concat(context.retryCounter, " < ").concat(MAX_RETRIES));
              return true;
            }
            if (event.seq !== context.seq) {
              this.log('FSM', "ignoring error message with wrong seq: ".concat(event.seq, " !== ").concat(context.seq));
            } else {
              this.log('FSM', "reached max retries: retryCounter=".concat(context.retryCounter));
            }
          }
          return false;
        },
        isOkInTransaction: context => context.isOkInTransaction
      }
    });
    this.stateMachine = interpret(fsm).onTransition((state, event) => this.log('onTransition', "state=".concat(state.value, ", event=").concat(JSON.stringify(event)))).start();
  }
  log(action, description) {
    getLogger().info("".concat(this.id, ":").concat(action, " ").concat(description));
  }
  error(action, description, error) {
    getLogger().error("".concat(this.id, ":").concat(action, " ").concat(description, " ").concat(getErrorDescription(error)));
  }
  sendRoapOfferMessage(seq, sdp) {
    this.log('sendRoapOfferMessage', 'emitting ROAP OFFER');
    this.emit(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, {
      roapMessage: {
        seq,
        messageType: 'OFFER',
        sdp,
        tieBreaker: WEB_TIEBREAKER_VALUE
      }
    });
  }
  sendRoapOfferResponseMessage(seq, sdp) {
    this.log('sendRoapOfferResponseMessage', 'emitting ROAP OFFER RESPONSE');
    this.emit(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, {
      roapMessage: {
        seq,
        messageType: 'OFFER_RESPONSE',
        sdp
      }
    });
  }
  sendRoapOkMessage(seq) {
    this.log('sendRoapOkMessage', 'emitting ROAP OK');
    this.emit(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, {
      roapMessage: {
        seq,
        messageType: 'OK'
      }
    });
  }
  sendRoapAnswerMessage(seq, sdp) {
    this.log('sendRoapAnswerMessage', 'emitting ROAP ANSWER');
    this.emit(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, {
      roapMessage: {
        seq,
        messageType: 'ANSWER',
        sdp
      }
    });
  }
  sendDoneEvent() {
    this.log('sendDoneEvent', 'emitting ROAP DONE');
    this.emit(exports.MediaConnectionEventNames.ROAP_DONE);
  }
  sendStartedEvent() {
    this.log('sendStartedEvent', 'emitting ROAP STARTED');
    this.emit(exports.MediaConnectionEventNames.ROAP_STARTED);
  }
  sendErrorMessage(seq, errorType) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var {
      retryAfter
    } = options;
    this.log('sendErrorMessage', "emitting ROAP ERROR (".concat(errorType, ")"));
    this.emit(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, {
      roapMessage: {
        seq,
        messageType: 'ERROR',
        errorType,
        retryAfter
      }
    });
  }
  getStateMachine() {
    return this.stateMachine;
  }
  initiateOffer() {
    return new Promise((resolve, reject) => {
      this.initiateOfferPromises.push({
        resolve,
        reject
      });
      this.stateMachine.send('INITIATE_OFFER');
    });
  }
  resolvePendingInitiateOfferPromises() {
    while (this.initiateOfferPromises.length > 0) {
      var promise = this.initiateOfferPromises.shift();
      promise === null || promise === void 0 ? void 0 : promise.resolve();
    }
  }
  rejectPendingInitiateOfferPromises(error) {
    while (this.initiateOfferPromises.length > 0) {
      var promise = this.initiateOfferPromises.shift();
      promise === null || promise === void 0 ? void 0 : promise.reject(error);
    }
  }
  validateIncomingRoapMessage(roapMessage) {
    var {
      errorType,
      messageType,
      seq
    } = roapMessage;
    var isValid = true;
    var errorToSend;
    if (seq < this.stateMachine.state.context.seq) {
      isValid = false;
      if (messageType !== 'ERROR') {
        errorToSend = exports.ErrorType.OUT_OF_ORDER;
        this.error('validateIncomingRoapMessage', "received roap message ".concat(messageType, " with seq too low: ").concat(seq, " < ").concat(this.stateMachine.state.context.seq));
      } else {
        this.error('validateIncomingRoapMessage', "received ERROR message ".concat(errorType, " with seq too low: ").concat(seq, " < ").concat(this.stateMachine.state.context.seq, ", ignoring it"));
      }
    }
    return {
      isValid,
      errorToSend
    };
  }
  roapMessageReceived(roapMessage) {
    var {
      errorCause,
      errorType,
      headers,
      messageType,
      sdp,
      seq,
      tieBreaker
    } = roapMessage;
    var {
      isValid,
      errorToSend
    } = this.validateIncomingRoapMessage(roapMessage);
    if (!isValid) {
      if (errorToSend) {
        this.sendErrorMessage(seq, errorToSend);
      }
      return;
    }
    switch (messageType) {
      case 'ANSWER':
        this.stateMachine.send('REMOTE_ANSWER_ARRIVED', {
          sdp,
          seq,
          headers
        });
        break;
      case 'OFFER':
        this.stateMachine.send('REMOTE_OFFER_ARRIVED', {
          sdp,
          seq,
          tieBreaker
        });
        break;
      case 'OFFER_REQUEST':
        this.stateMachine.send('REMOTE_OFFER_REQUEST_ARRIVED', {
          seq,
          tieBreaker
        });
        break;
      case 'OK':
        this.stateMachine.send('REMOTE_OK_ARRIVED', {
          sdp,
          seq
        });
        break;
      case 'ERROR':
        this.error('roapMessageReceived', "Error received: seq=".concat(seq, " type=").concat(errorType, " cause=").concat(errorCause));
        if (errorType === exports.ErrorType.CONFLICT) {
          this.error('roapMessageReceived', "CONFLICT error type received - this should never happen, because we use the tieBreaker value ".concat(WEB_TIEBREAKER_VALUE));
        }
        this.stateMachine.send('ERROR_ARRIVED', {
          seq,
          errorType
        });
        break;
      case 'OFFER_RESPONSE':
        this.error('roapMessageReceived', "Received unexpected OFFER_RESPONSE: seq=".concat(seq));
        break;
      default:
        this.error('roapMessageReceived()', "unsupported messageType: ".concat(messageType));
        throw new Error('unhandled messageType');
    }
  }
  stop() {
    this.stateMachine.stop();
  }
  getSeq() {
    return this.stateMachine.state.context.seq;
  }
}

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class RoapMediaConnection extends EventEmitter$5 {
  constructor(mediaConnectionConfig, options, debugId) {
    var metricsCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};
    var closeCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : () => {};
    var sendMetricsCallback = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : () => {};
    super();
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "debugId", void 0);
    _defineProperty(this, "mediaConnection", void 0);
    _defineProperty(this, "roap", void 0);
    _defineProperty(this, "sdpNegotiationStarted", void 0);
    _defineProperty(this, "closeCallback", void 0);
    _defineProperty(this, "sendMetricsCallback", void 0);
    this.debugId = debugId;
    this.id = debugId || 'RoapMediaConnection';
    this.sdpNegotiationStarted = false;
    configureWcmeLogger(debugId);
    this.log('constructor()', "config: ".concat(JSON.stringify(mediaConnectionConfig), ", options: ").concat(JSON.stringify(options)));
    this.mediaConnection = this.createMediaConnection({
      mediaConnectionConfig,
      options,
      metricsCallback,
      debugId
    });
    this.roap = this.createRoap(debugId);
    this.closeCallback = closeCallback;
    this.sendMetricsCallback = sendMetricsCallback;
  }
  log(action, description) {
    getLogger().info("".concat(this.id, ":").concat(action, " ").concat(description));
  }
  error(action, description, error) {
    getLogger().error("".concat(this.id, ":").concat(action, " ").concat(description, " ").concat(getErrorDescription(error)));
  }
  forwardEvent(eventSource, eventType) {
    var _this = this;
    eventSource.on(eventType, function () {
      for (var _len = arguments.length, eventData = new Array(_len), _key = 0; _key < _len; _key++) {
        eventData[_key] = arguments[_key];
      }
      _this.emit(eventType, ...eventData);
    });
  }
  createMediaConnection(_ref) {
    var {
      mediaConnectionConfig,
      options,
      metricsCallback,
      debugId
    } = _ref;
    var mediaConnection = new MediaConnection(mediaConnectionConfig, options, metricsCallback, debugId);
    mediaConnection.on(exports.MediaConnectionEventNames.REMOTE_TRACK_ADDED, this.onRemoteTrack.bind(this));
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.PEER_CONNECTION_STATE_CHANGED);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.ICE_CONNECTION_STATE_CHANGED);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.REMOTE_SDP_ANSWER_PROCESSED);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.REMOTE_SDP_OFFER_PROCESSED);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.LOCAL_SDP_ANSWER_GENERATED);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.LOCAL_SDP_OFFER_GENERATED);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.DTMF_TONE_CHANGED);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.ICE_GATHERING_STATE_CHANGED);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.ICE_CANDIDATE);
    this.forwardEvent(mediaConnection, exports.MediaConnectionEventNames.ICE_CANDIDATE_ERROR);
    return mediaConnection;
  }
  createRoap(debugId, seq) {
    var roap = new Roap(this.createLocalOffer.bind(this), this.handleRemoteOffer.bind(this), this.handleRemoteAnswer.bind(this), debugId, seq);
    roap.on(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, event => this.emit(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, event));
    roap.on(exports.MediaConnectionEventNames.ROAP_STARTED, () => this.emit(exports.MediaConnectionEventNames.ROAP_STARTED));
    roap.on(exports.MediaConnectionEventNames.ROAP_DONE, () => this.emit(exports.MediaConnectionEventNames.ROAP_DONE));
    roap.on(exports.MediaConnectionEventNames.ROAP_FAILURE, error => this.emit(exports.MediaConnectionEventNames.ROAP_FAILURE, error));
    return roap;
  }
  initiateOffer() {
    this.log('initiateOffer()', 'called');
    if (this.sdpNegotiationStarted) {
      this.error('initiateOffer()', 'SDP negotiation already started');
      return Promise.reject(new Error('SDP negotiation already started'));
    }
    this.mediaConnection.initializeTransceivers(false);
    this.sdpNegotiationStarted = true;
    return this.roap.initiateOffer();
  }
  close() {
    this.log('close()', 'called');
    this.closeMediaConnection();
    this.stopRoapSession();
    this.closeCallback();
  }
  forceRtcMetricsSend() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      var _this2$mediaConnectio;
      yield (_this2$mediaConnectio = _this2.mediaConnection) === null || _this2$mediaConnectio === void 0 ? void 0 : _this2$mediaConnectio.forceRtcMetricsCallback();
      _this2.sendMetricsCallback();
    })();
  }
  closeMediaConnection() {
    this.mediaConnection.close();
    this.mediaConnection.removeAllListeners();
  }
  stopRoapSession() {
    this.roap.stop();
    this.roap.removeAllListeners();
  }
  reconnect(iceServers) {
    var initiateOffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    this.log('reconnect()', "iceServers: ".concat(JSON.stringify(iceServers)));
    var config = _objectSpread$6(_objectSpread$6({}, this.mediaConnection.getConfig()), {}, {
      iceServers
    });
    var options = this.mediaConnection.getSendReceiveOptions();
    var seq = this.roap.getSeq();
    var callback = this.mediaConnection.getMetricsCallback();
    this.stopRoapSession();
    this.closeMediaConnection();
    this.sdpNegotiationStarted = false;
    this.mediaConnection = this.createMediaConnection({
      mediaConnectionConfig: config,
      options,
      metricsCallback: callback,
      debugId: this.debugId
    });
    this.roap = this.createRoap(this.debugId, seq);
    if (initiateOffer) {
      return this.initiateOffer();
    }
    return Promise.resolve();
  }
  updateLocalTracks(tracks) {
    this.log('updateLocalTracks()', "called with ".concat(JSON.stringify(tracks)));
    var newOfferNeeded = this.mediaConnection.updateLocalTracks(tracks);
    if (newOfferNeeded) {
      this.log('updateLocalTracks()', 'triggering offer...');
      return this.roap.initiateOffer();
    }
    return Promise.resolve();
  }
  updateDirection(direction) {
    this.log('updateDirection()', "called with ".concat(JSON.stringify(direction)));
    var newOfferNeeded = this.mediaConnection.updateDirection(direction);
    if (newOfferNeeded) {
      this.log('updateDirection()', 'triggering offer...');
      return this.roap.initiateOffer();
    }
    return Promise.resolve();
  }
  updateRemoteQualityLevel(newValue) {
    this.log('updateRemoteQualityLevel()', "called with ".concat(newValue));
    var newOfferNeeded = this.mediaConnection.updateRemoteQualityLevel(newValue);
    if (newOfferNeeded) {
      this.log('updateRemoteQualityLevel()', 'triggering offer...');
      return this.roap.initiateOffer();
    }
    return Promise.resolve();
  }
  update(options) {
    this.log('update()', "called with ".concat(JSON.stringify(options)));
    var newOfferNeeded = this.mediaConnection.update(options);
    if (newOfferNeeded) {
      this.log('update()', 'triggering offer...');
      return this.roap.initiateOffer();
    }
    return Promise.resolve();
  }
  getPeerConnectionState() {
    return this.mediaConnection.getPeerConnectionState();
  }
  getIceConnectionState() {
    return this.mediaConnection.getIceConnectionState();
  }
  getConnectionState() {
    return this.mediaConnection.getConnectionState();
  }
  getIceGatheringState() {
    return this.mediaConnection.getIceGatheringState();
  }
  getStats() {
    return this.mediaConnection.getStats();
  }
  getTransceiverStats() {
    return this.mediaConnection.getTransceiverStats();
  }
  insertDTMF(tones, duration, interToneGap) {
    this.log('insertDTMF()', "called with tones=\"".concat(tones, "\", duration=").concat(duration, ", interToneGap=").concat(interToneGap));
    this.mediaConnection.insertDTMF(tones, duration, interToneGap);
  }
  roapMessageReceived(roapMessage) {
    this.log('roapMessageReceived()', "called with messageType=".concat(roapMessage.messageType, ", seq=").concat(roapMessage.seq));
    if (!this.sdpNegotiationStarted) {
      if (roapMessage.messageType === 'OFFER') {
        this.sdpNegotiationStarted = true;
        this.mediaConnection.initializeTransceivers(true);
      }
      if (roapMessage.messageType === 'OFFER_REQUEST') {
        this.sdpNegotiationStarted = true;
        this.mediaConnection.initializeTransceivers(false);
      }
    }
    this.roap.roapMessageReceived(roapMessage);
  }
  onRemoteTrack(event) {
    this.emit(exports.MediaConnectionEventNames.REMOTE_TRACK_ADDED, event);
  }
  createLocalOffer() {
    return this.mediaConnection.createLocalOffer();
  }
  handleRemoteOffer(sdp) {
    return this.mediaConnection.handleRemoteOffer(sdp);
  }
  handleRemoteAnswer(sdp) {
    return this.mediaConnection.handleRemoteAnswer(sdp);
  }
}

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class MultistreamRoapMediaConnection extends EventEmitter$5 {
  constructor(mediaConnectionConfig, debugId) {
    var metricsCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};
    var closeCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};
    var sendMetricsCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : () => {};
    super();
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "debugId", void 0);
    _defineProperty(this, "multistreamConnection", void 0);
    _defineProperty(this, "roap", void 0);
    _defineProperty(this, "sdpNegotiationStarted", false);
    _defineProperty(this, "closeCallback", void 0);
    _defineProperty(this, "sendMetricsCallback", void 0);
    this.debugId = debugId;
    this.id = debugId || 'MultistreamRoapMediaConnection';
    configureWcmeLogger(debugId);
    this.log('constructor()', "config: ".concat(JSON.stringify(mediaConnectionConfig)));
    this.multistreamConnection = this.createMultistreamConnection(mediaConnectionConfig, metricsCallback);
    this.roap = this.createRoap(debugId);
    this.closeCallback = closeCallback;
    this.sendMetricsCallback = sendMetricsCallback;
  }
  log(action, description) {
    getLogger().info("".concat(this.id, ":").concat(action, " ").concat(description));
  }
  warn(action, description) {
    getLogger().warn("".concat(this.id, ":").concat(action, " ").concat(description));
  }
  error(action, description, error) {
    getLogger().error("".concat(this.id, ":").concat(action, " ").concat(description, " ").concat(getErrorDescription(error)));
  }
  createMultistreamConnection(mediaConnectionConfig, metricsCallback) {
    this.log('createMultistreamConnection()', 'called');
    var multistreamConnection = new MultistreamConnection(_objectSpread$5(_objectSpread$5({}, mediaConnectionConfig), {}, {
      metricsCallback
    }));
    multistreamConnection.on(MultistreamConnectionEventNames.ActiveSpeakerNotification, csis => {
      this.emit(exports.MediaConnectionEventNames.ACTIVE_SPEAKERS_CHANGED, csis);
    });
    multistreamConnection.on(MultistreamConnectionEventNames.AudioSourceCountUpdate, (numTotalSources, numLiveSources, mediaContent) => {
      this.emit(exports.MediaConnectionEventNames.AUDIO_SOURCES_COUNT_CHANGED, numTotalSources, numLiveSources, mediaContent);
    });
    multistreamConnection.on(MultistreamConnectionEventNames.VideoSourceCountUpdate, (numTotalSources, numLiveSources, mediaContent) => {
      this.emit(exports.MediaConnectionEventNames.VIDEO_SOURCES_COUNT_CHANGED, numTotalSources, numLiveSources, mediaContent);
    });
    multistreamConnection.on(MultistreamConnectionEventNames.PeerConnectionStateUpdate, state => {
      this.emit(exports.MediaConnectionEventNames.PEER_CONNECTION_STATE_CHANGED, {
        state
      });
    });
    multistreamConnection.on(MultistreamConnectionEventNames.IceConnectionStateUpdate, state => {
      this.emit(exports.MediaConnectionEventNames.ICE_CONNECTION_STATE_CHANGED, {
        state
      });
    });
    multistreamConnection.on(MultistreamConnectionEventNames.IceGatheringStateUpdate, state => {
      this.emit(exports.MediaConnectionEventNames.ICE_GATHERING_STATE_CHANGED, {
        state
      });
    });
    multistreamConnection.on(MultistreamConnectionEventNames.NegotiationNeeded, () => {
      this.onNegotiationNeeded();
    });
    multistreamConnection.on(MultistreamConnectionEventNames.IceCandidate, event => {
      this.emit(exports.MediaConnectionEventNames.ICE_CANDIDATE, {
        candidate: event.candidate
      });
    });
    multistreamConnection.on(MultistreamConnectionEventNames.IceCandidateError, event => {
      this.emit(exports.MediaConnectionEventNames.ICE_CANDIDATE_ERROR, {
        error: event
      });
    });
    return multistreamConnection;
  }
  createRoap(debugId, seq) {
    var roap = new Roap(this.createLocalOffer.bind(this), this.handleRemoteOffer.bind(this), this.handleRemoteAnswer.bind(this), debugId, seq);
    roap.on(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, event => this.emit(exports.MediaConnectionEventNames.ROAP_MESSAGE_TO_SEND, event));
    roap.on(exports.MediaConnectionEventNames.ROAP_STARTED, () => this.emit(exports.MediaConnectionEventNames.ROAP_STARTED));
    roap.on(exports.MediaConnectionEventNames.ROAP_DONE, () => this.emit(exports.MediaConnectionEventNames.ROAP_DONE));
    roap.on(exports.MediaConnectionEventNames.ROAP_FAILURE, error => this.emit(exports.MediaConnectionEventNames.ROAP_FAILURE, error));
    return roap;
  }
  onNegotiationNeeded() {
    this.log('onNegotiationNeeded()', 'called');
    if (!this.sdpNegotiationStarted) {
      return Promise.resolve();
    }
    return this.roap.initiateOffer();
  }
  initiateOffer() {
    this.log('initiateOffer()', 'called');
    if (this.sdpNegotiationStarted) {
      this.error('initiateOffer()', 'SDP negotiation already started');
      return Promise.reject(new Error('SDP negotiation already started'));
    }
    this.sdpNegotiationStarted = true;
    return this.roap.initiateOffer();
  }
  close() {
    this.log('close()', 'called');
    this.closeMediaConnection();
    this.stopRoapSession();
    this.closeCallback();
  }
  forceRtcMetricsSend() {
    var _this = this;
    return _asyncToGenerator(function* () {
      var _this$multistreamConn;
      yield (_this$multistreamConn = _this.multistreamConnection) === null || _this$multistreamConn === void 0 ? void 0 : _this$multistreamConn.forceRtcMetricsCallback();
      _this.sendMetricsCallback();
    })();
  }
  closeMediaConnection() {
    this.multistreamConnection.close();
    this.multistreamConnection.removeAllListeners();
  }
  stopRoapSession() {
    this.roap.stop();
    this.roap.removeAllListeners();
  }
  reconnect(iceServers) {
    var initiateOffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    this.log('reconnect()', "iceServers: ".concat(JSON.stringify(iceServers)));
    var seq = this.roap.getSeq();
    this.stopRoapSession();
    this.sdpNegotiationStarted = false;
    this.multistreamConnection.renewPeerConnection({
      iceServers
    });
    this.roap = this.createRoap(this.debugId, seq);
    if (initiateOffer) {
      return this.initiateOffer();
    }
    return Promise.resolve();
  }
  getConnectionState() {
    var connectionState = this.multistreamConnection.getConnectionState();
    this.log('getConnectionState()', "called, returning ".concat(connectionState));
    return connectionState;
  }
  getPeerConnectionState() {
    return this.multistreamConnection.getPeerConnectionState();
  }
  getIceConnectionState() {
    return this.multistreamConnection.getIceConnectionState();
  }
  getStats() {
    return this.multistreamConnection.getStats();
  }
  getTransceiverStats() {
    return this.multistreamConnection.getTransceiverStats();
  }
  roapMessageReceived(roapMessage) {
    this.log('roapMessageReceived()', "called with messageType=".concat(roapMessage.messageType, ", seq=").concat(roapMessage.seq));
    if (!this.sdpNegotiationStarted && roapMessage.messageType === 'OFFER') {
      throw new Error('incoming first offer is not supported by MultistreamRoapMediaConnection');
    }
    this.roap.roapMessageReceived(roapMessage);
  }
  createSendSlot(mediaType) {
    var active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    this.log('createSendSlot()', "called with mediaType=".concat(mediaType, ", active=").concat(active));
    return this.multistreamConnection.createSendSlot(mediaType, active);
  }
  createReceiveSlot(mediaType) {
    this.log('createReceiveSlot()', "called");
    return this.multistreamConnection.createReceiveSlot(mediaType);
  }
  requestMedia(mediaType, streamRequests) {
    this.log('requestMedia()', "called");
    return this.multistreamConnection.requestMedia(mediaType, streamRequests);
  }
  createLocalOffer() {
    this.log('createLocalOffer()', 'calling this.multistreamConnection.createOffer');
    return this.multistreamConnection.createOffer().then(result => {
      if (result.sdp) {
        this.emit(exports.MediaConnectionEventNames.LOCAL_SDP_OFFER_GENERATED);
        return {
          sdp: result.sdp
        };
      }
      return Promise.reject(new SdpOfferCreationError('empty local SDP'));
    }).catch(error => {
      throw new SdpOfferCreationError("createLocalOffer() failure: ".concat(error.message), {
        cause: error
      });
    });
  }
  handleRemoteOffer() {
    return Promise.reject(new SdpOfferHandlingError('remote offers not supported by WCME'));
  }
  waitForIceCandidates() {
    this.log('waitForIceCandidates()', 'called');
    return new Promise((resolve, reject) => {
      if (this.multistreamConnection.getIceGatheringState() === 'complete') {
        resolve();
        return;
      }
      var timeout;
      var callback = event => {
        if (event === 'complete') {
          this.multistreamConnection.removeListener(MultistreamConnectionEventNames.IceGatheringStateUpdate, callback);
          clearTimeout(timeout);
          resolve();
        }
      };
      timeout = setTimeout(() => {
        this.multistreamConnection.removeListener(MultistreamConnectionEventNames.IceGatheringStateUpdate, callback);
        reject(new Error('Timed out waiting for ice candidates gathering'));
      }, 5000);
      this.multistreamConnection.addListener(MultistreamConnectionEventNames.IceGatheringStateUpdate, callback);
    });
  }
  handleRemoteAnswer(sdp) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      _this2.log('handleRemoteAnswer()', "called: sdp=".concat(sdp ? 'non-empty' : 'empty'));
      if (sdp) {
        try {
          yield _this2.waitForIceCandidates();
        } catch (e) {
          var {
            message
          } = e;
          _this2.warn('handleRemoteAnswer()', "".concat(message));
        }
        var mungedSdp = mungeRemoteSdp({}, sdp);
        _this2.log('handleRemoteAnswer()', 'calling this.multistreamConnection.setAnswer');
        return _this2.multistreamConnection.setAnswer(mungedSdp).then(result => {
          _this2.log('handleRemoteAnswer()', 'this.multistreamConnection.setAnswer resolved');
          _this2.emit(exports.MediaConnectionEventNames.REMOTE_SDP_ANSWER_PROCESSED);
          return result;
        }).catch(error => {
          _this2.log('handleRemoteAnswer()', "this.multistreamConnection.setAnswer failed");
          throw new SdpAnswerHandlingError("handleRemoteAnswer() failure: ".concat(error.message), {
            cause: error
          });
        });
      }
      return Promise.reject(new SdpAnswerHandlingError('empty answer'));
    })();
  }
  getIceGatheringState() {
    return this.multistreamConnection.getIceGatheringState();
  }
}

var Errors = Error$1;

var isIPv4 = function isIPv4(ipString) {
  if (!ipString.match(/^([0-9]{1,3}\.){3}[0-9]{1,3}$/)) {
    return false;
  }
  var octets = ipString.split('.');
  for (var octet of octets) {
    var number = Number(octet);
    if (number > 255) {
      return false;
    }
  }
  return true;
};
var isIPv6 = function isIPv6(ipString) {
  var chunks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  ipString = ipString.toLowerCase();
  if (ipString === '::') {
    return true;
  }
  if (!ipString.match(/^([0-9a-f]{0,4}:?){2,8}$/)) {
    return false;
  }

  // If there is a colon at the end, it must be a double colon
  if (ipString[ipString.length - 1] === ':') {
    if (ipString[ipString.length - 2] !== ':') {
      return false;
    }
  }

  // No more than one double colon
  if (ipString.split('::').length > 2) {
    return false;
  }

  // If no double colon, then exactly `chunks` chunks
  if (ipString.split('::').length === 1) {
    if (ipString.split(':').length !== chunks) {
      return false;
    }
  }
  if (ipString.split('::').length === 2) {
    var right = ipString.split('::')[1];
    right = right.split(':');
    for (var i = 0; i < right.length - 1; i++) {
      if (right[i] === '') {
        return false;
      }
    }
  }
  return true;
};
var isIPv64 = function isIPv64(ipString) {
  var [v6, v4] = splitIPv64(ipString);
  return isIPv6(v6, 6) && isIPv4(v4);
};

// Reference: https://web.archive.org/web/20181019071947/http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding-2.htm
// Either starts with 96 0s or 80 0s followed by 16 1s
var isIPv4MappedIPv6 = function isIPv4MappedIPv6(ipString) {
  return isIPv64(ipString) && (!binaryIPv64(ipString).substring(0, 96).includes('1') || !binaryIPv64(ipString).substring(0, 80).includes('1') && !binaryIPv64(ipString).substring(80, 96).includes('0'));
};
var ipType = function ipType(ipString) {
  if (isIPv4(ipString)) {
    return 'IPv4';
  }
  if (isIPv6(ipString)) {
    return 'IPv6';
  }
  if (isIPv64(ipString)) {
    return 'IPv6_4';
  }
  return 'None';
};
var padRight = function padRight(str, length) {
  var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';
  while (str.length < length) {
    str += char;
  }
  return str;
};
var padLeft = function padLeft(str, length) {
  var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';
  while (str.length < length) {
    str = char + str;
  }
  return str;
};
var split = function split(str, length) {
  var chunks = [];
  while (str.length > 0) {
    var chunk = str.substring(0, length);
    chunks.push(chunk);
    str = str.substring(length);
  }
  return chunks;
};
var toBinary = function toBinary(n) {
  return Number(n).toString(2);
};
var fromBinary = function fromBinary(binaryString) {
  return parseInt(binaryString, 2);
};
var binaryIPv4 = function binaryIPv4(ipString) {
  var octetStrings = ipString.split('.');
  return octetStrings.map(str => padLeft(toBinary(str), 8)).join('');
};
var toHex = function toHex(n) {
  return n.toString(16);
};
var binaryIPv6 = function binaryIPv6(ipString) {
  var [left, right] = ipString.split('::');
  left = left.split(':');
  if (right !== undefined) {
    right = right.split(':');
  } else {
    right = [];
  }
  while (left.length + right.length < 8) {
    left.push('0');
  }
  var chunkStrings = left.concat(right);
  for (var i = 0; i < chunkStrings.length; i++) {
    if (chunkStrings[i].length === 0) {
      chunkStrings[i] = '0';
    }
  }
  var chunks = chunkStrings.map(str => parseInt(str, 16));
  var binaryChunks = chunks.map(n => padLeft(toBinary(n), 16));
  return binaryChunks.join('');
};
var splitIPv64 = function splitIPv64(ipString) {
  var separatorIndex = ipString.lastIndexOf(':');
  var v6 = ipString.substring(0, separatorIndex);
  var v4 = ipString.substring(separatorIndex + 1);
  if (v6[v6.length - 1] === ':') {
    v6 = v6 + ':';
  }
  return [v6, v4];
};
var binaryIPv64 = function binaryIPv64(ipString) {
  var [v6, v4] = splitIPv64(ipString);
  var [left, right] = v6.split('::');
  left = left.split(':');
  if (right !== undefined) {
    right = right.split(':');
  } else {
    right = [];
  }
  while (left.length + right.length < 6) {
    left.push('0');
  }
  var chunkStrings = left.concat(right);
  for (var i = 0; i < chunkStrings.length; i++) {
    if (chunkStrings[i].length === 0) {
      chunkStrings[i] = '0';
    }
  }
  var chunks = chunkStrings.map(str => parseInt(str, 16));
  var binaryChunks = chunks.map(n => padLeft(toBinary(n), 16));
  return binaryChunks.join('') + binaryIPv4(v4);
};
var fromBinaryIPv4 = function fromBinaryIPv4(binaryString) {
  var octets = split(binaryString, 8);
  return octets.map(fromBinary).join('.');
};
var compressIPv6 = function compressIPv6(ipString) {
  var chunks = ipString.split(':');
  var bestRunLength = 0;
  var bestRunStart = null;
  var currentlyRun = false;
  var runLength = 0;
  var runStart = null;
  for (var i = 0; i < chunks.length; i++) {
    if (currentlyRun) {
      if (chunks[i] === '0') {
        runLength++;
      } else {
        if (runLength > bestRunLength) {
          bestRunLength = runLength;
          bestRunStart = runStart;
        }
        currentlyRun = false;
        runLength = 0;
        runStart = null;
      }
    } else {
      if (chunks[i] === '0') {
        currentlyRun = true;
        runLength = 1;
        runStart = i;
      }
    }
  }
  if (runStart !== null && runLength > bestRunLength) {
    bestRunLength = runLength;
    bestRunStart = runStart;
  }
  if (bestRunLength < 2) {
    return ipString;
  }
  var left = chunks.slice(0, bestRunStart).join(':');
  var right = chunks.slice(bestRunStart + bestRunLength).join(':');
  var result = left + '::' + right;
  return result;
};
var fromBinaryIPv6 = function fromBinaryIPv6(binaryString) {
  var chunks = split(binaryString, 16);
  var hexChunks = chunks.map(fromBinary).map(toHex);
  var compressedChunks = compressIPv6(hexChunks.join(':'));
  return compressedChunks;
};
var fromBinaryIPv64 = function fromBinaryIPv64(binaryString) {
  var v6 = binaryString.substring(0, 96);
  var v4 = binaryString.substring(96);
  var left = fromBinaryIPv6(v6);
  var right = fromBinaryIPv4(v4);
  var compressedChunks = left;
  if (compressedChunks[compressedChunks.length - 1] !== ':') {
    compressedChunks += ':';
  }
  return compressedChunks + right;
};
var anonymizeIPv4 = function anonymizeIPv4(ipString, maskLength) {
  var binary = binaryIPv4(ipString);
  var segment = binary.substring(0, maskLength);
  var anonymizedBinary = padRight(segment, 32);
  return fromBinaryIPv4(anonymizedBinary);
};
var anonymizeIPv6 = function anonymizeIPv6(ipString, maskLength) {
  var binary = binaryIPv6(ipString);
  var segment = binary.substring(0, maskLength);
  var anonymizedBinary = padRight(segment, 128);
  return fromBinaryIPv6(anonymizedBinary);
};
var anonymizeIPv64 = function anonymizeIPv64(ipString, maskLength) {
  var binary = binaryIPv64(ipString);
  var segment = binary.substring(0, maskLength);
  var anonymizedBinary = padRight(segment, 128);
  return fromBinaryIPv64(anonymizedBinary);
};
var anonymizeIP = function anonymizeIP(ipString) {
  var v4MaskLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;
  var v6MaskLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 24;
  if (typeof ipString !== 'string') {
    return null;
  }
  ipString = ipString.trim().toLowerCase();
  var type = ipType(ipString);
  if (type === 'IPv4') {
    return anonymizeIPv4(ipString, v4MaskLength);
  }
  if (type === 'IPv6') {
    return anonymizeIPv6(ipString, v6MaskLength);
  }
  if (type === 'IPv6_4') {
    if (isIPv4MappedIPv6(ipString)) {
      return anonymizeIPv64(ipString, v4MaskLength + 96);
    } else {
      return anonymizeIPv64(ipString, v6MaskLength);
    }
  }
  return null;
};
var ipAnonymize = anonymizeIP;

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}
var es5 = {
  exports: {}
};
(function (module, exports) {
  !function (e, t) {
    module.exports = t();
  }(commonjsGlobal, function () {
    return function (e) {
      var t = {};
      function r(n) {
        if (t[n]) return t[n].exports;
        var i = t[n] = {
          i: n,
          l: !1,
          exports: {}
        };
        return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
      }
      return r.m = e, r.c = t, r.d = function (e, t, n) {
        r.o(e, t) || Object.defineProperty(e, t, {
          enumerable: !0,
          get: n
        });
      }, r.r = function (e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
          value: "Module"
        }), Object.defineProperty(e, "__esModule", {
          value: !0
        });
      }, r.t = function (e, t) {
        if (1 & t && (e = r(e)), 8 & t) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var n = Object.create(null);
        if (r.r(n), Object.defineProperty(n, "default", {
          enumerable: !0,
          value: e
        }), 2 & t && "string" != typeof e) for (var i in e) {
          r.d(n, i, function (t) {
            return e[t];
          }.bind(null, i));
        }
        return n;
      }, r.n = function (e) {
        var t = e && e.__esModule ? function () {
          return e.default;
        } : function () {
          return e;
        };
        return r.d(t, "a", t), t;
      }, r.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }, r.p = "", r(r.s = 90);
    }({
      17: function _(e, t, r) {
        t.__esModule = !0, t.default = void 0;
        var n = r(18),
          i = function () {
            function e() {}
            return e.getFirstMatch = function (e, t) {
              var r = t.match(e);
              return r && r.length > 0 && r[1] || "";
            }, e.getSecondMatch = function (e, t) {
              var r = t.match(e);
              return r && r.length > 1 && r[2] || "";
            }, e.matchAndReturnConst = function (e, t, r) {
              if (e.test(t)) return r;
            }, e.getWindowsVersionName = function (e) {
              switch (e) {
                case "NT":
                  return "NT";
                case "XP":
                  return "XP";
                case "NT 5.0":
                  return "2000";
                case "NT 5.1":
                  return "XP";
                case "NT 5.2":
                  return "2003";
                case "NT 6.0":
                  return "Vista";
                case "NT 6.1":
                  return "7";
                case "NT 6.2":
                  return "8";
                case "NT 6.3":
                  return "8.1";
                case "NT 10.0":
                  return "10";
                default:
                  return;
              }
            }, e.getMacOSVersionName = function (e) {
              var t = e.split(".").splice(0, 2).map(function (e) {
                return parseInt(e, 10) || 0;
              });
              if (t.push(0), 10 === t[0]) switch (t[1]) {
                case 5:
                  return "Leopard";
                case 6:
                  return "Snow Leopard";
                case 7:
                  return "Lion";
                case 8:
                  return "Mountain Lion";
                case 9:
                  return "Mavericks";
                case 10:
                  return "Yosemite";
                case 11:
                  return "El Capitan";
                case 12:
                  return "Sierra";
                case 13:
                  return "High Sierra";
                case 14:
                  return "Mojave";
                case 15:
                  return "Catalina";
                default:
                  return;
              }
            }, e.getAndroidVersionName = function (e) {
              var t = e.split(".").splice(0, 2).map(function (e) {
                return parseInt(e, 10) || 0;
              });
              if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0;
            }, e.getVersionPrecision = function (e) {
              return e.split(".").length;
            }, e.compareVersions = function (t, r, n) {
              void 0 === n && (n = !1);
              var i = e.getVersionPrecision(t),
                s = e.getVersionPrecision(r),
                a = Math.max(i, s),
                o = 0,
                u = e.map([t, r], function (t) {
                  var r = a - e.getVersionPrecision(t),
                    n = t + new Array(r + 1).join(".0");
                  return e.map(n.split("."), function (e) {
                    return new Array(20 - e.length).join("0") + e;
                  }).reverse();
                });
              for (n && (o = a - Math.min(i, s)), a -= 1; a >= o;) {
                if (u[0][a] > u[1][a]) return 1;
                if (u[0][a] === u[1][a]) {
                  if (a === o) return 0;
                  a -= 1;
                } else if (u[0][a] < u[1][a]) return -1;
              }
            }, e.map = function (e, t) {
              var r,
                n = [];
              if (Array.prototype.map) return Array.prototype.map.call(e, t);
              for (r = 0; r < e.length; r += 1) {
                n.push(t(e[r]));
              }
              return n;
            }, e.find = function (e, t) {
              var r, n;
              if (Array.prototype.find) return Array.prototype.find.call(e, t);
              for (r = 0, n = e.length; r < n; r += 1) {
                var i = e[r];
                if (t(i, r)) return i;
              }
            }, e.assign = function (e) {
              for (var t, r, n = e, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++) {
                s[a - 1] = arguments[a];
              }
              if (Object.assign) return Object.assign.apply(Object, [e].concat(s));
              var o = function o() {
                var e = s[t];
                "object" == typeof e && null !== e && Object.keys(e).forEach(function (t) {
                  n[t] = e[t];
                });
              };
              for (t = 0, r = s.length; t < r; t += 1) {
                o();
              }
              return e;
            }, e.getBrowserAlias = function (e) {
              return n.BROWSER_ALIASES_MAP[e];
            }, e.getBrowserTypeByAlias = function (e) {
              return n.BROWSER_MAP[e] || "";
            }, e;
          }();
        t.default = i, e.exports = t.default;
      },
      18: function _(e, t, r) {
        t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
        t.BROWSER_ALIASES_MAP = {
          "Amazon Silk": "amazon_silk",
          "Android Browser": "android",
          Bada: "bada",
          BlackBerry: "blackberry",
          Chrome: "chrome",
          Chromium: "chromium",
          Electron: "electron",
          Epiphany: "epiphany",
          Firefox: "firefox",
          Focus: "focus",
          Generic: "generic",
          "Google Search": "google_search",
          Googlebot: "googlebot",
          "Internet Explorer": "ie",
          "K-Meleon": "k_meleon",
          Maxthon: "maxthon",
          "Microsoft Edge": "edge",
          "MZ Browser": "mz",
          "NAVER Whale Browser": "naver",
          Opera: "opera",
          "Opera Coast": "opera_coast",
          PhantomJS: "phantomjs",
          Puffin: "puffin",
          QupZilla: "qupzilla",
          QQ: "qq",
          QQLite: "qqlite",
          Safari: "safari",
          Sailfish: "sailfish",
          "Samsung Internet for Android": "samsung_internet",
          SeaMonkey: "seamonkey",
          Sleipnir: "sleipnir",
          Swing: "swing",
          Tizen: "tizen",
          "UC Browser": "uc",
          Vivaldi: "vivaldi",
          "WebOS Browser": "webos",
          WeChat: "wechat",
          "Yandex Browser": "yandex",
          Roku: "roku"
        };
        t.BROWSER_MAP = {
          amazon_silk: "Amazon Silk",
          android: "Android Browser",
          bada: "Bada",
          blackberry: "BlackBerry",
          chrome: "Chrome",
          chromium: "Chromium",
          electron: "Electron",
          epiphany: "Epiphany",
          firefox: "Firefox",
          focus: "Focus",
          generic: "Generic",
          googlebot: "Googlebot",
          google_search: "Google Search",
          ie: "Internet Explorer",
          k_meleon: "K-Meleon",
          maxthon: "Maxthon",
          edge: "Microsoft Edge",
          mz: "MZ Browser",
          naver: "NAVER Whale Browser",
          opera: "Opera",
          opera_coast: "Opera Coast",
          phantomjs: "PhantomJS",
          puffin: "Puffin",
          qupzilla: "QupZilla",
          qq: "QQ Browser",
          qqlite: "QQ Browser Lite",
          safari: "Safari",
          sailfish: "Sailfish",
          samsung_internet: "Samsung Internet for Android",
          seamonkey: "SeaMonkey",
          sleipnir: "Sleipnir",
          swing: "Swing",
          tizen: "Tizen",
          uc: "UC Browser",
          vivaldi: "Vivaldi",
          webos: "WebOS Browser",
          wechat: "WeChat",
          yandex: "Yandex Browser"
        };
        t.PLATFORMS_MAP = {
          tablet: "tablet",
          mobile: "mobile",
          desktop: "desktop",
          tv: "tv"
        };
        t.OS_MAP = {
          WindowsPhone: "Windows Phone",
          Windows: "Windows",
          MacOS: "macOS",
          iOS: "iOS",
          Android: "Android",
          WebOS: "WebOS",
          BlackBerry: "BlackBerry",
          Bada: "Bada",
          Tizen: "Tizen",
          Linux: "Linux",
          ChromeOS: "Chrome OS",
          PlayStation4: "PlayStation 4",
          Roku: "Roku"
        };
        t.ENGINE_MAP = {
          EdgeHTML: "EdgeHTML",
          Blink: "Blink",
          Trident: "Trident",
          Presto: "Presto",
          Gecko: "Gecko",
          WebKit: "WebKit"
        };
      },
      90: function _(e, t, r) {
        t.__esModule = !0, t.default = void 0;
        var n,
          i = (n = r(91)) && n.__esModule ? n : {
            default: n
          },
          s = r(18);
        function a(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
          }
        }
        var o = function () {
          function e() {}
          var t, r, n;
          return e.getParser = function (e, t) {
            if (void 0 === t && (t = !1), "string" != typeof e) throw new Error("UserAgent should be a string");
            return new i.default(e, t);
          }, e.parse = function (e) {
            return new i.default(e).getResult();
          }, t = e, n = [{
            key: "BROWSER_MAP",
            get: function get() {
              return s.BROWSER_MAP;
            }
          }, {
            key: "ENGINE_MAP",
            get: function get() {
              return s.ENGINE_MAP;
            }
          }, {
            key: "OS_MAP",
            get: function get() {
              return s.OS_MAP;
            }
          }, {
            key: "PLATFORMS_MAP",
            get: function get() {
              return s.PLATFORMS_MAP;
            }
          }], (r = null) && a(t.prototype, r), n && a(t, n), e;
        }();
        t.default = o, e.exports = t.default;
      },
      91: function _(e, t, r) {
        t.__esModule = !0, t.default = void 0;
        var n = u(r(92)),
          i = u(r(93)),
          s = u(r(94)),
          a = u(r(95)),
          o = u(r(17));
        function u(e) {
          return e && e.__esModule ? e : {
            default: e
          };
        }
        var d = function () {
          function e(e, t) {
            if (void 0 === t && (t = !1), null == e || "" === e) throw new Error("UserAgent parameter can't be empty");
            this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();
          }
          var t = e.prototype;
          return t.getUA = function () {
            return this._ua;
          }, t.test = function (e) {
            return e.test(this._ua);
          }, t.parseBrowser = function () {
            var e = this;
            this.parsedResult.browser = {};
            var t = o.default.find(n.default, function (t) {
              if ("function" == typeof t.test) return t.test(e);
              if (t.test instanceof Array) return t.test.some(function (t) {
                return e.test(t);
              });
              throw new Error("Browser's test function is not valid");
            });
            return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser;
          }, t.getBrowser = function () {
            return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
          }, t.getBrowserName = function (e) {
            return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
          }, t.getBrowserVersion = function () {
            return this.getBrowser().version;
          }, t.getOS = function () {
            return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
          }, t.parseOS = function () {
            var e = this;
            this.parsedResult.os = {};
            var t = o.default.find(i.default, function (t) {
              if ("function" == typeof t.test) return t.test(e);
              if (t.test instanceof Array) return t.test.some(function (t) {
                return e.test(t);
              });
              throw new Error("Browser's test function is not valid");
            });
            return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os;
          }, t.getOSName = function (e) {
            var t = this.getOS().name;
            return e ? String(t).toLowerCase() || "" : t || "";
          }, t.getOSVersion = function () {
            return this.getOS().version;
          }, t.getPlatform = function () {
            return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
          }, t.getPlatformType = function (e) {
            void 0 === e && (e = !1);
            var t = this.getPlatform().type;
            return e ? String(t).toLowerCase() || "" : t || "";
          }, t.parsePlatform = function () {
            var e = this;
            this.parsedResult.platform = {};
            var t = o.default.find(s.default, function (t) {
              if ("function" == typeof t.test) return t.test(e);
              if (t.test instanceof Array) return t.test.some(function (t) {
                return e.test(t);
              });
              throw new Error("Browser's test function is not valid");
            });
            return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform;
          }, t.getEngine = function () {
            return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
          }, t.getEngineName = function (e) {
            return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
          }, t.parseEngine = function () {
            var e = this;
            this.parsedResult.engine = {};
            var t = o.default.find(a.default, function (t) {
              if ("function" == typeof t.test) return t.test(e);
              if (t.test instanceof Array) return t.test.some(function (t) {
                return e.test(t);
              });
              throw new Error("Browser's test function is not valid");
            });
            return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine;
          }, t.parse = function () {
            return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
          }, t.getResult = function () {
            return o.default.assign({}, this.parsedResult);
          }, t.satisfies = function (e) {
            var t = this,
              r = {},
              n = 0,
              i = {},
              s = 0;
            if (Object.keys(e).forEach(function (t) {
              var a = e[t];
              "string" == typeof a ? (i[t] = a, s += 1) : "object" == typeof a && (r[t] = a, n += 1);
            }), n > 0) {
              var a = Object.keys(r),
                u = o.default.find(a, function (e) {
                  return t.isOS(e);
                });
              if (u) {
                var d = this.satisfies(r[u]);
                if (void 0 !== d) return d;
              }
              var c = o.default.find(a, function (e) {
                return t.isPlatform(e);
              });
              if (c) {
                var f = this.satisfies(r[c]);
                if (void 0 !== f) return f;
              }
            }
            if (s > 0) {
              var l = Object.keys(i),
                h = o.default.find(l, function (e) {
                  return t.isBrowser(e, !0);
                });
              if (void 0 !== h) return this.compareVersion(i[h]);
            }
          }, t.isBrowser = function (e, t) {
            void 0 === t && (t = !1);
            var r = this.getBrowserName().toLowerCase(),
              n = e.toLowerCase(),
              i = o.default.getBrowserTypeByAlias(n);
            return t && i && (n = i.toLowerCase()), n === r;
          }, t.compareVersion = function (e) {
            var t = [0],
              r = e,
              n = !1,
              i = this.getBrowserVersion();
            if ("string" == typeof i) return ">" === e[0] || "<" === e[0] ? (r = e.substr(1), "=" === e[1] ? (n = !0, r = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? r = e.substr(1) : "~" === e[0] && (n = !0, r = e.substr(1)), t.indexOf(o.default.compareVersions(i, r, n)) > -1;
          }, t.isOS = function (e) {
            return this.getOSName(!0) === String(e).toLowerCase();
          }, t.isPlatform = function (e) {
            return this.getPlatformType(!0) === String(e).toLowerCase();
          }, t.isEngine = function (e) {
            return this.getEngineName(!0) === String(e).toLowerCase();
          }, t.is = function (e, t) {
            return void 0 === t && (t = !1), this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);
          }, t.some = function (e) {
            var t = this;
            return void 0 === e && (e = []), e.some(function (e) {
              return t.is(e);
            });
          }, e;
        }();
        t.default = d, e.exports = t.default;
      },
      92: function _(e, t, r) {
        t.__esModule = !0, t.default = void 0;
        var n,
          i = (n = r(17)) && n.__esModule ? n : {
            default: n
          };
        var s = /version\/(\d+(\.?_?\d+)+)/i,
          a = [{
            test: [/googlebot/i],
            describe: function describe(e) {
              var t = {
                  name: "Googlebot"
                },
                r = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/opera/i],
            describe: function describe(e) {
              var t = {
                  name: "Opera"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/opr\/|opios/i],
            describe: function describe(e) {
              var t = {
                  name: "Opera"
                },
                r = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/SamsungBrowser/i],
            describe: function describe(e) {
              var t = {
                  name: "Samsung Internet for Android"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/Whale/i],
            describe: function describe(e) {
              var t = {
                  name: "NAVER Whale Browser"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/MZBrowser/i],
            describe: function describe(e) {
              var t = {
                  name: "MZ Browser"
                },
                r = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/focus/i],
            describe: function describe(e) {
              var t = {
                  name: "Focus"
                },
                r = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/swing/i],
            describe: function describe(e) {
              var t = {
                  name: "Swing"
                },
                r = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/coast/i],
            describe: function describe(e) {
              var t = {
                  name: "Opera Coast"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/opt\/\d+(?:.?_?\d+)+/i],
            describe: function describe(e) {
              var t = {
                  name: "Opera Touch"
                },
                r = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/yabrowser/i],
            describe: function describe(e) {
              var t = {
                  name: "Yandex Browser"
                },
                r = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/ucbrowser/i],
            describe: function describe(e) {
              var t = {
                  name: "UC Browser"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/Maxthon|mxios/i],
            describe: function describe(e) {
              var t = {
                  name: "Maxthon"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/epiphany/i],
            describe: function describe(e) {
              var t = {
                  name: "Epiphany"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/puffin/i],
            describe: function describe(e) {
              var t = {
                  name: "Puffin"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/sleipnir/i],
            describe: function describe(e) {
              var t = {
                  name: "Sleipnir"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/k-meleon/i],
            describe: function describe(e) {
              var t = {
                  name: "K-Meleon"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/micromessenger/i],
            describe: function describe(e) {
              var t = {
                  name: "WeChat"
                },
                r = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/qqbrowser/i],
            describe: function describe(e) {
              var t = {
                  name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
                },
                r = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/msie|trident/i],
            describe: function describe(e) {
              var t = {
                  name: "Internet Explorer"
                },
                r = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/\sedg\//i],
            describe: function describe(e) {
              var t = {
                  name: "Microsoft Edge"
                },
                r = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/edg([ea]|ios)/i],
            describe: function describe(e) {
              var t = {
                  name: "Microsoft Edge"
                },
                r = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/vivaldi/i],
            describe: function describe(e) {
              var t = {
                  name: "Vivaldi"
                },
                r = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/seamonkey/i],
            describe: function describe(e) {
              var t = {
                  name: "SeaMonkey"
                },
                r = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/sailfish/i],
            describe: function describe(e) {
              var t = {
                  name: "Sailfish"
                },
                r = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/silk/i],
            describe: function describe(e) {
              var t = {
                  name: "Amazon Silk"
                },
                r = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/phantom/i],
            describe: function describe(e) {
              var t = {
                  name: "PhantomJS"
                },
                r = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/slimerjs/i],
            describe: function describe(e) {
              var t = {
                  name: "SlimerJS"
                },
                r = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
            describe: function describe(e) {
              var t = {
                  name: "BlackBerry"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/(web|hpw)[o0]s/i],
            describe: function describe(e) {
              var t = {
                  name: "WebOS Browser"
                },
                r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/bada/i],
            describe: function describe(e) {
              var t = {
                  name: "Bada"
                },
                r = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/tizen/i],
            describe: function describe(e) {
              var t = {
                  name: "Tizen"
                },
                r = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/qupzilla/i],
            describe: function describe(e) {
              var t = {
                  name: "QupZilla"
                },
                r = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/firefox|iceweasel|fxios/i],
            describe: function describe(e) {
              var t = {
                  name: "Firefox"
                },
                r = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/electron/i],
            describe: function describe(e) {
              var t = {
                  name: "Electron"
                },
                r = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/MiuiBrowser/i],
            describe: function describe(e) {
              var t = {
                  name: "Miui"
                },
                r = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/chromium/i],
            describe: function describe(e) {
              var t = {
                  name: "Chromium"
                },
                r = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/chrome|crios|crmo/i],
            describe: function describe(e) {
              var t = {
                  name: "Chrome"
                },
                r = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/GSA/i],
            describe: function describe(e) {
              var t = {
                  name: "Google Search"
                },
                r = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: function test(e) {
              var t = !e.test(/like android/i),
                r = e.test(/android/i);
              return t && r;
            },
            describe: function describe(e) {
              var t = {
                  name: "Android Browser"
                },
                r = i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/playstation 4/i],
            describe: function describe(e) {
              var t = {
                  name: "PlayStation 4"
                },
                r = i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/safari|applewebkit/i],
            describe: function describe(e) {
              var t = {
                  name: "Safari"
                },
                r = i.default.getFirstMatch(s, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/.*/i],
            describe: function describe(e) {
              var t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
              return {
                name: i.default.getFirstMatch(t, e),
                version: i.default.getSecondMatch(t, e)
              };
            }
          }];
        t.default = a, e.exports = t.default;
      },
      93: function _(e, t, r) {
        t.__esModule = !0, t.default = void 0;
        var n,
          i = (n = r(17)) && n.__esModule ? n : {
            default: n
          },
          s = r(18);
        var a = [{
          test: [/Roku\/DVP/],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
            return {
              name: s.OS_MAP.Roku,
              version: t
            };
          }
        }, {
          test: [/windows phone/i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e);
            return {
              name: s.OS_MAP.WindowsPhone,
              version: t
            };
          }
        }, {
          test: [/windows /i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e),
              r = i.default.getWindowsVersionName(t);
            return {
              name: s.OS_MAP.Windows,
              version: t,
              versionName: r
            };
          }
        }, {
          test: [/Macintosh(.*?) FxiOS(.*?)\//],
          describe: function describe(e) {
            var t = {
                name: s.OS_MAP.iOS
              },
              r = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
            return r && (t.version = r), t;
          }
        }, {
          test: [/macintosh/i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."),
              r = i.default.getMacOSVersionName(t),
              n = {
                name: s.OS_MAP.MacOS,
                version: t
              };
            return r && (n.versionName = r), n;
          }
        }, {
          test: [/(ipod|iphone|ipad)/i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, ".");
            return {
              name: s.OS_MAP.iOS,
              version: t
            };
          }
        }, {
          test: function test(e) {
            var t = !e.test(/like android/i),
              r = e.test(/android/i);
            return t && r;
          },
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e),
              r = i.default.getAndroidVersionName(t),
              n = {
                name: s.OS_MAP.Android,
                version: t
              };
            return r && (n.versionName = r), n;
          }
        }, {
          test: [/(web|hpw)[o0]s/i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e),
              r = {
                name: s.OS_MAP.WebOS
              };
            return t && t.length && (r.version = t), r;
          }
        }, {
          test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || i.default.getFirstMatch(/\bbb(\d+)/i, e);
            return {
              name: s.OS_MAP.BlackBerry,
              version: t
            };
          }
        }, {
          test: [/bada/i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
            return {
              name: s.OS_MAP.Bada,
              version: t
            };
          }
        }, {
          test: [/tizen/i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e);
            return {
              name: s.OS_MAP.Tizen,
              version: t
            };
          }
        }, {
          test: [/linux/i],
          describe: function describe() {
            return {
              name: s.OS_MAP.Linux
            };
          }
        }, {
          test: [/CrOS/],
          describe: function describe() {
            return {
              name: s.OS_MAP.ChromeOS
            };
          }
        }, {
          test: [/PlayStation 4/],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e);
            return {
              name: s.OS_MAP.PlayStation4,
              version: t
            };
          }
        }];
        t.default = a, e.exports = t.default;
      },
      94: function _(e, t, r) {
        t.__esModule = !0, t.default = void 0;
        var n,
          i = (n = r(17)) && n.__esModule ? n : {
            default: n
          },
          s = r(18);
        var a = [{
          test: [/googlebot/i],
          describe: function describe() {
            return {
              type: "bot",
              vendor: "Google"
            };
          }
        }, {
          test: [/huawei/i],
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/(can-l01)/i, e) && "Nova",
              r = {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "Huawei"
              };
            return t && (r.model = t), r;
          }
        }, {
          test: [/nexus\s*(?:7|8|9|10).*/i],
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tablet,
              vendor: "Nexus"
            };
          }
        }, {
          test: [/ipad/i],
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tablet,
              vendor: "Apple",
              model: "iPad"
            };
          }
        }, {
          test: [/Macintosh(.*?) FxiOS(.*?)\//],
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tablet,
              vendor: "Apple",
              model: "iPad"
            };
          }
        }, {
          test: [/kftt build/i],
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tablet,
              vendor: "Amazon",
              model: "Kindle Fire HD 7"
            };
          }
        }, {
          test: [/silk/i],
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tablet,
              vendor: "Amazon"
            };
          }
        }, {
          test: [/tablet(?! pc)/i],
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tablet
            };
          }
        }, {
          test: function test(e) {
            var t = e.test(/ipod|iphone/i),
              r = e.test(/like (ipod|iphone)/i);
            return t && !r;
          },
          describe: function describe(e) {
            var t = i.default.getFirstMatch(/(ipod|iphone)/i, e);
            return {
              type: s.PLATFORMS_MAP.mobile,
              vendor: "Apple",
              model: t
            };
          }
        }, {
          test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.mobile,
              vendor: "Nexus"
            };
          }
        }, {
          test: [/[^-]mobi/i],
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.mobile
            };
          }
        }, {
          test: function test(e) {
            return "blackberry" === e.getBrowserName(!0);
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.mobile,
              vendor: "BlackBerry"
            };
          }
        }, {
          test: function test(e) {
            return "bada" === e.getBrowserName(!0);
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.mobile
            };
          }
        }, {
          test: function test(e) {
            return "windows phone" === e.getBrowserName();
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.mobile,
              vendor: "Microsoft"
            };
          }
        }, {
          test: function test(e) {
            var t = Number(String(e.getOSVersion()).split(".")[0]);
            return "android" === e.getOSName(!0) && t >= 3;
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tablet
            };
          }
        }, {
          test: function test(e) {
            return "android" === e.getOSName(!0);
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.mobile
            };
          }
        }, {
          test: function test(e) {
            return "macos" === e.getOSName(!0);
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.desktop,
              vendor: "Apple"
            };
          }
        }, {
          test: function test(e) {
            return "windows" === e.getOSName(!0);
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.desktop
            };
          }
        }, {
          test: function test(e) {
            return "linux" === e.getOSName(!0);
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.desktop
            };
          }
        }, {
          test: function test(e) {
            return "playstation 4" === e.getOSName(!0);
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tv
            };
          }
        }, {
          test: function test(e) {
            return "roku" === e.getOSName(!0);
          },
          describe: function describe() {
            return {
              type: s.PLATFORMS_MAP.tv
            };
          }
        }];
        t.default = a, e.exports = t.default;
      },
      95: function _(e, t, r) {
        t.__esModule = !0, t.default = void 0;
        var n,
          i = (n = r(17)) && n.__esModule ? n : {
            default: n
          },
          s = r(18);
        var a = [{
          test: function test(e) {
            return "microsoft edge" === e.getBrowserName(!0);
          },
          describe: function describe(e) {
            if (/\sedg\//i.test(e)) return {
              name: s.ENGINE_MAP.Blink
            };
            var t = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e);
            return {
              name: s.ENGINE_MAP.EdgeHTML,
              version: t
            };
          }
        }, {
          test: [/trident/i],
          describe: function describe(e) {
            var t = {
                name: s.ENGINE_MAP.Trident
              },
              r = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e);
            return r && (t.version = r), t;
          }
        }, {
          test: function test(e) {
            return e.test(/presto/i);
          },
          describe: function describe(e) {
            var t = {
                name: s.ENGINE_MAP.Presto
              },
              r = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e);
            return r && (t.version = r), t;
          }
        }, {
          test: function test(e) {
            var t = e.test(/gecko/i),
              r = e.test(/like gecko/i);
            return t && !r;
          },
          describe: function describe(e) {
            var t = {
                name: s.ENGINE_MAP.Gecko
              },
              r = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e);
            return r && (t.version = r), t;
          }
        }, {
          test: [/(apple)?webkit\/537\.36/i],
          describe: function describe() {
            return {
              name: s.ENGINE_MAP.Blink
            };
          }
        }, {
          test: [/(apple)?webkit/i],
          describe: function describe(e) {
            var t = {
                name: s.ENGINE_MAP.WebKit
              },
              r = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e);
            return r && (t.version = r), t;
          }
        }];
        t.default = a, e.exports = t.default;
      }
    });
  });
})(es5);
var Bowser = /*@__PURE__*/getDefaultExportFromCjs(es5.exports);
var BrowserName;
(function (BrowserName) {
  BrowserName["CHROME"] = "Chrome";
  BrowserName["FIREFOX"] = "Firefox";
  BrowserName["EDGE"] = "Microsoft Edge";
  BrowserName["SAFARI"] = "Safari";
})(BrowserName || (BrowserName = {}));
var OSName;
(function (OSName) {
  OSName["WINDOWS"] = "Windows";
  OSName["MAC"] = "macOS";
  OSName["LINUX"] = "Linux";
})(OSName || (OSName = {}));
Bowser.getParser(window.navigator.userAgent);
class CpuInfo {
  static getNumLogicalCores() {
    return navigator.hardwareConcurrency;
  }
}
var CapabilityState;
(function (CapabilityState) {
  CapabilityState["NOT_CAPABLE"] = "not capable";
  CapabilityState["CAPABLE"] = "capable";
  CapabilityState["UNKNOWN"] = "unknown";
})(CapabilityState || (CapabilityState = {}));

var MQE_INTERVAL = 60000;
var DEFAULT_IP = '0.0.0.0';
var UNKNOWN = 'unknown';
var NOISE_REDUCTION_MODE;
(function (NOISE_REDUCTION_MODE) {
  NOISE_REDUCTION_MODE["NONE"] = "AUDIO_BACKGROUND_NOISE_REDUCTION_NONE";
  NOISE_REDUCTION_MODE["LOW_POWER"] = "AUDIO_BACKGROUND_NOISE_REDUCTION_LOW_POWER";
})(NOISE_REDUCTION_MODE || (NOISE_REDUCTION_MODE = {}));
var VIRTUAL_BACKGROUND_MODE;
(function (VIRTUAL_BACKGROUND_MODE) {
  VIRTUAL_BACKGROUND_MODE["NONE"] = "VIDEO_BACKGROUND_AUGMENT_NONE";
  VIRTUAL_BACKGROUND_MODE["BLUR"] = "VIDEO_BACKGROUND_AUGMENT_BLUR";
  VIRTUAL_BACKGROUND_MODE["REPLACE_IMAGE"] = "VIDEO_BACKGROUND_AUGMENT_REPLACE_IMAGE";
  VIRTUAL_BACKGROUND_MODE["REPLACE_VIDEO"] = "VIDEO_BACKGROUND_AUGMENT_REPLACE_VIDEO";
})(VIRTUAL_BACKGROUND_MODE || (VIRTUAL_BACKGROUND_MODE = {}));

var initialMqeInterval = {
  intervalNumber: 0,
  intervalMetadata: {},
  audioTransmit: [],
  audioReceive: [],
  videoTransmit: [],
  videoReceive: []
};
var initialMqeIntervalSessionCommon = {
  isMain: true,
  mariFecEnabled: false,
  mariQosEnabled: false,
  multistreamEnabled: true,
  direction: 'inactive'
};
var initialMqeIntervalSessionReceive = {
  common: initialMqeIntervalSessionCommon,
  fecPackets: 0,
  fecBitrate: 0,
  rtpPackets: 0,
  rtpBitrate: 0,
  rtpHopByHopLost: 0,
  mediaHopByHopLost: 0,
  rtpRecovered: 0,
  rtcpPackets: 0,
  rtcpBitrate: 0,
  stunPackets: 0,
  stunBitrate: 0,
  dtlsPackets: 0,
  dtlsBitrate: 0,
  transportType: 'UDP',
  maxBitrate: 0,
  srtpUnprotectErrors: 0
};
var initialMqeIntervalStreamReceiveCommon = {
  ssci: 0,
  rtpPackets: 0,
  rtpEndToEndLost: 0,
  concealedFrames: 0,
  maxConcealRunLength: 0,
  receivedBitrate: 0,
  requestedBitrate: 0,
  optimalBitrate: 0,
  csi: [],
  codec: ''
};
var initialMqeIntervalStreamReceiveAudio = {
  common: initialMqeIntervalStreamReceiveCommon
};
var initialMqeIntervalSessionTransmit = {
  common: initialMqeIntervalSessionCommon,
  fecPackets: 0,
  fecBitrate: 0,
  rtpPackets: 0,
  rtpBitrate: 0,
  rtcpPackets: 0,
  rtcpBitrate: 0,
  stunPackets: 0,
  stunBitrate: 0,
  dtlsPackets: 0,
  dtlsBitrate: 0,
  transportType: 'UDP',
  maxBitrate: 0,
  availableBitrate: 0,
  queueDelay: 0
};
var initialMqeIntervalStreamTransmitCommon = {
  ssci: 0,
  rtpPackets: 0,
  transmittedBitrate: 0,
  requestedBitrate: 0,
  codec: ''
};
var initialMqeIntervalStreamTransmitAudio = {
  common: initialMqeIntervalStreamTransmitCommon
};
var initialMqeIntervalStreamReceiveVideo = {
  common: initialMqeIntervalStreamReceiveCommon,
  receivedFrameSize: 0,
  requestedFrameSize: 0,
  optimalFrameSize: 0,
  receivedHeight: 0,
  receivedWidth: 0,
  receivedKeyFrames: 0,
  requestedKeyFrames: 0,
  h264CodecProfile: 'BP'
};
var initialMqeIntervalStreamTransmitVideo = {
  common: initialMqeIntervalStreamTransmitCommon,
  transmittedFrameSize: 0,
  requestedFrameSize: 0,
  transmittedHeight: 0,
  transmittedWidth: 0,
  transmittedKeyFrames: 0,
  requestedKeyFrames: 0,
  localConfigurationChanges: 0,
  remoteConfigurationChanges: 0,
  h264CodecProfile: 'BP'
};

var max = array => {
  if (array.length === 0) {
    return 0;
  }
  return Math.max(...array);
};
var min = array => {
  if (array.length === 0) {
    return 0;
  }
  return Math.min(...array);
};
var mean = array => {
  if (array.length === 0) {
    return 0;
  }
  return array.reduce((a, b) => a + b) / array.length;
};
var bytesToBitrate = (bytes, timeElapsed) => {
  if (timeElapsed === 0) {
    return 0;
  }
  return bytes * 8 / (timeElapsed / 1000);
};
var samplesToMilliseconds = (samples, clockRate) => {
  if (clockRate < 0) {
    throw new Error("Clock rate cannot be negative: ".concat(clockRate));
  }
  if (clockRate === 0) {
    return 0;
  }
  return samples / clockRate * 1000;
};
var framesToFrameRate = (frames, timeElapsed) => {
  if (timeElapsed === 0) {
    return 0;
  }
  return frames * 100 / (timeElapsed / 1000);
};
var convertToStatsMap = statsItems => {
  var statsMap = new Map();
  statsItems.forEach(statsItem => {
    statsItem.report.forEach((stats, key) => statsMap.set(key, stats));
  });
  return statsMap;
};
var getPropertyFromStatsById = (intervalStats, statsId, property) => {
  var _intervalStats$get;
  return (_intervalStats$get = intervalStats.get(statsId)) === null || _intervalStats$get === void 0 ? void 0 : _intervalStats$get[property];
};
var getPropertyFromStatsByType = (intervalStats, statsType, property) => {
  var value;
  intervalStats.forEach(stats => {
    if (stats.type === statsType && stats[property] !== undefined) {
      value = stats[property];
    }
  });
  return value;
};
var getPropertyFromStatsByTypeInArray = (intervalStats, statsType, property) => {
  var values = [];
  intervalStats.forEach(stats => {
    if (stats.type === statsType && stats[property] !== undefined) {
      values.push(stats[property]);
    }
  });
  return values;
};
var getSumFromStatsByType = (intervalStats, statsType, property) => {
  var sum = 0;
  intervalStats.forEach(stats => {
    if (stats.type === statsType && stats[property] !== undefined) {
      var value = stats[property];
      if (typeof value !== 'number') {
        throw Error("Attempted to get sum of property ".concat(property, " which is not a number"));
      }
      sum += value;
    }
  });
  return sum;
};
var getSelectedCandidatePairIdFromStats = intervalStats => {
  var _getPropertyFromStats;
  var transportId = (_getPropertyFromStats = getPropertyFromStatsByType(intervalStats, 'inbound-rtp', 'transportId')) !== null && _getPropertyFromStats !== void 0 ? _getPropertyFromStats : getPropertyFromStatsByType(intervalStats, 'outbound-rtp', 'transportId');
  if (transportId) {
    var selectedCandidatePairId = getPropertyFromStatsById(intervalStats, transportId, 'selectedCandidatePairId');
    if (selectedCandidatePairId) {
      return selectedCandidatePairId;
    }
  }
  for (var [id, stats] of intervalStats) {
    if (stats.type === 'candidate-pair' && stats.selected) {
      return id;
    }
  }
  return undefined;
};
var getSelectedCandidateIdFromStats = (intervalStats, candidateOrigin) => {
  var selectedCandidatePairId = getSelectedCandidatePairIdFromStats(intervalStats);
  if (selectedCandidatePairId) {
    var selectedCandidateId = getPropertyFromStatsById(intervalStats, selectedCandidatePairId, candidateOrigin === 'local' ? 'localCandidateId' : 'remoteCandidateId');
    return selectedCandidateId;
  }
  return undefined;
};
var getTransportTypeFromStats = intervalStats => {
  var selectedLocalCandidateId = getSelectedCandidateIdFromStats(intervalStats, 'local');
  if (selectedLocalCandidateId) {
    var relayProtocol = getPropertyFromStatsById(intervalStats, selectedLocalCandidateId, 'relayProtocol');
    if (relayProtocol) {
      return relayProtocol.toUpperCase();
    }
    var protocol = getPropertyFromStatsById(intervalStats, selectedLocalCandidateId, 'protocol');
    if (protocol) {
      return protocol.toUpperCase();
    }
  }
  return undefined;
};
var getAvailableOutgoingBitrateArrayFromStats = intervalStats => {
  var selectedCandidatePairId = getSelectedCandidatePairIdFromStats(intervalStats);
  if (selectedCandidatePairId) {
    var availableOutgoingBitrateArray = getPropertyFromStatsById(intervalStats, selectedCandidatePairId, 'availableOutgoingBitrateArray');
    return availableOutgoingBitrateArray;
  }
  return undefined;
};
var getMediaSourceTrackLabelFromStats = intervalStats => {
  var latestTrackLabel;
  var latestTrackTimestamp = 0;
  intervalStats.forEach(stats => {
    if (stats.type === 'media-source' && stats.trackLabel && stats.timestamp > latestTrackTimestamp) {
      latestTrackLabel = stats.trackLabel;
      latestTrackTimestamp = stats.timestamp;
    }
  });
  return latestTrackLabel;
};
var getCodecFromStatsByStreamStatsId = (intervalStats, streamStatsId) => {
  var codecId = getPropertyFromStatsById(intervalStats, streamStatsId, 'codecId');
  if (codecId) {
    var mimeType = getPropertyFromStatsById(intervalStats, codecId, 'mimeType');
    if (mimeType) {
      return mimeType.split('/')[1];
    }
  }
  return undefined;
};
var getH264ProfileFromStatsByStreamStatsId = (intervalStats, streamStatsId) => {
  var codecId = getPropertyFromStatsById(intervalStats, streamStatsId, 'codecId');
  if (codecId) {
    var sdpFmtpLine = getPropertyFromStatsById(intervalStats, codecId, 'sdpFmtpLine');
    if (sdpFmtpLine) {
      var _sdpFmtpLine$match;
      var profileLevelId = (_sdpFmtpLine$match = sdpFmtpLine.match(/profile-level-id=([0-9A-Fa-f]{6})/)) === null || _sdpFmtpLine$match === void 0 ? void 0 : _sdpFmtpLine$match[1];
      if (profileLevelId) {
        var profile = profileLevelId.substring(0, 2);
        if (profile === '42') {
          return 'BP';
        }
        if (profile === '64') {
          return 'CHP';
        }
      }
    }
  }
  return undefined;
};
var isStreamRequested = streamStats => {
  var _isRequestedArray$som;
  var isRequestedArray = streamStats.isRequestedArray;
  return (_isRequestedArray$som = isRequestedArray === null || isRequestedArray === void 0 ? void 0 : isRequestedArray.some(isRequested => isRequested === true)) !== null && _isRequestedArray$som !== void 0 ? _isRequestedArray$som : false;
};
var isStreamLive = streamStats => {
  var _sourceStateArray$som;
  var sourceStateArray = streamStats.sourceStateArray;
  return (_sourceStateArray$som = sourceStateArray === null || sourceStateArray === void 0 ? void 0 : sourceStateArray.some(state => state === 'live')) !== null && _sourceStateArray$som !== void 0 ? _sourceStateArray$som : false;
};
var pixelsToFrameSize = (width, height) => {
  var round16 = n => Math.ceil(n / 16) * 16;
  return round16(width) * round16(height) / 256;
};

class MqeBuilder {
  constructor(params) {
    _defineProperty(this, "currentIntervalStats", new Map());
    _defineProperty(this, "previousIntervalStats", new Map());
    _defineProperty(this, "isMain", void 0);
    _defineProperty(this, "multistreamEnabled", void 0);
    _defineProperty(this, "direction", void 0);
    _defineProperty(this, "mediaKind", void 0);
    this.isMain = params.isMain;
    this.multistreamEnabled = params.multistreamEnabled;
    this.direction = params.direction;
    this.mediaKind = params.mediaKind;
  }
  updateCurrentIntervalStats(newStats) {
    if (newStats.size === 0) {
      getLogger().debug("MqeBuilder#updateCurrentIntervalStats --> Stats map is empty, nothing to update for ".concat(this.direction, " ").concat(this.mediaKind, " ").concat(this.isMain ? 'main' : 'slides', "."));
      return;
    }
    newStats.forEach((stats, key) => {
      var current = this.currentIntervalStats.get(key);
      var storeValueInArray = (arrayProperty, valueToStore) => {
        var _current$arrayPropert;
        var array = (_current$arrayPropert = current === null || current === void 0 ? void 0 : current[arrayProperty]) !== null && _current$arrayPropert !== void 0 ? _current$arrayPropert : [];
        if (valueToStore !== undefined) {
          array.push(valueToStore);
        }
        if (array.length > 0) {
          stats[arrayProperty] = array;
        }
      };
      if (stats.type === 'inbound-rtp') {
        var _current$rtpPacketSiz, _stats$bytesReceived, _stats$packetsReceive;
        storeValueInArray('isRequestedArray', stats.isRequested);
        storeValueInArray('sourceStateArray', stats.sourceState);
        storeValueInArray('jitterArray', stats.jitter);
        storeValueInArray('requestedBitrateArray', stats.requestedBitrate);
        storeValueInArray('csiArray', stats.csi);
        var rtpPacketSizeArray = (_current$rtpPacketSiz = current === null || current === void 0 ? void 0 : current.rtpPacketSizeArray) !== null && _current$rtpPacketSiz !== void 0 ? _current$rtpPacketSiz : [];
        var bytesReceived = (_stats$bytesReceived = stats.bytesReceived) !== null && _stats$bytesReceived !== void 0 ? _stats$bytesReceived : 0;
        var packetsReceived = (_stats$packetsReceive = stats.packetsReceived) !== null && _stats$packetsReceive !== void 0 ? _stats$packetsReceive : 0;
        if (packetsReceived > 0) {
          var rtpPacketSize = Math.round(bytesReceived / packetsReceived);
          rtpPacketSizeArray.push(rtpPacketSize);
        }
        stats.rtpPacketSizeArray = rtpPacketSizeArray;
        if (this.mediaKind === 'video') {
          var _stats$requestedFrame, _current$maxRequested, _stats$requestedBitra, _current$maxRequested2, _current$bytesReceive, _current$maxBitrateFo, _stats$requestedFrame2, _current$maxRequested3, _stats$framesReceived, _current$framesReceiv, _current$maxReceivedF, _stats$framesDecoded, _current$framesDecode, _current$maxDecodedFr, _stats$frameHeight, _stats$frameWidth, _current$maxFrameSize, _current$maxFrameSize2;
          var requestedFrameSize = (_stats$requestedFrame = stats.requestedFrameSize) !== null && _stats$requestedFrame !== void 0 ? _stats$requestedFrame : 0;
          var maxRequestedFrameSize = (_current$maxRequested = current === null || current === void 0 ? void 0 : current.maxRequestedFrameSize) !== null && _current$maxRequested !== void 0 ? _current$maxRequested : 0;
          var isRequestedFrameSizeGreaterOrEqual = requestedFrameSize >= maxRequestedFrameSize;
          stats.maxRequestedFrameSize = isRequestedFrameSizeGreaterOrEqual ? requestedFrameSize : maxRequestedFrameSize;
          stats.maxRequestedBitrateForMaxRequestedFrameSize = isRequestedFrameSizeGreaterOrEqual ? Math.max((_stats$requestedBitra = stats.requestedBitrate) !== null && _stats$requestedBitra !== void 0 ? _stats$requestedBitra : 0, (_current$maxRequested2 = current === null || current === void 0 ? void 0 : current.maxRequestedBitrateForMaxRequestedFrameSize) !== null && _current$maxRequested2 !== void 0 ? _current$maxRequested2 : 0) : current === null || current === void 0 ? void 0 : current.maxRequestedBitrateForMaxRequestedFrameSize;
          var lastBytesReceived = (_current$bytesReceive = current === null || current === void 0 ? void 0 : current.bytesReceived) !== null && _current$bytesReceive !== void 0 ? _current$bytesReceive : 0;
          stats.maxBitrateForMaxRequestedFrameSize = isRequestedFrameSizeGreaterOrEqual ? Math.max(bytesToBitrate(bytesReceived - lastBytesReceived, 5000), (_current$maxBitrateFo = current === null || current === void 0 ? void 0 : current.maxBitrateForMaxRequestedFrameSize) !== null && _current$maxBitrateFo !== void 0 ? _current$maxBitrateFo : 0) : current === null || current === void 0 ? void 0 : current.maxBitrateForMaxRequestedFrameSize;
          stats.maxRequestedFrameRateForMaxRequestedFrameSize = isRequestedFrameSizeGreaterOrEqual ? Math.max((_stats$requestedFrame2 = stats.requestedFrameRate) !== null && _stats$requestedFrame2 !== void 0 ? _stats$requestedFrame2 : 0, (_current$maxRequested3 = current === null || current === void 0 ? void 0 : current.maxRequestedFrameRateForMaxRequestedFrameSize) !== null && _current$maxRequested3 !== void 0 ? _current$maxRequested3 : 0) : current === null || current === void 0 ? void 0 : current.maxRequestedFrameRateForMaxRequestedFrameSize;
          var framesReceived = (_stats$framesReceived = stats.framesReceived) !== null && _stats$framesReceived !== void 0 ? _stats$framesReceived : 0;
          var lastFramesReceived = (_current$framesReceiv = current === null || current === void 0 ? void 0 : current.framesReceived) !== null && _current$framesReceiv !== void 0 ? _current$framesReceiv : 0;
          stats.maxReceivedFrameRateForMaxRequestedFrameSize = isRequestedFrameSizeGreaterOrEqual ? Math.max(framesToFrameRate(framesReceived - lastFramesReceived, 5000), (_current$maxReceivedF = current === null || current === void 0 ? void 0 : current.maxReceivedFrameRateForMaxRequestedFrameSize) !== null && _current$maxReceivedF !== void 0 ? _current$maxReceivedF : 0) : current === null || current === void 0 ? void 0 : current.maxReceivedFrameRateForMaxRequestedFrameSize;
          var framesDecoded = (_stats$framesDecoded = stats.framesDecoded) !== null && _stats$framesDecoded !== void 0 ? _stats$framesDecoded : 0;
          var lastFramesDecoded = (_current$framesDecode = current === null || current === void 0 ? void 0 : current.framesDecoded) !== null && _current$framesDecode !== void 0 ? _current$framesDecode : 0;
          stats.maxDecodedFrameRateForMaxRequestedFrameSize = isRequestedFrameSizeGreaterOrEqual ? Math.max(framesToFrameRate(framesDecoded - lastFramesDecoded, 5000), (_current$maxDecodedFr = current === null || current === void 0 ? void 0 : current.maxDecodedFrameRateForMaxRequestedFrameSize) !== null && _current$maxDecodedFr !== void 0 ? _current$maxDecodedFr : 0) : current === null || current === void 0 ? void 0 : current.maxDecodedFrameRateForMaxRequestedFrameSize;
          var frameHeight = (_stats$frameHeight = stats.frameHeight) !== null && _stats$frameHeight !== void 0 ? _stats$frameHeight : 0;
          var frameWidth = (_stats$frameWidth = stats.frameWidth) !== null && _stats$frameWidth !== void 0 ? _stats$frameWidth : 0;
          var frameSize = pixelsToFrameSize(frameWidth, frameHeight);
          var maxFrameHeight = (_current$maxFrameSize = current === null || current === void 0 ? void 0 : current.maxFrameSizeHeightForMaxRequestedFrameSize) !== null && _current$maxFrameSize !== void 0 ? _current$maxFrameSize : 0;
          var maxFrameWidth = (_current$maxFrameSize2 = current === null || current === void 0 ? void 0 : current.maxFrameSizeWidthForMaxRequestedFrameSize) !== null && _current$maxFrameSize2 !== void 0 ? _current$maxFrameSize2 : 0;
          var maxFrameSize = pixelsToFrameSize(maxFrameWidth, maxFrameHeight);
          if (isRequestedFrameSizeGreaterOrEqual && frameSize >= maxFrameSize) {
            stats.maxFrameSizeHeightForMaxRequestedFrameSize = frameHeight;
            stats.maxFrameSizeWidthForMaxRequestedFrameSize = frameWidth;
          } else {
            stats.maxFrameSizeHeightForMaxRequestedFrameSize = current === null || current === void 0 ? void 0 : current.maxFrameSizeHeightForMaxRequestedFrameSize;
            stats.maxFrameSizeWidthForMaxRequestedFrameSize = current === null || current === void 0 ? void 0 : current.maxFrameSizeWidthForMaxRequestedFrameSize;
          }
        }
      } else if (stats.type === 'outbound-rtp') {
        var _current$rtpPacketSiz2, _stats$bytesSent, _stats$packetsSent;
        storeValueInArray('isRequestedArray', stats.isRequested);
        storeValueInArray('sourceStateArray', stats.sourceState);
        storeValueInArray('requestedBitrateArray', stats.requestedBitrate);
        var lastUsedEffect = current === null || current === void 0 ? void 0 : current.lastUsedEffect;
        var effect = stats === null || stats === void 0 ? void 0 : stats.effect;
        stats.lastUsedEffect = effect !== null && effect !== void 0 ? effect : lastUsedEffect;
        var _rtpPacketSizeArray = (_current$rtpPacketSiz2 = current === null || current === void 0 ? void 0 : current.rtpPacketSizeArray) !== null && _current$rtpPacketSiz2 !== void 0 ? _current$rtpPacketSiz2 : [];
        var bytesSent = (_stats$bytesSent = stats.bytesSent) !== null && _stats$bytesSent !== void 0 ? _stats$bytesSent : 0;
        var packetsSent = (_stats$packetsSent = stats.packetsSent) !== null && _stats$packetsSent !== void 0 ? _stats$packetsSent : 0;
        if (packetsSent > 0) {
          var _rtpPacketSize = Math.round(bytesSent / packetsSent);
          _rtpPacketSizeArray.push(_rtpPacketSize);
        }
        stats.rtpPacketSizeArray = _rtpPacketSizeArray;
        if (this.mediaKind === 'video') {
          var _stats$requestedFrame3, _current$maxRequested4, _stats$requestedBitra2, _current$maxRequested5, _current$bytesSent, _current$maxBitrateFo2, _stats$requestedFrame4, _current$maxRequested6, _stats$framesSent, _current$framesSent, _current$maxTransmitt, _stats$frameHeight2, _stats$frameWidth2, _current$maxFrameSize3, _current$maxFrameSize4;
          var _requestedFrameSize = (_stats$requestedFrame3 = stats.requestedFrameSize) !== null && _stats$requestedFrame3 !== void 0 ? _stats$requestedFrame3 : 0;
          var _maxRequestedFrameSize = (_current$maxRequested4 = current === null || current === void 0 ? void 0 : current.maxRequestedFrameSize) !== null && _current$maxRequested4 !== void 0 ? _current$maxRequested4 : 0;
          var _isRequestedFrameSizeGreaterOrEqual = _requestedFrameSize >= _maxRequestedFrameSize;
          stats.maxRequestedFrameSize = _isRequestedFrameSizeGreaterOrEqual ? _requestedFrameSize : _maxRequestedFrameSize;
          stats.maxRequestedBitrateForMaxRequestedFrameSize = _isRequestedFrameSizeGreaterOrEqual ? Math.max((_stats$requestedBitra2 = stats.requestedBitrate) !== null && _stats$requestedBitra2 !== void 0 ? _stats$requestedBitra2 : 0, (_current$maxRequested5 = current === null || current === void 0 ? void 0 : current.maxRequestedBitrateForMaxRequestedFrameSize) !== null && _current$maxRequested5 !== void 0 ? _current$maxRequested5 : 0) : current === null || current === void 0 ? void 0 : current.maxRequestedBitrateForMaxRequestedFrameSize;
          var lastBytesSent = (_current$bytesSent = current === null || current === void 0 ? void 0 : current.bytesSent) !== null && _current$bytesSent !== void 0 ? _current$bytesSent : 0;
          stats.maxBitrateForMaxRequestedFrameSize = _isRequestedFrameSizeGreaterOrEqual ? Math.max(bytesToBitrate(bytesSent - lastBytesSent, 5000), (_current$maxBitrateFo2 = current === null || current === void 0 ? void 0 : current.maxBitrateForMaxRequestedFrameSize) !== null && _current$maxBitrateFo2 !== void 0 ? _current$maxBitrateFo2 : 0) : current === null || current === void 0 ? void 0 : current.maxBitrateForMaxRequestedFrameSize;
          stats.maxRequestedFrameRateForMaxRequestedFrameSize = _isRequestedFrameSizeGreaterOrEqual ? Math.max((_stats$requestedFrame4 = stats.requestedFrameRate) !== null && _stats$requestedFrame4 !== void 0 ? _stats$requestedFrame4 : 0, (_current$maxRequested6 = current === null || current === void 0 ? void 0 : current.maxRequestedFrameRateForMaxRequestedFrameSize) !== null && _current$maxRequested6 !== void 0 ? _current$maxRequested6 : 0) : current === null || current === void 0 ? void 0 : current.maxRequestedFrameRateForMaxRequestedFrameSize;
          var framesSent = (_stats$framesSent = stats.framesSent) !== null && _stats$framesSent !== void 0 ? _stats$framesSent : 0;
          var lastFramesSent = (_current$framesSent = current === null || current === void 0 ? void 0 : current.framesSent) !== null && _current$framesSent !== void 0 ? _current$framesSent : 0;
          stats.maxTransmittedFrameRateForMaxRequestedFrameSize = _isRequestedFrameSizeGreaterOrEqual ? Math.max(framesToFrameRate(framesSent - lastFramesSent, 5000), (_current$maxTransmitt = current === null || current === void 0 ? void 0 : current.maxTransmittedFrameRateForMaxRequestedFrameSize) !== null && _current$maxTransmitt !== void 0 ? _current$maxTransmitt : 0) : current === null || current === void 0 ? void 0 : current.maxTransmittedFrameRateForMaxRequestedFrameSize;
          var _frameHeight = (_stats$frameHeight2 = stats.frameHeight) !== null && _stats$frameHeight2 !== void 0 ? _stats$frameHeight2 : 0;
          var _frameWidth = (_stats$frameWidth2 = stats.frameWidth) !== null && _stats$frameWidth2 !== void 0 ? _stats$frameWidth2 : 0;
          var _frameSize = pixelsToFrameSize(_frameWidth, _frameHeight);
          var _maxFrameHeight = (_current$maxFrameSize3 = current === null || current === void 0 ? void 0 : current.maxFrameSizeHeightForMaxRequestedFrameSize) !== null && _current$maxFrameSize3 !== void 0 ? _current$maxFrameSize3 : 0;
          var _maxFrameWidth = (_current$maxFrameSize4 = current === null || current === void 0 ? void 0 : current.maxFrameSizeWidthForMaxRequestedFrameSize) !== null && _current$maxFrameSize4 !== void 0 ? _current$maxFrameSize4 : 0;
          var _maxFrameSize = pixelsToFrameSize(_maxFrameWidth, _maxFrameHeight);
          if (_isRequestedFrameSizeGreaterOrEqual && _frameSize >= _maxFrameSize) {
            stats.maxFrameSizeHeightForMaxRequestedFrameSize = _frameHeight;
            stats.maxFrameSizeWidthForMaxRequestedFrameSize = _frameWidth;
          } else {
            stats.maxFrameSizeHeightForMaxRequestedFrameSize = current === null || current === void 0 ? void 0 : current.maxFrameSizeHeightForMaxRequestedFrameSize;
            stats.maxFrameSizeWidthForMaxRequestedFrameSize = current === null || current === void 0 ? void 0 : current.maxFrameSizeWidthForMaxRequestedFrameSize;
          }
        }
      } else if (stats.type === 'remote-inbound-rtp') {
        storeValueInArray('roundTripTimeArray', stats.roundTripTime);
        storeValueInArray('fractionLostArray', stats.fractionLost);
        storeValueInArray('jitterArray', stats.jitter);
      } else if (stats.type === 'candidate-pair') {
        storeValueInArray('availableOutgoingBitrateArray', stats.availableOutgoingBitrate);
      }
    });
    this.currentIntervalStats = newStats;
  }
  reset() {
    this.previousIntervalStats = new Map();
    this.currentIntervalStats = new Map();
  }
  resetForNextInterval() {
    this.previousIntervalStats = new Map(this.currentIntervalStats);
    this.currentIntervalStats.forEach(stats => {
      if (stats.type === 'inbound-rtp') {
        delete stats.isRequestedArray;
        delete stats.sourceStateArray;
        delete stats.jitterArray;
        delete stats.requestedBitrateArray;
        delete stats.csiArray;
        delete stats.maxRequestedFrameSize;
        delete stats.maxRequestedBitrateForMaxRequestedFrameSize;
        delete stats.maxBitrateForMaxRequestedFrameSize;
        delete stats.maxRequestedFrameRateForMaxRequestedFrameSize;
        delete stats.maxReceivedFrameRateForMaxRequestedFrameSize;
        delete stats.maxDecodedFrameRateForMaxRequestedFrameSize;
        delete stats.maxFrameSizeHeightForMaxRequestedFrameSize;
        delete stats.maxFrameSizeWidthForMaxRequestedFrameSize;
        delete stats.rtpPacketSizeArray;
      } else if (stats.type === 'outbound-rtp') {
        delete stats.isRequestedArray;
        delete stats.sourceStateArray;
        delete stats.requestedBitrateArray;
        delete stats.lastUsedEffect;
        delete stats.maxRequestedFrameSize;
        delete stats.maxRequestedBitrateForMaxRequestedFrameSize;
        delete stats.maxBitrateForMaxRequestedFrameSize;
        delete stats.maxRequestedFrameRateForMaxRequestedFrameSize;
        delete stats.maxTransmittedFrameRateForMaxRequestedFrameSize;
        delete stats.maxFrameSizeHeightForMaxRequestedFrameSize;
        delete stats.maxFrameSizeWidthForMaxRequestedFrameSize;
        delete stats.rtpPacketSizeArray;
      } else if (stats.type === 'remote-inbound-rtp') {
        delete stats.roundTripTimeArray;
        delete stats.fractionLostArray;
        delete stats.jitterArray;
      } else if (stats.type === 'candidate-pair') {
        delete stats.availableOutgoingBitrateArray;
      }
    });
  }
  buildMqeIntervalSessionCommon() {
    var _getPropertyFromStats;
    var result = structuredClone(initialMqeIntervalSessionCommon);
    var current = this.currentIntervalStats;
    result.isMain = this.isMain;
    result.mariFecEnabled = false;
    result.mariRtxEnabled = false;
    result.mariQosEnabled = false;
    result.mariLiteEnabled = false;
    result.multistreamEnabled = this.multistreamEnabled;
    result.direction = this.direction;
    result.isMediaBypassEdge = (_getPropertyFromStats = getPropertyFromStatsByType(current, 'peer-connection', 'isMediaBypassEdge')) !== null && _getPropertyFromStats !== void 0 ? _getPropertyFromStats : false;
    return result;
  }
  buildMqeIntervalSessionReceive() {
    var _getTransportTypeFrom;
    var result = structuredClone(initialMqeIntervalSessionReceive);
    result.common = this.buildMqeIntervalSessionCommon();
    var current = this.currentIntervalStats;
    var previous = this.previousIntervalStats;
    var currentFecPacketsReceived = getSumFromStatsByType(current, 'inbound-rtp', 'fecPacketsReceived');
    var previousFecPacketsReceived = getSumFromStatsByType(previous, 'inbound-rtp', 'fecPacketsReceived');
    result.fecPackets = currentFecPacketsReceived - previousFecPacketsReceived;
    var currentRetransmittedPacketsReceived = getSumFromStatsByType(current, 'inbound-rtp', 'retransmittedPacketsReceived');
    var previousRetransmittedPacketsReceived = getSumFromStatsByType(previous, 'inbound-rtp', 'retransmittedPacketsReceived');
    result.rtxPackets = currentRetransmittedPacketsReceived - previousRetransmittedPacketsReceived;
    var currentRetransmittedBytesReceived = getSumFromStatsByType(current, 'inbound-rtp', 'retransmittedBytesReceived');
    var previousRetransmittedBytesReceived = getSumFromStatsByType(previous, 'inbound-rtp', 'retransmittedBytesReceived');
    result.rtxBitrate = bytesToBitrate(currentRetransmittedBytesReceived - previousRetransmittedBytesReceived, MQE_INTERVAL);
    var currentPacketsReceived = getSumFromStatsByType(current, 'inbound-rtp', 'packetsReceived');
    var previousPacketsReceived = getSumFromStatsByType(previous, 'inbound-rtp', 'packetsReceived');
    result.rtpPackets = currentPacketsReceived - previousPacketsReceived - result.rtxPackets;
    var currentBytesReceived = getSumFromStatsByType(current, 'inbound-rtp', 'bytesReceived');
    var previousBytesReceived = getSumFromStatsByType(previous, 'inbound-rtp', 'bytesReceived');
    result.rtpBitrate = bytesToBitrate(currentBytesReceived - previousBytesReceived, MQE_INTERVAL) - result.rtxBitrate;
    var currentPacketsLost = getSumFromStatsByType(current, 'inbound-rtp', 'packetsLost');
    var previousPacketsLost = getSumFromStatsByType(previous, 'inbound-rtp', 'packetsLost');
    result.rtpHopByHopLost = currentPacketsLost - previousPacketsLost;
    result.mediaHopByHopLost = currentPacketsLost - previousPacketsLost;
    var currentFecPacketsDiscarded = getSumFromStatsByType(current, 'inbound-rtp', 'fecPacketsDiscarded');
    var previousFecPacketsDiscarded = getSumFromStatsByType(previous, 'inbound-rtp', 'fecPacketsDiscarded');
    result.rtpRecovered = result.fecPackets - (currentFecPacketsDiscarded - previousFecPacketsDiscarded);
    var currentTransportType = (_getTransportTypeFrom = getTransportTypeFromStats(current)) !== null && _getTransportTypeFrom !== void 0 ? _getTransportTypeFrom : 'UDP';
    result.transportType = currentTransportType;
    var currentRtpPacketSizeArray = getPropertyFromStatsByTypeInArray(current, 'inbound-rtp', 'rtpPacketSizeArray').flat();
    result.mediaPacketSize = {
      meanRtpPacketSize: Math.round(mean(currentRtpPacketSizeArray)),
      maxRtpPacketSize: Math.round(max(currentRtpPacketSizeArray)),
      minRtpPacketSize: Math.round(min(currentRtpPacketSizeArray))
    };
    return result;
  }
  buildMqeIntervalStreamReceiveAudio(id) {
    var result = structuredClone(initialMqeIntervalStreamReceiveAudio);
    result.common = this.buildMqeIntervalStreamReceiveCommon(id);
    return result;
  }
  buildMqeIntervalStreamReceiveVideo(id) {
    var _getPropertyFromStats2, _getPropertyFromStats3, _getPropertyFromStats4, _getPropertyFromStats5, _getPropertyFromStats6, _getPropertyFromStats7, _getPropertyFromStats8, _getPropertyFromStats9, _getPropertyFromStats10, _getH264ProfileFromSt;
    var result = structuredClone(initialMqeIntervalStreamReceiveVideo);
    result.common = this.buildMqeIntervalStreamReceiveCommon(id);
    var current = this.currentIntervalStats;
    var previous = this.previousIntervalStats;
    var currentMaxFrameSizeHeightForMaxRequestedFrameSize = (_getPropertyFromStats2 = getPropertyFromStatsById(current, id, 'maxFrameSizeHeightForMaxRequestedFrameSize')) !== null && _getPropertyFromStats2 !== void 0 ? _getPropertyFromStats2 : 0;
    var currentMaxFrameSizeWidthForMaxRequestedFrameSize = (_getPropertyFromStats3 = getPropertyFromStatsById(current, id, 'maxFrameSizeWidthForMaxRequestedFrameSize')) !== null && _getPropertyFromStats3 !== void 0 ? _getPropertyFromStats3 : 0;
    result.receivedFrameSize = pixelsToFrameSize(currentMaxFrameSizeWidthForMaxRequestedFrameSize, currentMaxFrameSizeHeightForMaxRequestedFrameSize);
    var currentMaxRequestedFrameSize = (_getPropertyFromStats4 = getPropertyFromStatsById(current, id, 'maxRequestedFrameSize')) !== null && _getPropertyFromStats4 !== void 0 ? _getPropertyFromStats4 : 0;
    result.requestedFrameSize = currentMaxRequestedFrameSize;
    result.optimalFrameSize = currentMaxRequestedFrameSize;
    result.receivedHeight = currentMaxFrameSizeHeightForMaxRequestedFrameSize;
    result.receivedWidth = currentMaxFrameSizeWidthForMaxRequestedFrameSize;
    var currentKeyFramesDecoded = (_getPropertyFromStats5 = getPropertyFromStatsById(current, id, 'keyFramesDecoded')) !== null && _getPropertyFromStats5 !== void 0 ? _getPropertyFromStats5 : 0;
    var previousKeyFramesDecoded = (_getPropertyFromStats6 = getPropertyFromStatsById(previous, id, 'keyFramesDecoded')) !== null && _getPropertyFromStats6 !== void 0 ? _getPropertyFromStats6 : 0;
    result.receivedKeyFrames = currentKeyFramesDecoded - previousKeyFramesDecoded;
    var currentFirCount = (_getPropertyFromStats7 = getPropertyFromStatsById(current, id, 'firCount')) !== null && _getPropertyFromStats7 !== void 0 ? _getPropertyFromStats7 : 0;
    var previousFirCount = (_getPropertyFromStats8 = getPropertyFromStatsById(previous, id, 'firCount')) !== null && _getPropertyFromStats8 !== void 0 ? _getPropertyFromStats8 : 0;
    var currentPliCount = (_getPropertyFromStats9 = getPropertyFromStatsById(current, id, 'pliCount')) !== null && _getPropertyFromStats9 !== void 0 ? _getPropertyFromStats9 : 0;
    var previousPliCount = (_getPropertyFromStats10 = getPropertyFromStatsById(previous, id, 'pliCount')) !== null && _getPropertyFromStats10 !== void 0 ? _getPropertyFromStats10 : 0;
    result.requestedKeyFrames = currentFirCount - previousFirCount + (currentPliCount - previousPliCount);
    if (this.multistreamEnabled) {
      var _getPropertyFromStats11, _getPropertyFromStats12;
      var currentIsActiveSpeaker = (_getPropertyFromStats11 = getPropertyFromStatsById(current, id, 'isActiveSpeaker')) !== null && _getPropertyFromStats11 !== void 0 ? _getPropertyFromStats11 : false;
      var currentLastActiveSpeakerUpdateTimestamp = (_getPropertyFromStats12 = getPropertyFromStatsById(current, id, 'lastActiveSpeakerUpdateTimestamp')) !== null && _getPropertyFromStats12 !== void 0 ? _getPropertyFromStats12 : 0;
      result.isActiveSpeaker = currentIsActiveSpeaker || currentLastActiveSpeakerUpdateTimestamp > performance.timeOrigin + performance.now() - MQE_INTERVAL;
    }
    var currentH264CodecProfile = (_getH264ProfileFromSt = getH264ProfileFromStatsByStreamStatsId(current, id)) !== null && _getH264ProfileFromSt !== void 0 ? _getH264ProfileFromSt : 'BP';
    result.h264CodecProfile = currentH264CodecProfile;
    return result;
  }
  buildMqeIntervalStreamReceiveCommon(id) {
    var _getPropertyFromStats13, _getPropertyFromStats14, _getPropertyFromStats15, _getPropertyFromStats16, _getPropertyFromStats17, _getPropertyFromStats18, _getPropertyFromStats29, _getPropertyFromStats30, _getPropertyFromStats31, _getPropertyFromStats32, _getPropertyFromStats33, _getCodecFromStatsByS;
    var result = structuredClone(initialMqeIntervalStreamReceiveCommon);
    var current = this.currentIntervalStats;
    var previous = this.previousIntervalStats;
    var currentPacketsReceived = (_getPropertyFromStats13 = getPropertyFromStatsById(current, id, 'packetsReceived')) !== null && _getPropertyFromStats13 !== void 0 ? _getPropertyFromStats13 : 0;
    var previousPacketsReceived = (_getPropertyFromStats14 = getPropertyFromStatsById(previous, id, 'packetsReceived')) !== null && _getPropertyFromStats14 !== void 0 ? _getPropertyFromStats14 : 0;
    var currentRetransmittedPacketsReceived = (_getPropertyFromStats15 = getPropertyFromStatsById(current, id, 'retransmittedPacketsReceived')) !== null && _getPropertyFromStats15 !== void 0 ? _getPropertyFromStats15 : 0;
    var previousRetransmittedPacketsReceived = (_getPropertyFromStats16 = getPropertyFromStatsById(previous, id, 'retransmittedPacketsReceived')) !== null && _getPropertyFromStats16 !== void 0 ? _getPropertyFromStats16 : 0;
    result.rtpPackets = currentPacketsReceived - previousPacketsReceived - (currentRetransmittedPacketsReceived - previousRetransmittedPacketsReceived);
    var currentPacketsLost = (_getPropertyFromStats17 = getPropertyFromStatsById(current, id, 'packetsLost')) !== null && _getPropertyFromStats17 !== void 0 ? _getPropertyFromStats17 : 0;
    var previousPacketsLost = (_getPropertyFromStats18 = getPropertyFromStatsById(previous, id, 'packetsLost')) !== null && _getPropertyFromStats18 !== void 0 ? _getPropertyFromStats18 : 0;
    result.rtpEndToEndLost = currentPacketsLost - previousPacketsLost;
    if (this.mediaKind === 'audio') {
      var _getPropertyFromStats19, _getPropertyFromStats20, _getPropertyFromStats21, _getPropertyFromStats22, _getPropertyFromStats23;
      var currentConcealedSamples = (_getPropertyFromStats19 = getPropertyFromStatsById(current, id, 'concealedSamples')) !== null && _getPropertyFromStats19 !== void 0 ? _getPropertyFromStats19 : 0;
      var previousConcealedSamples = (_getPropertyFromStats20 = getPropertyFromStatsById(previous, id, 'concealedSamples')) !== null && _getPropertyFromStats20 !== void 0 ? _getPropertyFromStats20 : 0;
      var currentSilentConcealedSamples = (_getPropertyFromStats21 = getPropertyFromStatsById(current, id, 'silentConcealedSamples')) !== null && _getPropertyFromStats21 !== void 0 ? _getPropertyFromStats21 : 0;
      var previousSilentConcealedSamples = (_getPropertyFromStats22 = getPropertyFromStatsById(previous, id, 'silentConcealedSamples')) !== null && _getPropertyFromStats22 !== void 0 ? _getPropertyFromStats22 : 0;
      var currentClockRate = (_getPropertyFromStats23 = getPropertyFromStatsByType(current, 'codec', 'clockRate')) !== null && _getPropertyFromStats23 !== void 0 ? _getPropertyFromStats23 : 0;
      result.concealedFrames = samplesToMilliseconds(currentConcealedSamples - previousConcealedSamples - (currentSilentConcealedSamples - previousSilentConcealedSamples), currentClockRate);
    }
    if (this.mediaKind === 'video') {
      var _getPropertyFromStats24, _getPropertyFromStats25, _getPropertyFromStats26, _getPropertyFromStats27, _getPropertyFromStats28;
      var currentTotalFreezesDuration = (_getPropertyFromStats24 = getPropertyFromStatsById(current, id, 'totalFreezesDuration')) !== null && _getPropertyFromStats24 !== void 0 ? _getPropertyFromStats24 : 0;
      var previousTotalFreezesDuration = (_getPropertyFromStats25 = getPropertyFromStatsById(previous, id, 'totalFreezesDuration')) !== null && _getPropertyFromStats25 !== void 0 ? _getPropertyFromStats25 : 0;
      result.concealedFrames = (currentTotalFreezesDuration - previousTotalFreezesDuration) * 1000;
      var currentMaxReceivedFrameRateForMaxRequestedFrameSize = (_getPropertyFromStats26 = getPropertyFromStatsById(current, id, 'maxReceivedFrameRateForMaxRequestedFrameSize')) !== null && _getPropertyFromStats26 !== void 0 ? _getPropertyFromStats26 : 0;
      result.receivedFrameRate = currentMaxReceivedFrameRateForMaxRequestedFrameSize;
      var currentMaxDecodedFrameRateForMaxRequestedFrameSize = (_getPropertyFromStats27 = getPropertyFromStatsById(current, id, 'maxDecodedFrameRateForMaxRequestedFrameSize')) !== null && _getPropertyFromStats27 !== void 0 ? _getPropertyFromStats27 : 0;
      result.renderedFrameRate = currentMaxDecodedFrameRateForMaxRequestedFrameSize;
      var currentMaxRequestedFrameRateForMaxRequestedFrameSize = (_getPropertyFromStats28 = getPropertyFromStatsById(current, id, 'maxRequestedFrameRateForMaxRequestedFrameSize')) !== null && _getPropertyFromStats28 !== void 0 ? _getPropertyFromStats28 : 0;
      result.requestedFrameRate = currentMaxRequestedFrameRateForMaxRequestedFrameSize;
      result.optimalFrameRate = currentMaxRequestedFrameRateForMaxRequestedFrameSize;
    }
    var currentJitterArray = (_getPropertyFromStats29 = getPropertyFromStatsById(current, id, 'jitterArray')) !== null && _getPropertyFromStats29 !== void 0 ? _getPropertyFromStats29 : [];
    result.meanRtpJitter = mean(currentJitterArray) * 1000;
    result.maxRtpJitter = max(currentJitterArray) * 1000;
    var currentBytesReceived = (_getPropertyFromStats30 = getPropertyFromStatsById(current, id, 'bytesReceived')) !== null && _getPropertyFromStats30 !== void 0 ? _getPropertyFromStats30 : 0;
    var previousBytesReceived = (_getPropertyFromStats31 = getPropertyFromStatsById(previous, id, 'bytesReceived')) !== null && _getPropertyFromStats31 !== void 0 ? _getPropertyFromStats31 : 0;
    var currentRetransmittedBytesReceived = (_getPropertyFromStats32 = getPropertyFromStatsById(current, id, 'retransmittedBytesReceived')) !== null && _getPropertyFromStats32 !== void 0 ? _getPropertyFromStats32 : 0;
    var previousRetransmittedBytesReceived = (_getPropertyFromStats33 = getPropertyFromStatsById(previous, id, 'retransmittedBytesReceived')) !== null && _getPropertyFromStats33 !== void 0 ? _getPropertyFromStats33 : 0;
    result.receivedBitrate = bytesToBitrate(currentBytesReceived - previousBytesReceived - (currentRetransmittedBytesReceived - previousRetransmittedBytesReceived), MQE_INTERVAL);
    if (this.mediaKind === 'audio') {
      var _getPropertyFromStats34;
      var currentRequestedBitrateArray = (_getPropertyFromStats34 = getPropertyFromStatsById(current, id, 'requestedBitrateArray')) !== null && _getPropertyFromStats34 !== void 0 ? _getPropertyFromStats34 : [];
      result.requestedBitrate = max(currentRequestedBitrateArray);
      result.optimalBitrate = max(currentRequestedBitrateArray);
    } else {
      var _getPropertyFromStats35;
      var currentMaxRequestedBitrateForMaxRequestedFrameSize = (_getPropertyFromStats35 = getPropertyFromStatsById(current, id, 'maxRequestedBitrateForMaxRequestedFrameSize')) !== null && _getPropertyFromStats35 !== void 0 ? _getPropertyFromStats35 : 0;
      result.requestedBitrate = currentMaxRequestedBitrateForMaxRequestedFrameSize;
      result.optimalBitrate = currentMaxRequestedBitrateForMaxRequestedFrameSize;
    }
    var currentCsiArray = getPropertyFromStatsById(current, id, 'csiArray');
    if (currentCsiArray && currentCsiArray.length > 0) {
      result.csi = currentCsiArray.filter((csi, index) => currentCsiArray.indexOf(csi) === index);
    }
    var currentCodec = (_getCodecFromStatsByS = getCodecFromStatsByStreamStatsId(current, id)) !== null && _getCodecFromStatsByS !== void 0 ? _getCodecFromStatsByS : this.mediaKind === 'audio' ? 'opus' : 'H264';
    result.codec = currentCodec;
    return result;
  }
  buildMqeIntervalSessionTransmit() {
    var _getTransportTypeFrom2, _getAvailableOutgoing;
    var result = structuredClone(initialMqeIntervalSessionTransmit);
    result.common = this.buildMqeIntervalSessionCommon();
    var current = this.currentIntervalStats;
    var previous = this.previousIntervalStats;
    var currentRetransmittedPacketsSent = getSumFromStatsByType(current, 'outbound-rtp', 'retransmittedPacketsSent');
    var previousRetransmittedPacketsSent = getSumFromStatsByType(previous, 'outbound-rtp', 'retransmittedPacketsSent');
    result.rtxPackets = currentRetransmittedPacketsSent - previousRetransmittedPacketsSent;
    var currentRetransmittedBytesSent = getSumFromStatsByType(current, 'outbound-rtp', 'retransmittedBytesSent');
    var previousRetransmittedBytesSent = getSumFromStatsByType(previous, 'outbound-rtp', 'retransmittedBytesSent');
    result.rtxBitrate = bytesToBitrate(currentRetransmittedBytesSent - previousRetransmittedBytesSent, MQE_INTERVAL);
    var currentPacketsSent = getSumFromStatsByType(current, 'outbound-rtp', 'packetsSent');
    var previousPacketsSent = getSumFromStatsByType(previous, 'outbound-rtp', 'packetsSent');
    result.rtpPackets = currentPacketsSent - previousPacketsSent - result.rtxPackets;
    var currentBytesSent = getSumFromStatsByType(current, 'outbound-rtp', 'bytesSent');
    var previousBytesSent = getSumFromStatsByType(previous, 'outbound-rtp', 'bytesSent');
    result.rtpBitrate = bytesToBitrate(currentBytesSent - previousBytesSent, MQE_INTERVAL) - result.rtxBitrate;
    var currentTransportType = (_getTransportTypeFrom2 = getTransportTypeFromStats(current)) !== null && _getTransportTypeFrom2 !== void 0 ? _getTransportTypeFrom2 : 'UDP';
    result.transportType = currentTransportType;
    var currentAvailableOutgoingBitrate = (_getAvailableOutgoing = getAvailableOutgoingBitrateArrayFromStats(current)) !== null && _getAvailableOutgoing !== void 0 ? _getAvailableOutgoing : [];
    result.availableBitrate = min(currentAvailableOutgoingBitrate);
    result.queueDelay = 0;
    var currentRoundTripTimeArray = getPropertyFromStatsByTypeInArray(current, 'remote-inbound-rtp', 'roundTripTimeArray').flat();
    result.meanRoundTripTime = mean(currentRoundTripTimeArray) * 1000;
    result.maxRoundTripTime = max(currentRoundTripTimeArray) * 1000;
    var currentFractionLostArray = getPropertyFromStatsByTypeInArray(current, 'remote-inbound-rtp', 'fractionLostArray').flat();
    result.maxRemoteLossRate = max(currentFractionLostArray) * 100;
    result.meanRemoteLossRate = mean(currentFractionLostArray) * 100;
    var currentJitterArray = getPropertyFromStatsByTypeInArray(current, 'remote-inbound-rtp', 'jitterArray').flat();
    result.maxRemoteJitter = max(currentJitterArray) * 1000;
    result.meanRemoteJitter = mean(currentJitterArray) * 1000;
    var currentRtpPacketSizeArray = getPropertyFromStatsByTypeInArray(current, 'outbound-rtp', 'rtpPacketSizeArray').flat();
    result.mediaPacketSize = {
      meanRtpPacketSize: Math.round(mean(currentRtpPacketSizeArray)),
      maxRtpPacketSize: Math.round(max(currentRtpPacketSizeArray)),
      minRtpPacketSize: Math.round(min(currentRtpPacketSizeArray))
    };
    return result;
  }
  buildMqeIntervalStreamTransmitAudio(id) {
    var result = structuredClone(initialMqeIntervalStreamTransmitAudio);
    result.common = this.buildMqeIntervalStreamTransmitCommon(id);
    var current = this.currentIntervalStats;
    var currentLastUsedEffect = getPropertyFromStatsById(current, id, 'lastUsedEffect');
    if ((currentLastUsedEffect === null || currentLastUsedEffect === void 0 ? void 0 : currentLastUsedEffect.kind) === 'noise-reduction-effect') {
      result.backgroundNoiseReductionMode = NOISE_REDUCTION_MODE.LOW_POWER;
    } else {
      result.backgroundNoiseReductionMode = NOISE_REDUCTION_MODE.NONE;
    }
    return result;
  }
  buildMqeIntervalStreamTransmitVideo(id) {
    var _getPropertyFromStats36, _getPropertyFromStats37, _getPropertyFromStats38, _getPropertyFromStats39, _getPropertyFromStats40, _getPropertyFromStats41, _getPropertyFromStats42, _getPropertyFromStats43, _getPropertyFromStats44, _getH264ProfileFromSt2;
    var result = structuredClone(initialMqeIntervalStreamTransmitVideo);
    result.common = this.buildMqeIntervalStreamTransmitCommon(id);
    var current = this.currentIntervalStats;
    var previous = this.previousIntervalStats;
    var currentMaxFrameSizeHeightForMaxRequestedFrameSize = (_getPropertyFromStats36 = getPropertyFromStatsById(current, id, 'maxFrameSizeHeightForMaxRequestedFrameSize')) !== null && _getPropertyFromStats36 !== void 0 ? _getPropertyFromStats36 : 0;
    var currentMaxFrameSizeWidthForMaxRequestedFrameSize = (_getPropertyFromStats37 = getPropertyFromStatsById(current, id, 'maxFrameSizeWidthForMaxRequestedFrameSize')) !== null && _getPropertyFromStats37 !== void 0 ? _getPropertyFromStats37 : 0;
    result.transmittedFrameSize = pixelsToFrameSize(currentMaxFrameSizeWidthForMaxRequestedFrameSize, currentMaxFrameSizeHeightForMaxRequestedFrameSize);
    var currentMaxRequestedFrameSize = (_getPropertyFromStats38 = getPropertyFromStatsById(current, id, 'maxRequestedFrameSize')) !== null && _getPropertyFromStats38 !== void 0 ? _getPropertyFromStats38 : 0;
    result.requestedFrameSize = currentMaxRequestedFrameSize;
    result.transmittedHeight = currentMaxFrameSizeHeightForMaxRequestedFrameSize;
    result.transmittedWidth = currentMaxFrameSizeWidthForMaxRequestedFrameSize;
    var currentKeyFramesEncoded = (_getPropertyFromStats39 = getPropertyFromStatsById(current, id, 'keyFramesEncoded')) !== null && _getPropertyFromStats39 !== void 0 ? _getPropertyFromStats39 : 0;
    var previousKeyFramesEncoded = (_getPropertyFromStats40 = getPropertyFromStatsById(previous, id, 'keyFramesEncoded')) !== null && _getPropertyFromStats40 !== void 0 ? _getPropertyFromStats40 : 0;
    result.transmittedKeyFrames = currentKeyFramesEncoded - previousKeyFramesEncoded;
    var currentFirCount = (_getPropertyFromStats41 = getPropertyFromStatsById(current, id, 'firCount')) !== null && _getPropertyFromStats41 !== void 0 ? _getPropertyFromStats41 : 0;
    var previousFirCount = (_getPropertyFromStats42 = getPropertyFromStatsById(previous, id, 'firCount')) !== null && _getPropertyFromStats42 !== void 0 ? _getPropertyFromStats42 : 0;
    var currentPliCount = (_getPropertyFromStats43 = getPropertyFromStatsById(current, id, 'pliCount')) !== null && _getPropertyFromStats43 !== void 0 ? _getPropertyFromStats43 : 0;
    var previousPliCount = (_getPropertyFromStats44 = getPropertyFromStatsById(previous, id, 'pliCount')) !== null && _getPropertyFromStats44 !== void 0 ? _getPropertyFromStats44 : 0;
    result.requestedKeyFrames = currentFirCount - previousFirCount + (currentPliCount - previousPliCount);
    result.localConfigurationChanges = 0;
    var currentH264CodecProfile = (_getH264ProfileFromSt2 = getH264ProfileFromStatsByStreamStatsId(current, id)) !== null && _getH264ProfileFromSt2 !== void 0 ? _getH264ProfileFromSt2 : 'BP';
    result.h264CodecProfile = currentH264CodecProfile;
    var currentLastUsedEffect = getPropertyFromStatsById(current, id, 'lastUsedEffect');
    if ((currentLastUsedEffect === null || currentLastUsedEffect === void 0 ? void 0 : currentLastUsedEffect.kind) === 'virtual-background-effect' && 'virtualBackgroundMode' in currentLastUsedEffect) {
      if (currentLastUsedEffect.virtualBackgroundMode === 'BLUR') {
        result.backgroundAugmentationType = VIRTUAL_BACKGROUND_MODE.BLUR;
      } else if (currentLastUsedEffect.virtualBackgroundMode === 'IMAGE') {
        result.backgroundAugmentationType = VIRTUAL_BACKGROUND_MODE.REPLACE_IMAGE;
      } else if (currentLastUsedEffect.virtualBackgroundMode === 'VIDEO') {
        result.backgroundAugmentationType = VIRTUAL_BACKGROUND_MODE.REPLACE_VIDEO;
      } else {
        result.backgroundAugmentationType = VIRTUAL_BACKGROUND_MODE.NONE;
      }
    } else {
      result.backgroundAugmentationType = VIRTUAL_BACKGROUND_MODE.NONE;
    }
    return result;
  }
  buildMqeIntervalStreamTransmitCommon(id) {
    var _getPropertyFromStats45, _getPropertyFromStats46, _getPropertyFromStats47, _getPropertyFromStats48, _getPropertyFromStats51, _getPropertyFromStats52, _getPropertyFromStats53, _getPropertyFromStats54, _getCodecFromStatsByS2;
    var result = structuredClone(initialMqeIntervalStreamTransmitCommon);
    var current = this.currentIntervalStats;
    var previous = this.previousIntervalStats;
    var currentPacketsSent = (_getPropertyFromStats45 = getPropertyFromStatsById(current, id, 'packetsSent')) !== null && _getPropertyFromStats45 !== void 0 ? _getPropertyFromStats45 : 0;
    var previousPacketsSent = (_getPropertyFromStats46 = getPropertyFromStatsById(previous, id, 'packetsSent')) !== null && _getPropertyFromStats46 !== void 0 ? _getPropertyFromStats46 : 0;
    var currentRetransmittedPacketsSent = (_getPropertyFromStats47 = getPropertyFromStatsById(current, id, 'retransmittedPacketsSent')) !== null && _getPropertyFromStats47 !== void 0 ? _getPropertyFromStats47 : 0;
    var previousRetransmittedPacketsSent = (_getPropertyFromStats48 = getPropertyFromStatsById(previous, id, 'retransmittedPacketsSent')) !== null && _getPropertyFromStats48 !== void 0 ? _getPropertyFromStats48 : 0;
    result.rtpPackets = currentPacketsSent - previousPacketsSent - (currentRetransmittedPacketsSent - previousRetransmittedPacketsSent);
    if (this.mediaKind === 'video') {
      var _getPropertyFromStats49, _getPropertyFromStats50;
      var currentMaxTransmittedFrameRateForMaxRequestedFrameSize = (_getPropertyFromStats49 = getPropertyFromStatsById(current, id, 'maxTransmittedFrameRateForMaxRequestedFrameSize')) !== null && _getPropertyFromStats49 !== void 0 ? _getPropertyFromStats49 : 0;
      result.transmittedFrameRate = currentMaxTransmittedFrameRateForMaxRequestedFrameSize;
      var currentMaxRequestedFrameRateForMaxRequestedFrameSize = (_getPropertyFromStats50 = getPropertyFromStatsById(current, id, 'maxRequestedFrameRateForMaxRequestedFrameSize')) !== null && _getPropertyFromStats50 !== void 0 ? _getPropertyFromStats50 : 0;
      result.requestedFrames = currentMaxRequestedFrameRateForMaxRequestedFrameSize;
    }
    var currentBytesSent = (_getPropertyFromStats51 = getPropertyFromStatsById(current, id, 'bytesSent')) !== null && _getPropertyFromStats51 !== void 0 ? _getPropertyFromStats51 : 0;
    var previousBytesSent = (_getPropertyFromStats52 = getPropertyFromStatsById(previous, id, 'bytesSent')) !== null && _getPropertyFromStats52 !== void 0 ? _getPropertyFromStats52 : 0;
    var currentRetransmittedBytesSent = (_getPropertyFromStats53 = getPropertyFromStatsById(current, id, 'retransmittedBytesSent')) !== null && _getPropertyFromStats53 !== void 0 ? _getPropertyFromStats53 : 0;
    var previousRetransmittedBytesSent = (_getPropertyFromStats54 = getPropertyFromStatsById(previous, id, 'retransmittedBytesSent')) !== null && _getPropertyFromStats54 !== void 0 ? _getPropertyFromStats54 : 0;
    result.transmittedBitrate = bytesToBitrate(currentBytesSent - previousBytesSent - (currentRetransmittedBytesSent - previousRetransmittedBytesSent), MQE_INTERVAL);
    if (this.mediaKind === 'audio') {
      var _getPropertyFromStats55;
      var currentRequestedBitrateArray = (_getPropertyFromStats55 = getPropertyFromStatsById(current, id, 'requestedBitrateArray')) !== null && _getPropertyFromStats55 !== void 0 ? _getPropertyFromStats55 : [];
      result.requestedBitrate = max(currentRequestedBitrateArray);
    } else {
      var _getPropertyFromStats56;
      var currentMaxRequestedBitrateForMaxRequestedFrameSize = (_getPropertyFromStats56 = getPropertyFromStatsById(current, id, 'maxRequestedBitrateForMaxRequestedFrameSize')) !== null && _getPropertyFromStats56 !== void 0 ? _getPropertyFromStats56 : 0;
      result.requestedBitrate = currentMaxRequestedBitrateForMaxRequestedFrameSize;
    }
    var currentCodec = (_getCodecFromStatsByS2 = getCodecFromStatsByStreamStatsId(current, id)) !== null && _getCodecFromStatsByS2 !== void 0 ? _getCodecFromStatsByS2 : this.mediaKind === 'audio' ? 'opus' : 'H264';
    result.codec = currentCodec;
    var currentCsi = getPropertyFromStatsById(current, id, 'csi');
    if (currentCsi) {
      result.csi = [currentCsi];
    }
    return result;
  }
}

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class MqeIntervalSessionReceiveAudioBuilder extends MqeBuilder {
  constructor(params) {
    super(_objectSpread$4(_objectSpread$4({}, params), {}, {
      direction: 'recvonly',
      mediaKind: 'audio'
    }));
  }
  buildMqe() {
    var result = {
      common: this.buildMqeIntervalSessionReceive(),
      streams: []
    };
    this.currentIntervalStats.forEach((stats, key) => {
      if (stats.type === 'inbound-rtp' && (!this.multistreamEnabled || isStreamRequested(stats))) {
        result.streams.push(this.buildMqeIntervalStreamReceiveAudio(key));
      }
    });
    return result;
  }
}

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class MqeIntervalSessionReceiveVideoBuilder extends MqeBuilder {
  constructor(params) {
    super(_objectSpread$3(_objectSpread$3({}, params), {}, {
      direction: 'recvonly',
      mediaKind: 'video'
    }));
  }
  buildMqe() {
    var result = {
      common: this.buildMqeIntervalSessionReceive(),
      streams: []
    };
    this.currentIntervalStats.forEach((stats, key) => {
      if (stats.type === 'inbound-rtp' && (!this.multistreamEnabled || isStreamRequested(stats) && isStreamLive(stats))) {
        result.streams.push(this.buildMqeIntervalStreamReceiveVideo(key));
      }
    });
    return result;
  }
}

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class MqeIntervalSessionTransmitAudioBuilder extends MqeBuilder {
  constructor(params) {
    super(_objectSpread$2(_objectSpread$2({}, params), {}, {
      direction: 'sendonly',
      mediaKind: 'audio'
    }));
  }
  buildMqe() {
    var result = {
      common: this.buildMqeIntervalSessionTransmit(),
      streams: []
    };
    this.currentIntervalStats.forEach((stats, key) => {
      if (stats.type === 'outbound-rtp' && (!this.multistreamEnabled || isStreamRequested(stats))) {
        result.streams.push(this.buildMqeIntervalStreamTransmitAudio(key));
      }
    });
    return result;
  }
}

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class MqeIntervalSessionTransmitVideoBuilder extends MqeBuilder {
  constructor(params) {
    super(_objectSpread$1(_objectSpread$1({}, params), {}, {
      direction: 'sendonly',
      mediaKind: 'video'
    }));
  }
  buildMqe() {
    var result = {
      common: this.buildMqeIntervalSessionTransmit(),
      streams: []
    };
    this.currentIntervalStats.forEach((stats, key) => {
      if (stats.type === 'outbound-rtp' && (!this.multistreamEnabled || isStreamRequested(stats) && isStreamLive(stats))) {
        result.streams.push(this.buildMqeIntervalStreamTransmitVideo(key));
      }
    });
    return result;
  }
}

exports.StatsAnalyzerEventNames = void 0;
(function (StatsAnalyzerEventNames) {
  StatsAnalyzerEventNames["MEDIA_QUALITY"] = "MEDIA_QUALITY";
  StatsAnalyzerEventNames["LOCAL_MEDIA_STARTED"] = "LOCAL_MEDIA_STARTED";
  StatsAnalyzerEventNames["LOCAL_MEDIA_STOPPED"] = "LOCAL_MEDIA_STOPPED";
  StatsAnalyzerEventNames["REMOTE_MEDIA_STARTED"] = "REMOTE_MEDIA_STARTED";
  StatsAnalyzerEventNames["REMOTE_MEDIA_STOPPED"] = "REMOTE_MEDIA_STOPPED";
})(exports.StatsAnalyzerEventNames || (exports.StatsAnalyzerEventNames = {}));
exports.NetworkQualityEventNames = void 0;
(function (NetworkQualityEventNames) {
  NetworkQualityEventNames["NETWORK_QUALITY"] = "NETWORK_QUALITY";
})(exports.NetworkQualityEventNames || (exports.NetworkQualityEventNames = {}));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class StatsAnalyzer extends EventEmitter$5 {
  constructor(_ref) {
    var {
      config,
      networkQualityMonitor,
      isMultistream = false
    } = _ref;
    super();
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "lastEmittedStartStopEvents", {});
    _defineProperty(this, "previousTransceiverStats", void 0);
    _defineProperty(this, "meetingMediaStatus", void 0);
    _defineProperty(this, "statsInterval", void 0);
    _defineProperty(this, "mqeInterval", void 0);
    _defineProperty(this, "mqeSentCount", 0);
    _defineProperty(this, "networkQualityMonitor", void 0);
    _defineProperty(this, "mediaConnection", null);
    _defineProperty(this, "statsStarted", false);
    _defineProperty(this, "mqeIntervalSessionReceiveAudioMainBuilder", void 0);
    _defineProperty(this, "mqeIntervalSessionReceiveAudioSlidesBuilder", void 0);
    _defineProperty(this, "mqeIntervalSessionTransmitAudioMainBuilder", void 0);
    _defineProperty(this, "mqeIntervalSessionTransmitAudioSlidesBuilder", void 0);
    _defineProperty(this, "mqeIntervalSessionReceiveVideoMainBuilder", void 0);
    _defineProperty(this, "mqeIntervalSessionReceiveVideoSlidesBuilder", void 0);
    _defineProperty(this, "mqeIntervalSessionTransmitVideoMainBuilder", void 0);
    _defineProperty(this, "mqeIntervalSessionTransmitVideoSlidesBuilder", void 0);
    _defineProperty(this, "emitStartStopEvents", (mediaType, previousValue, currentValue, isLocal) => {
      var _this$lastEmittedStar, _this$lastEmittedStar2;
      if (previousValue === undefined) previousValue = 0;
      if (currentValue === undefined) currentValue = 0;
      if (!this.lastEmittedStartStopEvents[mediaType]) {
        this.lastEmittedStartStopEvents[mediaType] = {};
      }
      var lastEmittedEvent = isLocal ? (_this$lastEmittedStar = this.lastEmittedStartStopEvents[mediaType]) === null || _this$lastEmittedStar === void 0 ? void 0 : _this$lastEmittedStar.local : (_this$lastEmittedStar2 = this.lastEmittedStartStopEvents[mediaType]) === null || _this$lastEmittedStar2 === void 0 ? void 0 : _this$lastEmittedStar2.remote;
      var newEvent;
      if (currentValue - previousValue > 0) {
        newEvent = isLocal ? exports.StatsAnalyzerEventNames.LOCAL_MEDIA_STARTED : exports.StatsAnalyzerEventNames.REMOTE_MEDIA_STARTED;
      } else if (currentValue === previousValue && (lastEmittedEvent === exports.StatsAnalyzerEventNames.LOCAL_MEDIA_STARTED || lastEmittedEvent === exports.StatsAnalyzerEventNames.REMOTE_MEDIA_STARTED)) {
        newEvent = isLocal ? exports.StatsAnalyzerEventNames.LOCAL_MEDIA_STOPPED : exports.StatsAnalyzerEventNames.REMOTE_MEDIA_STOPPED;
      }
      if (newEvent && lastEmittedEvent !== newEvent) {
        var emittedEvent = this.lastEmittedStartStopEvents[mediaType];
        if (isLocal) {
          emittedEvent.local = newEvent;
        } else {
          emittedEvent.remote = newEvent;
        }
        this.emit(newEvent, {
          mediaType
        });
      }
    });
    this.config = config;
    this.networkQualityMonitor = networkQualityMonitor;
    this.mqeIntervalSessionReceiveAudioMainBuilder = new MqeIntervalSessionReceiveAudioBuilder({
      isMain: true,
      multistreamEnabled: isMultistream
    });
    this.mqeIntervalSessionReceiveAudioSlidesBuilder = new MqeIntervalSessionReceiveAudioBuilder({
      isMain: false,
      multistreamEnabled: isMultistream
    });
    this.mqeIntervalSessionTransmitAudioMainBuilder = new MqeIntervalSessionTransmitAudioBuilder({
      isMain: true,
      multistreamEnabled: isMultistream
    });
    this.mqeIntervalSessionTransmitAudioSlidesBuilder = new MqeIntervalSessionTransmitAudioBuilder({
      isMain: false,
      multistreamEnabled: isMultistream
    });
    this.mqeIntervalSessionReceiveVideoMainBuilder = new MqeIntervalSessionReceiveVideoBuilder({
      isMain: true,
      multistreamEnabled: isMultistream
    });
    this.mqeIntervalSessionReceiveVideoSlidesBuilder = new MqeIntervalSessionReceiveVideoBuilder({
      isMain: false,
      multistreamEnabled: isMultistream
    });
    this.mqeIntervalSessionTransmitVideoMainBuilder = new MqeIntervalSessionTransmitVideoBuilder({
      isMain: true,
      multistreamEnabled: isMultistream
    });
    this.mqeIntervalSessionTransmitVideoSlidesBuilder = new MqeIntervalSessionTransmitVideoBuilder({
      isMain: false,
      multistreamEnabled: isMultistream
    });
  }
  get builders() {
    return [this.mqeIntervalSessionReceiveAudioMainBuilder, this.mqeIntervalSessionReceiveAudioSlidesBuilder, this.mqeIntervalSessionTransmitAudioMainBuilder, this.mqeIntervalSessionTransmitAudioSlidesBuilder, this.mqeIntervalSessionReceiveVideoMainBuilder, this.mqeIntervalSessionReceiveVideoSlidesBuilder, this.mqeIntervalSessionTransmitVideoMainBuilder, this.mqeIntervalSessionTransmitVideoSlidesBuilder];
  }
  getLocalIpAddress() {
    for (var builder of this.builders) {
      var selectedLocalCandidateId = getSelectedCandidateIdFromStats(builder.currentIntervalStats, 'local');
      if (selectedLocalCandidateId) {
        var candidateType = getPropertyFromStatsById(builder.currentIntervalStats, selectedLocalCandidateId, 'candidateType');
        var address = getPropertyFromStatsById(builder.currentIntervalStats, selectedLocalCandidateId, 'address');
        if (candidateType === 'host') {
          return address;
        }
        if (candidateType === 'prflx') {
          var relayProtocol = getPropertyFromStatsById(builder.currentIntervalStats, selectedLocalCandidateId, 'relayProtocol');
          if (!relayProtocol) {
            var relatedAddress = getPropertyFromStatsById(builder.currentIntervalStats, selectedLocalCandidateId, 'relatedAddress');
            return relatedAddress;
          }
          return address;
        }
      }
    }
    return undefined;
  }
  getNetworkType() {
    for (var builder of this.builders) {
      var selectedLocalCandidateId = getSelectedCandidateIdFromStats(builder.currentIntervalStats, 'local');
      if (selectedLocalCandidateId) {
        var networkType = getPropertyFromStatsById(builder.currentIntervalStats, selectedLocalCandidateId, 'networkType');
        return networkType;
      }
    }
    return undefined;
  }
  get shareVideoEncoderImplementation() {
    var encoderImplementation = getPropertyFromStatsByType(this.mqeIntervalSessionTransmitVideoSlidesBuilder.currentIntervalStats, 'outbound-rtp', 'encoderImplementation');
    return encoderImplementation;
  }
  get peerReflexiveIp() {
    for (var builder of this.builders) {
      var peerReflexiveCandidateStats = Array.from(builder.currentIntervalStats.values()).find(stats => stats.type === 'local-candidate' && stats.candidateType === 'prflx');
      if (peerReflexiveCandidateStats) {
        return peerReflexiveCandidateStats.address;
      }
    }
    return undefined;
  }
  get remoteMediaIp() {
    for (var builder of this.builders) {
      var selectedRemoteCandidateId = getSelectedCandidateIdFromStats(builder.currentIntervalStats, 'remote');
      if (selectedRemoteCandidateId) {
        var remoteMediaIp = getPropertyFromStatsById(builder.currentIntervalStats, selectedRemoteCandidateId, 'address');
        return remoteMediaIp;
      }
    }
    return undefined;
  }
  updateMediaStatus(status) {
    var _this$meetingMediaSta, _this$meetingMediaSta2;
    this.meetingMediaStatus = {
      actual: _objectSpread(_objectSpread({}, (_this$meetingMediaSta = this.meetingMediaStatus) === null || _this$meetingMediaSta === void 0 ? void 0 : _this$meetingMediaSta.actual), status === null || status === void 0 ? void 0 : status.actual),
      expected: _objectSpread(_objectSpread({}, (_this$meetingMediaSta2 = this.meetingMediaStatus) === null || _this$meetingMediaSta2 === void 0 ? void 0 : _this$meetingMediaSta2.expected), status === null || status === void 0 ? void 0 : status.expected)
    };
    getLogger().info("StatsAnalyzer#updateMediaStatus --> Meeting media status: ".concat(JSON.stringify(this.meetingMediaStatus)));
  }
  sendMqeData() {
    var _anonymizeIP, _this$peerReflexiveIp, _this$remoteMediaIp, _getMediaSourceTrackL, _getMediaSourceTrackL2;
    getLogger().debug('StatsAnalyzer#sendMqeData --> Building MQE...');
    var mqeInterval = structuredClone(initialMqeInterval);
    mqeInterval.intervalMetadata = {
      maskedPeerReflexiveIP: (_anonymizeIP = ipAnonymize((_this$peerReflexiveIp = this.peerReflexiveIp) !== null && _this$peerReflexiveIp !== void 0 ? _this$peerReflexiveIp : DEFAULT_IP, 28, 96)) !== null && _anonymizeIP !== void 0 ? _anonymizeIP : DEFAULT_IP,
      remoteMediaIP: (_this$remoteMediaIp = this.remoteMediaIp) !== null && _this$remoteMediaIp !== void 0 ? _this$remoteMediaIp : DEFAULT_IP,
      peripherals: [{
        name: 'speaker',
        information: UNKNOWN
      }, {
        name: 'microphone',
        information: (_getMediaSourceTrackL = getMediaSourceTrackLabelFromStats(this.mqeIntervalSessionTransmitAudioMainBuilder.currentIntervalStats)) !== null && _getMediaSourceTrackL !== void 0 ? _getMediaSourceTrackL : UNKNOWN
      }, {
        name: 'camera',
        information: (_getMediaSourceTrackL2 = getMediaSourceTrackLabelFromStats(this.mqeIntervalSessionTransmitVideoMainBuilder.currentIntervalStats)) !== null && _getMediaSourceTrackL2 !== void 0 ? _getMediaSourceTrackL2 : UNKNOWN
      }],
      cpuInfo: {
        description: 'NA',
        numberOfCores: CpuInfo.getNumLogicalCores() || 1,
        architecture: UNKNOWN
      },
      screenResolution: window.screen.width * window.screen.height / 256,
      screenWidth: window.screen.width,
      screenHeight: window.screen.height,
      appWindowSize: window.innerWidth * window.innerHeight / 256,
      appWindowWidth: window.innerWidth,
      appWindowHeight: window.innerHeight
    };
    mqeInterval.audioReceive.push(this.mqeIntervalSessionReceiveAudioMainBuilder.buildMqe());
    mqeInterval.audioReceive.push(this.mqeIntervalSessionReceiveAudioSlidesBuilder.buildMqe());
    mqeInterval.audioTransmit.push(this.mqeIntervalSessionTransmitAudioMainBuilder.buildMqe());
    mqeInterval.audioTransmit.push(this.mqeIntervalSessionTransmitAudioSlidesBuilder.buildMqe());
    mqeInterval.videoReceive.push(this.mqeIntervalSessionReceiveVideoMainBuilder.buildMqe());
    mqeInterval.videoReceive.push(this.mqeIntervalSessionReceiveVideoSlidesBuilder.buildMqe());
    mqeInterval.videoTransmit.push(this.mqeIntervalSessionTransmitVideoMainBuilder.buildMqe());
    mqeInterval.videoTransmit.push(this.mqeIntervalSessionTransmitVideoSlidesBuilder.buildMqe());
    this.builders.forEach(builder => builder.resetForNextInterval());
    mqeInterval.intervalNumber = this.mqeSentCount;
    this.mqeSentCount += 1;
    getLogger().debug('StatsAnalyzer#sendMqeData --> Sending MQE...');
    this.emit(exports.StatsAnalyzerEventNames.MEDIA_QUALITY, {
      data: mqeInterval
    });
  }
  startAnalyzer(mediaConnection) {
    var _this = this;
    return _asyncToGenerator(function* () {
      if (_this.statsStarted) {
        getLogger().info('StatsAnalyzer#startAnalyzer --> StatsAnalyzer already started.');
        return;
      }
      _this.statsStarted = true;
      _this.mediaConnection = mediaConnection;
      yield _this.getStatsAndUpdate();
      _this.sendMqeData();
      _this.statsInterval = setInterval(() => {
        _this.getStatsAndUpdate();
      }, _this.config.analyzerInterval);
      _this.mqeInterval = setInterval(() => {
        _this.sendMqeData();
      }, MQE_INTERVAL);
    })();
  }
  stopAnalyzer() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      var sendOneLastMqe = _this2.mqeInterval && _this2.statsInterval;
      if (_this2.statsInterval) {
        clearInterval(_this2.statsInterval);
        _this2.statsInterval = undefined;
      }
      if (_this2.mqeInterval) {
        clearInterval(_this2.mqeInterval);
        _this2.mqeInterval = undefined;
      }
      _this2.statsStarted = false;
      if (sendOneLastMqe) {
        getLogger().info('StatsAnalyzer#stopAnalyzer --> Sending one last MQE...');
        yield _this2.getStatsAndUpdate();
        _this2.sendMqeData();
        _this2.mediaConnection = null;
        _this2.builders.forEach(builder => builder.reset());
      }
    })();
  }
  getStatsAndUpdate() {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      if (!_this3.mediaConnection) {
        return;
      }
      if (_this3.mediaConnection && _this3.mediaConnection.getConnectionState() === exports.ConnectionState.Failed) {
        getLogger().info('StatsAnalyzer#getStatsAndUpdate --> Media connection is in failed state.');
        return;
      }
      getLogger().debug('StatsAnalyzer#getStatsAndUpdate --> Collecting stats...');
      var transceiverStats = yield _this3.mediaConnection.getTransceiverStats();
      _this3.mqeIntervalSessionReceiveAudioMainBuilder.updateCurrentIntervalStats(convertToStatsMap(transceiverStats.audio.receivers));
      _this3.mqeIntervalSessionReceiveAudioSlidesBuilder.updateCurrentIntervalStats(convertToStatsMap(transceiverStats.screenShareAudio.receivers));
      _this3.mqeIntervalSessionTransmitAudioMainBuilder.updateCurrentIntervalStats(convertToStatsMap(transceiverStats.audio.senders));
      _this3.mqeIntervalSessionTransmitAudioSlidesBuilder.updateCurrentIntervalStats(convertToStatsMap(transceiverStats.screenShareAudio.senders));
      _this3.mqeIntervalSessionReceiveVideoMainBuilder.updateCurrentIntervalStats(convertToStatsMap(transceiverStats.video.receivers));
      _this3.mqeIntervalSessionReceiveVideoSlidesBuilder.updateCurrentIntervalStats(convertToStatsMap(transceiverStats.screenShareVideo.receivers));
      _this3.mqeIntervalSessionTransmitVideoMainBuilder.updateCurrentIntervalStats(convertToStatsMap(transceiverStats.video.senders));
      _this3.mqeIntervalSessionTransmitVideoSlidesBuilder.updateCurrentIntervalStats(convertToStatsMap(transceiverStats.screenShareVideo.senders));
      _this3.monitorStats(transceiverStats);
      getLogger().debug('StatsAnalyzer#getStatsAndUpdate --> Finished collecting stats.');
    })();
  }
  monitorStats(transceiverStats) {
    var _this$meetingMediaSta3, _this$meetingMediaSta4, _this$meetingMediaSta5, _this$meetingMediaSta6, _this$meetingMediaSta7, _this$previousTransce, _this$previousTransce2, _this$previousTransce3, _this$previousTransce4, _this$previousTransce5, _this$previousTransce6, _this$previousTransce7, _this$previousTransce8, _this$previousTransce9, _this$previousTransce10, _this$previousTransce11, _this$previousTransce12;
    var emitNetworkQualityEvents = (mediaType, intervalStats) => {
      var roundTripTimeArray = getPropertyFromStatsByTypeInArray(intervalStats, 'remote-inbound-rtp', 'roundTripTime');
      var jitterArray = getPropertyFromStatsByTypeInArray(intervalStats, 'remote-inbound-rtp', 'jitter');
      var fractionLostArray = getPropertyFromStatsByTypeInArray(intervalStats, 'remote-inbound-rtp', 'fractionLost');
      this.networkQualityMonitor.determineUplinkNetworkQuality({
        mediaType,
        roundTripTime: mean(roundTripTimeArray),
        jitter: mean(jitterArray),
        fractionLost: mean(fractionLostArray)
      });
    };
    if ((_this$meetingMediaSta3 = this.meetingMediaStatus) !== null && _this$meetingMediaSta3 !== void 0 && _this$meetingMediaSta3.expected.sendAudio) {
      var current = convertToStatsMap(transceiverStats.audio.senders);
      if (this.previousTransceiverStats) {
        var previous = convertToStatsMap(this.previousTransceiverStats.audio.senders);
        var currentPacketsSent = getSumFromStatsByType(current, 'outbound-rtp', 'packetsSent');
        var previousPacketsSent = getSumFromStatsByType(previous, 'outbound-rtp', 'packetsSent');
        if (currentPacketsSent === previousPacketsSent) {
          getLogger().info("StatsAnalyzer#monitorStats --> No audio packets sent, last packets sent count: ".concat(currentPacketsSent, "."));
        }
        var totalAudioEnergyExists = getPropertyFromStatsByType(current, 'media-source', 'totalAudioEnergy') !== undefined;
        if (totalAudioEnergyExists) {
          var currentTotalAudioEnergy = getSumFromStatsByType(current, 'media-source', 'totalAudioEnergy');
          var previousTotalAudioEnergy = getSumFromStatsByType(previous, 'media-source', 'totalAudioEnergy');
          if (currentTotalAudioEnergy === previousTotalAudioEnergy) {
            getLogger().info("StatsAnalyzer#monitorStats --> No audio energy, last total audio energy: ".concat(currentTotalAudioEnergy, "."));
          }
        }
        var audioLevelExists = getPropertyFromStatsByType(current, 'media-source', 'audioLevel') !== undefined;
        if (audioLevelExists) {
          var currentAudioLevel = getSumFromStatsByType(current, 'media-source', 'audioLevel');
          if (currentAudioLevel === 0) {
            getLogger().info("StatsAnalyzer#monitorStats --> Audio level is 0.");
          }
        }
      }
      emitNetworkQualityEvents('audio', current);
    }
    if ((_this$meetingMediaSta4 = this.meetingMediaStatus) !== null && _this$meetingMediaSta4 !== void 0 && _this$meetingMediaSta4.expected.sendVideo) {
      var _current = convertToStatsMap(transceiverStats.video.senders);
      if (this.previousTransceiverStats) {
        var _previous = convertToStatsMap(this.previousTransceiverStats.video.senders);
        var _currentPacketsSent = getSumFromStatsByType(_current, 'outbound-rtp', 'packetsSent');
        var _previousPacketsSent = getSumFromStatsByType(_previous, 'outbound-rtp', 'packetsSent');
        if (_currentPacketsSent === _previousPacketsSent) {
          getLogger().info("StatsAnalyzer#monitorStats --> No video packets sent, last packets sent count: ".concat(_currentPacketsSent, "."));
        }
        var currentFramesEncoded = getSumFromStatsByType(_current, 'outbound-rtp', 'framesEncoded');
        var previousFramesEncoded = getSumFromStatsByType(_previous, 'outbound-rtp', 'framesEncoded');
        if (currentFramesEncoded === previousFramesEncoded) {
          getLogger().info("StatsAnalyzer#monitorStats --> No video frames encoded, last frames encoded count: ".concat(currentFramesEncoded, "."));
        }
        var currentFramesSent = getSumFromStatsByType(_current, 'outbound-rtp', 'framesSent');
        var previousFramesSent = getSumFromStatsByType(_previous, 'outbound-rtp', 'framesSent');
        if (currentFramesSent === previousFramesSent) {
          getLogger().info("StatsAnalyzer#monitorStats --> No video frames sent, last frames sent count: ".concat(currentFramesSent, "."));
        }
      }
      emitNetworkQualityEvents('video', _current);
    }
    if ((_this$meetingMediaSta5 = this.meetingMediaStatus) !== null && _this$meetingMediaSta5 !== void 0 && _this$meetingMediaSta5.expected.receiveVideo) {
      var _current2 = convertToStatsMap(transceiverStats.video.receivers);
      if (this.previousTransceiverStats) {
        var currentSourceStateArray = getPropertyFromStatsByTypeInArray(_current2, 'inbound-rtp', 'sourceState');
        if (currentSourceStateArray.includes('live')) {
          var _previous2 = convertToStatsMap(this.previousTransceiverStats.video.receivers);
          var currentPacketsReceived = getSumFromStatsByType(_current2, 'inbound-rtp', 'packetsReceived');
          var previousPacketsReceived = getSumFromStatsByType(_previous2, 'inbound-rtp', 'packetsReceived');
          if (currentPacketsReceived === previousPacketsReceived) {
            getLogger().info("StatsAnalyzer#monitorStats --> No video packets received, last packets received count: ".concat(currentPacketsReceived, "."));
          }
          var currentFramesDecoded = getSumFromStatsByType(_current2, 'inbound-rtp', 'framesDecoded');
          var previousFramesDecoded = getSumFromStatsByType(_previous2, 'inbound-rtp', 'framesDecoded');
          if (currentFramesDecoded === previousFramesDecoded) {
            getLogger().info("StatsAnalyzer#monitorStats --> No video frames decoded, last frames decoded count: ".concat(currentFramesDecoded, "."));
          }
          var currentFramesReceived = getSumFromStatsByType(_current2, 'inbound-rtp', 'framesReceived');
          var previousFramesReceived = getSumFromStatsByType(_previous2, 'inbound-rtp', 'framesReceived');
          if (currentFramesReceived === previousFramesReceived) {
            getLogger().info("StatsAnalyzer#monitorStats --> No video frames received, last frames received count: ".concat(currentFramesReceived, "."));
          }
          var currentFramesDropped = getSumFromStatsByType(_current2, 'inbound-rtp', 'framesDropped');
          var previousFramesDropped = getSumFromStatsByType(_previous2, 'inbound-rtp', 'framesDropped');
          if (currentFramesDropped - previousFramesDropped > 10) {
            getLogger().info("StatsAnalyzer#monitorStats --> Too many video frames dropped, total frames dropped count: ".concat(currentFramesDropped, "."));
          }
        }
      }
    }
    if ((_this$meetingMediaSta6 = this.meetingMediaStatus) !== null && _this$meetingMediaSta6 !== void 0 && _this$meetingMediaSta6.expected.sendShare) {
      var _current3 = convertToStatsMap(transceiverStats.screenShareVideo.senders);
      if (this.previousTransceiverStats) {
        var _previous3 = convertToStatsMap(this.previousTransceiverStats.screenShareVideo.senders);
        var _currentPacketsSent2 = getSumFromStatsByType(_current3, 'outbound-rtp', 'packetsSent');
        var _previousPacketsSent2 = getSumFromStatsByType(_previous3, 'outbound-rtp', 'packetsSent');
        if (_currentPacketsSent2 === _previousPacketsSent2) {
          getLogger().info("StatsAnalyzer#monitorStats --> No share packets sent, last packets sent count: ".concat(_currentPacketsSent2, "."));
        }
        var _currentFramesEncoded = getSumFromStatsByType(_current3, 'outbound-rtp', 'framesEncoded');
        var _previousFramesEncoded = getSumFromStatsByType(_previous3, 'outbound-rtp', 'framesEncoded');
        if (_currentFramesEncoded === _previousFramesEncoded) {
          getLogger().info("StatsAnalyzer#monitorStats --> No share frames encoded, last frames encoded count: ".concat(_currentFramesEncoded, "."));
        }
        var _currentFramesSent = getSumFromStatsByType(_current3, 'outbound-rtp', 'framesSent');
        var _previousFramesSent = getSumFromStatsByType(_previous3, 'outbound-rtp', 'framesSent');
        if (_currentFramesSent === _previousFramesSent) {
          getLogger().info("StatsAnalyzer#monitorStats --> No share frames sent, last frames sent count: ".concat(_currentFramesSent, "."));
        }
      }
      emitNetworkQualityEvents('share', _current3);
    }
    if ((_this$meetingMediaSta7 = this.meetingMediaStatus) !== null && _this$meetingMediaSta7 !== void 0 && _this$meetingMediaSta7.expected.receiveShare) {
      var _current4 = convertToStatsMap(transceiverStats.screenShareVideo.receivers);
      if (this.previousTransceiverStats) {
        var _currentSourceStateArray = getPropertyFromStatsByTypeInArray(_current4, 'inbound-rtp', 'sourceState');
        if (_currentSourceStateArray.includes('live')) {
          var _previous4 = convertToStatsMap(this.previousTransceiverStats.screenShareVideo.receivers);
          var _currentPacketsReceived = getSumFromStatsByType(_current4, 'inbound-rtp', 'packetsReceived');
          var _previousPacketsReceived = getSumFromStatsByType(_previous4, 'inbound-rtp', 'packetsReceived');
          if (_currentPacketsReceived === _previousPacketsReceived) {
            getLogger().info("StatsAnalyzer#monitorStats --> No share packets received, last packets received count: ".concat(_currentPacketsReceived, "."));
          }
          var _currentFramesDecoded = getSumFromStatsByType(_current4, 'inbound-rtp', 'framesDecoded');
          var _previousFramesDecoded = getSumFromStatsByType(_previous4, 'inbound-rtp', 'framesDecoded');
          if (_currentFramesDecoded === _previousFramesDecoded) {
            getLogger().info("StatsAnalyzer#monitorStats --> No share frames decoded, last frames decoded count: ".concat(_currentFramesDecoded, "."));
          }
          var _currentFramesReceived = getSumFromStatsByType(_current4, 'inbound-rtp', 'framesReceived');
          var _previousFramesReceived = getSumFromStatsByType(_previous4, 'inbound-rtp', 'framesReceived');
          if (_currentFramesReceived === _previousFramesReceived) {
            getLogger().info("StatsAnalyzer#monitorStats --> No share frames received, last frames received count: ".concat(_currentFramesReceived, "."));
          }
          var _currentFramesDropped = getSumFromStatsByType(_current4, 'inbound-rtp', 'framesDropped');
          var _previousFramesDropped = getSumFromStatsByType(_previous4, 'inbound-rtp', 'framesDropped');
          if (_currentFramesDropped - _previousFramesDropped > 10) {
            getLogger().info("StatsAnalyzer#monitorStats --> Too many share frames dropped, total frames dropped count: ".concat(_currentFramesDropped, "."));
          }
        }
      }
    }
    this.emitStartStopEvents('audio', getSumFromStatsByType(convertToStatsMap((_this$previousTransce = (_this$previousTransce2 = this.previousTransceiverStats) === null || _this$previousTransce2 === void 0 ? void 0 : _this$previousTransce2.audio.senders) !== null && _this$previousTransce !== void 0 ? _this$previousTransce : []), 'outbound-rtp', 'packetsSent'), getSumFromStatsByType(convertToStatsMap(transceiverStats.audio.senders), 'outbound-rtp', 'packetsSent'), true);
    this.emitStartStopEvents('audio', getSumFromStatsByType(convertToStatsMap((_this$previousTransce3 = (_this$previousTransce4 = this.previousTransceiverStats) === null || _this$previousTransce4 === void 0 ? void 0 : _this$previousTransce4.audio.receivers) !== null && _this$previousTransce3 !== void 0 ? _this$previousTransce3 : []), 'inbound-rtp', 'packetsReceived'), getSumFromStatsByType(convertToStatsMap(transceiverStats.audio.receivers), 'inbound-rtp', 'packetsReceived'), false);
    this.emitStartStopEvents('video', getSumFromStatsByType(convertToStatsMap((_this$previousTransce5 = (_this$previousTransce6 = this.previousTransceiverStats) === null || _this$previousTransce6 === void 0 ? void 0 : _this$previousTransce6.video.senders) !== null && _this$previousTransce5 !== void 0 ? _this$previousTransce5 : []), 'outbound-rtp', 'framesSent'), getSumFromStatsByType(convertToStatsMap(transceiverStats.video.senders), 'outbound-rtp', 'framesSent'), true);
    this.emitStartStopEvents('video', getSumFromStatsByType(convertToStatsMap((_this$previousTransce7 = (_this$previousTransce8 = this.previousTransceiverStats) === null || _this$previousTransce8 === void 0 ? void 0 : _this$previousTransce8.video.receivers) !== null && _this$previousTransce7 !== void 0 ? _this$previousTransce7 : []), 'inbound-rtp', 'framesDecoded'), getSumFromStatsByType(convertToStatsMap(transceiverStats.video.receivers), 'inbound-rtp', 'framesDecoded'), false);
    this.emitStartStopEvents('share', getSumFromStatsByType(convertToStatsMap((_this$previousTransce9 = (_this$previousTransce10 = this.previousTransceiverStats) === null || _this$previousTransce10 === void 0 ? void 0 : _this$previousTransce10.screenShareVideo.senders) !== null && _this$previousTransce9 !== void 0 ? _this$previousTransce9 : []), 'outbound-rtp', 'framesSent'), getSumFromStatsByType(convertToStatsMap(transceiverStats.screenShareVideo.senders), 'outbound-rtp', 'framesSent'), true);
    this.emitStartStopEvents('share', getSumFromStatsByType(convertToStatsMap((_this$previousTransce11 = (_this$previousTransce12 = this.previousTransceiverStats) === null || _this$previousTransce12 === void 0 ? void 0 : _this$previousTransce12.screenShareVideo.receivers) !== null && _this$previousTransce11 !== void 0 ? _this$previousTransce11 : []), 'inbound-rtp', 'framesDecoded'), getSumFromStatsByType(convertToStatsMap(transceiverStats.screenShareVideo.receivers), 'inbound-rtp', 'framesDecoded'), false);
    this.previousTransceiverStats = transceiverStats;
  }
}

class NetworkQualityMonitor extends EventEmitter$5 {
  constructor(config) {
    super();
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "frequencyTypes", void 0);
    _defineProperty(this, "indicatorTypes", void 0);
    _defineProperty(this, "networkQualityScore", void 0);
    _defineProperty(this, "networkQualityStatus", void 0);
    this.config = config;
    this.indicatorTypes = Object.freeze({
      PACKETLOSS: 'packetLoss',
      LATENCY: 'latency',
      JITTER: 'jitter'
    });
    this.frequencyTypes = Object.freeze({
      UPLINK: 'uplink',
      DOWNLINK: 'downlink'
    });
    this.networkQualityScore = 1;
    this.networkQualityStatus = {
      [this.frequencyTypes.UPLINK]: {}
    };
  }
  emitNetworkQuality(mediaType) {
    this.emit(exports.NetworkQualityEventNames.NETWORK_QUALITY, {
      mediaType,
      networkQualityScore: this.networkQualityScore
    });
  }
  updateNetworkQualityStatus(mediaType) {
    this.emitNetworkQuality(mediaType);
    this.networkQualityScore = 1;
  }
  determineUplinkNetworkQuality(_ref) {
    var {
      mediaType,
      roundTripTime,
      jitter,
      fractionLost
    } = _ref;
    var roundTripTimeInMilliseconds = roundTripTime * 1000;
    var jitterInMilliseconds = jitter * 1000;
    var percentLost = fractionLost * 100;
    var {
      JITTER,
      PACKETLOSS,
      LATENCY
    } = this.indicatorTypes;
    var {
      UPLINK
    } = this.frequencyTypes;
    var determinePacketLoss = () => {
      if (this.config.videoPacketLossRatioThreshold !== undefined && percentLost > this.config.videoPacketLossRatioThreshold) {
        this.networkQualityScore = 0;
        return false;
      }
      return true;
    };
    var determineLatency = () => {
      if (this.config.rttThreshold !== undefined && roundTripTimeInMilliseconds > this.config.rttThreshold) {
        this.networkQualityScore = 0;
        return false;
      }
      return true;
    };
    var determineJitter = () => {
      if (this.config.jitterThreshold !== undefined && jitterInMilliseconds > this.config.jitterThreshold) {
        this.networkQualityScore = 0;
        return false;
      }
      return true;
    };
    var getValueOrNull = value => typeof value === 'undefined' ? null : value;
    if (mediaType !== null) {
      if (!this.networkQualityStatus[UPLINK][mediaType]) {
        this.networkQualityStatus[UPLINK][mediaType] = {};
      }
      this.networkQualityStatus[UPLINK][mediaType][PACKETLOSS] = {
        acceptable: determinePacketLoss(),
        value: getValueOrNull(percentLost)
      };
      this.networkQualityStatus[UPLINK][mediaType][LATENCY] = {
        acceptable: determineLatency(),
        value: getValueOrNull(roundTripTime)
      };
      this.networkQualityStatus[UPLINK][mediaType][JITTER] = {
        acceptable: determineJitter(),
        value: getValueOrNull(jitter)
      };
      this.updateNetworkQualityStatus(mediaType);
    }
  }
  get networkQualityStats() {
    var {
      UPLINK
    } = this.frequencyTypes;
    return this.networkQualityStatus[UPLINK];
  }
}

var Media = {
  createAudioTrack: createAudioTrack,
  createVideoTrack: createVideoTrack,
  createContentTrack: createContentTrack,
  getCameras: getCameras,
  getMicrophones: getMicrophones,
  getSpeakers: getSpeakers,
  on: on$1,
  off: off$1,
  Effects: {
    BNR: {
      enableBNR: enableBNR,
      disableBNR: disableBNR
    }
  }
};

exports.ActiveSpeakerInfo = ActiveSpeakerInfo;
exports.CodecInfo = CodecInfo$1;
exports.Errors = Errors;
exports.H264Codec = H264Codec;
exports.LocalCameraStream = LocalCameraStream;
exports.LocalDisplayStream = LocalDisplayStream;
exports.LocalMicrophoneStream = LocalMicrophoneStream;
exports.LocalStream = LocalStream;
exports.LocalSystemAudioStream = LocalSystemAudioStream;
exports.Media = Media;
exports.MultistreamRoapMediaConnection = MultistreamRoapMediaConnection;
exports.NetworkQualityMonitor = NetworkQualityMonitor;
exports.PeerConnection = PeerConnection;
exports.ReceiveSlot = ReceiveSlot;
exports.ReceiverSelectedInfo = ReceiverSelectedInfo;
exports.RemoteStream = RemoteStream;
exports.RoapMediaConnection = RoapMediaConnection;
exports.SendSlot = SendSlot;
exports.StatsAnalyzer = StatsAnalyzer;
exports.StreamRequest = StreamRequest;
exports.WcmeError = WcmeError;
exports.configureWcmeLogger = configureWcmeLogger;
exports.createCameraAndMicrophoneStreams = createCameraAndMicrophoneStreams;
exports.createCameraStream = createCameraStream;
exports.createDisplayMedia = createDisplayMedia;
exports.createDisplayStream = createDisplayStream;
exports.createDisplayStreamWithAudio = createDisplayStreamWithAudio;
exports.createMicrophoneStream = createMicrophoneStream;
exports.getAudioInputDevices = getAudioInputDevices;
exports.getAudioOutputDevices = getAudioOutputDevices;
exports.getDevices = getDevices;
exports.getErrorDescription = getErrorDescription;
exports.getLogger = getLogger;
exports.getMediaFamily = getMediaFamily;
exports.getRecommendedMaxBitrateForFrameSize = getRecommendedMaxBitrateForFrameSize;
exports.getVideoInputDevices = getVideoInputDevices;
exports.setLogger = setLogger;
exports.setOnDeviceChangeHandler = setOnDeviceChangeHandler;
