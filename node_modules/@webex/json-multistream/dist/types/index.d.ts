import { EventEmitter } from 'events';
import { ILogger } from 'js-logger';
export { default as Logger } from 'js-logger';

declare type NamedMediaGroup = {
    type: number;
    value: number;
};
declare function areNamedMediaGroupsEqual(left: NamedMediaGroup, right: NamedMediaGroup): boolean;

declare class ActiveSpeakerInfo {
    priority: number;
    crossPriorityDuplication: boolean;
    crossPolicyDuplication: boolean;
    preferLiveVideo: boolean;
    namedMediaGroups?: NamedMediaGroup[];
    constructor(priority: number, crossPriorityDuplication: boolean, crossPolicyDuplication: boolean, preferLiveVideo: boolean, namedMediaGroups?: NamedMediaGroup[]);
    toString(): string;
}
declare function isValidActiveSpeakerInfo(msg: unknown): msg is ActiveSpeakerInfo;
declare function areActiveSpeakerInfosEqual(left: ActiveSpeakerInfo, right: ActiveSpeakerInfo): boolean;

declare class ActiveSpeakerNotificationMsg {
    seqNum: number;
    csis: number[];
    constructor(seqNum: number, csis: number[]);
    toString(): string;
}
declare function isValidActiveSpeakerNotificationMsg(msg: unknown): msg is ActiveSpeakerNotificationMsg;

declare class H264Codec {
    maxFs: number;
    maxFps: number;
    maxMbps: number;
    maxWidth?: number;
    maxHeight?: number;
    constructor(maxFs: number, maxFps: number, maxMbps: number, maxWidth?: number, maxHeight?: number);
}
declare function isValidH264Codec(msg: unknown): msg is H264Codec;
declare function areH264CodecsEqual(left: H264Codec | undefined, right: H264Codec | undefined): boolean;

declare class CodecInfo {
    payloadType: number;
    h264?: H264Codec;
    constructor(payloadType: number, h264: H264Codec);
}
declare function isValidCodecRequestInfo(msg: unknown): msg is CodecInfo;
declare function areCodecInfosEqual(left: CodecInfo, right: CodecInfo): boolean;

declare enum HomerMsgType {
    Multistream = "multistream"
}
declare class HomerMsg {
    msgType: HomerMsgType;
    payload: unknown;
    constructor(msgType: HomerMsgType, payload: unknown);
    static fromJson(data: Partial<HomerMsg>): HomerMsg | null;
}

declare enum MediaFamily {
    Audio = "AUDIO",
    Video = "VIDEO"
}
declare enum MediaContent {
    Main = "MAIN",
    Slides = "SLIDES"
}
declare enum Policy {
    ActiveSpeaker = "active-speaker",
    ReceiverSelected = "receiver-selected"
}
declare enum MediaType {
    VideoMain = "VIDEO-MAIN",
    VideoSlides = "VIDEO-SLIDES",
    AudioMain = "AUDIO-MAIN",
    AudioSlides = "AUDIO-SLIDES"
}
declare type VideoContentHint = 'motion' | 'sharpness';

declare enum JmpMsgType {
    MediaRequest = "mediaRequest",
    MediaRequestAck = "mediaRequestAck",
    MediaRequestStatus = "mediaRequestStatus",
    MediaRequestStatusAck = "mediaRequestStatusAck",
    SourceAdvertisement = "sourceAdvertisement",
    SourceAdvertisementAck = "sourceAdvertisementAck",
    ActiveSpeakerNotification = "activeSpeakerNotification"
}
declare type JmpMsgPayload = {
    msgType: JmpMsgType;
    payload: unknown;
};
declare class JmpMsg {
    mediaFamily: MediaFamily;
    mediaContent: MediaContent;
    payload: JmpMsgPayload;
    constructor(mediaFamily: MediaFamily, mediaContent: MediaContent, payload: JmpMsgPayload);
    toString(): string;
}
declare function isValidJmpMsgPayload(msg: unknown): msg is JmpMsgPayload;
declare function isValidJmpMsg(msg: unknown): msg is JmpMsg;

declare type MidRidStreamId = {
    mid: string;
    rid?: string;
};
declare type SsrcStreamId = {
    ssrc: number;
    rtxSsrc?: number;
};
declare type StreamId = MidRidStreamId | SsrcStreamId;
declare function isValidMidRidStreamId(obj: unknown): obj is MidRidStreamId;
declare function isValidSsrcStreamId(obj: unknown): obj is SsrcStreamId;
declare function isValidStreamId(obj: unknown): obj is StreamId;
declare function areStreamIdsEqual(id1: StreamId, id2: StreamId): boolean;

declare class ReceiverSelectedInfo {
    csi: number;
    constructor(csi: number);
    toString(): string;
}
declare function isValidReceiverSelectedInfo(msg: unknown): msg is ReceiverSelectedInfo;
declare function areReceiverSelectedInfosEqual(left: ReceiverSelectedInfo, right: ReceiverSelectedInfo): boolean;

declare type PolicySpecificInfo = ActiveSpeakerInfo | ReceiverSelectedInfo;
declare function arePolicySpecificInfosEqual(left: PolicySpecificInfo, right: PolicySpecificInfo): boolean;

declare class StreamRequest {
    policy: Policy;
    policySpecificInfo: PolicySpecificInfo;
    ids: StreamId[];
    maxPayloadBitsPerSecond: number;
    codecInfos: CodecInfo[];
    constructor(policy: Policy, policySpecificInfo: PolicySpecificInfo, ids: StreamId[], maxPayloadBitsPerSecond: number, codecInfos?: CodecInfo[]);
    toString(): string;
}
declare function isValidStreamRequest(msg: unknown): msg is StreamRequest;
declare function areStreamRequestsEqual(left: StreamRequest, right: StreamRequest): boolean;

declare class MediaRequestMsg {
    seqNum: number;
    requests: StreamRequest[];
    constructor(seqNum: number, requests: StreamRequest[]);
    toString(): string;
}
declare function isValidMediaRequestMsg(msg: unknown): msg is MediaRequestMsg;

declare class MediaRequestAckMsg {
    mediaRequestSeqNum: number;
    constructor(mediaRequestSeqNum: number);
    toString(): string;
}
declare function isValidMediaRequestAckMsg(msg: unknown): msg is MediaRequestAckMsg;

declare type StreamState = 'no source' | 'invalid source' | 'live' | 'avatar' | 'bandwidth disabled' | 'policy violation' | 'away';
declare type StreamInfo = {
    id: StreamId;
    state: StreamState;
    csi?: number;
};
declare function isValidStreamInfo(obj: unknown): obj is StreamInfo;
declare function areStreamInfosEqual(left: StreamInfo, right: StreamInfo): boolean;

declare class MediaRequestStatusMsg {
    seqNum: number;
    streamStates: StreamInfo[];
    constructor(seqNum: number, streamStates: StreamInfo[]);
}
declare function isValidMediaRequestStatusMsg(msg: unknown): msg is MediaRequestStatusMsg;

declare class MediaRequestStatusAckMsg {
    mediaRequestStatusSeqNum: number;
    constructor(mediaRequestStatusSeqNum: number);
    toString(): string;
}
declare function isValidMediaRequestStatusAckMsg(msg: unknown): msg is MediaRequestStatusAckMsg;

declare class SourceAdvertisementMsg {
    seqNum: number;
    numTotalSources: number;
    numLiveSources: number;
    namedMediaGroups?: NamedMediaGroup[];
    videoContentHint?: VideoContentHint;
    constructor(seqNum: number, numTotalSources: number, numLiveSources: number, namedMediaGroups?: NamedMediaGroup[], videoContentHint?: VideoContentHint);
    toString(): string;
}
declare function isValidSourceAdvertisementMsg(msg: unknown): msg is SourceAdvertisementMsg;
declare function areSourceAdvertisementMsgsEqual(sourceAdvertisementMsg1: SourceAdvertisementMsg, sourceAdvertisementMsg2: SourceAdvertisementMsg): boolean;

declare class SourceAdvertisementAckMsg {
    sourceAdvertisementSeqNum: number;
    constructor(sourceAdvertisementSeqNum: number);
    toString(): string;
}
declare function isValidSourceAdvertisementAckMsg(msg: unknown): msg is SourceAdvertisementAckMsg;

declare enum JmpSessionEvents {
    ActiveSpeaker = "active-speaker",
    MediaRequestReceived = "media-request-received",
    MediaRequestStatusReceived = "media-request-status-received",
    SourceAdvertisementReceived = "source-advertisement-received"
}
declare class JmpSession extends EventEmitter {
    private currMediaRequestSeqNum;
    private currSourceAdvertisementSeqNum;
    private currMediaRequestStatusSeqNum;
    private logger;
    private txCallback?;
    private lastSentMediaRequest?;
    private lastSentMediaRequestAck?;
    private lastReceivedMediaRequest?;
    private lastSentSourceAdvertisement?;
    private lastReceivedSourceAdvertisement?;
    private lastSentSourceAdvertisementAck?;
    private lastSentMediaRequestStatus?;
    private lastReceivedMediaRequestStatus?;
    private lastSentMediaRequestStatusAck?;
    private mediaFamily;
    private mediaContent;
    private maxNumRetransmits;
    private retransmitIntervalMs;
    constructor(mediaFamily: MediaFamily, mediaContent: MediaContent, maxNumRetransmits?: number, retransmitIntervalMs?: number);
    getLogger(): ILogger;
    sendRequests(requests: StreamRequest[]): void;
    sendSourceAdvertisement(numTotalSources: number, numLiveSources: number, namedMediaGroups?: NamedMediaGroup[], videoContentHint?: VideoContentHint): void;
    sendMediaRequestStatus(streamStates: StreamInfo[]): void;
    receive(jmpMsg: JmpMsg): void;
    setTxCallback(callback: (msg: string) => void): void;
    close(): void;
    private sendJmpMsg;
    private handleIncomingMediaRequest;
    private handleIncomingMediaRequestAck;
    private handleIncomingActiveSpeakerNotification;
    private handleIncomingSourceAdvertisement;
    private handleIncomingSourceAdvertisementAck;
    private handleIncomingMediaRequestStatus;
    private handleIncomingMediaRequestStatusAck;
}

declare function generateSceneId(): number;
declare function generateCsi(mediaFamily: MediaFamily, sceneId: number): number;
declare function getMediaType(mediaFamily: MediaFamily, mediaContent: MediaContent): MediaType;
declare function getMediaFamily(mediaType: MediaType): MediaFamily;
declare function getMediaContent(mediaType: MediaType): MediaContent;
declare const isTruthyOrZero: (value: unknown) => boolean;
declare function areArraysEqual<T>(left: T[], right: T[], predicate: (left: T, right: T) => boolean): boolean;

export { ActiveSpeakerInfo, ActiveSpeakerNotificationMsg, CodecInfo, H264Codec, HomerMsg, HomerMsgType, JmpMsg, JmpMsgType, JmpSession, JmpSessionEvents, MediaContent, MediaFamily, MediaRequestAckMsg, MediaRequestMsg, MediaRequestStatusAckMsg, MediaRequestStatusMsg, MediaType, MidRidStreamId, NamedMediaGroup, Policy, PolicySpecificInfo, ReceiverSelectedInfo, SourceAdvertisementAckMsg, SourceAdvertisementMsg, SsrcStreamId, StreamId, StreamInfo, StreamRequest, StreamState, VideoContentHint, areActiveSpeakerInfosEqual, areArraysEqual, areCodecInfosEqual, areH264CodecsEqual, areNamedMediaGroupsEqual, arePolicySpecificInfosEqual, areReceiverSelectedInfosEqual, areSourceAdvertisementMsgsEqual, areStreamIdsEqual, areStreamInfosEqual, areStreamRequestsEqual, generateCsi, generateSceneId, getMediaContent, getMediaFamily, getMediaType, isTruthyOrZero, isValidActiveSpeakerInfo, isValidActiveSpeakerNotificationMsg, isValidCodecRequestInfo, isValidH264Codec, isValidJmpMsg, isValidJmpMsgPayload, isValidMediaRequestAckMsg, isValidMediaRequestMsg, isValidMediaRequestStatusAckMsg, isValidMediaRequestStatusMsg, isValidMidRidStreamId, isValidReceiverSelectedInfo, isValidSourceAdvertisementAckMsg, isValidSourceAdvertisementMsg, isValidSsrcStreamId, isValidStreamId, isValidStreamInfo, isValidStreamRequest };
